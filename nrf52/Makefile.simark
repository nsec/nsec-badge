# Override these on the command line, if needed.  For example:
#
#   $ make FLAVOR=conf

FLAVOR ?= ctf
BOARD ?= brain
ifeq ($(origin CC),default)
CC = arm-none-eabi-gcc
endif
SIZE ?= arm-none-eabi-size

# SDK version we use.
SDK_VERSION = nRF5_SDK_14.2.0_17b948a

# Base name for a few files.
PROJECT = nsec_nrf_$(BOARD)_$(FLAVOR)

# Build output location.
BUILD = builds/$(BOARD)-$(FLAVOR)

# Final ELF executable.
ELF = $(BUILD)/$(PROJECT).out

# Flavor-dependent definitions.
ifeq ($(FLAVOR), ctf)
	FLAVOR_CFLAGS += -DNSEC_HARDCODED_BADGE_CLASS=CTF
	FLAVOR_CFLAGS += -DNSEC_FLAVOR_CTF
else ifeq ($(FLAVOR), conf)
	FLAVOR_CFLAGS += -DNSEC_HARDCODED_BADGE_CLASS=CONF
	FLAVOR_CFLAGS += -DNSEC_FLAVOR_CONF
else ifeq ($(FLAVOR), bar_beacon)
	FLAVOR_CFLAGS += -DNSEC_HARDCODED_BADGE_CLASS=BAR
	FLAVOR_CFLAGS += -DNSEC_FLAVOR_BAR_BEACON
else ifeq ($(FLAVOR), soldering)
	FLAVOR_CFLAGS += -DSOLDERING_TRACK
	FLAVOR_CFLAGS += -DNSEC_HARDCODED_BADGE_CLASS=CTF
	FLAVOR_CFLAGS += -DNSEC_FLAVOR_CTF
else
$(error "Unknown flavor `$(FLAVOR)`")
endif

# Board-dependent definitions
ifeq ($(BOARD), sputnik)
	# One of the oled screen pin is shared with the
	# NFC antenna, make sure it's configured as GPIO
	BOARD_CFLAGS += -DCONFIG_NFCT_PINS_AS_GPIOS
	BOARD_CFLAGS += -DBOARD_SPUTNIK
else ifeq ($(BOARD), brain)
	BOARD_CFLAGS += -DCONFIG_NFCT_PINS_AS_GPIOS
	BOARD_CFLAGS += -DBOARD_BRAIN
else ifeq ($(BOARD), pca10040)
	#special flags for the devboard
	BOARD_CFLAGS += -DCONFIG_GPIO_AS_PINRESET
	BOARD_CFLAGS += -DBOARD_PCA10040
	BOARD_CFLAGS += -DBSP_DEFINES_ONLY
else
$(error "Unknown board `$(BOARD)`")
endif

# Main target.
all: $(ELF)

# Our source files to include in the build, adjust if needed.
USER_SRCS += $(wildcard src/app/*.c)
USER_SRCS += $(wildcard src/ble/*.c)
USER_SRCS += $(wildcard src/drivers/*.c)

# The source files from the SDK to include in the build, adjust if needed.
SDK_C_SRCS += nordicsdk/ble/ble_advertising/ble_advertising.c
SDK_C_SRCS += nordicsdk/ble/ble_services/ble_dis/ble_dis.c
SDK_C_SRCS += nordicsdk/ble/common/ble_advdata.c
SDK_C_SRCS += nordicsdk/ble/common/ble_conn_state.c
SDK_C_SRCS += nordicsdk/ble/common/ble_srv_common.c
SDK_C_SRCS += nordicsdk/ble/nrf_ble_gatt/nrf_ble_gatt.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/gatt_cache_manager.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/gatts_cache_manager.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/id_manager.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/peer_data_storage.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/peer_database.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/peer_id.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/peer_manager.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/pm_buffer.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/pm_mutex.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/security_dispatcher.c
SDK_C_SRCS += nordicsdk/ble/peer_manager/security_manager.c
SDK_C_SRCS += nordicsdk/drivers_nrf/clock/nrf_drv_clock.c
SDK_C_SRCS += nordicsdk/drivers_nrf/common/nrf_drv_common.c
SDK_C_SRCS += nordicsdk/drivers_nrf/gpiote/nrf_drv_gpiote.c
SDK_C_SRCS += nordicsdk/drivers_nrf/hal/nrf_saadc.c
SDK_C_SRCS += nordicsdk/drivers_nrf/power/nrf_drv_power.c
SDK_C_SRCS += nordicsdk/drivers_nrf/pwm/nrf_drv_pwm.c
SDK_C_SRCS += nordicsdk/drivers_nrf/saadc/nrf_drv_saadc.c
SDK_C_SRCS += nordicsdk/drivers_nrf/spi_master/nrf_drv_spi.c
SDK_C_SRCS += nordicsdk/drivers_nrf/uart/nrf_drv_uart.c
SDK_C_SRCS += nordicsdk/external/fprintf/nrf_fprintf.c
SDK_C_SRCS += nordicsdk/external/fprintf/nrf_fprintf_format.c
SDK_C_SRCS += nordicsdk/libraries/atomic_fifo/nrf_atfifo.c
SDK_C_SRCS += nordicsdk/libraries/balloc/nrf_balloc.c
SDK_C_SRCS += nordicsdk/libraries/button/app_button.c
SDK_C_SRCS += nordicsdk/libraries/cli/nrf_cli.c
SDK_C_SRCS += nordicsdk/libraries/cli/uart/nrf_cli_uart.c
SDK_C_SRCS += nordicsdk/libraries/crc32/crc32.c
SDK_C_SRCS += nordicsdk/libraries/experimental_memobj/nrf_memobj.c
SDK_C_SRCS += nordicsdk/libraries/experimental_ringbuf/nrf_ringbuf.c
SDK_C_SRCS += nordicsdk/libraries/experimental_section_vars/nrf_section_iter.c
SDK_C_SRCS += nordicsdk/libraries/fds/fds.c
SDK_C_SRCS += nordicsdk/libraries/fstorage/nrf_fstorage.c
SDK_C_SRCS += nordicsdk/libraries/fstorage/nrf_fstorage_sd.c
SDK_C_SRCS += nordicsdk/libraries/queue/nrf_queue.c
SDK_C_SRCS += nordicsdk/libraries/timer/app_timer.c
SDK_C_SRCS += nordicsdk/libraries/util/app_error.c
SDK_C_SRCS += nordicsdk/libraries/util/app_util_platform.c
SDK_C_SRCS += nordicsdk/libraries/util/sdk_mapped_flags.c
SDK_C_SRCS += nordicsdk/softdevice/common/nrf_sdh.c
SDK_C_SRCS += nordicsdk/softdevice/common/nrf_sdh_ble.c
SDK_C_SRCS += nordicsdk/toolchain/system_nrf52.c

SDK_ASM_SRCS += nordicsdk/toolchain/gcc/gcc_startup_nrf52.S

# Those files come from extracting the sdk.
$(SDK_C_SRCS) $(SDK_ASM_SRCS): nordicsdk

# The objects derived from our source files.
USER_OBJS = $(USER_SRCS:%.c=$(BUILD)/%.o)

# The objects derived from the SDK source files.
SDK_C_OBJS = $(SDK_C_SRCS:%.c=$(BUILD)/%.o)
SDK_ASM_OBJS = $(SDK_ASM_SRCS:%.S=$(BUILD)/%.o)

ALL_OBJS = $(USER_OBJS) $(SDK_C_OBJS) $(SDK_ASM_OBJS)

# Tracking of include file dependencies.  This is so that if you build
# some file `foo.c` which includes `bar.h`, `foo.c` is re-built whenever
# `bar.h` changes.
#
# This is based on this method:
#
#   http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#tldr
#
# In short, the $(DEPFLAGS) ask gcc to output a file that lists all the files
# that were included in the compilation, in the form of Makefile dependencies.
# These files are included later in this Makefile.
#
# The compilation of source file
#
#   src/app/yo.c
#
# into
#
#   builds/$(BOARD)-$(FLAVOR)/src/app/yo.o
#
# will produce the dependency file
#
#   builds/$(BOARD)-$(FLAVOR)/.deps/src/app/yo.d

DEPDIR = $(BUILD)/.deps
DEPFILES = $(ALL_OBJS:$(BUILD)/%.o=$(DEPDIR)/%.d)
DEPFLAGS = -MF $(DEPDIR)/$*.d -MP -MD

# Libraries to include in the link.
LIBS = nordicsdk/toolchain/cmsis/dsp/GCC/libarm_cortexM4lf_math.a

# Silent rules stuff.
# If V is undefined or V=0 is specified, use the silent/verbose/compact mode.
V ?= 0
ifeq ($(V),0)
ECHO_AS     = @echo "  AS      $@";
ECHO_CC     = @echo "  CC      $@";
ECHO_LD     = @echo "  LD      $@";
ECHO_BMPINT = @echo "  BMPINT  $<";
ECHO_BMPEXT = @echo "  BMPEXT  $<";
ECHO_PACK   = @echo "  PACK    $@";
SILENCE = @
endif

# The images to convert to .h/.c.
#
# Data of internal (INT) bitmaps is going to end up in the application, so is
# compiled as an array in a .c file, with an accompanying .h file that can be
# included to use said data.
#
# Data of external (EXT) bitmaps is going to end up in the flash, so is placed
# in a raw binary file (.bitmapbin).  All these binary files are later
# concatenated to make up the flash content, and a .h file is produced to
# describe the location of each file's content in the flash.
BITMAPS_INT_HDRS = $(patsubst %.png,%_bitmap.h,$(wildcard src/images/*.png))
BITMAPS_EXT_HDRS = $(patsubst %.png,%_bitmap.h,$(wildcard src/images/external/*.png))
BITMAPS_EXT_BINS = $(patsubst %.png,%_bitmap.bitmapbin,$(wildcard src/images/external/*.png))
BITMAPS_EXT_BINS += $(patsubst %.png,%_bitmap.bitmapbin,$(wildcard src/images/external/$(FLAVOR)/*.png))
BITMAPS_HDRS = $(BITMAPS_INT_HDRS) $(BITMAPS_EXT_HDRS)

GEN_IMAGE_SCRIPT = utils/gen_image.py

# Bitmaps written to the internal flash.
%_bitmap.h: %.png
	$(ECHO_BMPINT)python3 $(GEN_IMAGE_SCRIPT) $< $(basename $@)

# Bitmaps written to the external flash.
src/images/external/%_bitmap.h src/images/external/%_bitmap.bitmapbin: src/images/external/%.png
	$(ECHO_BMPEXT)python3 $(GEN_IMAGE_SCRIPT) --external-flash $< $(basename $@)

# This one has its own rule because it's rotated.
src/images/font_bitmap.h: src/images/font.png
	python3 $(GEN_IMAGE_SCRIPT) -r $< $(basename $@)

# If the gen_image script changes, we want to re-generate the images.
$(BITMAPS_HDRS) $(BITMAPS_EXT_BINS): $(GEN_IMAGE_SCRIPT)

# Rules to generate the external flash content.
#
# Pack files in a single file and generate a "table of contents" as a .h.
EXTERNAL_FLASH_BIN = src/app/external_flash_$(FLAVOR).flashbin
EXTERNAL_FLASH_HDR = src/app/external_flash_$(FLAVOR).h

EXTERNAL_FLASH_PACK_SCRIPT = utils/pack_flash.py
EXTERNAL_FLASH_FILES = $(BITMAPS_EXT_BINS)

ifeq ($(FLAVOR), ctf)
EXTERNAL_FLASH_FILES += src/app/flag-external-flash.txt
endif

$(EXTERNAL_FLASH_HDR) $(EXTERNAL_FLASH_BIN): $(EXTERNAL_FLASH_FILES)
	$(ECHO_PACK)python3 $(EXTERNAL_FLASH_PACK_SCRIPT) src/app/external_flash $(FLAVOR) $(filter-out $(EXTERNAL_FLASH_PACK_SCRIPT), $^)

$(EXTERNAL_FLASH_HDR) $(EXTERNAL_FLASH_BIN): $(EXTERNAL_FLASH_PACK_SCRIPT)

# Flag that describe the supported CPU features.
MACHINE_FLAGS = -mthumb -mabi=aapcs -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16

CFLAGS += $(FLAVOR_CFLAGS) $(BOARD_CFLAGS)
CFLAGS += -g3 -Os
CFLAGS += -std=c99
CFLAGS += $(MACHINE_FLAGS)
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing -fno-builtin -fshort-enums -fno-omit-frame-pointer -DFLOAT_ABI_HARD -D__HEAP_SIZE=0 -DARM_MATH_CM4
CFLAGS += -DNRF52 -DNRF52832_XXAA
CFLAGS += -DS132 -DSOFTDEVICE_PRESENT

# Warnings.
CFLAGS += -Wall -Werror -Wno-unused-function -Wno-unused-variable

# Include paths for our code.
CFLAGS += -Iinclude
CFLAGS += -Isrc

# SDK include paths.
CFLAGS += -Inordicsdk
CFLAGS += -Inordicsdk/ble/common
CFLAGS += -Inordicsdk/ble/ble_advertising
CFLAGS += -Inordicsdk/ble/ble_services/ble_bas
CFLAGS += -Inordicsdk/ble/ble_services/ble_dis
CFLAGS += -Inordicsdk/ble/nrf_ble_gatt
CFLAGS += -Inordicsdk/ble/peer_manager
CFLAGS += -Inordicsdk/device
CFLAGS += -Inordicsdk/drivers_nrf/clock
CFLAGS += -Inordicsdk/drivers_nrf/common
CFLAGS += -Inordicsdk/drivers_nrf/delay
CFLAGS += -Inordicsdk/drivers_nrf/gpiote
CFLAGS += -Inordicsdk/drivers_nrf/hal
CFLAGS += -Inordicsdk/drivers_nrf/power
CFLAGS += -Inordicsdk/drivers_nrf/pwm
CFLAGS += -Inordicsdk/drivers_nrf/saadc
CFLAGS += -Inordicsdk/drivers_nrf/spi_master
CFLAGS += -Inordicsdk/drivers_nrf/twi_master
CFLAGS += -Inordicsdk/drivers_nrf/uart
CFLAGS += -Inordicsdk/external/fprintf
CFLAGS += -Inordicsdk/libraries/atomic
CFLAGS += -Inordicsdk/libraries/atomic_fifo
CFLAGS += -Inordicsdk/libraries/balloc
CFLAGS += -Inordicsdk/libraries/button
CFLAGS += -Inordicsdk/libraries/cli
CFLAGS += -Inordicsdk/libraries/cli/uart
CFLAGS += -Inordicsdk/libraries/crc32
CFLAGS += -Inordicsdk/libraries/experimental_log
CFLAGS += -Inordicsdk/libraries/experimental_log/src
CFLAGS += -Inordicsdk/libraries/experimental_memobj
CFLAGS += -Inordicsdk/libraries/experimental_ringbuf
CFLAGS += -Inordicsdk/libraries/experimental_section_vars
CFLAGS += -Inordicsdk/libraries/fds
CFLAGS += -Inordicsdk/libraries/fstorage
CFLAGS += -Inordicsdk/libraries/pwr_mgmt
CFLAGS += -Inordicsdk/libraries/queue
CFLAGS += -Inordicsdk/libraries/scheduler
CFLAGS += -Inordicsdk/libraries/strerror
CFLAGS += -Inordicsdk/libraries/timer
CFLAGS += -Inordicsdk/libraries/util
CFLAGS += -Inordicsdk/softdevice/common
CFLAGS += -Inordicsdk/softdevice/s132/headers
CFLAGS += -Inordicsdk/toolchain
CFLAGS += -Inordicsdk/toolchain/cmsis/include

# Flags used when linking.
LDFLAGS = $(MACHINE_FLAGS)
LDFLAGS += -Lnordicsdk/toolchain/gcc
LDFLAGS += -T src/nsec_badge.ld
LDFLAGS += -Wl,--gc-sections
LDFLAGS += --specs=nano.specs
LDFLAGS += -Wl,-Map=$(BUILD)/$(PROJECT).map

# Download and extract the SDK.
nordicsdk:
	./utils/install-sdk.sh nordicsdk $(SDK_VERSION)

# Link the final executable
$(ELF): $(ALL_OBJS)
	$(ECHO_LD)$(CC) -o $@ $^ $(LIBS) $(LDFLAGS)
	$(SILENCE)$(SIZE) $@

# Build our source files.
$(USER_OBJS): | nordicsdk $(BITMAPS_HDRS) $(EXTERNAL_FLASH_HDR)
$(USER_OBJS): $(BUILD)/%.o: %.c
	@mkdir -p $(@D) $(DEPDIR)/$(dir $*)
	$(ECHO_CC)$(CC) -c -o $@ $< $(CFLAGS) $(DEPFLAGS)

# Build SDK source files.
$(SDK_C_OBJS): | nordicsdk
$(SDK_C_OBJS): $(BUILD)/%.o: %.c
	@mkdir -p $(@D) $(DEPDIR)/$(dir $*)
	$(ECHO_CC)$(CC) -c -o $@ $< $(CFLAGS) $(DEPFLAGS)

# Build SDK assembly files.
$(SDK_ASM_OBJS): | nordicsdk
$(SDK_ASM_OBJS): $(BUILD)/%.o: %.S
	@mkdir -p $(@D) $(DEPDIR)/$(dir $*)
	$(ECHO_AS)$(CC) -c -o $@ $< $(CFLAGS) $(DEPFLAGS)

clean:
	rm -f $(ALL_OBJS) $(BUILD)/$(PROJECT).map
	rm -f $(DEPFILES)

# Include generated .d files.
-include $(DEPFILES)
