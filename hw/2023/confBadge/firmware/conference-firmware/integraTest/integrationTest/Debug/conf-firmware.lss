
conf-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  000063fc  00006490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b3  008001e6  008001e6  00006576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000065a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf8  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001db16  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049cc  00000000  00000000  00024cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000087e8  00000000  00000000  000296c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000030a8  00000000  00000000  00031eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005fc3  00000000  00000000  00034f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016c25  00000000  00000000  0003af17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e18  00000000  00000000  00051b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__dtors_end>
       4:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
       8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
       c:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__vector_3>
      10:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__vector_3>
      14:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__vector_3>
      18:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      1c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      20:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      24:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      28:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      2c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      30:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      34:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      38:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      3c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      40:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__vector_16>
      44:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      48:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_18>
      4c:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__vector_19>
      50:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      54:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      58:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      5c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      60:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__vector_24>
      64:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZL12splash1_data+0x7f>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	53 53       	subi	r21, 0x33	; 51
      ec:	44 31       	cpi	r20, 0x14	; 20
      ee:	33 30       	cpi	r19, 0x03	; 3
      f0:	36 20       	and	r3, r6
      f2:	61 6c       	ori	r22, 0xC1	; 193
      f4:	6c 6f       	ori	r22, 0xFC	; 252
      f6:	63 61       	ori	r22, 0x13	; 19
      f8:	74 69       	ori	r23, 0x94	; 148
      fa:	6f 6e       	ori	r22, 0xEF	; 239
      fc:	20 66       	ori	r18, 0x60	; 96
      fe:	61 69       	ori	r22, 0x91	; 145
     100:	6c 65       	ori	r22, 0x5C	; 92
     102:	64 00       	.word	0x0064	; ????

00000104 <digital_pin_to_timer_PGM>:
     104:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     114:	00 00 00 00                                         ....

00000118 <digital_pin_to_bit_mask_PGM>:
     118:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     128:	04 08 10 20                                         ... 

0000012c <digital_pin_to_port_PGM>:
     12c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     13c:	03 03 03 03                                         ....

00000140 <port_to_input_PGM>:
     140:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000014a <port_to_output_PGM>:
     14a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000154 <port_to_mode_PGM>:
     154:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000015e <_ZL4font>:
     15e:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     16e:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     17e:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     18e:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     19e:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1ae:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1be:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1ce:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1de:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1ee:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1fe:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     20e:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     21e:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     22e:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     23e:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     24e:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     25e:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     26e:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     27e:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     28e:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     29e:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2ae:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2be:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2ce:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2de:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2ee:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2fe:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     30e:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     31e:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     32e:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     33e:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     34e:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     35e:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     36e:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     37e:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     38e:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     39e:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3ae:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3be:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3ce:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3de:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3ee:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3fe:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     40e:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     41e:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     42e:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     43e:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     44e:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     45e:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     46e:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     47e:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     48e:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     49e:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4ae:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4be:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4ce:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4de:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4ee:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4fe:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     50e:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     51e:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     52e:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     53e:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     54e:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     55e:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     56e:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     57e:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     58e:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     59e:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5ae:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5be:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5ce:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5de:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5ee:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5fe:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     60e:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     61e:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     62e:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     63e:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     64e:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

0000065e <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     65e:	22 00 ff 21 00                                      "..!.

00000663 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     663:	00 01 03 07 0f 1f 3f 7f                             ......?.

0000066b <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     66b:	00 80 c0 e0 f0 f8 fc fe                             ........

00000673 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     673:	db 40 a4 a6 2e af                                   .@....

00000679 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     679:	20 00 a1 c8                                          ...

0000067d <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     67d:	d3 00 40 8d                                         ..@.

00000681 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     681:	ae d5 80 a8                                         ....

00000685 <_ZL12splash2_data>:
     685:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     695:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     6a5:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6c1:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6d1:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6e1:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6f1:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     701:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     711:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     721:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     731:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     741:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     751:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     761:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     771:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     781:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     791:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     7a1:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7b1:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7c1:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7d1:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7e1:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7f1:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     801:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     819:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     829:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     839:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     849:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     859:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000865 <_ZL12splash1_data>:
     865:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     875:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     885:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     895:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     8a5:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8b5:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8cd:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8dd:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8ed:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8fd:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     90d:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     91d:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     92d:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     93d:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     94d:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     95d:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     96d:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     97d:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     98d:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     99d:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     9ad:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9bd:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9cd:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9dd:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9f5:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     a0d:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a1d:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a2d:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a3d:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a4d:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a5d:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a6d:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a7d:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a8d:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a9d:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     aad:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     abd:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     acd:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     add:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     aed:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     afd:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     b0d:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b1d:	ff fd 6b 5b db 6a fd c0 00                          ..k[.j...

00000b26 <__ctors_start>:
     b26:	25 0b       	sbc	r18, r21
     b28:	e6 0b       	sbc	r30, r22
     b2a:	3e 0d       	add	r19, r14
     b2c:	4e 0e       	add	r4, r30
     b2e:	82 13       	cpse	r24, r18
     b30:	75 2c       	mov	r7, r5

00000b32 <__ctors_end>:
     b32:	2f 0b       	sbc	r18, r31
     b34:	10 0c       	add	r1, r0
     b36:	4c 0d       	add	r20, r12

00000b38 <__dtors_end>:
     b38:	11 24       	eor	r1, r1
     b3a:	1f be       	out	0x3f, r1	; 63
     b3c:	cf ef       	ldi	r28, 0xFF	; 255
     b3e:	d8 e0       	ldi	r29, 0x08	; 8
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	cd bf       	out	0x3d, r28	; 61

00000b44 <__do_copy_data>:
     b44:	11 e0       	ldi	r17, 0x01	; 1
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	ec ef       	ldi	r30, 0xFC	; 252
     b4c:	f3 e6       	ldi	r31, 0x63	; 99
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__do_copy_data+0x10>
     b50:	05 90       	lpm	r0, Z+
     b52:	0d 92       	st	X+, r0
     b54:	a6 3e       	cpi	r26, 0xE6	; 230
     b56:	b1 07       	cpc	r27, r17
     b58:	d9 f7       	brne	.-10     	; 0xb50 <__do_copy_data+0xc>

00000b5a <__do_clear_bss>:
     b5a:	24 e0       	ldi	r18, 0x04	; 4
     b5c:	a6 ee       	ldi	r26, 0xE6	; 230
     b5e:	b1 e0       	ldi	r27, 0x01	; 1
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <.do_clear_bss_start>

00000b62 <.do_clear_bss_loop>:
     b62:	1d 92       	st	X+, r1

00000b64 <.do_clear_bss_start>:
     b64:	a9 39       	cpi	r26, 0x99	; 153
     b66:	b2 07       	cpc	r27, r18
     b68:	e1 f7       	brne	.-8      	; 0xb62 <.do_clear_bss_loop>

00000b6a <__do_global_ctors>:
     b6a:	15 e0       	ldi	r17, 0x05	; 5
     b6c:	c9 e9       	ldi	r28, 0x99	; 153
     b6e:	d5 e0       	ldi	r29, 0x05	; 5
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__do_global_ctors+0x10>
     b72:	21 97       	sbiw	r28, 0x01	; 1
     b74:	fe 01       	movw	r30, r28
     b76:	0e 94 14 30 	call	0x6028	; 0x6028 <__tablejump2__>
     b7a:	c3 39       	cpi	r28, 0x93	; 147
     b7c:	d1 07       	cpc	r29, r17
     b7e:	c9 f7       	brne	.-14     	; 0xb72 <__do_global_ctors+0x8>
     b80:	0e 94 b0 13 	call	0x2760	; 0x2760 <main>
     b84:	0c 94 f1 31 	jmp	0x63e2	; 0x63e2 <__do_global_dtors>

00000b88 <__bad_interrupt>:
     b88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b8c <_Z13cypher_getKeyv>:
uint8_t key_i = 0;
uint8_t key_j = 0;
uint8_t key_k = 0;
uint8_t key_l = 0;
uint32_t cypher_getKey()
{	
     b8c:	2f 92       	push	r2
     b8e:	3f 92       	push	r3
     b90:	4f 92       	push	r4
     b92:	5f 92       	push	r5
     b94:	6f 92       	push	r6
     b96:	7f 92       	push	r7
     b98:	8f 92       	push	r8
     b9a:	9f 92       	push	r9
     b9c:	af 92       	push	r10
     b9e:	bf 92       	push	r11
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	00 d0       	rcall	.+0      	; 0xbae <_Z13cypher_getKeyv+0x22>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <_Z13cypher_getKeyv+0x24>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	key_i = random(1.9);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_Z6randoml>
     bc0:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <key_i>
	key_j = random(1,6);
     bc4:	26 e0       	ldi	r18, 0x06	; 6
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
     bd8:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <key_j>
	key_k = random(1,5);
     bdc:	25 e0       	ldi	r18, 0x05	; 5
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
     bf0:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <key_k>
	key_l = random(1,3);
     bf4:	23 e0       	ldi	r18, 0x03	; 3
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
     c08:	76 2e       	mov	r7, r22
     c0a:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <key_l>
	uint32_t outputKey =	pow(prime1, key_i ) * \
     c0e:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <key_i>
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c1c:	6b 01       	movw	r12, r22
     c1e:	7c 01       	movw	r14, r24
     c20:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <prime1>
     c24:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <prime1+0x1>
     c28:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <prime1+0x2>
     c2c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <prime1+0x3>
     c30:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c34:	a7 01       	movw	r20, r14
     c36:	96 01       	movw	r18, r12
     c38:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     c3c:	6b 01       	movw	r12, r22
     c3e:	7c 01       	movw	r14, r24
							pow(prime2, key_j ) + \
     c40:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <key_j>
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c4e:	4b 01       	movw	r8, r22
     c50:	5c 01       	movw	r10, r24
     c52:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <prime2>
     c56:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <prime2+0x1>
     c5a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prime2+0x2>
     c5e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <prime2+0x3>
     c62:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c66:	a5 01       	movw	r20, r10
     c68:	94 01       	movw	r18, r8
     c6a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     c6e:	4b 01       	movw	r8, r22
     c70:	5c 01       	movw	r10, r24
							pow(prime3, key_k ) - \
     c72:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <key_k>
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c80:	1b 01       	movw	r2, r22
     c82:	2c 01       	movw	r4, r24
     c84:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <prime3>
     c88:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <prime3+0x1>
     c8c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prime3+0x2>
     c90:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prime3+0x3>
     c94:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     c98:	a2 01       	movw	r20, r4
     c9a:	91 01       	movw	r18, r2
     c9c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     ca0:	69 83       	std	Y+1, r22	; 0x01
     ca2:	7a 83       	std	Y+2, r23	; 0x02
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	9c 83       	std	Y+4, r25	; 0x04
							pow(prime4, key_l );
     ca8:	67 2d       	mov	r22, r7
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     cb4:	2b 01       	movw	r4, r22
     cb6:	3c 01       	movw	r6, r24
     cb8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <prime4>
     cbc:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <prime4+0x1>
     cc0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <prime4+0x2>
     cc4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <prime4+0x3>
     cc8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     ccc:	a3 01       	movw	r20, r6
     cce:	92 01       	movw	r18, r4
     cd0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     cd4:	2b 01       	movw	r4, r22
     cd6:	3c 01       	movw	r6, r24
	return outputKey;
     cd8:	a5 01       	movw	r20, r10
     cda:	94 01       	movw	r18, r8
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3>
     ce4:	29 81       	ldd	r18, Y+1	; 0x01
     ce6:	3a 81       	ldd	r19, Y+2	; 0x02
     ce8:	4b 81       	ldd	r20, Y+3	; 0x03
     cea:	5c 81       	ldd	r21, Y+4	; 0x04
     cec:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__addsf3>
     cf0:	a3 01       	movw	r20, r6
     cf2:	92 01       	movw	r18, r4
     cf4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__subsf3>
     cf8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	5f 90       	pop	r5
     d1e:	4f 90       	pop	r4
     d20:	3f 90       	pop	r3
     d22:	2f 90       	pop	r2
     d24:	08 95       	ret

00000d26 <_Z30cypher_getGeneratedMultipliersPh>:

void cypher_getGeneratedMultipliers(uint8_t arrayMultipliers[])
{
     d26:	fc 01       	movw	r30, r24
	arrayMultipliers[0] = key_i;
     d28:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <key_i>
     d2c:	80 83       	st	Z, r24
	arrayMultipliers[1] = key_j;
     d2e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <key_j>
     d32:	81 83       	std	Z+1, r24	; 0x01
	arrayMultipliers[2] = key_k;
     d34:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <key_k>
     d38:	82 83       	std	Z+2, r24	; 0x02
	arrayMultipliers[3] = key_l;
     d3a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <key_l>
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	08 95       	ret

00000d42 <_Z22cypher_checkIfValidKeym>:
uint8_t cyp_i = 0;
uint8_t cyp_j = 0;
uint8_t cyp_k = 0;
uint8_t cyp_l = 0;
bool cypher_checkIfValidKey(uint32_t input)
{
     d42:	2f 92       	push	r2
     d44:	3f 92       	push	r3
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	66 97       	sbiw	r28, 0x16	; 22
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	2b 01       	movw	r4, r22
     d78:	3c 01       	movw	r6, r24
	cyp_i = 0;
     d7a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <cyp_i>
	cyp_j = 0;
     d7e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <cyp_j>
	cyp_k = 0;
     d82:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <cyp_k>
	cyp_l = 0;
     d86:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
		{
			for(int k=1; k<=4; k++)
			{
				for(int l=1; l<=2; l++)
				{
					uint32_t result =	pow(prime1, i ) * \
     d8a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <prime1>
     d8e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <prime1+0x1>
     d92:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <prime1+0x2>
     d96:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <prime1+0x3>
     d9a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     d9e:	69 83       	std	Y+1, r22	; 0x01
     da0:	7a 83       	std	Y+2, r23	; 0x02
     da2:	8b 83       	std	Y+3, r24	; 0x03
     da4:	9c 83       	std	Y+4, r25	; 0x04
										pow(prime2, j ) + \
     da6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <prime2>
     daa:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <prime2+0x1>
     dae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prime2+0x2>
     db2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <prime2+0x3>
     db6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     dba:	6d 83       	std	Y+5, r22	; 0x05
     dbc:	7e 83       	std	Y+6, r23	; 0x06
     dbe:	8f 83       	std	Y+7, r24	; 0x07
     dc0:	98 87       	std	Y+8, r25	; 0x08
										pow(prime3, k ) - \
     dc2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <prime3>
     dc6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <prime3+0x1>
     dca:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prime3+0x2>
     dce:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prime3+0x3>
     dd2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     dd6:	6d 87       	std	Y+13, r22	; 0x0d
     dd8:	7e 87       	std	Y+14, r23	; 0x0e
     dda:	8f 87       	std	Y+15, r24	; 0x0f
     ddc:	98 8b       	std	Y+16, r25	; 0x10
										pow(prime4, l );
     dde:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <prime4>
     de2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <prime4+0x1>
     de6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <prime4+0x2>
     dea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <prime4+0x3>
     dee:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
     df2:	6b 01       	movw	r12, r22
     df4:	7c 01       	movw	r14, r24
{
	cyp_i = 0;
	cyp_j = 0;
	cyp_k = 0;
	cyp_l = 0;
	for(int i=1; i<=8; i++)
     df6:	22 24       	eor	r2, r2
     df8:	23 94       	inc	r2
     dfa:	31 2c       	mov	r3, r1
		{
			for(int k=1; k<=4; k++)
			{
				for(int l=1; l<=2; l++)
				{
					uint32_t result =	pow(prime1, i ) * \
     dfc:	b1 01       	movw	r22, r2
     dfe:	03 2c       	mov	r0, r3
     e00:	00 0c       	add	r0, r0
     e02:	88 0b       	sbc	r24, r24
     e04:	99 0b       	sbc	r25, r25
     e06:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	69 81       	ldd	r22, Y+1	; 0x01
     e10:	7a 81       	ldd	r23, Y+2	; 0x02
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     e1a:	69 8b       	std	Y+17, r22	; 0x11
     e1c:	7a 8b       	std	Y+18, r23	; 0x12
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	9c 8b       	std	Y+20, r25	; 0x14
     e22:	01 e0       	ldi	r16, 0x01	; 1
     e24:	10 e0       	ldi	r17, 0x00	; 0
										pow(prime2, j ) + \
     e26:	b8 01       	movw	r22, r16
     e28:	01 2e       	mov	r0, r17
     e2a:	00 0c       	add	r0, r0
     e2c:	88 0b       	sbc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	6d 81       	ldd	r22, Y+5	; 0x05
     e3a:	7e 81       	ldd	r23, Y+6	; 0x06
     e3c:	8f 81       	ldd	r24, Y+7	; 0x07
     e3e:	98 85       	ldd	r25, Y+8	; 0x08
     e40:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
		{
			for(int k=1; k<=4; k++)
			{
				for(int l=1; l<=2; l++)
				{
					uint32_t result =	pow(prime1, i ) * \
     e48:	69 89       	ldd	r22, Y+17	; 0x11
     e4a:	7a 89       	ldd	r23, Y+18	; 0x12
     e4c:	8b 89       	ldd	r24, Y+19	; 0x13
     e4e:	9c 89       	ldd	r25, Y+20	; 0x14
     e50:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3>
     e54:	69 87       	std	Y+9, r22	; 0x09
     e56:	7a 87       	std	Y+10, r23	; 0x0a
     e58:	8b 87       	std	Y+11, r24	; 0x0b
     e5a:	9c 87       	std	Y+12, r25	; 0x0c
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	3e 8b       	std	Y+22, r19	; 0x16
     e62:	2d 8b       	std	Y+21, r18	; 0x15
										pow(prime2, j ) + \
										pow(prime3, k ) - \
     e64:	2d 89       	ldd	r18, Y+21	; 0x15
     e66:	3e 89       	ldd	r19, Y+22	; 0x16
     e68:	b9 01       	movw	r22, r18
     e6a:	33 0f       	add	r19, r19
     e6c:	88 0b       	sbc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
     e74:	9b 01       	movw	r18, r22
     e76:	ac 01       	movw	r20, r24
     e78:	6d 85       	ldd	r22, Y+13	; 0x0d
     e7a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7e:	98 89       	ldd	r25, Y+16	; 0x10
     e80:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
			for(int k=1; k<=4; k++)
			{
				for(int l=1; l<=2; l++)
				{
					uint32_t result =	pow(prime1, i ) * \
										pow(prime2, j ) + \
     e88:	69 85       	ldd	r22, Y+9	; 0x09
     e8a:	7a 85       	ldd	r23, Y+10	; 0x0a
     e8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e90:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__addsf3>
     e94:	4b 01       	movw	r8, r22
     e96:	5c 01       	movw	r10, r24
										pow(prime3, k ) - \
										pow(prime4, l );
					if(result == input)
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__subsf3>
     ea0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
     ea4:	46 16       	cp	r4, r22
     ea6:	57 06       	cpc	r5, r23
     ea8:	68 06       	cpc	r6, r24
     eaa:	79 06       	cpc	r7, r25
     eac:	b9 f0       	breq	.+46     	; 0xedc <_Z22cypher_checkIfValidKeym+0x19a>
				for(int l=1; l<=2; l++)
				{
					uint32_t result =	pow(prime1, i ) * \
										pow(prime2, j ) + \
										pow(prime3, k ) - \
										pow(prime4, l );
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e4       	ldi	r21, 0x40	; 64
     eb6:	c7 01       	movw	r24, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pow>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
					if(result == input)
     ec2:	c5 01       	movw	r24, r10
     ec4:	b4 01       	movw	r22, r8
     ec6:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__subsf3>
     eca:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
     ece:	64 15       	cp	r22, r4
     ed0:	75 05       	cpc	r23, r5
     ed2:	86 05       	cpc	r24, r6
     ed4:	97 05       	cpc	r25, r7
     ed6:	71 f4       	brne	.+28     	; 0xef4 <_Z22cypher_checkIfValidKeym+0x1b2>
	{
		for(int j=1; j<=5; j++)
		{
			for(int k=1; k<=4; k++)
			{
				for(int l=1; l<=2; l++)
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	01 c0       	rjmp	.+2      	; 0xede <_Z22cypher_checkIfValidKeym+0x19c>
				{
					uint32_t result =	pow(prime1, i ) * \
										pow(prime2, j ) + \
										pow(prime3, k ) - \
										pow(prime4, l );
					if(result == input)
     edc:	81 e0       	ldi	r24, 0x01	; 1
					{
						cyp_i = i;
     ede:	20 92 e9 01 	sts	0x01E9, r2	; 0x8001e9 <cyp_i>
						cyp_j = j;
     ee2:	00 93 e8 01 	sts	0x01E8, r16	; 0x8001e8 <cyp_j>
						cyp_k = k;
     ee6:	3d 89       	ldd	r19, Y+21	; 0x15
     ee8:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <cyp_k>
						cyp_l = l;
     eec:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
						return true;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	17 c0       	rjmp	.+46     	; 0xf22 <_Z22cypher_checkIfValidKeym+0x1e0>
	cyp_l = 0;
	for(int i=1; i<=8; i++)
	{
		for(int j=1; j<=5; j++)
		{
			for(int k=1; k<=4; k++)
     ef4:	8d 89       	ldd	r24, Y+21	; 0x15
     ef6:	9e 89       	ldd	r25, Y+22	; 0x16
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9e 8b       	std	Y+22, r25	; 0x16
     efc:	8d 8b       	std	Y+21, r24	; 0x15
     efe:	05 97       	sbiw	r24, 0x05	; 5
     f00:	09 f0       	breq	.+2      	; 0xf04 <_Z22cypher_checkIfValidKeym+0x1c2>
     f02:	b0 cf       	rjmp	.-160    	; 0xe64 <_Z22cypher_checkIfValidKeym+0x122>
	cyp_j = 0;
	cyp_k = 0;
	cyp_l = 0;
	for(int i=1; i<=8; i++)
	{
		for(int j=1; j<=5; j++)
     f04:	0f 5f       	subi	r16, 0xFF	; 255
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	06 30       	cpi	r16, 0x06	; 6
     f0a:	11 05       	cpc	r17, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <_Z22cypher_checkIfValidKeym+0x1ce>
     f0e:	8b cf       	rjmp	.-234    	; 0xe26 <_Z22cypher_checkIfValidKeym+0xe4>
{
	cyp_i = 0;
	cyp_j = 0;
	cyp_k = 0;
	cyp_l = 0;
	for(int i=1; i<=8; i++)
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	29 1a       	sub	r2, r25
     f14:	39 0a       	sbc	r3, r25
     f16:	29 e0       	ldi	r18, 0x09	; 9
     f18:	22 16       	cp	r2, r18
     f1a:	31 04       	cpc	r3, r1
     f1c:	09 f0       	breq	.+2      	; 0xf20 <_Z22cypher_checkIfValidKeym+0x1de>
     f1e:	6e cf       	rjmp	.-292    	; 0xdfc <_Z22cypher_checkIfValidKeym+0xba>
					}
				}
			}
		}
	}	
	return false;
     f20:	80 e0       	ldi	r24, 0x00	; 0
}
     f22:	66 96       	adiw	r28, 0x16	; 22
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	7f 90       	pop	r7
     f48:	6f 90       	pop	r6
     f4a:	5f 90       	pop	r5
     f4c:	4f 90       	pop	r4
     f4e:	3f 90       	pop	r3
     f50:	2f 90       	pop	r2
     f52:	08 95       	ret

00000f54 <_Z30cypher_getValidatedMultipliersPh>:

void cypher_getValidatedMultipliers(uint8_t arrayMultipliers[])
{
     f54:	fc 01       	movw	r30, r24
	arrayMultipliers[0] = cyp_i;
     f56:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <cyp_i>
     f5a:	80 83       	st	Z, r24
	arrayMultipliers[1] = cyp_j;
     f5c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <cyp_j>
     f60:	81 83       	std	Z+1, r24	; 0x01
	arrayMultipliers[2] = cyp_k;
     f62:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <cyp_k>
     f66:	82 83       	std	Z+2, r24	; 0x02
	arrayMultipliers[3] = cyp_l;
     f68:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <__data_end>
     f6c:	83 83       	std	Z+3, r24	; 0x03
     f6e:	08 95       	ret

00000f70 <_Z16level_getCurrLvlv>:

uint8_t currentLevel = 0;
uint8_t level_getCurrLvl()
{
	return currentLevel;
}
     f70:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <currentLevel>
     f74:	08 95       	ret

00000f76 <_Z15level_decrementv>:

void level_decrement()
{
	currentLevel--;
     f76:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <currentLevel>
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <currentLevel>
     f80:	08 95       	ret

00000f82 <_Z15level_incrementv>:
}

void level_increment()
{
	currentLevel++;
     f82:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <currentLevel>
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <currentLevel>
     f8c:	08 95       	ret

00000f8e <_Z26mode_currentLoading_assertv>:
 */ 

bool currentlyLoading = false;
void mode_currentLoading_assert()
{
	currentlyLoading = true;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <currentlyLoading>
     f94:	08 95       	ret

00000f96 <_Z28mode_currentLoading_deassertv>:
}

void mode_currentLoading_deassert()
{
	currentlyLoading = false;
     f96:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <currentlyLoading>
     f9a:	08 95       	ret

00000f9c <_Z24mode_getCurrentlyLoadingv>:
}

bool mode_getCurrentlyLoading()
{
	return currentlyLoading;
}
     f9c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <currentlyLoading>
     fa0:	08 95       	ret

00000fa2 <_Z31mode_waitForDisconnect_deassertv>:


bool waitingForDisconnect = false;
void mode_waitForDisconnect_deassert()
{
	waitingForDisconnect = false;	
     fa2:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <waitingForDisconnect>
     fa6:	08 95       	ret

00000fa8 <_Z29mode_waitForDisconnect_assertv>:
}

void mode_waitForDisconnect_assert()
{
	waitingForDisconnect = true;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <waitingForDisconnect>
     fae:	08 95       	ret

00000fb0 <_Z25mode_getWaitForDisconnectv>:
}

bool mode_getWaitForDisconnect()
{
	return waitingForDisconnect;
     fb0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <waitingForDisconnect>
     fb4:	08 95       	ret

00000fb6 <_Z11neopix_initv>:
uint8_t loadingBarPos = 0;


void neopix_init()
{
	pixels.begin();
     fb6:	8f e0       	ldi	r24, 0x0F	; 15
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <_ZN17Adafruit_NeoPixel5beginEv>

00000fbe <_Z11neopix_idlev>:
}

void neopix_idle()
{
     fbe:	2f 92       	push	r2
     fc0:	3f 92       	push	r3
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
	static uint32_t ts_slowIdle = 0;
	static uint8_t startPosition = 0;
	if(millis() - ts_slowIdle > idle_refreshInterval)	//slow down animation
     fe2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
     fe6:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <_ZZ11neopix_idlevE11ts_slowIdle>
     fea:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <_ZZ11neopix_idlevE11ts_slowIdle+0x1>
     fee:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <_ZZ11neopix_idlevE11ts_slowIdle+0x2>
     ff2:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <_ZZ11neopix_idlevE11ts_slowIdle+0x3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	80 1b       	sub	r24, r16
     ffc:	91 0b       	sbc	r25, r17
     ffe:	a2 0b       	sbc	r26, r18
    1000:	b3 0b       	sbc	r27, r19
    1002:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <idle_refreshInterval>
    1006:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <idle_refreshInterval+0x1>
    100a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <idle_refreshInterval+0x2>
    100e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <idle_refreshInterval+0x3>
    1012:	08 17       	cp	r16, r24
    1014:	19 07       	cpc	r17, r25
    1016:	2a 07       	cpc	r18, r26
    1018:	3b 07       	cpc	r19, r27
    101a:	08 f0       	brcs	.+2      	; 0x101e <_Z11neopix_idlev+0x60>
    101c:	4d c1       	rjmp	.+666    	; 0x12b8 <_Z11neopix_idlev+0x2fa>
	{
		ts_slowIdle = millis();
    101e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1022:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <_ZZ11neopix_idlevE11ts_slowIdle>
    1026:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <_ZZ11neopix_idlevE11ts_slowIdle+0x1>
    102a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZ11neopix_idlevE11ts_slowIdle+0x2>
    102e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_ZZ11neopix_idlevE11ts_slowIdle+0x3>
		startPosition++;
    1032:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZZ11neopix_idlevE13startPosition>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
    1038:	80 31       	cpi	r24, 0x10	; 16
    103a:	18 f4       	brcc	.+6      	; 0x1042 <_Z11neopix_idlev+0x84>
	static uint32_t ts_slowIdle = 0;
	static uint8_t startPosition = 0;
	if(millis() - ts_slowIdle > idle_refreshInterval)	//slow down animation
	{
		ts_slowIdle = millis();
		startPosition++;
    103c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZZ11neopix_idlevE13startPosition>
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <_Z11neopix_idlev+0x88>
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
    1042:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZZ11neopix_idlevE13startPosition>
			
		pixels.clear(); // Set all pixel colors to 'off'
    1046:	8f e0       	ldi	r24, 0x0F	; 15
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 a3 21 	call	0x4346	; 0x4346 <_ZN17Adafruit_NeoPixel5clearEv>
		for(int i=0; i<level_getCurrLvl(); i++)		//determine how many LED should be one
    104e:	00 e0       	ldi	r16, 0x00	; 0
    1050:	10 e0       	ldi	r17, 0x00	; 0
				r=10;
				b=5;
			}
			else if(i >= 96 && i < 112)	//increase brightness
			{
				idle_refreshInterval = 25;
    1052:	39 e1       	ldi	r19, 0x19	; 25
    1054:	c3 2e       	mov	r12, r19
    1056:	d1 2c       	mov	r13, r1
    1058:	e1 2c       	mov	r14, r1
    105a:	f1 2c       	mov	r15, r1
				r=5;
				b=5;
			}
			else if(i >= 80 && i < 96)	//increase brightness
			{
				idle_refreshInterval = 50;
    105c:	42 e3       	ldi	r20, 0x32	; 50
    105e:	84 2e       	mov	r8, r20
    1060:	91 2c       	mov	r9, r1
    1062:	a1 2c       	mov	r10, r1
    1064:	b1 2c       	mov	r11, r1
				r=5;
				b=5;
			}
			else if(i >= 64 && i < 80)	//increase brightness + speed
			{
				idle_refreshInterval = 100;
    1066:	54 e6       	ldi	r21, 0x64	; 100
    1068:	45 2e       	mov	r4, r21
    106a:	51 2c       	mov	r5, r1
    106c:	61 2c       	mov	r6, r1
    106e:	71 2c       	mov	r7, r1
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
			
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<level_getCurrLvl(); i++)		//determine how many LED should be one
    1070:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z16level_getCurrLvlv>
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	08 17       	cp	r16, r24
    1078:	19 07       	cpc	r17, r25
    107a:	0c f0       	brlt	.+2      	; 0x107e <_Z11neopix_idlev+0xc0>
    107c:	07 c1       	rjmp	.+526    	; 0x128c <_Z11neopix_idlev+0x2ce>
		{
			//led_ID is the current LED index that we are update. 
			uint8_t led_ID = (startPosition+i) % 16; //This is going over every single LED that needs to be on based on the current LVL
    107e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZZ11neopix_idlevE13startPosition>
    1082:	18 01       	movw	r2, r16
    1084:	28 0e       	add	r2, r24
    1086:	31 1c       	adc	r3, r1
    1088:	8f e0       	ldi	r24, 0x0F	; 15
    108a:	28 22       	and	r2, r24
    108c:	33 24       	eor	r3, r3
			uint8_t r = 0;
			uint8_t g = 0;
			uint8_t r_factor = 1;
			uint8_t g_factor = 1;
			uint8_t b_factor = 1;
			if (i < 16)			//only blue to start
    108e:	00 31       	cpi	r16, 0x10	; 16
    1090:	11 05       	cpc	r17, r1
    1092:	0c f4       	brge	.+2      	; 0x1096 <_Z11neopix_idlev+0xd8>
    1094:	dd c0       	rjmp	.+442    	; 0x1250 <_Z11neopix_idlev+0x292>
			{
				b = 5;
			}
			else if(i >= 16 && i < 32)	//introduce red 
    1096:	c8 01       	movw	r24, r16
    1098:	40 97       	sbiw	r24, 0x10	; 16
    109a:	80 31       	cpi	r24, 0x10	; 16
    109c:	91 05       	cpc	r25, r1
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <_Z11neopix_idlev+0xe4>
    10a0:	d9 c0       	rjmp	.+434    	; 0x1254 <_Z11neopix_idlev+0x296>
			{
				b = 5;
				r = 5;
			}
			else if(i >= 32 && i < 48)	//introduce green
    10a2:	40 97       	sbiw	r24, 0x10	; 16
    10a4:	80 31       	cpi	r24, 0x10	; 16
    10a6:	91 05       	cpc	r25, r1
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <_Z11neopix_idlev+0xee>
    10aa:	d6 c0       	rjmp	.+428    	; 0x1258 <_Z11neopix_idlev+0x29a>
			{
				b = 5;
				g = 5;	
			}
			else if(i >= 48 && i < 64)	//have all 3 colors
    10ac:	40 97       	sbiw	r24, 0x10	; 16
    10ae:	80 31       	cpi	r24, 0x10	; 16
    10b0:	91 05       	cpc	r25, r1
    10b2:	08 f4       	brcc	.+2      	; 0x10b6 <_Z11neopix_idlev+0xf8>
    10b4:	d4 c0       	rjmp	.+424    	; 0x125e <_Z11neopix_idlev+0x2a0>
			{
				g=5;	
				r=5;
				b=5;
			}
			else if(i >= 64 && i < 80)	//increase brightness + speed
    10b6:	40 97       	sbiw	r24, 0x10	; 16
    10b8:	40 97       	sbiw	r24, 0x10	; 16
    10ba:	48 f4       	brcc	.+18     	; 0x10ce <_Z11neopix_idlev+0x110>
			{
				idle_refreshInterval = 100;
    10bc:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <idle_refreshInterval>
    10c0:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <idle_refreshInterval+0x1>
    10c4:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <idle_refreshInterval+0x2>
    10c8:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <idle_refreshInterval+0x3>
    10cc:	c3 c0       	rjmp	.+390    	; 0x1254 <_Z11neopix_idlev+0x296>
				b=10;
				r=5;
				b=5;
			}
			else if(i >= 80 && i < 96)	//increase brightness
    10ce:	c8 01       	movw	r24, r16
    10d0:	80 55       	subi	r24, 0x50	; 80
    10d2:	91 09       	sbc	r25, r1
    10d4:	40 97       	sbiw	r24, 0x10	; 16
    10d6:	58 f4       	brcc	.+22     	; 0x10ee <_Z11neopix_idlev+0x130>
			{
				idle_refreshInterval = 50;
    10d8:	80 92 1a 01 	sts	0x011A, r8	; 0x80011a <idle_refreshInterval>
    10dc:	90 92 1b 01 	sts	0x011B, r9	; 0x80011b <idle_refreshInterval+0x1>
    10e0:	a0 92 1c 01 	sts	0x011C, r10	; 0x80011c <idle_refreshInterval+0x2>
    10e4:	b0 92 1d 01 	sts	0x011D, r11	; 0x80011d <idle_refreshInterval+0x3>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if(i >= 80 && i < 96)	//increase brightness
			{
				idle_refreshInterval = 50;
				b=10;
				r=10;
    10ea:	da e0       	ldi	r29, 0x0A	; 10
    10ec:	ba c0       	rjmp	.+372    	; 0x1262 <_Z11neopix_idlev+0x2a4>
				b=5;
			}
			else if(i >= 96 && i < 112)	//increase brightness
    10ee:	c8 01       	movw	r24, r16
    10f0:	80 56       	subi	r24, 0x60	; 96
    10f2:	91 09       	sbc	r25, r1
    10f4:	40 97       	sbiw	r24, 0x10	; 16
    10f6:	60 f4       	brcc	.+24     	; 0x1110 <_Z11neopix_idlev+0x152>
			{
				idle_refreshInterval = 25;
    10f8:	c0 92 1a 01 	sts	0x011A, r12	; 0x80011a <idle_refreshInterval>
    10fc:	d0 92 1b 01 	sts	0x011B, r13	; 0x80011b <idle_refreshInterval+0x1>
    1100:	e0 92 1c 01 	sts	0x011C, r14	; 0x80011c <idle_refreshInterval+0x2>
    1104:	f0 92 1d 01 	sts	0x011D, r15	; 0x80011d <idle_refreshInterval+0x3>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
    1108:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if(i >= 96 && i < 112)	//increase brightness
			{
				idle_refreshInterval = 25;
				b=10;
				r=10;
    110a:	da e0       	ldi	r29, 0x0A	; 10
				b=10;
    110c:	6a e0       	ldi	r22, 0x0A	; 10
    110e:	aa c0       	rjmp	.+340    	; 0x1264 <_Z11neopix_idlev+0x2a6>
			}
			else if(i >= 112 && i < 128)	//max score
    1110:	c8 01       	movw	r24, r16
    1112:	80 57       	subi	r24, 0x70	; 112
    1114:	91 09       	sbc	r25, r1
    1116:	40 97       	sbiw	r24, 0x10	; 16
    1118:	d0 f4       	brcc	.+52     	; 0x114e <_Z11neopix_idlev+0x190>
			{
				idle_refreshInterval = 12;
    111a:	8c e0       	ldi	r24, 0x0C	; 12
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <idle_refreshInterval>
    1126:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <idle_refreshInterval+0x1>
    112a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <idle_refreshInterval+0x2>
    112e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <idle_refreshInterval+0x3>
				r=random(1,10);
    1132:	2a e0       	ldi	r18, 0x0A	; 10
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1146:	d6 2f       	mov	r29, r22
				g=0;
    1148:	c0 e0       	ldi	r28, 0x00	; 0
				b=0;
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	8b c0       	rjmp	.+278    	; 0x1264 <_Z11neopix_idlev+0x2a6>
			}
			else if(i >= 128 && i < 144)	//max score
    114e:	c8 01       	movw	r24, r16
    1150:	80 58       	subi	r24, 0x80	; 128
    1152:	91 09       	sbc	r25, r1
    1154:	40 97       	sbiw	r24, 0x10	; 16
    1156:	18 f5       	brcc	.+70     	; 0x119e <_Z11neopix_idlev+0x1e0>
			{
				idle_refreshInterval = 6;
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <idle_refreshInterval>
    1164:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <idle_refreshInterval+0x1>
    1168:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <idle_refreshInterval+0x2>
    116c:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <idle_refreshInterval+0x3>
				r=random(1,10);
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1184:	d6 2f       	mov	r29, r22
				g=0;				
				b=random(1,10);
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
			}
			else if(i >= 128 && i < 144)	//max score
			{
				idle_refreshInterval = 6;
				r=random(1,10);
				g=0;				
    119a:	c0 e0       	ldi	r28, 0x00	; 0
    119c:	63 c0       	rjmp	.+198    	; 0x1264 <_Z11neopix_idlev+0x2a6>
				b=random(1,10);
			}
			else if(i >= 144 && i < 160)	//max score
    119e:	c8 01       	movw	r24, r16
    11a0:	80 59       	subi	r24, 0x90	; 144
    11a2:	91 09       	sbc	r25, r1
    11a4:	40 97       	sbiw	r24, 0x10	; 16
    11a6:	38 f5       	brcc	.+78     	; 0x11f6 <_Z11neopix_idlev+0x238>
			{
				idle_refreshInterval = 3;
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <idle_refreshInterval>
    11b4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <idle_refreshInterval+0x1>
    11b8:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <idle_refreshInterval+0x2>
    11bc:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <idle_refreshInterval+0x3>
				r=random(1,10);
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    11d4:	d6 2f       	mov	r29, r22
				g=random(1,10);
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    11ea:	c6 2f       	mov	r28, r22
				b=random(1,10);
    11ec:	2a e0       	ldi	r18, 0x0A	; 10
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	26 c0       	rjmp	.+76     	; 0x1242 <_Z11neopix_idlev+0x284>
			}
			else if(i >= 160)	//max score
			{
				idle_refreshInterval = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <idle_refreshInterval>
    1202:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <idle_refreshInterval+0x1>
    1206:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <idle_refreshInterval+0x2>
    120a:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <idle_refreshInterval+0x3>
				r=random(1,15);
    120e:	2f e0       	ldi	r18, 0x0F	; 15
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1222:	d6 2f       	mov	r29, r22
				g=random(1,15);
    1224:	2f e0       	ldi	r18, 0x0F	; 15
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1238:	c6 2f       	mov	r28, r22
				b=random(1,15);
    123a:	2f e0       	ldi	r18, 0x0F	; 15
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <_Z11neopix_idlev+0x2a6>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
    1250:	c0 e0       	ldi	r28, 0x00	; 0
    1252:	03 c0       	rjmp	.+6      	; 0x125a <_Z11neopix_idlev+0x29c>
    1254:	c0 e0       	ldi	r28, 0x00	; 0
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <_Z11neopix_idlev+0x2a2>
				r = 5;
			}
			else if(i >= 32 && i < 48)	//introduce green
			{
				b = 5;
				g = 5;	
    1258:	c5 e0       	ldi	r28, 0x05	; 5
				led_ID = i;	//wrap around
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
    125a:	d0 e0       	ldi	r29, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <_Z11neopix_idlev+0x2a4>
				b = 5;
				g = 5;	
			}
			else if(i >= 48 && i < 64)	//have all 3 colors
			{
				g=5;	
    125e:	c5 e0       	ldi	r28, 0x05	; 5
				r=5;
    1260:	d5 e0       	ldi	r29, 0x05	; 5
				b=5;
    1262:	65 e0       	ldi	r22, 0x05	; 5
				b=random(1,15);
			}

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
    1264:	8c 2f       	mov	r24, r28
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ba 2f       	mov	r27, r26
    126e:	a9 2f       	mov	r26, r25
    1270:	98 2f       	mov	r25, r24
    1272:	88 27       	eor	r24, r24
    1274:	ad 2b       	or	r26, r29
    1276:	9c 01       	movw	r18, r24
    1278:	ad 01       	movw	r20, r26
    127a:	26 2b       	or	r18, r22
    127c:	b1 01       	movw	r22, r2
    127e:	8f e0       	ldi	r24, 0x0F	; 15
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
			
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<level_getCurrLvl(); i++)		//determine how many LED should be one
    1286:	0f 5f       	subi	r16, 0xFF	; 255
    1288:	1f 4f       	sbci	r17, 0xFF	; 255
    128a:	f2 ce       	rjmp	.-540    	; 0x1070 <_Z11neopix_idlev+0xb2>

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
    128c:	8f e0       	ldi	r24, 0x0F	; 15
    128e:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	9f 90       	pop	r9
    12a6:	8f 90       	pop	r8
    12a8:	7f 90       	pop	r7
    12aa:	6f 90       	pop	r6
    12ac:	5f 90       	pop	r5
    12ae:	4f 90       	pop	r4
    12b0:	3f 90       	pop	r3
    12b2:	2f 90       	pop	r2

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
    12b4:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	3f 90       	pop	r3
    12da:	2f 90       	pop	r2
    12dc:	08 95       	ret

000012de <_Z14neopix_successv>:

void neopix_success()
{
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
	static uint32_t ts_lastRefresh = 0;
	
	if(millis() - ts_lastRefresh > 10)
    12ec:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    12f0:	c0 90 fd 01 	lds	r12, 0x01FD	; 0x8001fd <_ZZ14neopix_successvE14ts_lastRefresh>
    12f4:	d0 90 fe 01 	lds	r13, 0x01FE	; 0x8001fe <_ZZ14neopix_successvE14ts_lastRefresh+0x1>
    12f8:	e0 90 ff 01 	lds	r14, 0x01FF	; 0x8001ff <_ZZ14neopix_successvE14ts_lastRefresh+0x2>
    12fc:	f0 90 00 02 	lds	r15, 0x0200	; 0x800200 <_ZZ14neopix_successvE14ts_lastRefresh+0x3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8c 19       	sub	r24, r12
    1306:	9d 09       	sbc	r25, r13
    1308:	ae 09       	sbc	r26, r14
    130a:	bf 09       	sbc	r27, r15
    130c:	0b 97       	sbiw	r24, 0x0b	; 11
    130e:	a1 05       	cpc	r26, r1
    1310:	b1 05       	cpc	r27, r1
    1312:	08 f4       	brcc	.+2      	; 0x1316 <_Z14neopix_successv+0x38>
    1314:	58 c0       	rjmp	.+176    	; 0x13c6 <_Z14neopix_successv+0xe8>
	{
		ts_lastRefresh = millis();
    1316:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    131a:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <_ZZ14neopix_successvE14ts_lastRefresh>
    131e:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <_ZZ14neopix_successvE14ts_lastRefresh+0x1>
    1322:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <_ZZ14neopix_successvE14ts_lastRefresh+0x2>
    1326:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <_ZZ14neopix_successvE14ts_lastRefresh+0x3>
		pixels.clear(); // Set all pixel colors to 'off'
    132a:	8f e0       	ldi	r24, 0x0F	; 15
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	0e 94 a3 21 	call	0x4346	; 0x4346 <_ZN17Adafruit_NeoPixel5clearEv>
		for(int i=0; i<16; i++)
    1332:	c0 e0       	ldi	r28, 0x00	; 0
    1334:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	cb 01       	movw	r24, r22
    1344:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1348:	16 2f       	mov	r17, r22
    134a:	2a e0       	ldi	r18, 0x0A	; 10
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	cb 01       	movw	r24, r22
    1358:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    135c:	6b 01       	movw	r12, r22
    135e:	7c 01       	movw	r14, r24
    1360:	2a e0       	ldi	r18, 0x0A	; 10
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	cb 01       	movw	r24, r22
    136e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_Z6randomll>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	99 27       	eor	r25, r25
    1378:	aa 27       	eor	r26, r26
    137a:	bb 27       	eor	r27, r27
    137c:	dc 01       	movw	r26, r24
    137e:	99 27       	eor	r25, r25
    1380:	88 27       	eor	r24, r24
    1382:	dd 24       	eor	r13, r13
    1384:	ee 24       	eor	r14, r14
    1386:	ff 24       	eor	r15, r15
    1388:	fe 2c       	mov	r15, r14
    138a:	ed 2c       	mov	r14, r13
    138c:	dc 2c       	mov	r13, r12
    138e:	cc 24       	eor	r12, r12
    1390:	8c 29       	or	r24, r12
    1392:	9d 29       	or	r25, r13
    1394:	ae 29       	or	r26, r14
    1396:	bf 29       	or	r27, r15
    1398:	9c 01       	movw	r18, r24
    139a:	ad 01       	movw	r20, r26
    139c:	21 2b       	or	r18, r17
    139e:	be 01       	movw	r22, r28
    13a0:	8f e0       	ldi	r24, 0x0F	; 15
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
	
	if(millis() - ts_lastRefresh > 10)
	{
		ts_lastRefresh = millis();
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
    13a8:	21 96       	adiw	r28, 0x01	; 1
    13aa:	c0 31       	cpi	r28, 0x10	; 16
    13ac:	d1 05       	cpc	r29, r1
    13ae:	19 f6       	brne	.-122    	; 0x1336 <_Z14neopix_successv+0x58>
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.
    13b0:	8f e0       	ldi	r24, 0x0F	; 15
    13b2:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.
    13c2:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <_Z19neopix_connectRightv>:

void neopix_connectRight()
{
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
	static uint32_t ts_lastRefresh = 0;
	static int i = 0;
	
	if(millis() - ts_lastRefresh > 25)
    13da:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    13de:	00 91 f9 01 	lds	r16, 0x01F9	; 0x8001f9 <_ZZ19neopix_connectRightvE14ts_lastRefresh>
    13e2:	10 91 fa 01 	lds	r17, 0x01FA	; 0x8001fa <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x1>
    13e6:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x2>
    13ea:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	80 1b       	sub	r24, r16
    13f4:	91 0b       	sbc	r25, r17
    13f6:	a2 0b       	sbc	r26, r18
    13f8:	b3 0b       	sbc	r27, r19
    13fa:	4a 97       	sbiw	r24, 0x1a	; 26
    13fc:	a1 05       	cpc	r26, r1
    13fe:	b1 05       	cpc	r27, r1
    1400:	c0 f1       	brcs	.+112    	; 0x1472 <_Z19neopix_connectRightv+0x9c>
	{
		ts_lastRefresh = millis();
    1402:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1406:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <_ZZ19neopix_connectRightvE14ts_lastRefresh>
    140a:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x1>
    140e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x2>
    1412:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x3>
		
		i++;
    1416:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_ZZ19neopix_connectRightvE1i>
    141a:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <_ZZ19neopix_connectRightvE1i+0x1>
    141e:	01 96       	adiw	r24, 0x01	; 1
		if(i==7)
    1420:	87 30       	cpi	r24, 0x07	; 7
    1422:	91 05       	cpc	r25, r1
    1424:	29 f0       	breq	.+10     	; 0x1430 <_Z19neopix_connectRightv+0x5a>
	
	if(millis() - ts_lastRefresh > 25)
	{
		ts_lastRefresh = millis();
		
		i++;
    1426:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <_ZZ19neopix_connectRightvE1i+0x1>
    142a:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_ZZ19neopix_connectRightvE1i>
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <_Z19neopix_connectRightv+0x62>
		if(i==7)
			i=0;
    1430:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <_ZZ19neopix_connectRightvE1i+0x1>
    1434:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <_ZZ19neopix_connectRightvE1i>
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
    1438:	08 e0       	ldi	r16, 0x08	; 8
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	ba 01       	movw	r22, r20
    1446:	8f e0       	ldi	r24, 0x0F	; 15
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
    144e:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <_ZZ19neopix_connectRightvE1i>
    1452:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <_ZZ19neopix_connectRightvE1i+0x1>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4a e0       	ldi	r20, 0x0A	; 10
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	8f e0       	ldi	r24, 0x0F	; 15
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    1466:	8f e0       	ldi	r24, 0x0F	; 15
    1468:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
		if(i==7)
			i=0;
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
		pixels.show();
    146e:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <_Z18neopix_connectLeftv>:

void neopix_connectLeft()
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
	static uint32_t ts_lastRefresh = 0;
	static int i = 0;
	
	if(millis() - ts_lastRefresh > 25)
    147c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1480:	00 91 f3 01 	lds	r16, 0x01F3	; 0x8001f3 <_ZZ18neopix_connectLeftvE14ts_lastRefresh>
    1484:	10 91 f4 01 	lds	r17, 0x01F4	; 0x8001f4 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x1>
    1488:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x2>
    148c:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	80 1b       	sub	r24, r16
    1496:	91 0b       	sbc	r25, r17
    1498:	a2 0b       	sbc	r26, r18
    149a:	b3 0b       	sbc	r27, r19
    149c:	4a 97       	sbiw	r24, 0x1a	; 26
    149e:	a1 05       	cpc	r26, r1
    14a0:	b1 05       	cpc	r27, r1
    14a2:	e0 f1       	brcs	.+120    	; 0x151c <_Z18neopix_connectLeftv+0xa4>
	{
		ts_lastRefresh = millis();
    14a4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    14a8:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <_ZZ18neopix_connectLeftvE14ts_lastRefresh>
    14ac:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x1>
    14b0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x2>
    14b4:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x3>
			
		i++;
    14b8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZZ18neopix_connectLeftvE1i>
    14bc:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZZ18neopix_connectLeftvE1i+0x1>
    14c0:	01 96       	adiw	r24, 0x01	; 1
		if(i==7)
    14c2:	87 30       	cpi	r24, 0x07	; 7
    14c4:	91 05       	cpc	r25, r1
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <_Z18neopix_connectLeftv+0x5a>
	
	if(millis() - ts_lastRefresh > 25)
	{
		ts_lastRefresh = millis();
			
		i++;
    14c8:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <_ZZ18neopix_connectLeftvE1i+0x1>
    14cc:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_ZZ18neopix_connectLeftvE1i>
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <_Z18neopix_connectLeftv+0x62>
		if(i==7)
			i=0;
    14d2:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <_ZZ18neopix_connectLeftvE1i+0x1>
    14d6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <_ZZ18neopix_connectLeftvE1i>
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
    14da:	08 e0       	ldi	r16, 0x08	; 8
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	ba 01       	movw	r22, r20
    14e8:	8f e0       	ldi	r24, 0x0F	; 15
    14ea:	92 e0       	ldi	r25, 0x02	; 2
    14ec:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(7-i, pixels.Color(10,0,0) );
    14f0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZZ18neopix_connectLeftvE1i>
    14f4:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <_ZZ18neopix_connectLeftvE1i+0x1>
    14f8:	67 e0       	ldi	r22, 0x07	; 7
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	68 1b       	sub	r22, r24
    14fe:	79 0b       	sbc	r23, r25
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4a e0       	ldi	r20, 0x0A	; 10
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	8f e0       	ldi	r24, 0x0F	; 15
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    1510:	8f e0       	ldi	r24, 0x0F	; 15
    1512:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
		if(i==7)
			i=0;
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
		pixels.setPixelColor(7-i, pixels.Color(10,0,0) );
		pixels.show();
    1518:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <_Z19incrementLoadingBarv>:

uint32_t ts_loadingStartTime = 0;
uint32_t ts_loadingNextIncrement = 0;
void incrementLoadingBar()
{
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
	if(mode_getCurrentlyLoading() == false)
    1526:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_Z24mode_getCurrentlyLoadingv>
    152a:	81 11       	cpse	r24, r1
    152c:	32 c0       	rjmp	.+100    	; 0x1592 <_Z19incrementLoadingBarv+0x70>
	{
		mode_currentLoading_assert();
    152e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z26mode_currentLoading_assertv>
		ts_loadingStartTime = millis();
    1532:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1536:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <ts_loadingStartTime>
    153a:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <ts_loadingStartTime+0x1>
    153e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ts_loadingStartTime+0x2>
    1542:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ts_loadingStartTime+0x3>
		ts_loadingNextIncrement = ts_loadingStartTime + 1000;
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	88 51       	subi	r24, 0x18	; 24
    154c:	9c 4f       	sbci	r25, 0xFC	; 252
    154e:	af 4f       	sbci	r26, 0xFF	; 255
    1550:	bf 4f       	sbci	r27, 0xFF	; 255
    1552:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ts_loadingNextIncrement>
    1556:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <ts_loadingNextIncrement+0x1>
    155a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <ts_loadingNextIncrement+0x2>
    155e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <ts_loadingNextIncrement+0x3>
		pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
    1562:	0f e0       	ldi	r16, 0x0F	; 15
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	28 e0       	ldi	r18, 0x08	; 8
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	8f e0       	ldi	r24, 0x0F	; 15
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(15, pixels.Color(30,0,30) );
    1578:	2e e1       	ldi	r18, 0x1E	; 30
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	6f e0       	ldi	r22, 0x0F	; 15
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	8f e0       	ldi	r24, 0x0F	; 15
    1584:	92 e0       	ldi	r25, 0x02	; 2
    1586:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    158a:	8f e0       	ldi	r24, 0x0F	; 15
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
	}
	
	if(	millis() > ts_loadingNextIncrement && mode_getWaitForDisconnect() == false)
    1592:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1596:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <ts_loadingNextIncrement>
    159a:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <ts_loadingNextIncrement+0x1>
    159e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <ts_loadingNextIncrement+0x2>
    15a2:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <ts_loadingNextIncrement+0x3>
    15a6:	06 17       	cp	r16, r22
    15a8:	17 07       	cpc	r17, r23
    15aa:	28 07       	cpc	r18, r24
    15ac:	39 07       	cpc	r19, r25
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <_Z19incrementLoadingBarv+0x90>
    15b0:	46 c0       	rjmp	.+140    	; 0x163e <_Z19incrementLoadingBarv+0x11c>
    15b2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z25mode_getWaitForDisconnectv>
    15b6:	81 11       	cpse	r24, r1
    15b8:	42 c0       	rjmp	.+132    	; 0x163e <_Z19incrementLoadingBarv+0x11c>
	{
		if(loadingBarPos < 8)
    15ba:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <loadingBarPos>
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	a0 f5       	brcc	.+104    	; 0x162a <_Z19incrementLoadingBarv+0x108>
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
    15c2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	88 51       	subi	r24, 0x18	; 24
    15cc:	9c 4f       	sbci	r25, 0xFC	; 252
    15ce:	af 4f       	sbci	r26, 0xFF	; 255
    15d0:	bf 4f       	sbci	r27, 0xFF	; 255
    15d2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ts_loadingNextIncrement>
    15d6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <ts_loadingNextIncrement+0x1>
    15da:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <ts_loadingNextIncrement+0x2>
    15de:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <ts_loadingNextIncrement+0x3>
			loadingBarPos++;
    15e2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <loadingBarPos>
    15e6:	8f 5f       	subi	r24, 0xFF	; 255
    15e8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <loadingBarPos>
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
    15ec:	0f e0       	ldi	r16, 0x0F	; 15
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	28 e0       	ldi	r18, 0x08	; 8
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	ba 01       	movw	r22, r20
    15fa:	8f e0       	ldi	r24, 0x0F	; 15
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.fill( pixels.Color(30,0,30), 15-loadingBarPos+1, loadingBarPos);
    1602:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <loadingBarPos>
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	20 e1       	ldi	r18, 0x10	; 16
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	20 1b       	sub	r18, r16
    160e:	31 0b       	sbc	r19, r17
    1610:	4e e1       	ldi	r20, 0x1E	; 30
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	ba 01       	movw	r22, r20
    1616:	8f e0       	ldi	r24, 0x0F	; 15
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.show();
    161e:	8f e0       	ldi	r24, 0x0F	; 15
    1620:	92 e0       	ldi	r25, 0x02	; 2
			if(level_getCurrLvl()<199)	
				level_increment();		//cap level at 199. No more additional LED animation after 199
			mode_waitForDisconnect_assert();
		}
	}
}
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
			loadingBarPos++;
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
			pixels.fill( pixels.Color(30,0,30), 15-loadingBarPos+1, loadingBarPos);
			pixels.show();
    1626:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <_ZN17Adafruit_NeoPixel4showEv>
		}
		else
		{			
			
			if(level_getCurrLvl()<199)	
    162a:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z16level_getCurrLvlv>
    162e:	87 3c       	cpi	r24, 0xC7	; 199
    1630:	10 f4       	brcc	.+4      	; 0x1636 <_Z19incrementLoadingBarv+0x114>
				level_increment();		//cap level at 199. No more additional LED animation after 199
    1632:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15level_incrementv>
			mode_waitForDisconnect_assert();
		}
	}
}
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
		else
		{			
			
			if(level_getCurrLvl()<199)	
				level_increment();		//cap level at 199. No more additional LED animation after 199
			mode_waitForDisconnect_assert();
    163a:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_Z29mode_waitForDisconnect_assertv>
		}
	}
}
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <_Z22neopix_resetLoadingBarv>:

void neopix_resetLoadingBar()
{
	loadingBarPos = 0;
    1644:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <loadingBarPos>
    1648:	08 95       	ret

0000164a <_GLOBAL__sub_I_pixels>:
#include "modeControl.h"

//NEOPIXEL DECLARATION
#define PIN			9
#define NUMPIXELS	16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    164a:	22 e5       	ldi	r18, 0x52	; 82
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	49 e0       	ldi	r20, 0x09	; 9
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	60 e1       	ldi	r22, 0x10	; 16
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	8f e0       	ldi	r24, 0x0F	; 15
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <_ZN17Adafruit_NeoPixelC1Ejij>

0000165e <_GLOBAL__sub_D_pixels>:
    165e:	8f e0       	ldi	r24, 0x0F	; 15
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	0c 94 52 1e 	jmp	0x3ca4	; 0x3ca4 <_ZN17Adafruit_NeoPixelD1Ev>

00001666 <_Z9oled_initv>:
	//display.println(receivedRight);
	display.display();
}

void oled_showHackLevel()
{
    1666:	0f 93       	push	r16
    1668:	01 e0       	ldi	r16, 0x01	; 1
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	4c e3       	ldi	r20, 0x3C	; 60
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	85 e2       	ldi	r24, 0x25	; 37
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	0e 94 61 24 	call	0x48c2	; 0x48c2 <_ZN16Adafruit_SSD13065beginEhhbb>
    1678:	81 11       	cpse	r24, r1
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <_Z9oled_initv+0x22>
    167c:	6a ee       	ldi	r22, 0xEA	; 234
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	8d ed       	ldi	r24, 0xDD	; 221
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN5Print7printlnEPK19__FlashStringHelper>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <display+0x13>
    1690:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <display+0x12>
    1694:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <display+0x11>
    1698:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <display+0x10>
    169c:	85 e2       	ldi	r24, 0x25	; 37
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 43 24 	call	0x4886	; 0x4886 <_ZN16Adafruit_SSD130612clearDisplayEv>
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	85 e2       	ldi	r24, 0x25	; 37
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN12Adafruit_GFX11setTextSizeEh>
    16ae:	85 e2       	ldi	r24, 0x25	; 37
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	0f 91       	pop	r16
    16b4:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <_ZN16Adafruit_SSD13067displayEv>

000016b8 <_Z15oled_testCypherv>:
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	28 97       	sbiw	r28, 0x08	; 8
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	85 e2       	ldi	r24, 0x25	; 37
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	0e 94 43 24 	call	0x4886	; 0x4886 <_ZN16Adafruit_SSD130612clearDisplayEv>
    16e8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <display+0xd>
    16ec:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <display+0xc>
    16f0:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <display+0xf>
    16f4:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <display+0xe>
    16f8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z13cypher_getKeyv>
    16fc:	4b 01       	movw	r8, r22
    16fe:	5c 01       	movw	r10, r24
    1700:	2a e0       	ldi	r18, 0x0A	; 10
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	ab 01       	movw	r20, r22
    1706:	bc 01       	movw	r22, r24
    1708:	85 e2       	ldi	r24, 0x25	; 37
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN5Print7printlnEmi>
    1710:	7e 01       	movw	r14, r28
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	e8 0e       	add	r14, r24
    1716:	f1 1c       	adc	r15, r1
    1718:	c7 01       	movw	r24, r14
    171a:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z30cypher_getGeneratedMultipliersPh>
    171e:	87 01       	movw	r16, r14
    1720:	6e 01       	movw	r12, r28
    1722:	e9 e0       	ldi	r30, 0x09	; 9
    1724:	ce 0e       	add	r12, r30
    1726:	d1 1c       	adc	r13, r1
    1728:	f8 01       	movw	r30, r16
    172a:	61 91       	ld	r22, Z+
    172c:	8f 01       	movw	r16, r30
    172e:	4a e0       	ldi	r20, 0x0A	; 10
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	85 e2       	ldi	r24, 0x25	; 37
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN5Print5printEhi>
    173a:	60 e2       	ldi	r22, 0x20	; 32
    173c:	71 e0       	ldi	r23, 0x01	; 1
    173e:	85 e2       	ldi	r24, 0x25	; 37
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN5Print5printEPKc>
    1746:	0c 15       	cp	r16, r12
    1748:	1d 05       	cpc	r17, r13
    174a:	71 f7       	brne	.-36     	; 0x1728 <_Z15oled_testCypherv+0x70>
    174c:	85 e2       	ldi	r24, 0x25	; 37
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Print7printlnEv>
    1754:	c5 01       	movw	r24, r10
    1756:	b4 01       	movw	r22, r8
    1758:	0e 94 a1 06 	call	0xd42	; 0xd42 <_Z22cypher_checkIfValidKeym>
    175c:	68 2f       	mov	r22, r24
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	4a e0       	ldi	r20, 0x0A	; 10
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	85 e2       	ldi	r24, 0x25	; 37
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN5Print7printlnEii>
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 aa 07 	call	0xf54	; 0xf54 <_Z30cypher_getValidatedMultipliersPh>
    1774:	8e 01       	movw	r16, r28
    1776:	0f 5f       	subi	r16, 0xFF	; 255
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	f8 01       	movw	r30, r16
    177c:	61 91       	ld	r22, Z+
    177e:	8f 01       	movw	r16, r30
    1780:	4a e0       	ldi	r20, 0x0A	; 10
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	85 e2       	ldi	r24, 0x25	; 37
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN5Print5printEhi>
    178c:	60 e2       	ldi	r22, 0x20	; 32
    178e:	71 e0       	ldi	r23, 0x01	; 1
    1790:	85 e2       	ldi	r24, 0x25	; 37
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN5Print5printEPKc>
    1798:	0e 15       	cp	r16, r14
    179a:	1f 05       	cpc	r17, r15
    179c:	71 f7       	brne	.-36     	; 0x177a <_Z15oled_testCypherv+0xc2>
    179e:	85 e2       	ldi	r24, 0x25	; 37
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <_ZN16Adafruit_SSD13067displayEv>
    17a6:	28 96       	adiw	r28, 0x08	; 8
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	08 95       	ret

000017cc <_GLOBAL__sub_I_display>:
	display.println();
	display.print(F("LVL="));
	display.print(level_getCurrLvl());
	display.display();
	*/
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    17de:	80 ea       	ldi	r24, 0xA0	; 160
    17e0:	88 2e       	mov	r8, r24
    17e2:	86 e8       	ldi	r24, 0x86	; 134
    17e4:	98 2e       	mov	r9, r24
    17e6:	aa 24       	eor	r10, r10
    17e8:	a3 94       	inc	r10
    17ea:	b1 2c       	mov	r11, r1
    17ec:	90 e8       	ldi	r25, 0x80	; 128
    17ee:	c9 2e       	mov	r12, r25
    17f0:	9a e1       	ldi	r25, 0x1A	; 26
    17f2:	d9 2e       	mov	r13, r25
    17f4:	96 e0       	ldi	r25, 0x06	; 6
    17f6:	e9 2e       	mov	r14, r25
    17f8:	f1 2c       	mov	r15, r1
    17fa:	0f ef       	ldi	r16, 0xFF	; 255
    17fc:	2b ec       	ldi	r18, 0xCB	; 203
    17fe:	33 e0       	ldi	r19, 0x03	; 3
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	60 e8       	ldi	r22, 0x80	; 128
    1804:	85 e2       	ldi	r24, 0x25	; 37
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	0e 94 9b 22 	call	0x4536	; 0x4536 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
	display.println();
	display.print(F("LVL="));
	display.print(level_getCurrLvl());
	display.display();
	*/
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	08 95       	ret

00001820 <_GLOBAL__sub_D_display>:
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1820:	85 e2       	ldi	r24, 0x25	; 37
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <_ZN16Adafruit_SSD1306D1Ev>

00001828 <setup>:


void setup() 
{
	//GPIO INIT
	pinMode(13, OUTPUT);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	8d e0       	ldi	r24, 0x0D	; 13
    182c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(A0, INPUT_PULLUP);
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	8e e0       	ldi	r24, 0x0E	; 14
    1834:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(A1, INPUT_PULLUP);
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	8f e0       	ldi	r24, 0x0F	; 15
    183c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(A2, INPUT_PULLUP);
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	80 e1       	ldi	r24, 0x10	; 16
    1844:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(A3, INPUT_PULLUP);
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	81 e1       	ldi	r24, 0x11	; 17
    184c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(SIG_R2, INPUT_PULLUP);
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	86 e0       	ldi	r24, 0x06	; 6
    1854:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	pinMode(SIG_R3, OUTPUT);
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	87 e0       	ldi	r24, 0x07	; 7
    185c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	digitalWrite(SIG_R3, LOW);
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
	pinMode(SIG_L2, OUTPUT);
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
	digitalWrite(SIG_L2, LOW);
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
	pinMode(SIG_L3, INPUT_PULLUP);
    1878:	62 e0       	ldi	r22, 0x02	; 2
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1880:	26 e0       	ldi	r18, 0x06	; 6
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	55 e2       	ldi	r21, 0x25	; 37
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	8d ed       	ldi	r24, 0xDD	; 221
    188c:	92 e0       	ldi	r25, 0x02	; 2
    188e:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN14HardwareSerial5beginEmh>
	
	//SERIAL INIT
	Serial.begin(9600);
	softSerial_init();
    1892:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_Z15softSerial_initv>
  
	//NEOPIXEL INIT
	neopix_init();
    1896:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_Z11neopix_initv>

	//DISPLAY INIT
	oled_init();
    189a:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <_Z9oled_initv>

0000189e <loop>:
	
}

void loop() 
{
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
	softSerial_routine();
    18ae:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_Z18softSerial_routinev>
	
	//NSEC COMMUNICATION
	bool commLeftConnected = false;
	bool commRightConnected = false;
	if(digitalRead(SIG_L3) == LOW) //scan left port
    18b2:	84 e0       	ldi	r24, 0x04	; 4
    18b4:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <digitalRead>
    18b8:	8c 01       	movw	r16, r24
	else
	{
		commLeftConnected = false;
	}
	
	if(digitalRead(SIG_R2) == LOW) //scan right port
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <digitalRead>
    18c0:	ec 01       	movw	r28, r24
		
		
	//--------------------------------------------
	//DEBUG OUTPUT
	static uint32_t ts_uart = 0;
	if(millis() - ts_uart > 100)
    18c2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    18c6:	c0 90 6d 02 	lds	r12, 0x026D	; 0x80026d <_ZZ4loopE7ts_uart>
    18ca:	d0 90 6e 02 	lds	r13, 0x026E	; 0x80026e <_ZZ4loopE7ts_uart+0x1>
    18ce:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <_ZZ4loopE7ts_uart+0x2>
    18d2:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <_ZZ4loopE7ts_uart+0x3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	8c 19       	sub	r24, r12
    18dc:	9d 09       	sbc	r25, r13
    18de:	ae 09       	sbc	r26, r14
    18e0:	bf 09       	sbc	r27, r15
    18e2:	85 36       	cpi	r24, 0x65	; 101
    18e4:	91 05       	cpc	r25, r1
    18e6:	a1 05       	cpc	r26, r1
    18e8:	b1 05       	cpc	r27, r1
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <loop+0x50>
    18ec:	46 c0       	rjmp	.+140    	; 0x197a <loop+0xdc>
	{
		ts_uart = millis();
    18ee:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    18f2:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_ZZ4loopE7ts_uart>
    18f6:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_ZZ4loopE7ts_uart+0x1>
    18fa:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ4loopE7ts_uart+0x2>
    18fe:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_ZZ4loopE7ts_uart+0x3>
		
		Serial.print((float)millis()/1000.f);	
    1902:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1906:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a e7       	ldi	r20, 0x7A	; 122
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divsf3>
    1916:	ab 01       	movw	r20, r22
    1918:	bc 01       	movw	r22, r24
    191a:	22 e0       	ldi	r18, 0x02	; 2
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8d ed       	ldi	r24, 0xDD	; 221
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN5Print5printEdi>
		Serial.print("\t LVL:");
    1926:	61 e4       	ldi	r22, 0x41	; 65
    1928:	71 e0       	ldi	r23, 0x01	; 1
    192a:	8d ed       	ldi	r24, 0xDD	; 221
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN5Print5printEPKc>
		Serial.print(level_getCurrLvl());
    1932:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z16level_getCurrLvlv>
    1936:	4a e0       	ldi	r20, 0x0A	; 10
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	68 2f       	mov	r22, r24
    193c:	8d ed       	ldi	r24, 0xDD	; 221
    193e:	92 e0       	ldi	r25, 0x02	; 2
    1940:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN5Print5printEhi>
		
		//cheat code
		if(digitalRead(BTN_U) == LOW)
    1944:	8f e0       	ldi	r24, 0x0F	; 15
    1946:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <digitalRead>
    194a:	89 2b       	or	r24, r25
    194c:	39 f4       	brne	.+14     	; 0x195c <loop+0xbe>
		{
			if(level_getCurrLvl()<199)
    194e:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z16level_getCurrLvlv>
    1952:	87 3c       	cpi	r24, 0xC7	; 199
    1954:	70 f4       	brcc	.+28     	; 0x1972 <loop+0xd4>
				level_increment();
    1956:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15level_incrementv>
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <loop+0xd4>
		}
		else if(digitalRead(BTN_D) == LOW)
    195c:	80 e1       	ldi	r24, 0x10	; 16
    195e:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <digitalRead>
    1962:	89 2b       	or	r24, r25
    1964:	31 f4       	brne	.+12     	; 0x1972 <loop+0xd4>
		{
			if(level_getCurrLvl() > 1)
    1966:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z16level_getCurrLvlv>
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	10 f0       	brcs	.+4      	; 0x1972 <loop+0xd4>
				level_decrement();
    196e:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z15level_decrementv>
		}
		Serial.println();	
    1972:	8d ed       	ldi	r24, 0xDD	; 221
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Print7printlnEv>
  
  
	//--------------------------------------------
	//NEOPIXEL UPDATE
	static uint32_t ts_neopix = 0;
	if(millis() - ts_neopix > 1)
    197a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    197e:	c0 90 69 02 	lds	r12, 0x0269	; 0x800269 <_ZZ4loopE9ts_neopix>
    1982:	d0 90 6a 02 	lds	r13, 0x026A	; 0x80026a <_ZZ4loopE9ts_neopix+0x1>
    1986:	e0 90 6b 02 	lds	r14, 0x026B	; 0x80026b <_ZZ4loopE9ts_neopix+0x2>
    198a:	f0 90 6c 02 	lds	r15, 0x026C	; 0x80026c <_ZZ4loopE9ts_neopix+0x3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8c 19       	sub	r24, r12
    1994:	9d 09       	sbc	r25, r13
    1996:	ae 09       	sbc	r26, r14
    1998:	bf 09       	sbc	r27, r15
    199a:	02 97       	sbiw	r24, 0x02	; 2
    199c:	a1 05       	cpc	r26, r1
    199e:	b1 05       	cpc	r27, r1
    19a0:	58 f1       	brcs	.+86     	; 0x19f8 <loop+0x15a>
	{
		ts_neopix = millis();
    19a2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    19a6:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <_ZZ4loopE9ts_neopix>
    19aa:	70 93 6a 02 	sts	0x026A, r23	; 0x80026a <_ZZ4loopE9ts_neopix+0x1>
    19ae:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <_ZZ4loopE9ts_neopix+0x2>
    19b2:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <_ZZ4loopE9ts_neopix+0x3>
		if(commLeftConnected == true)
    19b6:	01 2b       	or	r16, r17
    19b8:	61 f4       	brne	.+24     	; 0x19d2 <loop+0x134>
		{
			if(mode_getWaitForDisconnect() == false)
    19ba:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z25mode_getWaitForDisconnectv>
    19be:	81 11       	cpse	r24, r1
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <loop+0x12e>
			{
				incrementLoadingBar();
    19c2:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z19incrementLoadingBarv>
				neopix_connectLeft();
    19c6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_Z18neopix_connectLeftv>
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <loop+0x15a>
			}
			else
				neopix_success();		
    19cc:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z14neopix_successv>
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <loop+0x15a>
				
		}
		else if(commRightConnected == true)
    19d2:	cd 2b       	or	r28, r29
    19d4:	49 f4       	brne	.+18     	; 0x19e8 <loop+0x14a>
		{
			if(mode_getWaitForDisconnect() == false)
    19d6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z25mode_getWaitForDisconnectv>
    19da:	81 11       	cpse	r24, r1
    19dc:	f7 cf       	rjmp	.-18     	; 0x19cc <loop+0x12e>
			{
				neopix_connectRight();
    19de:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_Z19neopix_connectRightv>
				incrementLoadingBar();
    19e2:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z19incrementLoadingBarv>
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <loop+0x15a>
			else
				neopix_success();
		}
		else
		{
			neopix_idle();		
    19e8:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z11neopix_idlev>
			mode_waitForDisconnect_deassert();	//clear loading bar variables
    19ec:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_Z31mode_waitForDisconnect_deassertv>
			mode_currentLoading_deassert();
    19f0:	0e 94 cb 07 	call	0xf96	; 0xf96 <_Z28mode_currentLoading_deassertv>
			neopix_resetLoadingBar();
    19f4:	0e 94 22 0b 	call	0x1644	; 0x1644 <_Z22neopix_resetLoadingBarv>

	
	//--------------------------------------------
	//DISPLAY UPDATE
	static uint32_t ts_oled = 0;
	if(millis() - ts_oled > 1000)
    19f8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    19fc:	00 91 65 02 	lds	r16, 0x0265	; 0x800265 <_ZZ4loopE7ts_oled>
    1a00:	10 91 66 02 	lds	r17, 0x0266	; 0x800266 <_ZZ4loopE7ts_oled+0x1>
    1a04:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <_ZZ4loopE7ts_oled+0x2>
    1a08:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <_ZZ4loopE7ts_oled+0x3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	80 1b       	sub	r24, r16
    1a12:	91 0b       	sbc	r25, r17
    1a14:	a2 0b       	sbc	r26, r18
    1a16:	b3 0b       	sbc	r27, r19
    1a18:	89 3e       	cpi	r24, 0xE9	; 233
    1a1a:	93 40       	sbci	r25, 0x03	; 3
    1a1c:	a1 05       	cpc	r26, r1
    1a1e:	b1 05       	cpc	r27, r1
    1a20:	a0 f0       	brcs	.+40     	; 0x1a4a <loop+0x1ac>
	{
		ts_oled = millis();
    1a22:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1a26:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <_ZZ4loopE7ts_oled>
    1a2a:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <_ZZ4loopE7ts_oled+0x1>
    1a2e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZZ4loopE7ts_oled+0x2>
    1a32:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <_ZZ4loopE7ts_oled+0x3>
		oled_testCypher();
	}
}
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
	//DISPLAY UPDATE
	static uint32_t ts_oled = 0;
	if(millis() - ts_oled > 1000)
	{
		ts_oled = millis();
		oled_testCypher();
    1a46:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <_Z15oled_testCypherv>
	}
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	cf 90       	pop	r12
    1a5a:	08 95       	ret

00001a5c <_Z15softSerial_initv>:


//FUNCTION DECLARATION
void softSerial_init()
{
	rightSerial.begin(4800);
    1a5c:	40 ec       	ldi	r20, 0xC0	; 192
    1a5e:	52 e1       	ldi	r21, 0x12	; 18
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	85 eb       	ldi	r24, 0xB5	; 181
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	0e 94 ab 2a 	call	0x5556	; 0x5556 <_ZN14SoftwareSerial5beginEl>
	leftSerial.begin(4800);
    1a6c:	40 ec       	ldi	r20, 0xC0	; 192
    1a6e:	52 e1       	ldi	r21, 0x12	; 18
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	86 e9       	ldi	r24, 0x96	; 150
    1a76:	92 e0       	ldi	r25, 0x02	; 2
    1a78:	0c 94 ab 2a 	jmp	0x5556	; 0x5556 <_ZN14SoftwareSerial5beginEl>

00001a7c <_GLOBAL__sub_I_rightSerial>:
#include "oledControl.h"


//VARIABLE
//SOFTWARE SERIAL
SoftwareSerial rightSerial(6, 5); // RX, TX
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	45 e0       	ldi	r20, 0x05	; 5
    1a80:	66 e0       	ldi	r22, 0x06	; 6
    1a82:	85 eb       	ldi	r24, 0xB5	; 181
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial leftSerial(2, 3); // RX, TX
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	43 e0       	ldi	r20, 0x03	; 3
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	86 e9       	ldi	r24, 0x96	; 150
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <_ZN14SoftwareSerialC1Ehhb>

00001a98 <_GLOBAL__sub_D_rightSerial>:
    1a98:	86 e9       	ldi	r24, 0x96	; 150
    1a9a:	92 e0       	ldi	r25, 0x02	; 2
    1a9c:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN14SoftwareSerialD1Ev>
#include "oledControl.h"


//VARIABLE
//SOFTWARE SERIAL
SoftwareSerial rightSerial(6, 5); // RX, TX
    1aa0:	85 eb       	ldi	r24, 0xB5	; 181
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	0c 94 27 2a 	jmp	0x544e	; 0x544e <_ZN14SoftwareSerialD1Ev>

00001aa8 <_Z18softSerial_routinev>:
	rightSerial.begin(4800);
	leftSerial.begin(4800);
}

void softSerial_routine()
{
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
	static uint32_t sending = 0;
	static char receivedRight[MAX_MESSAGE_LENGTH];
	static char receivedLeft[MAX_MESSAGE_LENGTH];
	
	static uint32_t ts_loop = 0;
	if(millis() - ts_loop > 1000)
    1aac:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1ab0:	00 91 92 02 	lds	r16, 0x0292	; 0x800292 <_ZZ18softSerial_routinevE7ts_loop>
    1ab4:	10 91 93 02 	lds	r17, 0x0293	; 0x800293 <_ZZ18softSerial_routinevE7ts_loop+0x1>
    1ab8:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <_ZZ18softSerial_routinevE7ts_loop+0x2>
    1abc:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <_ZZ18softSerial_routinevE7ts_loop+0x3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	80 1b       	sub	r24, r16
    1ac6:	91 0b       	sbc	r25, r17
    1ac8:	a2 0b       	sbc	r26, r18
    1aca:	b3 0b       	sbc	r27, r19
    1acc:	89 3e       	cpi	r24, 0xE9	; 233
    1ace:	93 40       	sbci	r25, 0x03	; 3
    1ad0:	a1 05       	cpc	r26, r1
    1ad2:	b1 05       	cpc	r27, r1
    1ad4:	50 f1       	brcs	.+84     	; 0x1b2a <_Z18softSerial_routinev+0x82>
	{
		ts_loop = millis();
    1ad6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1ada:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <_ZZ18softSerial_routinevE7ts_loop>
    1ade:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <_ZZ18softSerial_routinevE7ts_loop+0x1>
    1ae2:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <_ZZ18softSerial_routinevE7ts_loop+0x2>
    1ae6:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <_ZZ18softSerial_routinevE7ts_loop+0x3>
		
		sending = millis();
    1aea:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1aee:	ab 01       	movw	r20, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	40 93 8e 02 	sts	0x028E, r20	; 0x80028e <_ZZ18softSerial_routinevE7sending>
    1af6:	50 93 8f 02 	sts	0x028F, r21	; 0x80028f <_ZZ18softSerial_routinevE7sending+0x1>
    1afa:	60 93 90 02 	sts	0x0290, r22	; 0x800290 <_ZZ18softSerial_routinevE7sending+0x2>
    1afe:	70 93 91 02 	sts	0x0291, r23	; 0x800291 <_ZZ18softSerial_routinevE7sending+0x3>
		leftSerial.println(sending);
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	86 e9       	ldi	r24, 0x96	; 150
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN5Print7printlnEmi>
		rightSerial.println(sending);
    1b0e:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <_ZZ18softSerial_routinevE7sending>
    1b12:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <_ZZ18softSerial_routinevE7sending+0x1>
    1b16:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <_ZZ18softSerial_routinevE7sending+0x2>
    1b1a:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <_ZZ18softSerial_routinevE7sending+0x3>
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	85 eb       	ldi	r24, 0xB5	; 181
    1b24:	92 e0       	ldi	r25, 0x02	; 2
    1b26:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN5Print7printlnEmi>
	}
	
	static uint32_t ts_pingpong = 0;
	if(millis() - ts_pingpong > 200)
    1b2a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1b2e:	00 91 8a 02 	lds	r16, 0x028A	; 0x80028a <_ZZ18softSerial_routinevE11ts_pingpong>
    1b32:	10 91 8b 02 	lds	r17, 0x028B	; 0x80028b <_ZZ18softSerial_routinevE11ts_pingpong+0x1>
    1b36:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <_ZZ18softSerial_routinevE11ts_pingpong+0x2>
    1b3a:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <_ZZ18softSerial_routinevE11ts_pingpong+0x3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	80 1b       	sub	r24, r16
    1b44:	91 0b       	sbc	r25, r17
    1b46:	a2 0b       	sbc	r26, r18
    1b48:	b3 0b       	sbc	r27, r19
    1b4a:	89 3c       	cpi	r24, 0xC9	; 201
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	a1 05       	cpc	r26, r1
    1b50:	b1 05       	cpc	r27, r1
    1b52:	80 f0       	brcs	.+32     	; 0x1b74 <_Z18softSerial_routinev+0xcc>
	{
		ts_pingpong = millis();
    1b54:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1b58:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <_ZZ18softSerial_routinevE11ts_pingpong>
    1b5c:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <_ZZ18softSerial_routinevE11ts_pingpong+0x1>
    1b60:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <_ZZ18softSerial_routinevE11ts_pingpong+0x2>
    1b64:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <_ZZ18softSerial_routinevE11ts_pingpong+0x3>
		pingpongSelector = !pingpongSelector;
    1b68:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <_ZZ18softSerial_routinevE16pingpongSelector>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	89 27       	eor	r24, r25
    1b70:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_ZZ18softSerial_routinevE16pingpongSelector>
	}
	
	static uint32_t ts_display = 0;
	if(millis() - ts_display > 100)
    1b74:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1b78:	00 91 85 02 	lds	r16, 0x0285	; 0x800285 <_ZZ18softSerial_routinevE10ts_display>
    1b7c:	10 91 86 02 	lds	r17, 0x0286	; 0x800286 <_ZZ18softSerial_routinevE10ts_display+0x1>
    1b80:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_ZZ18softSerial_routinevE10ts_display+0x2>
    1b84:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <_ZZ18softSerial_routinevE10ts_display+0x3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	80 1b       	sub	r24, r16
    1b8e:	91 0b       	sbc	r25, r17
    1b90:	a2 0b       	sbc	r26, r18
    1b92:	b3 0b       	sbc	r27, r19
    1b94:	85 36       	cpi	r24, 0x65	; 101
    1b96:	91 05       	cpc	r25, r1
    1b98:	a1 05       	cpc	r26, r1
    1b9a:	b1 05       	cpc	r27, r1
    1b9c:	50 f0       	brcs	.+20     	; 0x1bb2 <_Z18softSerial_routinev+0x10a>
	{
		ts_display = millis();
    1b9e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <millis>
    1ba2:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <_ZZ18softSerial_routinevE10ts_display>
    1ba6:	70 93 86 02 	sts	0x0286, r23	; 0x800286 <_ZZ18softSerial_routinevE10ts_display+0x1>
    1baa:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <_ZZ18softSerial_routinevE10ts_display+0x2>
    1bae:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <_ZZ18softSerial_routinevE10ts_display+0x3>
	
	static char msgRxRight[MAX_MESSAGE_LENGTH];
	static unsigned int msgRxRight_pos = 0;
	static char msgRxLeft[MAX_MESSAGE_LENGTH];
	static unsigned int msgRxLeft_pos = 0;
	if(pingpongSelector == false)
    1bb2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZZ18softSerial_routinevE16pingpongSelector>
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	2a c0       	rjmp	.+84     	; 0x1c0e <_Z18softSerial_routinev+0x166>
	{
		rightSerial.listen();
    1bba:	85 eb       	ldi	r24, 0xB5	; 181
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 84 29 	call	0x5308	; 0x5308 <_ZN14SoftwareSerial6listenEv>
		while(rightSerial.available() > 0)
    1bc2:	85 eb       	ldi	r24, 0xB5	; 181
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 56 29 	call	0x52ac	; 0x52ac <_ZN14SoftwareSerial9availableEv>
    1bca:	18 16       	cp	r1, r24
    1bcc:	19 06       	cpc	r1, r25
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <_Z18softSerial_routinev+0x12a>
    1bd0:	47 c0       	rjmp	.+142    	; 0x1c60 <_Z18softSerial_routinev+0x1b8>
		{
			char inByte = rightSerial.read();
    1bd2:	85 eb       	ldi	r24, 0xB5	; 181
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
    1bd6:	0e 94 cc 28 	call	0x5198	; 0x5198 <_ZN14SoftwareSerial4readEv>
    1bda:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <_ZZ18softSerial_routinevE14msgRxRight_pos>
    1bde:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZZ18softSerial_routinevE14msgRxRight_pos+0x1>
			if ( inByte != '\n' && (msgRxRight_pos < MAX_MESSAGE_LENGTH - 1) )
			{
				msgRxRight[msgRxRight_pos] = inByte; //Add the incoming byte to our message
    1be2:	f9 01       	movw	r30, r18
    1be4:	e5 58       	subi	r30, 0x85	; 133
    1be6:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		rightSerial.listen();
		while(rightSerial.available() > 0)
		{
			char inByte = rightSerial.read();
			if ( inByte != '\n' && (msgRxRight_pos < MAX_MESSAGE_LENGTH - 1) )
    1be8:	8a 30       	cpi	r24, 0x0A	; 10
    1bea:	59 f0       	breq	.+22     	; 0x1c02 <_Z18softSerial_routinev+0x15a>
    1bec:	27 30       	cpi	r18, 0x07	; 7
    1bee:	31 05       	cpc	r19, r1
    1bf0:	40 f4       	brcc	.+16     	; 0x1c02 <_Z18softSerial_routinev+0x15a>
			{
				msgRxRight[msgRxRight_pos] = inByte; //Add the incoming byte to our message
    1bf2:	80 83       	st	Z, r24
				msgRxRight_pos++;
    1bf4:	2f 5f       	subi	r18, 0xFF	; 255
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	30 93 84 02 	sts	0x0284, r19	; 0x800284 <_ZZ18softSerial_routinevE14msgRxRight_pos+0x1>
    1bfc:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <_ZZ18softSerial_routinevE14msgRxRight_pos>
    1c00:	e0 cf       	rjmp	.-64     	; 0x1bc2 <_Z18softSerial_routinev+0x11a>
			}
			else
			{
				msgRxRight[msgRxRight_pos] = '\0';	//Add null character to string
    1c02:	10 82       	st	Z, r1
				msgRxRight_pos = 0;				//Reset for the next message
    1c04:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <_ZZ18softSerial_routinevE14msgRxRight_pos+0x1>
    1c08:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_ZZ18softSerial_routinevE14msgRxRight_pos>
    1c0c:	da cf       	rjmp	.-76     	; 0x1bc2 <_Z18softSerial_routinev+0x11a>
			}
		}
	}
	else
	{
		leftSerial.listen();
    1c0e:	86 e9       	ldi	r24, 0x96	; 150
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 84 29 	call	0x5308	; 0x5308 <_ZN14SoftwareSerial6listenEv>
		while(leftSerial.available() > 0)
    1c16:	86 e9       	ldi	r24, 0x96	; 150
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 56 29 	call	0x52ac	; 0x52ac <_ZN14SoftwareSerial9availableEv>
    1c1e:	18 16       	cp	r1, r24
    1c20:	19 06       	cpc	r1, r25
    1c22:	f4 f4       	brge	.+60     	; 0x1c60 <_Z18softSerial_routinev+0x1b8>
		{
			char inByte = leftSerial.read();
    1c24:	86 e9       	ldi	r24, 0x96	; 150
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	0e 94 cc 28 	call	0x5198	; 0x5198 <_ZN14SoftwareSerial4readEv>
    1c2c:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <_ZZ18softSerial_routinevE13msgRxLeft_pos>
    1c30:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <_ZZ18softSerial_routinevE13msgRxLeft_pos+0x1>
			if ( inByte != '\n' && (msgRxLeft_pos < MAX_MESSAGE_LENGTH - 1) )
			{
				msgRxLeft[msgRxLeft_pos] = inByte; //Add the incoming byte to our message
    1c34:	f9 01       	movw	r30, r18
    1c36:	ef 58       	subi	r30, 0x8F	; 143
    1c38:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		leftSerial.listen();
		while(leftSerial.available() > 0)
		{
			char inByte = leftSerial.read();
			if ( inByte != '\n' && (msgRxLeft_pos < MAX_MESSAGE_LENGTH - 1) )
    1c3a:	8a 30       	cpi	r24, 0x0A	; 10
    1c3c:	59 f0       	breq	.+22     	; 0x1c54 <_Z18softSerial_routinev+0x1ac>
    1c3e:	27 30       	cpi	r18, 0x07	; 7
    1c40:	31 05       	cpc	r19, r1
    1c42:	40 f4       	brcc	.+16     	; 0x1c54 <_Z18softSerial_routinev+0x1ac>
			{
				msgRxLeft[msgRxLeft_pos] = inByte; //Add the incoming byte to our message
    1c44:	80 83       	st	Z, r24
				msgRxLeft_pos++;
    1c46:	2f 5f       	subi	r18, 0xFF	; 255
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <_ZZ18softSerial_routinevE13msgRxLeft_pos+0x1>
    1c4e:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <_ZZ18softSerial_routinevE13msgRxLeft_pos>
    1c52:	e1 cf       	rjmp	.-62     	; 0x1c16 <_Z18softSerial_routinev+0x16e>
			}
			else
			{
				msgRxLeft[msgRxLeft_pos] = '\0';	//Add null character to string
    1c54:	10 82       	st	Z, r1
				msgRxLeft_pos = 0;				//Reset for the next message
    1c56:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZZ18softSerial_routinevE13msgRxLeft_pos+0x1>
    1c5a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_ZZ18softSerial_routinevE13msgRxLeft_pos>
    1c5e:	db cf       	rjmp	.-74     	; 0x1c16 <_Z18softSerial_routinev+0x16e>
					receivedLeft[i] = msgRxLeft[i];
				}
			}
		}
	}
}
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	08 95       	ret

00001c66 <_ZN15ArduinoUniqueIDC1Ev>:
#include "uidFetcher.h"

ArduinoUniqueID::ArduinoUniqueID()
{
#if defined(ARDUINO_ARCH_AVR)
	for (size_t i = 0; i < UniqueIDsize; i++)
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
	{
		id[i] = boot_signature_byte_get(0x0E + i + (UniqueIDsize == 9 && i > 5 ? 1 : 0));
    1c6a:	41 e2       	ldi	r20, 0x21	; 33
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	62 5f       	subi	r22, 0xF2	; 242
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	e1 e0       	ldi	r30, 0x01	; 1
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	26 30       	cpi	r18, 0x06	; 6
    1c78:	31 05       	cpc	r19, r1
    1c7a:	10 f4       	brcc	.+4      	; 0x1c80 <_ZN15ArduinoUniqueIDC1Ev+0x1a>
    1c7c:	e0 e0       	ldi	r30, 0x00	; 0
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	e6 0f       	add	r30, r22
    1c82:	f7 1f       	adc	r31, r23
    1c84:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    1c88:	e4 91       	lpm	r30, Z
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	ed 93       	st	X+, r30
    1c8e:	cd 01       	movw	r24, r26
#include "uidFetcher.h"

ArduinoUniqueID::ArduinoUniqueID()
{
#if defined(ARDUINO_ARCH_AVR)
	for (size_t i = 0; i < UniqueIDsize; i++)
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	29 30       	cpi	r18, 0x09	; 9
    1c96:	31 05       	cpc	r19, r1
    1c98:	49 f7       	brne	.-46     	; 0x1c6c <_ZN15ArduinoUniqueIDC1Ev+0x6>
	id[7] = SIGROW.SERNUM7;
	id[8] = SIGROW.SERNUM8;
	id[9] = SIGROW.SERNUM9;

#endif
}
    1c9a:	08 95       	ret

00001c9c <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev>:

    1c9c:	84 ed       	ldi	r24, 0xD4	; 212
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <_ZN15ArduinoUniqueIDC1Ev>

00001ca4 <__subsf3>:
    1ca4:	50 58       	subi	r21, 0x80	; 128

00001ca6 <__addsf3>:
    1ca6:	bb 27       	eor	r27, r27
    1ca8:	aa 27       	eor	r26, r26
    1caa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__addsf3x>
    1cae:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    1cb2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    1cb6:	38 f0       	brcs	.+14     	; 0x1cc6 <__addsf3+0x20>
    1cb8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    1cbc:	20 f0       	brcs	.+8      	; 0x1cc6 <__addsf3+0x20>
    1cbe:	39 f4       	brne	.+14     	; 0x1cce <__addsf3+0x28>
    1cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc2:	19 f4       	brne	.+6      	; 0x1cca <__addsf3+0x24>
    1cc4:	26 f4       	brtc	.+8      	; 0x1cce <__addsf3+0x28>
    1cc6:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    1cca:	0e f4       	brtc	.+2      	; 0x1cce <__addsf3+0x28>
    1ccc:	e0 95       	com	r30
    1cce:	e7 fb       	bst	r30, 7
    1cd0:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>

00001cd4 <__addsf3x>:
    1cd4:	e9 2f       	mov	r30, r25
    1cd6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    1cda:	58 f3       	brcs	.-42     	; 0x1cb2 <__addsf3+0xc>
    1cdc:	ba 17       	cp	r27, r26
    1cde:	62 07       	cpc	r22, r18
    1ce0:	73 07       	cpc	r23, r19
    1ce2:	84 07       	cpc	r24, r20
    1ce4:	95 07       	cpc	r25, r21
    1ce6:	20 f0       	brcs	.+8      	; 0x1cf0 <__addsf3x+0x1c>
    1ce8:	79 f4       	brne	.+30     	; 0x1d08 <__addsf3x+0x34>
    1cea:	a6 f5       	brtc	.+104    	; 0x1d54 <__addsf3x+0x80>
    1cec:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_zero>
    1cf0:	0e f4       	brtc	.+2      	; 0x1cf4 <__addsf3x+0x20>
    1cf2:	e0 95       	com	r30
    1cf4:	0b 2e       	mov	r0, r27
    1cf6:	ba 2f       	mov	r27, r26
    1cf8:	a0 2d       	mov	r26, r0
    1cfa:	0b 01       	movw	r0, r22
    1cfc:	b9 01       	movw	r22, r18
    1cfe:	90 01       	movw	r18, r0
    1d00:	0c 01       	movw	r0, r24
    1d02:	ca 01       	movw	r24, r20
    1d04:	a0 01       	movw	r20, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	ff 27       	eor	r31, r31
    1d0a:	59 1b       	sub	r21, r25
    1d0c:	99 f0       	breq	.+38     	; 0x1d34 <__addsf3x+0x60>
    1d0e:	59 3f       	cpi	r21, 0xF9	; 249
    1d10:	50 f4       	brcc	.+20     	; 0x1d26 <__addsf3x+0x52>
    1d12:	50 3e       	cpi	r21, 0xE0	; 224
    1d14:	68 f1       	brcs	.+90     	; 0x1d70 <__addsf3x+0x9c>
    1d16:	1a 16       	cp	r1, r26
    1d18:	f0 40       	sbci	r31, 0x00	; 0
    1d1a:	a2 2f       	mov	r26, r18
    1d1c:	23 2f       	mov	r18, r19
    1d1e:	34 2f       	mov	r19, r20
    1d20:	44 27       	eor	r20, r20
    1d22:	58 5f       	subi	r21, 0xF8	; 248
    1d24:	f3 cf       	rjmp	.-26     	; 0x1d0c <__addsf3x+0x38>
    1d26:	46 95       	lsr	r20
    1d28:	37 95       	ror	r19
    1d2a:	27 95       	ror	r18
    1d2c:	a7 95       	ror	r26
    1d2e:	f0 40       	sbci	r31, 0x00	; 0
    1d30:	53 95       	inc	r21
    1d32:	c9 f7       	brne	.-14     	; 0x1d26 <__addsf3x+0x52>
    1d34:	7e f4       	brtc	.+30     	; 0x1d54 <__addsf3x+0x80>
    1d36:	1f 16       	cp	r1, r31
    1d38:	ba 0b       	sbc	r27, r26
    1d3a:	62 0b       	sbc	r22, r18
    1d3c:	73 0b       	sbc	r23, r19
    1d3e:	84 0b       	sbc	r24, r20
    1d40:	ba f0       	brmi	.+46     	; 0x1d70 <__addsf3x+0x9c>
    1d42:	91 50       	subi	r25, 0x01	; 1
    1d44:	a1 f0       	breq	.+40     	; 0x1d6e <__addsf3x+0x9a>
    1d46:	ff 0f       	add	r31, r31
    1d48:	bb 1f       	adc	r27, r27
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	c2 f7       	brpl	.-16     	; 0x1d42 <__addsf3x+0x6e>
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <__addsf3x+0x9c>
    1d54:	ba 0f       	add	r27, r26
    1d56:	62 1f       	adc	r22, r18
    1d58:	73 1f       	adc	r23, r19
    1d5a:	84 1f       	adc	r24, r20
    1d5c:	48 f4       	brcc	.+18     	; 0x1d70 <__addsf3x+0x9c>
    1d5e:	87 95       	ror	r24
    1d60:	77 95       	ror	r23
    1d62:	67 95       	ror	r22
    1d64:	b7 95       	ror	r27
    1d66:	f7 95       	ror	r31
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <__addsf3x+0x9a>
    1d6c:	b0 cf       	rjmp	.-160    	; 0x1cce <__addsf3+0x28>
    1d6e:	93 95       	inc	r25
    1d70:	88 0f       	add	r24, r24
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <__addsf3x+0xa2>
    1d74:	99 27       	eor	r25, r25
    1d76:	ee 0f       	add	r30, r30
    1d78:	97 95       	ror	r25
    1d7a:	87 95       	ror	r24
    1d7c:	08 95       	ret

00001d7e <__divsf3>:
    1d7e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__divsf3x>
    1d82:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    1d86:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    1d8a:	58 f0       	brcs	.+22     	; 0x1da2 <__divsf3+0x24>
    1d8c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    1d90:	40 f0       	brcs	.+16     	; 0x1da2 <__divsf3+0x24>
    1d92:	29 f4       	brne	.+10     	; 0x1d9e <__divsf3+0x20>
    1d94:	5f 3f       	cpi	r21, 0xFF	; 255
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <__divsf3+0x24>
    1d98:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    1d9c:	51 11       	cpse	r21, r1
    1d9e:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    1da2:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>

00001da6 <__divsf3x>:
    1da6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    1daa:	68 f3       	brcs	.-38     	; 0x1d86 <__divsf3+0x8>

00001dac <__divsf3_pse>:
    1dac:	99 23       	and	r25, r25
    1dae:	b1 f3       	breq	.-20     	; 0x1d9c <__divsf3+0x1e>
    1db0:	55 23       	and	r21, r21
    1db2:	91 f3       	breq	.-28     	; 0x1d98 <__divsf3+0x1a>
    1db4:	95 1b       	sub	r25, r21
    1db6:	55 0b       	sbc	r21, r21
    1db8:	bb 27       	eor	r27, r27
    1dba:	aa 27       	eor	r26, r26
    1dbc:	62 17       	cp	r22, r18
    1dbe:	73 07       	cpc	r23, r19
    1dc0:	84 07       	cpc	r24, r20
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <__divsf3_pse+0x26>
    1dc4:	9f 5f       	subi	r25, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	22 0f       	add	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	44 1f       	adc	r20, r20
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	a9 f3       	breq	.-22     	; 0x1dbc <__divsf3_pse+0x10>
    1dd2:	35 d0       	rcall	.+106    	; 0x1e3e <__divsf3_pse+0x92>
    1dd4:	0e 2e       	mov	r0, r30
    1dd6:	3a f0       	brmi	.+14     	; 0x1de6 <__divsf3_pse+0x3a>
    1dd8:	e0 e8       	ldi	r30, 0x80	; 128
    1dda:	32 d0       	rcall	.+100    	; 0x1e40 <__divsf3_pse+0x94>
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	e6 95       	lsr	r30
    1de2:	00 1c       	adc	r0, r0
    1de4:	ca f7       	brpl	.-14     	; 0x1dd8 <__divsf3_pse+0x2c>
    1de6:	2b d0       	rcall	.+86     	; 0x1e3e <__divsf3_pse+0x92>
    1de8:	fe 2f       	mov	r31, r30
    1dea:	29 d0       	rcall	.+82     	; 0x1e3e <__divsf3_pse+0x92>
    1dec:	66 0f       	add	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	bb 1f       	adc	r27, r27
    1df4:	26 17       	cp	r18, r22
    1df6:	37 07       	cpc	r19, r23
    1df8:	48 07       	cpc	r20, r24
    1dfa:	ab 07       	cpc	r26, r27
    1dfc:	b0 e8       	ldi	r27, 0x80	; 128
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <__divsf3_pse+0x56>
    1e00:	bb 0b       	sbc	r27, r27
    1e02:	80 2d       	mov	r24, r0
    1e04:	bf 01       	movw	r22, r30
    1e06:	ff 27       	eor	r31, r31
    1e08:	93 58       	subi	r25, 0x83	; 131
    1e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0c:	3a f0       	brmi	.+14     	; 0x1e1c <__divsf3_pse+0x70>
    1e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e10:	51 05       	cpc	r21, r1
    1e12:	78 f0       	brcs	.+30     	; 0x1e32 <__divsf3_pse+0x86>
    1e14:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    1e18:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    1e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1e:	e4 f3       	brlt	.-8      	; 0x1e18 <__divsf3_pse+0x6c>
    1e20:	98 3e       	cpi	r25, 0xE8	; 232
    1e22:	d4 f3       	brlt	.-12     	; 0x1e18 <__divsf3_pse+0x6c>
    1e24:	86 95       	lsr	r24
    1e26:	77 95       	ror	r23
    1e28:	67 95       	ror	r22
    1e2a:	b7 95       	ror	r27
    1e2c:	f7 95       	ror	r31
    1e2e:	9f 5f       	subi	r25, 0xFF	; 255
    1e30:	c9 f7       	brne	.-14     	; 0x1e24 <__divsf3_pse+0x78>
    1e32:	88 0f       	add	r24, r24
    1e34:	91 1d       	adc	r25, r1
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret
    1e3e:	e1 e0       	ldi	r30, 0x01	; 1
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	bb 1f       	adc	r27, r27
    1e48:	62 17       	cp	r22, r18
    1e4a:	73 07       	cpc	r23, r19
    1e4c:	84 07       	cpc	r24, r20
    1e4e:	ba 07       	cpc	r27, r26
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__divsf3_pse+0xae>
    1e52:	62 1b       	sub	r22, r18
    1e54:	73 0b       	sbc	r23, r19
    1e56:	84 0b       	sbc	r24, r20
    1e58:	ba 0b       	sbc	r27, r26
    1e5a:	ee 1f       	adc	r30, r30
    1e5c:	88 f7       	brcc	.-30     	; 0x1e40 <__divsf3_pse+0x94>
    1e5e:	e0 95       	com	r30
    1e60:	08 95       	ret

00001e62 <__fixunssfsi>:
    1e62:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_splitA>
    1e66:	88 f0       	brcs	.+34     	; 0x1e8a <__fixunssfsi+0x28>
    1e68:	9f 57       	subi	r25, 0x7F	; 127
    1e6a:	98 f0       	brcs	.+38     	; 0x1e92 <__fixunssfsi+0x30>
    1e6c:	b9 2f       	mov	r27, r25
    1e6e:	99 27       	eor	r25, r25
    1e70:	b7 51       	subi	r27, 0x17	; 23
    1e72:	b0 f0       	brcs	.+44     	; 0x1ea0 <__fixunssfsi+0x3e>
    1e74:	e1 f0       	breq	.+56     	; 0x1eae <__fixunssfsi+0x4c>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	1a f0       	brmi	.+6      	; 0x1e86 <__fixunssfsi+0x24>
    1e80:	ba 95       	dec	r27
    1e82:	c9 f7       	brne	.-14     	; 0x1e76 <__fixunssfsi+0x14>
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <__fixunssfsi+0x4c>
    1e86:	b1 30       	cpi	r27, 0x01	; 1
    1e88:	91 f0       	breq	.+36     	; 0x1eae <__fixunssfsi+0x4c>
    1e8a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_zero>
    1e8e:	b1 e0       	ldi	r27, 0x01	; 1
    1e90:	08 95       	ret
    1e92:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_zero>
    1e96:	67 2f       	mov	r22, r23
    1e98:	78 2f       	mov	r23, r24
    1e9a:	88 27       	eor	r24, r24
    1e9c:	b8 5f       	subi	r27, 0xF8	; 248
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <__fixunssfsi+0x4c>
    1ea0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea2:	cc f3       	brlt	.-14     	; 0x1e96 <__fixunssfsi+0x34>
    1ea4:	86 95       	lsr	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b3 95       	inc	r27
    1eac:	d9 f7       	brne	.-10     	; 0x1ea4 <__fixunssfsi+0x42>
    1eae:	3e f4       	brtc	.+14     	; 0x1ebe <__fixunssfsi+0x5c>
    1eb0:	90 95       	com	r25
    1eb2:	80 95       	com	r24
    1eb4:	70 95       	com	r23
    1eb6:	61 95       	neg	r22
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	08 95       	ret

00001ec0 <__floatunsisf>:
    1ec0:	e8 94       	clt
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <__floatsisf+0x12>

00001ec4 <__floatsisf>:
    1ec4:	97 fb       	bst	r25, 7
    1ec6:	3e f4       	brtc	.+14     	; 0x1ed6 <__floatsisf+0x12>
    1ec8:	90 95       	com	r25
    1eca:	80 95       	com	r24
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	99 23       	and	r25, r25
    1ed8:	a9 f0       	breq	.+42     	; 0x1f04 <__floatsisf+0x40>
    1eda:	f9 2f       	mov	r31, r25
    1edc:	96 e9       	ldi	r25, 0x96	; 150
    1ede:	bb 27       	eor	r27, r27
    1ee0:	93 95       	inc	r25
    1ee2:	f6 95       	lsr	r31
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f1 11       	cpse	r31, r1
    1eee:	f8 cf       	rjmp	.-16     	; 0x1ee0 <__floatsisf+0x1c>
    1ef0:	fa f4       	brpl	.+62     	; 0x1f30 <__floatsisf+0x6c>
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__floatsisf+0x36>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <__floatsisf+0x6c>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	16 c0       	rjmp	.+44     	; 0x1f30 <__floatsisf+0x6c>
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <__floatsisf+0x48>
    1f08:	96 e9       	ldi	r25, 0x96	; 150
    1f0a:	11 c0       	rjmp	.+34     	; 0x1f2e <__floatsisf+0x6a>
    1f0c:	77 23       	and	r23, r23
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <__floatsisf+0x54>
    1f10:	9e e8       	ldi	r25, 0x8E	; 142
    1f12:	87 2f       	mov	r24, r23
    1f14:	76 2f       	mov	r23, r22
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <__floatsisf+0x5e>
    1f18:	66 23       	and	r22, r22
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <__floatsisf+0x74>
    1f1c:	96 e8       	ldi	r25, 0x86	; 134
    1f1e:	86 2f       	mov	r24, r22
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	2a f0       	brmi	.+10     	; 0x1f30 <__floatsisf+0x6c>
    1f26:	9a 95       	dec	r25
    1f28:	66 0f       	add	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	da f7       	brpl	.-10     	; 0x1f26 <__floatsisf+0x62>
    1f30:	88 0f       	add	r24, r24
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret

00001f3a <__fp_inf>:
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	9f 67       	ori	r25, 0x7F	; 127
    1f3e:	80 e8       	ldi	r24, 0x80	; 128
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	08 95       	ret

00001f46 <__fp_nan>:
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	80 ec       	ldi	r24, 0xC0	; 192
    1f4a:	08 95       	ret

00001f4c <__fp_pscA>:
    1f4c:	00 24       	eor	r0, r0
    1f4e:	0a 94       	dec	r0
    1f50:	16 16       	cp	r1, r22
    1f52:	17 06       	cpc	r1, r23
    1f54:	18 06       	cpc	r1, r24
    1f56:	09 06       	cpc	r0, r25
    1f58:	08 95       	ret

00001f5a <__fp_pscB>:
    1f5a:	00 24       	eor	r0, r0
    1f5c:	0a 94       	dec	r0
    1f5e:	12 16       	cp	r1, r18
    1f60:	13 06       	cpc	r1, r19
    1f62:	14 06       	cpc	r1, r20
    1f64:	05 06       	cpc	r0, r21
    1f66:	08 95       	ret

00001f68 <__fp_round>:
    1f68:	09 2e       	mov	r0, r25
    1f6a:	03 94       	inc	r0
    1f6c:	00 0c       	add	r0, r0
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <__fp_round+0xc>
    1f70:	88 23       	and	r24, r24
    1f72:	52 f0       	brmi	.+20     	; 0x1f88 <__fp_round+0x20>
    1f74:	bb 0f       	add	r27, r27
    1f76:	40 f4       	brcc	.+16     	; 0x1f88 <__fp_round+0x20>
    1f78:	bf 2b       	or	r27, r31
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <__fp_round+0x18>
    1f7c:	60 ff       	sbrs	r22, 0
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <__fp_round+0x20>
    1f80:	6f 5f       	subi	r22, 0xFF	; 255
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__fp_split3>:
    1f8a:	57 fd       	sbrc	r21, 7
    1f8c:	90 58       	subi	r25, 0x80	; 128
    1f8e:	44 0f       	add	r20, r20
    1f90:	55 1f       	adc	r21, r21
    1f92:	59 f0       	breq	.+22     	; 0x1faa <__fp_splitA+0x10>
    1f94:	5f 3f       	cpi	r21, 0xFF	; 255
    1f96:	71 f0       	breq	.+28     	; 0x1fb4 <__fp_splitA+0x1a>
    1f98:	47 95       	ror	r20

00001f9a <__fp_splitA>:
    1f9a:	88 0f       	add	r24, r24
    1f9c:	97 fb       	bst	r25, 7
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <__fp_splitA+0x20>
    1fa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa4:	79 f0       	breq	.+30     	; 0x1fc4 <__fp_splitA+0x2a>
    1fa6:	87 95       	ror	r24
    1fa8:	08 95       	ret
    1faa:	12 16       	cp	r1, r18
    1fac:	13 06       	cpc	r1, r19
    1fae:	14 06       	cpc	r1, r20
    1fb0:	55 1f       	adc	r21, r21
    1fb2:	f2 cf       	rjmp	.-28     	; 0x1f98 <__fp_split3+0xe>
    1fb4:	46 95       	lsr	r20
    1fb6:	f1 df       	rcall	.-30     	; 0x1f9a <__fp_splitA>
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <__fp_splitA+0x30>
    1fba:	16 16       	cp	r1, r22
    1fbc:	17 06       	cpc	r1, r23
    1fbe:	18 06       	cpc	r1, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	f1 cf       	rjmp	.-30     	; 0x1fa6 <__fp_splitA+0xc>
    1fc4:	86 95       	lsr	r24
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	61 05       	cpc	r22, r1
    1fca:	08 94       	sec
    1fcc:	08 95       	ret

00001fce <__fp_zero>:
    1fce:	e8 94       	clt

00001fd0 <__fp_szero>:
    1fd0:	bb 27       	eor	r27, r27
    1fd2:	66 27       	eor	r22, r22
    1fd4:	77 27       	eor	r23, r23
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	97 f9       	bld	r25, 7
    1fda:	08 95       	ret

00001fdc <__mulsf3>:
    1fdc:	0e 94 01 10 	call	0x2002	; 0x2002 <__mulsf3x>
    1fe0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    1fe4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    1fe8:	38 f0       	brcs	.+14     	; 0x1ff8 <__mulsf3+0x1c>
    1fea:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    1fee:	20 f0       	brcs	.+8      	; 0x1ff8 <__mulsf3+0x1c>
    1ff0:	95 23       	and	r25, r21
    1ff2:	11 f0       	breq	.+4      	; 0x1ff8 <__mulsf3+0x1c>
    1ff4:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    1ff8:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    1ffc:	11 24       	eor	r1, r1
    1ffe:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>

00002002 <__mulsf3x>:
    2002:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    2006:	70 f3       	brcs	.-36     	; 0x1fe4 <__mulsf3+0x8>

00002008 <__mulsf3_pse>:
    2008:	95 9f       	mul	r25, r21
    200a:	c1 f3       	breq	.-16     	; 0x1ffc <__mulsf3+0x20>
    200c:	95 0f       	add	r25, r21
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	55 1f       	adc	r21, r21
    2012:	62 9f       	mul	r22, r18
    2014:	f0 01       	movw	r30, r0
    2016:	72 9f       	mul	r23, r18
    2018:	bb 27       	eor	r27, r27
    201a:	f0 0d       	add	r31, r0
    201c:	b1 1d       	adc	r27, r1
    201e:	63 9f       	mul	r22, r19
    2020:	aa 27       	eor	r26, r26
    2022:	f0 0d       	add	r31, r0
    2024:	b1 1d       	adc	r27, r1
    2026:	aa 1f       	adc	r26, r26
    2028:	64 9f       	mul	r22, r20
    202a:	66 27       	eor	r22, r22
    202c:	b0 0d       	add	r27, r0
    202e:	a1 1d       	adc	r26, r1
    2030:	66 1f       	adc	r22, r22
    2032:	82 9f       	mul	r24, r18
    2034:	22 27       	eor	r18, r18
    2036:	b0 0d       	add	r27, r0
    2038:	a1 1d       	adc	r26, r1
    203a:	62 1f       	adc	r22, r18
    203c:	73 9f       	mul	r23, r19
    203e:	b0 0d       	add	r27, r0
    2040:	a1 1d       	adc	r26, r1
    2042:	62 1f       	adc	r22, r18
    2044:	83 9f       	mul	r24, r19
    2046:	a0 0d       	add	r26, r0
    2048:	61 1d       	adc	r22, r1
    204a:	22 1f       	adc	r18, r18
    204c:	74 9f       	mul	r23, r20
    204e:	33 27       	eor	r19, r19
    2050:	a0 0d       	add	r26, r0
    2052:	61 1d       	adc	r22, r1
    2054:	23 1f       	adc	r18, r19
    2056:	84 9f       	mul	r24, r20
    2058:	60 0d       	add	r22, r0
    205a:	21 1d       	adc	r18, r1
    205c:	82 2f       	mov	r24, r18
    205e:	76 2f       	mov	r23, r22
    2060:	6a 2f       	mov	r22, r26
    2062:	11 24       	eor	r1, r1
    2064:	9f 57       	subi	r25, 0x7F	; 127
    2066:	50 40       	sbci	r21, 0x00	; 0
    2068:	9a f0       	brmi	.+38     	; 0x2090 <__mulsf3_pse+0x88>
    206a:	f1 f0       	breq	.+60     	; 0x20a8 <__mulsf3_pse+0xa0>
    206c:	88 23       	and	r24, r24
    206e:	4a f0       	brmi	.+18     	; 0x2082 <__mulsf3_pse+0x7a>
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	bb 1f       	adc	r27, r27
    2076:	66 1f       	adc	r22, r22
    2078:	77 1f       	adc	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	91 50       	subi	r25, 0x01	; 1
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	a9 f7       	brne	.-22     	; 0x206c <__mulsf3_pse+0x64>
    2082:	9e 3f       	cpi	r25, 0xFE	; 254
    2084:	51 05       	cpc	r21, r1
    2086:	80 f0       	brcs	.+32     	; 0x20a8 <__mulsf3_pse+0xa0>
    2088:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    208c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    2090:	5f 3f       	cpi	r21, 0xFF	; 255
    2092:	e4 f3       	brlt	.-8      	; 0x208c <__mulsf3_pse+0x84>
    2094:	98 3e       	cpi	r25, 0xE8	; 232
    2096:	d4 f3       	brlt	.-12     	; 0x208c <__mulsf3_pse+0x84>
    2098:	86 95       	lsr	r24
    209a:	77 95       	ror	r23
    209c:	67 95       	ror	r22
    209e:	b7 95       	ror	r27
    20a0:	f7 95       	ror	r31
    20a2:	e7 95       	ror	r30
    20a4:	9f 5f       	subi	r25, 0xFF	; 255
    20a6:	c1 f7       	brne	.-16     	; 0x2098 <__mulsf3_pse+0x90>
    20a8:	fe 2b       	or	r31, r30
    20aa:	88 0f       	add	r24, r24
    20ac:	91 1d       	adc	r25, r1
    20ae:	96 95       	lsr	r25
    20b0:	87 95       	ror	r24
    20b2:	97 f9       	bld	r25, 7
    20b4:	08 95       	ret

000020b6 <pow>:
    20b6:	fa 01       	movw	r30, r20
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	30 96       	adiw	r30, 0x00	; 0
    20be:	21 05       	cpc	r18, r1
    20c0:	31 05       	cpc	r19, r1
    20c2:	a1 f1       	breq	.+104    	; 0x212c <pow+0x76>
    20c4:	61 15       	cp	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	61 f4       	brne	.+24     	; 0x20e2 <pow+0x2c>
    20ca:	80 38       	cpi	r24, 0x80	; 128
    20cc:	bf e3       	ldi	r27, 0x3F	; 63
    20ce:	9b 07       	cpc	r25, r27
    20d0:	49 f1       	breq	.+82     	; 0x2124 <pow+0x6e>
    20d2:	68 94       	set
    20d4:	90 38       	cpi	r25, 0x80	; 128
    20d6:	81 05       	cpc	r24, r1
    20d8:	61 f0       	breq	.+24     	; 0x20f2 <pow+0x3c>
    20da:	80 38       	cpi	r24, 0x80	; 128
    20dc:	bf ef       	ldi	r27, 0xFF	; 255
    20de:	9b 07       	cpc	r25, r27
    20e0:	41 f0       	breq	.+16     	; 0x20f2 <pow+0x3c>
    20e2:	99 23       	and	r25, r25
    20e4:	4a f5       	brpl	.+82     	; 0x2138 <pow+0x82>
    20e6:	ff 3f       	cpi	r31, 0xFF	; 255
    20e8:	e1 05       	cpc	r30, r1
    20ea:	31 05       	cpc	r19, r1
    20ec:	21 05       	cpc	r18, r1
    20ee:	19 f1       	breq	.+70     	; 0x2136 <pow+0x80>
    20f0:	e8 94       	clt
    20f2:	08 94       	sec
    20f4:	e7 95       	ror	r30
    20f6:	d9 01       	movw	r26, r18
    20f8:	aa 23       	and	r26, r26
    20fa:	29 f4       	brne	.+10     	; 0x2106 <pow+0x50>
    20fc:	ab 2f       	mov	r26, r27
    20fe:	be 2f       	mov	r27, r30
    2100:	f8 5f       	subi	r31, 0xF8	; 248
    2102:	d0 f3       	brcs	.-12     	; 0x20f8 <pow+0x42>
    2104:	10 c0       	rjmp	.+32     	; 0x2126 <pow+0x70>
    2106:	ff 5f       	subi	r31, 0xFF	; 255
    2108:	70 f4       	brcc	.+28     	; 0x2126 <pow+0x70>
    210a:	a6 95       	lsr	r26
    210c:	e0 f7       	brcc	.-8      	; 0x2106 <pow+0x50>
    210e:	f7 39       	cpi	r31, 0x97	; 151
    2110:	50 f0       	brcs	.+20     	; 0x2126 <pow+0x70>
    2112:	19 f0       	breq	.+6      	; 0x211a <pow+0x64>
    2114:	ff 3a       	cpi	r31, 0xAF	; 175
    2116:	38 f4       	brcc	.+14     	; 0x2126 <pow+0x70>
    2118:	9f 77       	andi	r25, 0x7F	; 127
    211a:	9f 93       	push	r25
    211c:	0d d0       	rcall	.+26     	; 0x2138 <pow+0x82>
    211e:	0f 90       	pop	r0
    2120:	07 fc       	sbrc	r0, 7
    2122:	90 58       	subi	r25, 0x80	; 128
    2124:	08 95       	ret
    2126:	46 f0       	brts	.+16     	; 0x2138 <pow+0x82>
    2128:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	80 e8       	ldi	r24, 0x80	; 128
    2132:	9f e3       	ldi	r25, 0x3F	; 63
    2134:	08 95       	ret
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	9f 77       	andi	r25, 0x7F	; 127
    213a:	5f 93       	push	r21
    213c:	4f 93       	push	r20
    213e:	3f 93       	push	r19
    2140:	2f 93       	push	r18
    2142:	0e 94 56 11 	call	0x22ac	; 0x22ac <log>
    2146:	2f 91       	pop	r18
    2148:	3f 91       	pop	r19
    214a:	4f 91       	pop	r20
    214c:	5f 91       	pop	r21
    214e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3>
    2152:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <exp>
    2156:	29 f4       	brne	.+10     	; 0x2162 <pow+0xac>
    2158:	16 f0       	brts	.+4      	; 0x215e <pow+0xa8>
    215a:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    215e:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_zero>
    2162:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>

00002166 <exp>:
    2166:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_splitA>
    216a:	a8 f3       	brcs	.-22     	; 0x2156 <pow+0xa0>
    216c:	96 38       	cpi	r25, 0x86	; 134
    216e:	a0 f7       	brcc	.-24     	; 0x2158 <pow+0xa2>
    2170:	07 f8       	bld	r0, 7
    2172:	0f 92       	push	r0
    2174:	e8 94       	clt
    2176:	2b e3       	ldi	r18, 0x3B	; 59
    2178:	3a ea       	ldi	r19, 0xAA	; 170
    217a:	48 eb       	ldi	r20, 0xB8	; 184
    217c:	5f e7       	ldi	r21, 0x7F	; 127
    217e:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3_pse>
    2182:	0f 92       	push	r0
    2184:	0f 92       	push	r0
    2186:	0f 92       	push	r0
    2188:	4d b7       	in	r20, 0x3d	; 61
    218a:	5e b7       	in	r21, 0x3e	; 62
    218c:	0f 92       	push	r0
    218e:	0e 94 9e 11 	call	0x233c	; 0x233c <modf>
    2192:	e8 e6       	ldi	r30, 0x68	; 104
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__fp_powser>
    219a:	4f 91       	pop	r20
    219c:	5f 91       	pop	r21
    219e:	ef 91       	pop	r30
    21a0:	ff 91       	pop	r31
    21a2:	e5 95       	asr	r30
    21a4:	ee 1f       	adc	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	49 f0       	breq	.+18     	; 0x21bc <exp+0x56>
    21aa:	fe 57       	subi	r31, 0x7E	; 126
    21ac:	e0 68       	ori	r30, 0x80	; 128
    21ae:	44 27       	eor	r20, r20
    21b0:	ee 0f       	add	r30, r30
    21b2:	44 1f       	adc	r20, r20
    21b4:	fa 95       	dec	r31
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <exp+0x4a>
    21b8:	41 95       	neg	r20
    21ba:	55 0b       	sbc	r21, r21
    21bc:	0e 94 18 11 	call	0x2230	; 0x2230 <ldexp>
    21c0:	0f 90       	pop	r0
    21c2:	07 fe       	sbrs	r0, 7
    21c4:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <inverse>
    21c8:	08 95       	ret

000021ca <__fp_powser>:
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	1f 93       	push	r17
    21d0:	0f 93       	push	r16
    21d2:	ff 92       	push	r15
    21d4:	ef 92       	push	r14
    21d6:	df 92       	push	r13
    21d8:	7b 01       	movw	r14, r22
    21da:	8c 01       	movw	r16, r24
    21dc:	68 94       	set
    21de:	06 c0       	rjmp	.+12     	; 0x21ec <__fp_powser+0x22>
    21e0:	da 2e       	mov	r13, r26
    21e2:	ef 01       	movw	r28, r30
    21e4:	0e 94 01 10 	call	0x2002	; 0x2002 <__mulsf3x>
    21e8:	fe 01       	movw	r30, r28
    21ea:	e8 94       	clt
    21ec:	a5 91       	lpm	r26, Z+
    21ee:	25 91       	lpm	r18, Z+
    21f0:	35 91       	lpm	r19, Z+
    21f2:	45 91       	lpm	r20, Z+
    21f4:	55 91       	lpm	r21, Z+
    21f6:	a6 f3       	brts	.-24     	; 0x21e0 <__fp_powser+0x16>
    21f8:	ef 01       	movw	r28, r30
    21fa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__addsf3x>
    21fe:	fe 01       	movw	r30, r28
    2200:	97 01       	movw	r18, r14
    2202:	a8 01       	movw	r20, r16
    2204:	da 94       	dec	r13
    2206:	69 f7       	brne	.-38     	; 0x21e2 <__fp_powser+0x18>
    2208:	df 90       	pop	r13
    220a:	ef 90       	pop	r14
    220c:	ff 90       	pop	r15
    220e:	0f 91       	pop	r16
    2210:	1f 91       	pop	r17
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <inverse>:
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	80 e8       	ldi	r24, 0x80	; 128
    2222:	9f e3       	ldi	r25, 0x3F	; 63
    2224:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <__divsf3>
    2228:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    222c:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_mpack>

00002230 <ldexp>:
    2230:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_splitA>
    2234:	d8 f3       	brcs	.-10     	; 0x222c <inverse+0x14>
    2236:	99 23       	and	r25, r25
    2238:	c9 f3       	breq	.-14     	; 0x222c <inverse+0x14>
    223a:	94 0f       	add	r25, r20
    223c:	51 1d       	adc	r21, r1
    223e:	a3 f3       	brvs	.-24     	; 0x2228 <inverse+0x10>
    2240:	91 50       	subi	r25, 0x01	; 1
    2242:	50 40       	sbci	r21, 0x00	; 0
    2244:	94 f0       	brlt	.+36     	; 0x226a <ldexp+0x3a>
    2246:	59 f0       	breq	.+22     	; 0x225e <ldexp+0x2e>
    2248:	88 23       	and	r24, r24
    224a:	32 f0       	brmi	.+12     	; 0x2258 <ldexp+0x28>
    224c:	66 0f       	add	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	91 50       	subi	r25, 0x01	; 1
    2254:	50 40       	sbci	r21, 0x00	; 0
    2256:	c1 f7       	brne	.-16     	; 0x2248 <ldexp+0x18>
    2258:	9e 3f       	cpi	r25, 0xFE	; 254
    225a:	51 05       	cpc	r21, r1
    225c:	2c f7       	brge	.-54     	; 0x2228 <inverse+0x10>
    225e:	88 0f       	add	r24, r24
    2260:	91 1d       	adc	r25, r1
    2262:	96 95       	lsr	r25
    2264:	87 95       	ror	r24
    2266:	97 f9       	bld	r25, 7
    2268:	08 95       	ret
    226a:	5f 3f       	cpi	r21, 0xFF	; 255
    226c:	ac f0       	brlt	.+42     	; 0x2298 <ldexp+0x68>
    226e:	98 3e       	cpi	r25, 0xE8	; 232
    2270:	9c f0       	brlt	.+38     	; 0x2298 <ldexp+0x68>
    2272:	bb 27       	eor	r27, r27
    2274:	86 95       	lsr	r24
    2276:	77 95       	ror	r23
    2278:	67 95       	ror	r22
    227a:	b7 95       	ror	r27
    227c:	08 f4       	brcc	.+2      	; 0x2280 <ldexp+0x50>
    227e:	b1 60       	ori	r27, 0x01	; 1
    2280:	93 95       	inc	r25
    2282:	c1 f7       	brne	.-16     	; 0x2274 <ldexp+0x44>
    2284:	bb 0f       	add	r27, r27
    2286:	58 f7       	brcc	.-42     	; 0x225e <ldexp+0x2e>
    2288:	11 f4       	brne	.+4      	; 0x228e <ldexp+0x5e>
    228a:	60 ff       	sbrs	r22, 0
    228c:	e8 cf       	rjmp	.-48     	; 0x225e <ldexp+0x2e>
    228e:	6f 5f       	subi	r22, 0xFF	; 255
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	8f 4f       	sbci	r24, 0xFF	; 255
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	e3 cf       	rjmp	.-58     	; 0x225e <ldexp+0x2e>
    2298:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    229c:	16 f0       	brts	.+4      	; 0x22a2 <ldexp+0x72>
    229e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_mpack>
    22a2:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    22a6:	68 94       	set
    22a8:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>

000022ac <log>:
    22ac:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_splitA>
    22b0:	a8 f3       	brcs	.-22     	; 0x229c <ldexp+0x6c>
    22b2:	99 23       	and	r25, r25
    22b4:	c1 f3       	breq	.-16     	; 0x22a6 <ldexp+0x76>
    22b6:	ae f3       	brts	.-22     	; 0x22a2 <ldexp+0x72>
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	1f 93       	push	r17
    22be:	0f 93       	push	r16
    22c0:	ff 92       	push	r15
    22c2:	c9 2f       	mov	r28, r25
    22c4:	dd 27       	eor	r29, r29
    22c6:	88 23       	and	r24, r24
    22c8:	2a f0       	brmi	.+10     	; 0x22d4 <log+0x28>
    22ca:	21 97       	sbiw	r28, 0x01	; 1
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	da f7       	brpl	.-10     	; 0x22ca <log+0x1e>
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f eb       	ldi	r21, 0xBF	; 191
    22dc:	9f e3       	ldi	r25, 0x3F	; 63
    22de:	88 39       	cpi	r24, 0x98	; 152
    22e0:	20 f0       	brcs	.+8      	; 0x22ea <log+0x3e>
    22e2:	80 3e       	cpi	r24, 0xE0	; 224
    22e4:	38 f0       	brcs	.+14     	; 0x22f4 <log+0x48>
    22e6:	21 96       	adiw	r28, 0x01	; 1
    22e8:	8f 77       	andi	r24, 0x7F	; 127
    22ea:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__addsf3>
    22ee:	e0 e9       	ldi	r30, 0x90	; 144
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <log+0x50>
    22f4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__addsf3>
    22f8:	ed eb       	ldi	r30, 0xBD	; 189
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__fp_powser>
    2300:	8b 01       	movw	r16, r22
    2302:	be 01       	movw	r22, r28
    2304:	ec 01       	movw	r28, r24
    2306:	fb 2e       	mov	r15, r27
    2308:	6f 57       	subi	r22, 0x7F	; 127
    230a:	71 09       	sbc	r23, r1
    230c:	75 95       	asr	r23
    230e:	77 1f       	adc	r23, r23
    2310:	88 0b       	sbc	r24, r24
    2312:	99 0b       	sbc	r25, r25
    2314:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
    2318:	28 e1       	ldi	r18, 0x18	; 24
    231a:	32 e7       	ldi	r19, 0x72	; 114
    231c:	41 e3       	ldi	r20, 0x31	; 49
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 01 10 	call	0x2002	; 0x2002 <__mulsf3x>
    2324:	af 2d       	mov	r26, r15
    2326:	98 01       	movw	r18, r16
    2328:	ae 01       	movw	r20, r28
    232a:	ff 90       	pop	r15
    232c:	0f 91       	pop	r16
    232e:	1f 91       	pop	r17
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__addsf3x>
    2338:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>

0000233c <modf>:
    233c:	fa 01       	movw	r30, r20
    233e:	dc 01       	movw	r26, r24
    2340:	aa 0f       	add	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	bf 57       	subi	r27, 0x7F	; 127
    234a:	28 f4       	brcc	.+10     	; 0x2356 <modf+0x1a>
    234c:	22 27       	eor	r18, r18
    234e:	33 27       	eor	r19, r19
    2350:	44 27       	eor	r20, r20
    2352:	50 78       	andi	r21, 0x80	; 128
    2354:	20 c0       	rjmp	.+64     	; 0x2396 <modf+0x5a>
    2356:	b7 51       	subi	r27, 0x17	; 23
    2358:	90 f4       	brcc	.+36     	; 0x237e <modf+0x42>
    235a:	ab 2f       	mov	r26, r27
    235c:	00 24       	eor	r0, r0
    235e:	46 95       	lsr	r20
    2360:	37 95       	ror	r19
    2362:	27 95       	ror	r18
    2364:	01 1c       	adc	r0, r1
    2366:	a3 95       	inc	r26
    2368:	d2 f3       	brmi	.-12     	; 0x235e <modf+0x22>
    236a:	00 20       	and	r0, r0
    236c:	71 f0       	breq	.+28     	; 0x238a <modf+0x4e>
    236e:	22 0f       	add	r18, r18
    2370:	33 1f       	adc	r19, r19
    2372:	44 1f       	adc	r20, r20
    2374:	b3 95       	inc	r27
    2376:	da f3       	brmi	.-10     	; 0x236e <modf+0x32>
    2378:	0e d0       	rcall	.+28     	; 0x2396 <modf+0x5a>
    237a:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__subsf3>
    237e:	61 30       	cpi	r22, 0x01	; 1
    2380:	71 05       	cpc	r23, r1
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	8a 07       	cpc	r24, r26
    2386:	b9 46       	sbci	r27, 0x69	; 105
    2388:	30 f4       	brcc	.+12     	; 0x2396 <modf+0x5a>
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	66 27       	eor	r22, r22
    2390:	77 27       	eor	r23, r23
    2392:	88 27       	eor	r24, r24
    2394:	90 78       	andi	r25, 0x80	; 128
    2396:	30 96       	adiw	r30, 0x00	; 0
    2398:	21 f0       	breq	.+8      	; 0x23a2 <modf+0x66>
    239a:	20 83       	st	Z, r18
    239c:	31 83       	std	Z+1, r19	; 0x01
    239e:	42 83       	std	Z+2, r20	; 0x02
    23a0:	53 83       	std	Z+3, r21	; 0x03
    23a2:	08 95       	ret

000023a4 <__fp_mpack>:
    23a4:	9f 3f       	cpi	r25, 0xFF	; 255
    23a6:	31 f0       	breq	.+12     	; 0x23b4 <__fp_mpack_finite+0xc>

000023a8 <__fp_mpack_finite>:
    23a8:	91 50       	subi	r25, 0x01	; 1
    23aa:	20 f4       	brcc	.+8      	; 0x23b4 <__fp_mpack_finite+0xc>
    23ac:	87 95       	ror	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	b7 95       	ror	r27
    23b4:	88 0f       	add	r24, r24
    23b6:	91 1d       	adc	r25, r1
    23b8:	96 95       	lsr	r25
    23ba:	87 95       	ror	r24
    23bc:	97 f9       	bld	r25, 7
    23be:	08 95       	ret

000023c0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    23c0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    23c2:	91 8d       	ldd	r25, Z+25	; 0x19
    23c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    23c6:	89 2f       	mov	r24, r25
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	80 5c       	subi	r24, 0xC0	; 192
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	82 1b       	sub	r24, r18
    23d0:	91 09       	sbc	r25, r1
}
    23d2:	8f 73       	andi	r24, 0x3F	; 63
    23d4:	99 27       	eor	r25, r25
    23d6:	08 95       	ret

000023d8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    23d8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    23da:	91 8d       	ldd	r25, Z+25	; 0x19
    23dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    23de:	98 17       	cp	r25, r24
    23e0:	31 f0       	breq	.+12     	; 0x23ee <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    23e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e4:	e8 0f       	add	r30, r24
    23e6:	f1 1d       	adc	r31, r1
    23e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    23f2:	08 95       	ret

000023f4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    23f4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    23f6:	91 8d       	ldd	r25, Z+25	; 0x19
    23f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23fa:	98 17       	cp	r25, r24
    23fc:	61 f0       	breq	.+24     	; 0x2416 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    23fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2400:	df 01       	movw	r26, r30
    2402:	a8 0f       	add	r26, r24
    2404:	b1 1d       	adc	r27, r1
    2406:	5d 96       	adiw	r26, 0x1d	; 29
    2408:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    240a:	92 8d       	ldd	r25, Z+26	; 0x1a
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	9f 73       	andi	r25, 0x3F	; 63
    2410:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    241a:	08 95       	ret

0000241c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    241c:	fc 01       	movw	r30, r24
    241e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2420:	44 8d       	ldd	r20, Z+28	; 0x1c
    2422:	25 2f       	mov	r18, r21
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	84 2f       	mov	r24, r20
    2428:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    242a:	82 1b       	sub	r24, r18
    242c:	93 0b       	sbc	r25, r19
    242e:	54 17       	cp	r21, r20
    2430:	10 f0       	brcs	.+4      	; 0x2436 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2432:	cf 96       	adiw	r24, 0x3f	; 63
    2434:	08 95       	ret
  return tail - head - 1;
    2436:	01 97       	sbiw	r24, 0x01	; 1
}
    2438:	08 95       	ret

0000243a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    243a:	88 e7       	ldi	r24, 0x78	; 120
    243c:	93 e1       	ldi	r25, 0x13	; 19
    243e:	89 2b       	or	r24, r25
    2440:	49 f0       	breq	.+18     	; 0x2454 <_Z14serialEventRunv+0x1a>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	89 2b       	or	r24, r25
    2448:	29 f0       	breq	.+10     	; 0x2454 <_Z14serialEventRunv+0x1a>
    244a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_Z17Serial0_availablev>
    244e:	81 11       	cpse	r24, r1
    2450:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2454:	08 95       	ret

00002456 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2456:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2458:	84 8d       	ldd	r24, Z+28	; 0x1c
    245a:	df 01       	movw	r26, r30
    245c:	a8 0f       	add	r26, r24
    245e:	b1 1d       	adc	r27, r1
    2460:	a3 5a       	subi	r26, 0xA3	; 163
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2466:	84 8d       	ldd	r24, Z+28	; 0x1c
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	8f 73       	andi	r24, 0x3F	; 63
    246e:	99 27       	eor	r25, r25
    2470:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2472:	a6 89       	ldd	r26, Z+22	; 0x16
    2474:	b7 89       	ldd	r27, Z+23	; 0x17
    2476:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2478:	a0 89       	ldd	r26, Z+16	; 0x10
    247a:	b1 89       	ldd	r27, Z+17	; 0x11
    247c:	8c 91       	ld	r24, X
    247e:	83 70       	andi	r24, 0x03	; 3
    2480:	80 64       	ori	r24, 0x40	; 64
    2482:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2484:	93 8d       	ldd	r25, Z+27	; 0x1b
    2486:	84 8d       	ldd	r24, Z+28	; 0x1c
    2488:	98 13       	cpse	r25, r24
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    248c:	02 88       	ldd	r0, Z+18	; 0x12
    248e:	f3 89       	ldd	r31, Z+19	; 0x13
    2490:	e0 2d       	mov	r30, r0
    2492:	80 81       	ld	r24, Z
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 83       	st	Z, r24
    2498:	08 95       	ret

0000249a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	ec 01       	movw	r28, r24
  _written = true;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    24ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b0:	98 13       	cpse	r25, r24
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <_ZN14HardwareSerial5writeEh+0x24>
    24b4:	e8 89       	ldd	r30, Y+16	; 0x10
    24b6:	f9 89       	ldd	r31, Y+17	; 0x11
    24b8:	80 81       	ld	r24, Z
    24ba:	85 fd       	sbrc	r24, 5
    24bc:	26 c0       	rjmp	.+76     	; 0x250a <_ZN14HardwareSerial5writeEh+0x70>
    24be:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    24c0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    24c2:	10 e0       	ldi	r17, 0x00	; 0
    24c4:	0f 5f       	subi	r16, 0xFF	; 255
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	0f 73       	andi	r16, 0x3F	; 63
    24ca:	11 27       	eor	r17, r17
    24cc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    24ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24d0:	e8 12       	cpse	r14, r24
    24d2:	0c c0       	rjmp	.+24     	; 0x24ec <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	07 fc       	sbrc	r0, 7
    24d8:	fa cf       	rjmp	.-12     	; 0x24ce <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    24da:	e8 89       	ldd	r30, Y+16	; 0x10
    24dc:	f9 89       	ldd	r31, Y+17	; 0x11
    24de:	80 81       	ld	r24, Z
    24e0:	85 ff       	sbrs	r24, 5
    24e2:	f5 cf       	rjmp	.-22     	; 0x24ce <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    24e4:	ce 01       	movw	r24, r28
    24e6:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    24ea:	f1 cf       	rjmp	.-30     	; 0x24ce <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	fe 01       	movw	r30, r28
    24f0:	e8 0f       	add	r30, r24
    24f2:	f1 1d       	adc	r31, r1
    24f4:	e3 5a       	subi	r30, 0xA3	; 163
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    24fa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24fc:	f8 94       	cli
    _tx_buffer_head = i;
    24fe:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2500:	ea 89       	ldd	r30, Y+18	; 0x12
    2502:	fb 89       	ldd	r31, Y+19	; 0x13
    2504:	80 81       	ld	r24, Z
    2506:	80 62       	ori	r24, 0x20	; 32
    2508:	0a c0       	rjmp	.+20     	; 0x251e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    250a:	9f b7       	in	r25, 0x3f	; 63
    250c:	f8 94       	cli
      *_udr = c;
    250e:	ee 89       	ldd	r30, Y+22	; 0x16
    2510:	ff 89       	ldd	r31, Y+23	; 0x17
    2512:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2514:	e8 89       	ldd	r30, Y+16	; 0x10
    2516:	f9 89       	ldd	r31, Y+17	; 0x11
    2518:	80 81       	ld	r24, Z
    251a:	83 70       	andi	r24, 0x03	; 3
    251c:	80 64       	ori	r24, 0x40	; 64
    251e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2520:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    253a:	88 8d       	ldd	r24, Y+24	; 0x18
    253c:	88 23       	and	r24, r24
    253e:	c9 f0       	breq	.+50     	; 0x2572 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2540:	ea 89       	ldd	r30, Y+18	; 0x12
    2542:	fb 89       	ldd	r31, Y+19	; 0x13
    2544:	80 81       	ld	r24, Z
    2546:	85 fd       	sbrc	r24, 5
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <_ZN14HardwareSerial5flushEv+0x20>
    254a:	a8 89       	ldd	r26, Y+16	; 0x10
    254c:	b9 89       	ldd	r27, Y+17	; 0x11
    254e:	8c 91       	ld	r24, X
    2550:	86 fd       	sbrc	r24, 6
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	07 fc       	sbrc	r0, 7
    2558:	f5 cf       	rjmp	.-22     	; 0x2544 <_ZN14HardwareSerial5flushEv+0x10>
    255a:	80 81       	ld	r24, Z
    255c:	85 ff       	sbrs	r24, 5
    255e:	f2 cf       	rjmp	.-28     	; 0x2544 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2560:	a8 89       	ldd	r26, Y+16	; 0x10
    2562:	b9 89       	ldd	r27, Y+17	; 0x11
    2564:	8c 91       	ld	r24, X
    2566:	85 ff       	sbrs	r24, 5
    2568:	ed cf       	rjmp	.-38     	; 0x2544 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    256a:	ce 01       	movw	r24, r28
    256c:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2570:	e7 cf       	rjmp	.-50     	; 0x2540 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
    2588:	6a 01       	movw	r12, r20
    258a:	7b 01       	movw	r14, r22
    258c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    258e:	60 e8       	ldi	r22, 0x80	; 128
    2590:	74 e8       	ldi	r23, 0x84	; 132
    2592:	8e e1       	ldi	r24, 0x1E	; 30
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a7 01       	movw	r20, r14
    2598:	96 01       	movw	r18, r12
    259a:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__udivmodsi4>
    259e:	da 01       	movw	r26, r20
    25a0:	c9 01       	movw	r24, r18
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	a1 09       	sbc	r26, r1
    25a6:	b1 09       	sbc	r27, r1
    25a8:	b6 95       	lsr	r27
    25aa:	a7 95       	ror	r26
    25ac:	97 95       	ror	r25
    25ae:	87 95       	ror	r24
    25b0:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    25b2:	e8 89       	ldd	r30, Y+16	; 0x10
    25b4:	f9 89       	ldd	r31, Y+17	; 0x11
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    25ba:	21 15       	cp	r18, r1
    25bc:	80 e1       	ldi	r24, 0x10	; 16
    25be:	38 07       	cpc	r19, r24
    25c0:	a8 f0       	brcs	.+42     	; 0x25ec <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    25c2:	e8 89       	ldd	r30, Y+16	; 0x10
    25c4:	f9 89       	ldd	r31, Y+17	; 0x11
    25c6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    25c8:	60 e4       	ldi	r22, 0x40	; 64
    25ca:	72 e4       	ldi	r23, 0x42	; 66
    25cc:	8f e0       	ldi	r24, 0x0F	; 15
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a7 01       	movw	r20, r14
    25d2:	96 01       	movw	r18, r12
    25d4:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__udivmodsi4>
    25d8:	da 01       	movw	r26, r20
    25da:	c9 01       	movw	r24, r18
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	a1 09       	sbc	r26, r1
    25e0:	b1 09       	sbc	r27, r1
    25e2:	b6 95       	lsr	r27
    25e4:	a7 95       	ror	r26
    25e6:	97 95       	ror	r25
    25e8:	87 95       	ror	r24
    25ea:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    25ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    25ee:	fd 85       	ldd	r31, Y+13	; 0x0d
    25f0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    25f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    25f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    25f6:	20 83       	st	Z, r18

  _written = false;
    25f8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    25fa:	ec 89       	ldd	r30, Y+20	; 0x14
    25fc:	fd 89       	ldd	r31, Y+21	; 0x15
    25fe:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2600:	ea 89       	ldd	r30, Y+18	; 0x12
    2602:	fb 89       	ldd	r31, Y+19	; 0x13
    2604:	80 81       	ld	r24, Z
    2606:	80 61       	ori	r24, 0x10	; 16
    2608:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    260a:	ea 89       	ldd	r30, Y+18	; 0x12
    260c:	fb 89       	ldd	r31, Y+19	; 0x13
    260e:	80 81       	ld	r24, Z
    2610:	88 60       	ori	r24, 0x08	; 8
    2612:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2614:	ea 89       	ldd	r30, Y+18	; 0x12
    2616:	fb 89       	ldd	r31, Y+19	; 0x13
    2618:	80 81       	ld	r24, Z
    261a:	80 68       	ori	r24, 0x80	; 128
    261c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    261e:	ea 89       	ldd	r30, Y+18	; 0x12
    2620:	fb 89       	ldd	r31, Y+19	; 0x13
    2622:	80 81       	ld	r24, Z
    2624:	8f 7d       	andi	r24, 0xDF	; 223
    2626:	80 83       	st	Z, r24
}
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	08 95       	ret

00002638 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	08 95       	ret

0000263e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    263e:	08 95       	ret

00002640 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	2f 93       	push	r18
    264c:	8f 93       	push	r24
    264e:	9f 93       	push	r25
    2650:	ef 93       	push	r30
    2652:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2654:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <Serial+0x10>
    2658:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <Serial+0x11>
    265c:	80 81       	ld	r24, Z
    265e:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <Serial+0x16>
    2662:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <Serial+0x17>
    2666:	82 fd       	sbrc	r24, 2
    2668:	12 c0       	rjmp	.+36     	; 0x268e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    266a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    266c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Serial+0x19>
    2670:	8f 5f       	subi	r24, 0xFF	; 255
    2672:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2674:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <Serial+0x1a>
    2678:	82 17       	cp	r24, r18
    267a:	51 f0       	breq	.+20     	; 0x2690 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    267c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <Serial+0x19>
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	e3 52       	subi	r30, 0x23	; 35
    2684:	fd 4f       	sbci	r31, 0xFD	; 253
    2686:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2688:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Serial+0x19>
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    268e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	9f 91       	pop	r25
    2696:	8f 91       	pop	r24
    2698:	2f 91       	pop	r18
    269a:	0f 90       	pop	r0
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	0f 90       	pop	r0
    26a0:	1f 90       	pop	r1
    26a2:	18 95       	reti

000026a4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    26a4:	1f 92       	push	r1
    26a6:	0f 92       	push	r0
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	0f 92       	push	r0
    26ac:	11 24       	eor	r1, r1
    26ae:	2f 93       	push	r18
    26b0:	3f 93       	push	r19
    26b2:	4f 93       	push	r20
    26b4:	5f 93       	push	r21
    26b6:	6f 93       	push	r22
    26b8:	7f 93       	push	r23
    26ba:	8f 93       	push	r24
    26bc:	9f 93       	push	r25
    26be:	af 93       	push	r26
    26c0:	bf 93       	push	r27
    26c2:	ef 93       	push	r30
    26c4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    26c6:	8d ed       	ldi	r24, 0xDD	; 221
    26c8:	92 e0       	ldi	r25, 0x02	; 2
    26ca:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    26f0:	8d ed       	ldi	r24, 0xDD	; 221
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN14HardwareSerial9availableEv>
    26f8:	21 e0       	ldi	r18, 0x01	; 1
    26fa:	89 2b       	or	r24, r25
    26fc:	09 f4       	brne	.+2      	; 0x2700 <_Z17Serial0_availablev+0x10>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
}
    2700:	82 2f       	mov	r24, r18
    2702:	08 95       	ret

00002704 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2704:	ed ed       	ldi	r30, 0xDD	; 221
    2706:	f2 e0       	ldi	r31, 0x02	; 2
    2708:	13 82       	std	Z+3, r1	; 0x03
    270a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    270c:	88 ee       	ldi	r24, 0xE8	; 232
    270e:	93 e0       	ldi	r25, 0x03	; 3
    2710:	a0 e0       	ldi	r26, 0x00	; 0
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	84 83       	std	Z+4, r24	; 0x04
    2716:	95 83       	std	Z+5, r25	; 0x05
    2718:	a6 83       	std	Z+6, r26	; 0x06
    271a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    271c:	8c e4       	ldi	r24, 0x4C	; 76
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	85 ec       	ldi	r24, 0xC5	; 197
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	95 87       	std	Z+13, r25	; 0x0d
    272a:	84 87       	std	Z+12, r24	; 0x0c
    272c:	84 ec       	ldi	r24, 0xC4	; 196
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	97 87       	std	Z+15, r25	; 0x0f
    2732:	86 87       	std	Z+14, r24	; 0x0e
    2734:	80 ec       	ldi	r24, 0xC0	; 192
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	91 8b       	std	Z+17, r25	; 0x11
    273a:	80 8b       	std	Z+16, r24	; 0x10
    273c:	81 ec       	ldi	r24, 0xC1	; 193
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	93 8b       	std	Z+19, r25	; 0x13
    2742:	82 8b       	std	Z+18, r24	; 0x12
    2744:	82 ec       	ldi	r24, 0xC2	; 194
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	95 8b       	std	Z+21, r25	; 0x15
    274a:	84 8b       	std	Z+20, r24	; 0x14
    274c:	86 ec       	ldi	r24, 0xC6	; 198
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	97 8b       	std	Z+23, r25	; 0x17
    2752:	86 8b       	std	Z+22, r24	; 0x16
    2754:	11 8e       	std	Z+25, r1	; 0x19
    2756:	12 8e       	std	Z+26, r1	; 0x1a
    2758:	13 8e       	std	Z+27, r1	; 0x1b
    275a:	14 8e       	std	Z+28, r1	; 0x1c
    275c:	08 95       	ret

0000275e <initVariant>:
    275e:	08 95       	ret

00002760 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2760:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <init>

	initVariant();
    2764:	0e 94 af 13 	call	0x275e	; 0x275e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2768:	0e 94 14 0c 	call	0x1828	; 0x1828 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    276c:	cd e1       	ldi	r28, 0x1D	; 29
    276e:	d2 e1       	ldi	r29, 0x12	; 18
#endif
	
	setup();
    
	for (;;) {
		loop();
    2770:	0e 94 4f 0c 	call	0x189e	; 0x189e <loop>
		if (serialEventRun) serialEventRun();
    2774:	20 97       	sbiw	r28, 0x00	; 0
    2776:	e1 f3       	breq	.-8      	; 0x2770 <main+0x10>
    2778:	0e 94 1d 12 	call	0x243a	; 0x243a <_Z14serialEventRunv>
    277c:	f9 cf       	rjmp	.-14     	; 0x2770 <main+0x10>

0000277e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	6c 01       	movw	r12, r24
    2790:	7a 01       	movw	r14, r20
    2792:	8b 01       	movw	r16, r22
    2794:	c0 e0       	ldi	r28, 0x00	; 0
    2796:	d0 e0       	ldi	r29, 0x00	; 0
    2798:	ce 15       	cp	r28, r14
    279a:	df 05       	cpc	r29, r15
    279c:	81 f0       	breq	.+32     	; 0x27be <_ZN5Print5writeEPKhj+0x40>
    279e:	d8 01       	movw	r26, r16
    27a0:	6d 91       	ld	r22, X+
    27a2:	8d 01       	movw	r16, r26
    27a4:	d6 01       	movw	r26, r12
    27a6:	ed 91       	ld	r30, X+
    27a8:	fc 91       	ld	r31, X
    27aa:	01 90       	ld	r0, Z+
    27ac:	f0 81       	ld	r31, Z
    27ae:	e0 2d       	mov	r30, r0
    27b0:	c6 01       	movw	r24, r12
    27b2:	09 95       	icall
    27b4:	89 2b       	or	r24, r25
    27b6:	11 f0       	breq	.+4      	; 0x27bc <_ZN5Print5writeEPKhj+0x3e>
    27b8:	21 96       	adiw	r28, 0x01	; 1
    27ba:	ee cf       	rjmp	.-36     	; 0x2798 <_ZN5Print5writeEPKhj+0x1a>
    27bc:	7e 01       	movw	r14, r28
    27be:	c7 01       	movw	r24, r14
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	ff 90       	pop	r15
    27ca:	ef 90       	pop	r14
    27cc:	df 90       	pop	r13
    27ce:	cf 90       	pop	r12
    27d0:	08 95       	ret

000027d2 <_ZN5Print5writeEPKc>:
    27d2:	61 15       	cp	r22, r1
    27d4:	71 05       	cpc	r23, r1
    27d6:	79 f0       	breq	.+30     	; 0x27f6 <_ZN5Print5writeEPKc+0x24>
    27d8:	fb 01       	movw	r30, r22
    27da:	01 90       	ld	r0, Z+
    27dc:	00 20       	and	r0, r0
    27de:	e9 f7       	brne	.-6      	; 0x27da <_ZN5Print5writeEPKc+0x8>
    27e0:	31 97       	sbiw	r30, 0x01	; 1
    27e2:	af 01       	movw	r20, r30
    27e4:	46 1b       	sub	r20, r22
    27e6:	57 0b       	sbc	r21, r23
    27e8:	dc 01       	movw	r26, r24
    27ea:	ed 91       	ld	r30, X+
    27ec:	fc 91       	ld	r31, X
    27ee:	02 80       	ldd	r0, Z+2	; 0x02
    27f0:	f3 81       	ldd	r31, Z+3	; 0x03
    27f2:	e0 2d       	mov	r30, r0
    27f4:	09 94       	ijmp
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	08 95       	ret

000027fc <_ZN5Print5printEPK19__FlashStringHelper>:
    27fc:	ef 92       	push	r14
    27fe:	ff 92       	push	r15
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	8c 01       	movw	r16, r24
    280a:	7b 01       	movw	r14, r22
    280c:	c0 e0       	ldi	r28, 0x00	; 0
    280e:	d0 e0       	ldi	r29, 0x00	; 0
    2810:	f7 01       	movw	r30, r14
    2812:	ec 0f       	add	r30, r28
    2814:	fd 1f       	adc	r31, r29
    2816:	64 91       	lpm	r22, Z
    2818:	66 23       	and	r22, r22
    281a:	61 f0       	breq	.+24     	; 0x2834 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    281c:	d8 01       	movw	r26, r16
    281e:	ed 91       	ld	r30, X+
    2820:	fc 91       	ld	r31, X
    2822:	01 90       	ld	r0, Z+
    2824:	f0 81       	ld	r31, Z
    2826:	e0 2d       	mov	r30, r0
    2828:	c8 01       	movw	r24, r16
    282a:	09 95       	icall
    282c:	89 2b       	or	r24, r25
    282e:	11 f0       	breq	.+4      	; 0x2834 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2830:	21 96       	adiw	r28, 0x01	; 1
    2832:	ee cf       	rjmp	.-36     	; 0x2810 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2834:	ce 01       	movw	r24, r28
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	08 95       	ret

00002844 <_ZN5Print5printEPKc>:
    2844:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_ZN5Print5writeEPKc>

00002848 <_ZN5Print5printEc>:
    2848:	dc 01       	movw	r26, r24
    284a:	ed 91       	ld	r30, X+
    284c:	fc 91       	ld	r31, X
    284e:	01 90       	ld	r0, Z+
    2850:	f0 81       	ld	r31, Z
    2852:	e0 2d       	mov	r30, r0
    2854:	09 94       	ijmp

00002856 <_ZN5Print7printlnEv>:
    2856:	6a e5       	ldi	r22, 0x5A	; 90
    2858:	71 e0       	ldi	r23, 0x01	; 1
    285a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_ZN5Print5writeEPKc>

0000285e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	ec 01       	movw	r28, r24
    2868:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_ZN5Print5printEPK19__FlashStringHelper>
    286c:	8c 01       	movw	r16, r24
    286e:	ce 01       	movw	r24, r28
    2870:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Print7printlnEv>
    2874:	80 0f       	add	r24, r16
    2876:	91 1f       	adc	r25, r17
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	08 95       	ret

00002882 <_ZN5Print11printNumberEmh>:
    2882:	8f 92       	push	r8
    2884:	9f 92       	push	r9
    2886:	af 92       	push	r10
    2888:	bf 92       	push	r11
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	a1 97       	sbiw	r28, 0x21	; 33
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	7c 01       	movw	r14, r24
    28a8:	fa 01       	movw	r30, r20
    28aa:	cb 01       	movw	r24, r22
    28ac:	19 a2       	std	Y+33, r1	; 0x21
    28ae:	22 30       	cpi	r18, 0x02	; 2
    28b0:	08 f4       	brcc	.+2      	; 0x28b4 <_ZN5Print11printNumberEmh+0x32>
    28b2:	2a e0       	ldi	r18, 0x0A	; 10
    28b4:	8e 01       	movw	r16, r28
    28b6:	0f 5d       	subi	r16, 0xDF	; 223
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	82 2e       	mov	r8, r18
    28bc:	91 2c       	mov	r9, r1
    28be:	a1 2c       	mov	r10, r1
    28c0:	b1 2c       	mov	r11, r1
    28c2:	bf 01       	movw	r22, r30
    28c4:	a5 01       	movw	r20, r10
    28c6:	94 01       	movw	r18, r8
    28c8:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__udivmodsi4>
    28cc:	f9 01       	movw	r30, r18
    28ce:	ca 01       	movw	r24, r20
    28d0:	01 50       	subi	r16, 0x01	; 1
    28d2:	11 09       	sbc	r17, r1
    28d4:	6a 30       	cpi	r22, 0x0A	; 10
    28d6:	10 f4       	brcc	.+4      	; 0x28dc <_ZN5Print11printNumberEmh+0x5a>
    28d8:	60 5d       	subi	r22, 0xD0	; 208
    28da:	01 c0       	rjmp	.+2      	; 0x28de <_ZN5Print11printNumberEmh+0x5c>
    28dc:	69 5c       	subi	r22, 0xC9	; 201
    28de:	d8 01       	movw	r26, r16
    28e0:	6c 93       	st	X, r22
    28e2:	23 2b       	or	r18, r19
    28e4:	24 2b       	or	r18, r20
    28e6:	25 2b       	or	r18, r21
    28e8:	61 f7       	brne	.-40     	; 0x28c2 <_ZN5Print11printNumberEmh+0x40>
    28ea:	b8 01       	movw	r22, r16
    28ec:	c7 01       	movw	r24, r14
    28ee:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN5Print5writeEPKc>
    28f2:	a1 96       	adiw	r28, 0x21	; 33
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	bf 90       	pop	r11
    290c:	af 90       	pop	r10
    290e:	9f 90       	pop	r9
    2910:	8f 90       	pop	r8
    2912:	08 95       	ret

00002914 <_ZN5Print5printEmi>:
    2914:	21 15       	cp	r18, r1
    2916:	31 05       	cpc	r19, r1
    2918:	41 f4       	brne	.+16     	; 0x292a <_ZN5Print5printEmi+0x16>
    291a:	dc 01       	movw	r26, r24
    291c:	ed 91       	ld	r30, X+
    291e:	fc 91       	ld	r31, X
    2920:	01 90       	ld	r0, Z+
    2922:	f0 81       	ld	r31, Z
    2924:	e0 2d       	mov	r30, r0
    2926:	64 2f       	mov	r22, r20
    2928:	09 94       	ijmp
    292a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <_ZN5Print11printNumberEmh>

0000292e <_ZN5Print5printEhi>:
    292e:	9a 01       	movw	r18, r20
    2930:	46 2f       	mov	r20, r22
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_ZN5Print5printEmi>

0000293c <_ZN5Print5printEji>:
    293c:	9a 01       	movw	r18, r20
    293e:	ab 01       	movw	r20, r22
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_ZN5Print5printEmi>

00002948 <_ZN5Print7printlnEmi>:
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	ec 01       	movw	r28, r24
    2952:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN5Print5printEmi>
    2956:	8c 01       	movw	r16, r24
    2958:	ce 01       	movw	r24, r28
    295a:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Print7printlnEv>
    295e:	80 0f       	add	r24, r16
    2960:	91 1f       	adc	r25, r17
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	08 95       	ret

0000296c <_ZN5Print5printEli>:
    296c:	cf 92       	push	r12
    296e:	df 92       	push	r13
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	21 15       	cp	r18, r1
    297e:	31 05       	cpc	r19, r1
    2980:	81 f4       	brne	.+32     	; 0x29a2 <_ZN5Print5printEli+0x36>
    2982:	dc 01       	movw	r26, r24
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	01 90       	ld	r0, Z+
    298a:	f0 81       	ld	r31, Z
    298c:	e0 2d       	mov	r30, r0
    298e:	64 2f       	mov	r22, r20
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	09 94       	ijmp
    29a2:	2a 30       	cpi	r18, 0x0A	; 10
    29a4:	31 05       	cpc	r19, r1
    29a6:	01 f5       	brne	.+64     	; 0x29e8 <_ZN5Print5printEli+0x7c>
    29a8:	77 ff       	sbrs	r23, 7
    29aa:	1d c0       	rjmp	.+58     	; 0x29e6 <_ZN5Print5printEli+0x7a>
    29ac:	6a 01       	movw	r12, r20
    29ae:	7b 01       	movw	r14, r22
    29b0:	ec 01       	movw	r28, r24
    29b2:	6d e2       	ldi	r22, 0x2D	; 45
    29b4:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN5Print5printEc>
    29b8:	8c 01       	movw	r16, r24
    29ba:	44 27       	eor	r20, r20
    29bc:	55 27       	eor	r21, r21
    29be:	ba 01       	movw	r22, r20
    29c0:	4c 19       	sub	r20, r12
    29c2:	5d 09       	sbc	r21, r13
    29c4:	6e 09       	sbc	r22, r14
    29c6:	7f 09       	sbc	r23, r15
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	ce 01       	movw	r24, r28
    29cc:	0e 94 41 14 	call	0x2882	; 0x2882 <_ZN5Print11printNumberEmh>
    29d0:	80 0f       	add	r24, r16
    29d2:	91 1f       	adc	r25, r17
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	08 95       	ret
    29e6:	2a e0       	ldi	r18, 0x0A	; 10
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
    29f8:	0c 94 41 14 	jmp	0x2882	; 0x2882 <_ZN5Print11printNumberEmh>

000029fc <_ZN5Print5printEii>:
    29fc:	9a 01       	movw	r18, r20
    29fe:	ab 01       	movw	r20, r22
    2a00:	77 0f       	add	r23, r23
    2a02:	66 0b       	sbc	r22, r22
    2a04:	77 0b       	sbc	r23, r23
    2a06:	0c 94 b6 14 	jmp	0x296c	; 0x296c <_ZN5Print5printEli>

00002a0a <_ZN5Print7printlnEii>:
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	ec 01       	movw	r28, r24
    2a14:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN5Print5printEii>
    2a18:	8c 01       	movw	r16, r24
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	0e 94 2b 14 	call	0x2856	; 0x2856 <_ZN5Print7printlnEv>
    2a20:	80 0f       	add	r24, r16
    2a22:	91 1f       	adc	r25, r17
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	08 95       	ret

00002a2e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2a2e:	7f 92       	push	r7
    2a30:	8f 92       	push	r8
    2a32:	9f 92       	push	r9
    2a34:	af 92       	push	r10
    2a36:	bf 92       	push	r11
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	8c 01       	movw	r16, r24
    2a4a:	6a 01       	movw	r12, r20
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2a50:	9a 01       	movw	r18, r20
    2a52:	ab 01       	movw	r20, r22
    2a54:	c7 01       	movw	r24, r14
    2a56:	b6 01       	movw	r22, r12
    2a58:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__unordsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	19 f0       	breq	.+6      	; 0x2a66 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2a60:	6d e5       	ldi	r22, 0x5D	; 93
    2a62:	71 e0       	ldi	r23, 0x01	; 1
    2a64:	27 c0       	rjmp	.+78     	; 0x2ab4 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2a66:	46 01       	movw	r8, r12
    2a68:	57 01       	movw	r10, r14
    2a6a:	e8 94       	clt
    2a6c:	b7 f8       	bld	r11, 7
    2a6e:	2f ef       	ldi	r18, 0xFF	; 255
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	5f e7       	ldi	r21, 0x7F	; 127
    2a76:	c5 01       	movw	r24, r10
    2a78:	b4 01       	movw	r22, r8
    2a7a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__unordsf2>
    2a7e:	81 11       	cpse	r24, r1
    2a80:	0d c0       	rjmp	.+26     	; 0x2a9c <_ZN5Print10printFloatEdh+0x6e>
    2a82:	2f ef       	ldi	r18, 0xFF	; 255
    2a84:	3f ef       	ldi	r19, 0xFF	; 255
    2a86:	4f e7       	ldi	r20, 0x7F	; 127
    2a88:	5f e7       	ldi	r21, 0x7F	; 127
    2a8a:	c5 01       	movw	r24, r10
    2a8c:	b4 01       	movw	r22, r8
    2a8e:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__cmpsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	1c f4       	brge	.+6      	; 0x2a9c <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2a96:	61 e6       	ldi	r22, 0x61	; 97
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	0c c0       	rjmp	.+24     	; 0x2ab4 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2a9c:	2f ef       	ldi	r18, 0xFF	; 255
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	5f e4       	ldi	r21, 0x4F	; 79
    2aa4:	c7 01       	movw	r24, r14
    2aa6:	b6 01       	movw	r22, r12
    2aa8:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__gesf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	94 f4       	brge	.+36     	; 0x2ad4 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ab0:	65 e6       	ldi	r22, 0x65	; 101
    2ab2:	71 e0       	ldi	r23, 0x01	; 1
    2ab4:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	bf 90       	pop	r11
    2ac8:	af 90       	pop	r10
    2aca:	9f 90       	pop	r9
    2acc:	8f 90       	pop	r8
    2ace:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ad0:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2ad4:	2f ef       	ldi	r18, 0xFF	; 255
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	5f ec       	ldi	r21, 0xCF	; 207
    2adc:	c7 01       	movw	r24, r14
    2ade:	b6 01       	movw	r22, r12
    2ae0:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__cmpsf2>
    2ae4:	87 fd       	sbrc	r24, 7
    2ae6:	e4 cf       	rjmp	.-56     	; 0x2ab0 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	a9 01       	movw	r20, r18
    2aee:	c7 01       	movw	r24, r14
    2af0:	b6 01       	movw	r22, r12
    2af2:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__cmpsf2>
    2af6:	87 ff       	sbrs	r24, 7
    2af8:	0a c0       	rjmp	.+20     	; 0x2b0e <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2afa:	6d e2       	ldi	r22, 0x2D	; 45
    2afc:	c8 01       	movw	r24, r16
    2afe:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN5Print5printEc>
    2b02:	ec 01       	movw	r28, r24
     number = -number;
    2b04:	f7 fa       	bst	r15, 7
    2b06:	f0 94       	com	r15
    2b08:	f7 f8       	bld	r15, 7
    2b0a:	f0 94       	com	r15
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2b0e:	c0 e0       	ldi	r28, 0x00	; 0
    2b10:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2b12:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2b1c:	7b 14       	cp	r7, r11
    2b1e:	41 f0       	breq	.+16     	; 0x2b30 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e2       	ldi	r20, 0x20	; 32
    2b26:	51 e4       	ldi	r21, 0x41	; 65
    2b28:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2b2c:	b3 94       	inc	r11
    2b2e:	f6 cf       	rjmp	.-20     	; 0x2b1c <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2b30:	a7 01       	movw	r20, r14
    2b32:	96 01       	movw	r18, r12
    2b34:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__addsf3>
    2b38:	6b 01       	movw	r12, r22
    2b3a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2b3c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
    2b40:	4b 01       	movw	r8, r22
    2b42:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2b44:	2a e0       	ldi	r18, 0x0A	; 10
    2b46:	ab 01       	movw	r20, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	0e 94 41 14 	call	0x2882	; 0x2882 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2b50:	c8 0f       	add	r28, r24
    2b52:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2b54:	77 20       	and	r7, r7
    2b56:	b9 f1       	breq	.+110    	; 0x2bc6 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2b58:	c5 01       	movw	r24, r10
    2b5a:	b4 01       	movw	r22, r8
    2b5c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	c7 01       	movw	r24, r14
    2b66:	b6 01       	movw	r22, r12
    2b68:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__subsf3>
    2b6c:	6b 01       	movw	r12, r22
    2b6e:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2b70:	6e e2       	ldi	r22, 0x2E	; 46
    2b72:	c8 01       	movw	r24, r16
    2b74:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN5Print5printEc>
    2b78:	c8 0f       	add	r28, r24
    2b7a:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	c7 01       	movw	r24, r14
    2b86:	b6 01       	movw	r22, r12
    2b88:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__mulsf3>
    2b8c:	4b 01       	movw	r8, r22
    2b8e:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2b90:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
    2b94:	6b 01       	movw	r12, r22
    2b96:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2b98:	4a e0       	ldi	r20, 0x0A	; 10
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN5Print5printEji>
    2ba2:	c8 0f       	add	r28, r24
    2ba4:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    2bb0:	9b 01       	movw	r18, r22
    2bb2:	ac 01       	movw	r20, r24
    2bb4:	c5 01       	movw	r24, r10
    2bb6:	b4 01       	movw	r22, r8
    2bb8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__subsf3>
    2bbc:	6b 01       	movw	r12, r22
    2bbe:	7c 01       	movw	r14, r24
    2bc0:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2bc2:	71 10       	cpse	r7, r1
    2bc4:	db cf       	rjmp	.-74     	; 0x2b7c <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2bc6:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	ff 90       	pop	r15
    2bd2:	ef 90       	pop	r14
    2bd4:	df 90       	pop	r13
    2bd6:	cf 90       	pop	r12
    2bd8:	bf 90       	pop	r11
    2bda:	af 90       	pop	r10
    2bdc:	9f 90       	pop	r9
    2bde:	8f 90       	pop	r8
    2be0:	7f 90       	pop	r7
    2be2:	08 95       	ret

00002be4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2be4:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_ZN5Print10printFloatEdh>

00002be8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2be8:	1f 92       	push	r1
    2bea:	0f 92       	push	r0
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	0f 92       	push	r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	2f 93       	push	r18
    2bf4:	3f 93       	push	r19
    2bf6:	8f 93       	push	r24
    2bf8:	9f 93       	push	r25
    2bfa:	af 93       	push	r26
    2bfc:	bf 93       	push	r27
    2bfe:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <timer0_millis>
    2c02:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <timer0_millis+0x1>
    2c06:	a0 91 7d 03 	lds	r26, 0x037D	; 0x80037d <timer0_millis+0x2>
    2c0a:	b0 91 7e 03 	lds	r27, 0x037E	; 0x80037e <timer0_millis+0x3>
    2c0e:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <timer0_fract>
    2c12:	26 e0       	ldi	r18, 0x06	; 6
    2c14:	23 0f       	add	r18, r19
    2c16:	2d 37       	cpi	r18, 0x7D	; 125
    2c18:	20 f4       	brcc	.+8      	; 0x2c22 <__vector_16+0x3a>
    2c1a:	02 96       	adiw	r24, 0x02	; 2
    2c1c:	a1 1d       	adc	r26, r1
    2c1e:	b1 1d       	adc	r27, r1
    2c20:	05 c0       	rjmp	.+10     	; 0x2c2c <__vector_16+0x44>
    2c22:	29 e8       	ldi	r18, 0x89	; 137
    2c24:	23 0f       	add	r18, r19
    2c26:	03 96       	adiw	r24, 0x03	; 3
    2c28:	a1 1d       	adc	r26, r1
    2c2a:	b1 1d       	adc	r27, r1
    2c2c:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <timer0_fract>
    2c30:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <timer0_millis>
    2c34:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <timer0_millis+0x1>
    2c38:	a0 93 7d 03 	sts	0x037D, r26	; 0x80037d <timer0_millis+0x2>
    2c3c:	b0 93 7e 03 	sts	0x037E, r27	; 0x80037e <timer0_millis+0x3>
    2c40:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_overflow_count>
    2c44:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_overflow_count+0x1>
    2c48:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_overflow_count+0x2>
    2c4c:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_overflow_count+0x3>
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	a1 1d       	adc	r26, r1
    2c54:	b1 1d       	adc	r27, r1
    2c56:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <timer0_overflow_count>
    2c5a:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <timer0_overflow_count+0x1>
    2c5e:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <timer0_overflow_count+0x2>
    2c62:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <timer0_overflow_count+0x3>
    2c66:	bf 91       	pop	r27
    2c68:	af 91       	pop	r26
    2c6a:	9f 91       	pop	r25
    2c6c:	8f 91       	pop	r24
    2c6e:	3f 91       	pop	r19
    2c70:	2f 91       	pop	r18
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	0f 90       	pop	r0
    2c78:	1f 90       	pop	r1
    2c7a:	18 95       	reti

00002c7c <millis>:
    2c7c:	2f b7       	in	r18, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <timer0_millis>
    2c84:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <timer0_millis+0x1>
    2c88:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <timer0_millis+0x2>
    2c8c:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <timer0_millis+0x3>
    2c90:	2f bf       	out	0x3f, r18	; 63
    2c92:	08 95       	ret

00002c94 <micros>:
    2c94:	3f b7       	in	r19, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_overflow_count>
    2c9c:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_overflow_count+0x1>
    2ca0:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_overflow_count+0x2>
    2ca4:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_overflow_count+0x3>
    2ca8:	26 b5       	in	r18, 0x26	; 38
    2caa:	a8 9b       	sbis	0x15, 0	; 21
    2cac:	05 c0       	rjmp	.+10     	; 0x2cb8 <micros+0x24>
    2cae:	2f 3f       	cpi	r18, 0xFF	; 255
    2cb0:	19 f0       	breq	.+6      	; 0x2cb8 <micros+0x24>
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	a1 1d       	adc	r26, r1
    2cb6:	b1 1d       	adc	r27, r1
    2cb8:	3f bf       	out	0x3f, r19	; 63
    2cba:	ba 2f       	mov	r27, r26
    2cbc:	a9 2f       	mov	r26, r25
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	88 27       	eor	r24, r24
    2cc2:	82 0f       	add	r24, r18
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	a1 1d       	adc	r26, r1
    2cc8:	b1 1d       	adc	r27, r1
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	43 e0       	ldi	r20, 0x03	; 3
    2cd0:	66 0f       	add	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	4a 95       	dec	r20
    2cda:	d1 f7       	brne	.-12     	; 0x2cd0 <micros+0x3c>
    2cdc:	08 95       	ret

00002cde <delay>:
    2cde:	8f 92       	push	r8
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	6b 01       	movw	r12, r22
    2cf0:	7c 01       	movw	r14, r24
    2cf2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    2cf6:	4b 01       	movw	r8, r22
    2cf8:	5c 01       	movw	r10, r24
    2cfa:	c1 14       	cp	r12, r1
    2cfc:	d1 04       	cpc	r13, r1
    2cfe:	e1 04       	cpc	r14, r1
    2d00:	f1 04       	cpc	r15, r1
    2d02:	01 f1       	breq	.+64     	; 0x2d44 <delay+0x66>
    2d04:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <yield>
    2d08:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	88 19       	sub	r24, r8
    2d12:	99 09       	sbc	r25, r9
    2d14:	aa 09       	sbc	r26, r10
    2d16:	bb 09       	sbc	r27, r11
    2d18:	88 3e       	cpi	r24, 0xE8	; 232
    2d1a:	93 40       	sbci	r25, 0x03	; 3
    2d1c:	a1 05       	cpc	r26, r1
    2d1e:	b1 05       	cpc	r27, r1
    2d20:	60 f3       	brcs	.-40     	; 0x2cfa <delay+0x1c>
    2d22:	21 e0       	ldi	r18, 0x01	; 1
    2d24:	c2 1a       	sub	r12, r18
    2d26:	d1 08       	sbc	r13, r1
    2d28:	e1 08       	sbc	r14, r1
    2d2a:	f1 08       	sbc	r15, r1
    2d2c:	88 ee       	ldi	r24, 0xE8	; 232
    2d2e:	88 0e       	add	r8, r24
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	98 1e       	adc	r9, r24
    2d34:	a1 1c       	adc	r10, r1
    2d36:	b1 1c       	adc	r11, r1
    2d38:	c1 14       	cp	r12, r1
    2d3a:	d1 04       	cpc	r13, r1
    2d3c:	e1 04       	cpc	r14, r1
    2d3e:	f1 04       	cpc	r15, r1
    2d40:	19 f7       	brne	.-58     	; 0x2d08 <delay+0x2a>
    2d42:	db cf       	rjmp	.-74     	; 0x2cfa <delay+0x1c>
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
    2d4c:	bf 90       	pop	r11
    2d4e:	af 90       	pop	r10
    2d50:	9f 90       	pop	r9
    2d52:	8f 90       	pop	r8
    2d54:	08 95       	ret

00002d56 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2d56:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2d58:	84 b5       	in	r24, 0x24	; 36
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2d5e:	84 b5       	in	r24, 0x24	; 36
    2d60:	81 60       	ori	r24, 0x01	; 1
    2d62:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2d64:	85 b5       	in	r24, 0x25	; 37
    2d66:	82 60       	ori	r24, 0x02	; 2
    2d68:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2d6a:	85 b5       	in	r24, 0x25	; 37
    2d6c:	81 60       	ori	r24, 0x01	; 1
    2d6e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2d70:	ee e6       	ldi	r30, 0x6E	; 110
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	81 60       	ori	r24, 0x01	; 1
    2d78:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2d7a:	e1 e8       	ldi	r30, 0x81	; 129
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2d80:	80 81       	ld	r24, Z
    2d82:	82 60       	ori	r24, 0x02	; 2
    2d84:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2d86:	80 81       	ld	r24, Z
    2d88:	81 60       	ori	r24, 0x01	; 1
    2d8a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2d8c:	e0 e8       	ldi	r30, 0x80	; 128
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	81 60       	ori	r24, 0x01	; 1
    2d94:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2d96:	e1 eb       	ldi	r30, 0xB1	; 177
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	84 60       	ori	r24, 0x04	; 4
    2d9e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2da0:	e0 eb       	ldi	r30, 0xB0	; 176
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	81 60       	ori	r24, 0x01	; 1
    2da8:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2daa:	ea e7       	ldi	r30, 0x7A	; 122
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	84 60       	ori	r24, 0x04	; 4
    2db2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2db4:	80 81       	ld	r24, Z
    2db6:	82 60       	ori	r24, 0x02	; 2
    2db8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    2dba:	80 81       	ld	r24, Z
    2dbc:	8e 7f       	andi	r24, 0xFE	; 254
    2dbe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2dc6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2dca:	08 95       	ret

00002dcc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2dcc:	83 30       	cpi	r24, 0x03	; 3
    2dce:	81 f0       	breq	.+32     	; 0x2df0 <turnOffPWM+0x24>
    2dd0:	28 f4       	brcc	.+10     	; 0x2ddc <turnOffPWM+0x10>
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	99 f0       	breq	.+38     	; 0x2dfc <turnOffPWM+0x30>
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	a1 f0       	breq	.+40     	; 0x2e02 <turnOffPWM+0x36>
    2dda:	08 95       	ret
    2ddc:	87 30       	cpi	r24, 0x07	; 7
    2dde:	a9 f0       	breq	.+42     	; 0x2e0a <turnOffPWM+0x3e>
    2de0:	88 30       	cpi	r24, 0x08	; 8
    2de2:	b9 f0       	breq	.+46     	; 0x2e12 <turnOffPWM+0x46>
    2de4:	84 30       	cpi	r24, 0x04	; 4
    2de6:	d1 f4       	brne	.+52     	; 0x2e1c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2de8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2dec:	8f 7d       	andi	r24, 0xDF	; 223
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2df0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2df4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2df6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2dfa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2dfc:	84 b5       	in	r24, 0x24	; 36
    2dfe:	8f 77       	andi	r24, 0x7F	; 127
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e02:	84 b5       	in	r24, 0x24	; 36
    2e04:	8f 7d       	andi	r24, 0xDF	; 223
    2e06:	84 bd       	out	0x24, r24	; 36
    2e08:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2e0a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2e0e:	8f 77       	andi	r24, 0x7F	; 127
    2e10:	03 c0       	rjmp	.+6      	; 0x2e18 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2e16:	8f 7d       	andi	r24, 0xDF	; 223
    2e18:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2e1c:	08 95       	ret

00002e1e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	fc 01       	movw	r30, r24
    2e26:	e8 5e       	subi	r30, 0xE8	; 232
    2e28:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e4 5d       	subi	r30, 0xD4	; 212
    2e30:	fe 4f       	sbci	r31, 0xFE	; 254
    2e32:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2e34:	88 23       	and	r24, r24
    2e36:	61 f1       	breq	.+88     	; 0x2e90 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	fc 01       	movw	r30, r24
    2e40:	ec 5a       	subi	r30, 0xAC	; 172
    2e42:	fe 4f       	sbci	r31, 0xFE	; 254
    2e44:	c5 91       	lpm	r28, Z+
    2e46:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2e48:	fc 01       	movw	r30, r24
    2e4a:	e6 5b       	subi	r30, 0xB6	; 182
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	a5 91       	lpm	r26, Z+
    2e50:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2e52:	61 11       	cpse	r22, r1
    2e54:	09 c0       	rjmp	.+18     	; 0x2e68 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2e56:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2e58:	f8 94       	cli
		*reg &= ~bit;
    2e5a:	88 81       	ld	r24, Y
    2e5c:	20 95       	com	r18
    2e5e:	82 23       	and	r24, r18
    2e60:	88 83       	st	Y, r24
		*out &= ~bit;
    2e62:	ec 91       	ld	r30, X
    2e64:	2e 23       	and	r18, r30
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2e68:	62 30       	cpi	r22, 0x02	; 2
    2e6a:	61 f4       	brne	.+24     	; 0x2e84 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2e6c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2e6e:	f8 94       	cli
		*reg &= ~bit;
    2e70:	88 81       	ld	r24, Y
    2e72:	32 2f       	mov	r19, r18
    2e74:	30 95       	com	r19
    2e76:	83 23       	and	r24, r19
    2e78:	88 83       	st	Y, r24
		*out |= bit;
    2e7a:	ec 91       	ld	r30, X
    2e7c:	2e 2b       	or	r18, r30
    2e7e:	2c 93       	st	X, r18
		SREG = oldSREG;
    2e80:	9f bf       	out	0x3f, r25	; 63
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2e84:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e86:	f8 94       	cli
		*reg |= bit;
    2e88:	e8 81       	ld	r30, Y
    2e8a:	2e 2b       	or	r18, r30
    2e8c:	28 83       	st	Y, r18
		SREG = oldSREG;
    2e8e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	f9 01       	movw	r30, r18
    2ea2:	ec 5f       	subi	r30, 0xFC	; 252
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2ea8:	f9 01       	movw	r30, r18
    2eaa:	e8 5e       	subi	r30, 0xE8	; 232
    2eac:	fe 4f       	sbci	r31, 0xFE	; 254
    2eae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	e4 5d       	subi	r30, 0xD4	; 212
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2eb8:	cc 23       	and	r28, r28
    2eba:	c1 f0       	breq	.+48     	; 0x2eec <digitalWrite+0x56>
    2ebc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <turnOffPWM>

	out = portOutputRegister(port);
    2ec4:	ec 2f       	mov	r30, r28
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	ee 0f       	add	r30, r30
    2eca:	ff 1f       	adc	r31, r31
    2ecc:	e6 5b       	subi	r30, 0xB6	; 182
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	a5 91       	lpm	r26, Z+
    2ed2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2ed4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2ed6:	f8 94       	cli

	if (val == LOW) {
    2ed8:	11 11       	cpse	r17, r1
    2eda:	04 c0       	rjmp	.+8      	; 0x2ee4 <digitalWrite+0x4e>
		*out &= ~bit;
    2edc:	8c 91       	ld	r24, X
    2ede:	d0 95       	com	r29
    2ee0:	d8 23       	and	r29, r24
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2ee4:	ec 91       	ld	r30, X
    2ee6:	de 2b       	or	r29, r30
    2ee8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2eea:	9f bf       	out	0x3f, r25	; 63
}
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	08 95       	ret

00002ef4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	f9 01       	movw	r30, r18
    2efe:	ec 5f       	subi	r30, 0xFC	; 252
    2f00:	fe 4f       	sbci	r31, 0xFE	; 254
    2f02:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2f04:	f9 01       	movw	r30, r18
    2f06:	e8 5e       	subi	r30, 0xE8	; 232
    2f08:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2f0c:	f9 01       	movw	r30, r18
    2f0e:	e4 5d       	subi	r30, 0xD4	; 212
    2f10:	fe 4f       	sbci	r31, 0xFE	; 254
    2f12:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2f14:	cc 23       	and	r28, r28
    2f16:	91 f0       	breq	.+36     	; 0x2f3c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f18:	81 11       	cpse	r24, r1
    2f1a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2f1e:	ec 2f       	mov	r30, r28
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	ee 0f       	add	r30, r30
    2f24:	ff 1f       	adc	r31, r31
    2f26:	e0 5c       	subi	r30, 0xC0	; 192
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	a5 91       	lpm	r26, Z+
    2f2c:	b4 91       	lpm	r27, Z
    2f2e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2f30:	ed 23       	and	r30, r29
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	21 f4       	brne	.+8      	; 0x2f40 <digitalRead+0x4c>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <digitalRead+0x4c>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	08 95       	ret

00002f46 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
  if (howbig == 0) {
    2f4e:	61 15       	cp	r22, r1
    2f50:	71 05       	cpc	r23, r1
    2f52:	81 05       	cpc	r24, r1
    2f54:	91 05       	cpc	r25, r1
    2f56:	49 f0       	breq	.+18     	; 0x2f6a <_Z6randoml+0x24>
    2f58:	6b 01       	movw	r12, r22
    2f5a:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2f5c:	0e 94 86 31 	call	0x630c	; 0x630c <random>
    2f60:	a7 01       	movw	r20, r14
    2f62:	96 01       	movw	r18, r12
    2f64:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divmodsi4>
    2f68:	03 c0       	rjmp	.+6      	; 0x2f70 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	df 90       	pop	r13
    2f76:	cf 90       	pop	r12
    2f78:	08 95       	ret

00002f7a <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2f7a:	cf 92       	push	r12
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2f86:	62 17       	cp	r22, r18
    2f88:	73 07       	cpc	r23, r19
    2f8a:	84 07       	cpc	r24, r20
    2f8c:	95 07       	cpc	r25, r21
    2f8e:	84 f4       	brge	.+32     	; 0x2fb0 <_Z6randomll+0x36>
    2f90:	89 01       	movw	r16, r18
    2f92:	9a 01       	movw	r18, r20
    2f94:	6b 01       	movw	r12, r22
    2f96:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2f98:	c9 01       	movw	r24, r18
    2f9a:	b8 01       	movw	r22, r16
    2f9c:	6c 19       	sub	r22, r12
    2f9e:	7d 09       	sbc	r23, r13
    2fa0:	8e 09       	sbc	r24, r14
    2fa2:	9f 09       	sbc	r25, r15
    2fa4:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_Z6randoml>
    2fa8:	6c 0d       	add	r22, r12
    2faa:	7d 1d       	adc	r23, r13
    2fac:	8e 1d       	adc	r24, r14
    2fae:	9f 1d       	adc	r25, r15
}
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	ff 90       	pop	r15
    2fb6:	ef 90       	pop	r14
    2fb8:	df 90       	pop	r13
    2fba:	cf 90       	pop	r12
    2fbc:	08 95       	ret

00002fbe <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    2fbe:	2f 92       	push	r2
    2fc0:	3f 92       	push	r3
    2fc2:	4f 92       	push	r4
    2fc4:	5f 92       	push	r5
    2fc6:	6f 92       	push	r6
    2fc8:	7f 92       	push	r7
    2fca:	8f 92       	push	r8
    2fcc:	9f 92       	push	r9
    2fce:	af 92       	push	r10
    2fd0:	bf 92       	push	r11
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	2c 01       	movw	r4, r24
    2fee:	7e 83       	std	Y+6, r23	; 0x06
    2ff0:	6d 83       	std	Y+5, r22	; 0x05
    2ff2:	6a 01       	movw	r12, r20
    2ff4:	59 01       	movw	r10, r18
    2ff6:	c8 01       	movw	r24, r16
    2ff8:	fc 82       	std	Y+4, r15	; 0x04
    2ffa:	eb 82       	std	Y+3, r14	; 0x03
    2ffc:	48 01       	movw	r8, r16
    2ffe:	84 1a       	sub	r8, r20
    3000:	95 0a       	sbc	r9, r21
    3002:	97 fe       	sbrs	r9, 7
    3004:	03 c0       	rjmp	.+6      	; 0x300c <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    3006:	91 94       	neg	r9
    3008:	81 94       	neg	r8
    300a:	91 08       	sbc	r9, r1
    300c:	35 01       	movw	r6, r10
    300e:	2d 81       	ldd	r18, Y+5	; 0x05
    3010:	3e 81       	ldd	r19, Y+6	; 0x06
    3012:	62 1a       	sub	r6, r18
    3014:	73 0a       	sbc	r7, r19
    3016:	77 fe       	sbrs	r7, 7
    3018:	03 c0       	rjmp	.+6      	; 0x3020 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    301a:	71 94       	neg	r7
    301c:	61 94       	neg	r6
    301e:	71 08       	sbc	r7, r1
    3020:	68 14       	cp	r6, r8
    3022:	79 04       	cpc	r7, r9
    3024:	5c f4       	brge	.+22     	; 0x303c <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    3026:	3a 2d       	mov	r19, r10
    3028:	2b 2d       	mov	r18, r11
    302a:	5c 01       	movw	r10, r24
    302c:	83 2f       	mov	r24, r19
    302e:	92 2f       	mov	r25, r18
    3030:	3d 81       	ldd	r19, Y+5	; 0x05
    3032:	2e 81       	ldd	r18, Y+6	; 0x06
    3034:	de 82       	std	Y+6, r13	; 0x06
    3036:	cd 82       	std	Y+5, r12	; 0x05
    3038:	c3 2e       	mov	r12, r19
    303a:	d2 2e       	mov	r13, r18
    303c:	ad 81       	ldd	r26, Y+5	; 0x05
    303e:	be 81       	ldd	r27, Y+6	; 0x06
    3040:	aa 16       	cp	r10, r26
    3042:	bb 06       	cpc	r11, r27
    3044:	5c f4       	brge	.+22     	; 0x305c <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    3046:	3c 2d       	mov	r19, r12
    3048:	2d 2d       	mov	r18, r13
    304a:	6c 01       	movw	r12, r24
    304c:	83 2f       	mov	r24, r19
    304e:	92 2f       	mov	r25, r18
    3050:	3d 81       	ldd	r19, Y+5	; 0x05
    3052:	2e 81       	ldd	r18, Y+6	; 0x06
    3054:	be 82       	std	Y+6, r11	; 0x06
    3056:	ad 82       	std	Y+5, r10	; 0x05
    3058:	a3 2e       	mov	r10, r19
    305a:	b2 2e       	mov	r11, r18
    305c:	85 01       	movw	r16, r10
    305e:	2d 81       	ldd	r18, Y+5	; 0x05
    3060:	3e 81       	ldd	r19, Y+6	; 0x06
    3062:	02 1b       	sub	r16, r18
    3064:	13 0b       	sbc	r17, r19
    3066:	1c 01       	movw	r2, r24
    3068:	2c 18       	sub	r2, r12
    306a:	3d 08       	sbc	r3, r13
    306c:	37 fe       	sbrs	r3, 7
    306e:	03 c0       	rjmp	.+6      	; 0x3076 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    3070:	31 94       	neg	r3
    3072:	21 94       	neg	r2
    3074:	31 08       	sbc	r3, r1
    3076:	78 01       	movw	r14, r16
    3078:	17 ff       	sbrs	r17, 7
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	e3 1a       	sub	r14, r19
    3080:	f3 0a       	sbc	r15, r19
    3082:	f5 94       	asr	r15
    3084:	e7 94       	ror	r14
    3086:	c8 16       	cp	r12, r24
    3088:	d9 06       	cpc	r13, r25
    308a:	2c f0       	brlt	.+10     	; 0x3096 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    308c:	8f ef       	ldi	r24, 0xFF	; 255
    308e:	9f ef       	ldi	r25, 0xFF	; 255
    3090:	9a 83       	std	Y+2, r25	; 0x02
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	04 c0       	rjmp	.+8      	; 0x309e <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    3096:	a1 e0       	ldi	r26, 0x01	; 1
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ba 83       	std	Y+2, r27	; 0x02
    309c:	a9 83       	std	Y+1, r26	; 0x01
    309e:	2d 81       	ldd	r18, Y+5	; 0x05
    30a0:	3e 81       	ldd	r19, Y+6	; 0x06
    30a2:	a2 16       	cp	r10, r18
    30a4:	b3 06       	cpc	r11, r19
    30a6:	24 f1       	brlt	.+72     	; 0x30f0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    30a8:	d2 01       	movw	r26, r4
    30aa:	ed 91       	ld	r30, X+
    30ac:	fc 91       	ld	r31, X
    30ae:	04 84       	ldd	r0, Z+12	; 0x0c
    30b0:	f5 85       	ldd	r31, Z+13	; 0x0d
    30b2:	e0 2d       	mov	r30, r0
    30b4:	2b 81       	ldd	r18, Y+3	; 0x03
    30b6:	3c 81       	ldd	r19, Y+4	; 0x04
    30b8:	68 14       	cp	r6, r8
    30ba:	79 04       	cpc	r7, r9
    30bc:	24 f4       	brge	.+8      	; 0x30c6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    30be:	4d 81       	ldd	r20, Y+5	; 0x05
    30c0:	5e 81       	ldd	r21, Y+6	; 0x06
    30c2:	b6 01       	movw	r22, r12
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    30c6:	a6 01       	movw	r20, r12
    30c8:	6d 81       	ldd	r22, Y+5	; 0x05
    30ca:	7e 81       	ldd	r23, Y+6	; 0x06
    30cc:	c2 01       	movw	r24, r4
    30ce:	09 95       	icall
    30d0:	e2 18       	sub	r14, r2
    30d2:	f3 08       	sbc	r15, r3
    30d4:	f7 fe       	sbrs	r15, 7
    30d6:	06 c0       	rjmp	.+12     	; 0x30e4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    30d8:	29 81       	ldd	r18, Y+1	; 0x01
    30da:	3a 81       	ldd	r19, Y+2	; 0x02
    30dc:	c2 0e       	add	r12, r18
    30de:	d3 1e       	adc	r13, r19
    30e0:	e0 0e       	add	r14, r16
    30e2:	f1 1e       	adc	r15, r17
    30e4:	8d 81       	ldd	r24, Y+5	; 0x05
    30e6:	9e 81       	ldd	r25, Y+6	; 0x06
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	9e 83       	std	Y+6, r25	; 0x06
    30ec:	8d 83       	std	Y+5, r24	; 0x05
    30ee:	d7 cf       	rjmp	.-82     	; 0x309e <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    30f0:	26 96       	adiw	r28, 0x06	; 6
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	cf 90       	pop	r12
    310c:	bf 90       	pop	r11
    310e:	af 90       	pop	r10
    3110:	9f 90       	pop	r9
    3112:	8f 90       	pop	r8
    3114:	7f 90       	pop	r7
    3116:	6f 90       	pop	r6
    3118:	5f 90       	pop	r5
    311a:	4f 90       	pop	r4
    311c:	3f 90       	pop	r3
    311e:	2f 90       	pop	r2
    3120:	08 95       	ret

00003122 <_ZN12Adafruit_GFX10writePixelEiij>:
    3122:	dc 01       	movw	r26, r24
    3124:	ed 91       	ld	r30, X+
    3126:	fc 91       	ld	r31, X
    3128:	00 84       	ldd	r0, Z+8	; 0x08
    312a:	f1 85       	ldd	r31, Z+9	; 0x09
    312c:	e0 2d       	mov	r30, r0
    312e:	09 94       	ijmp

00003130 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	dc 01       	movw	r26, r24
    3136:	ed 91       	ld	r30, X+
    3138:	fc 91       	ld	r31, X
    313a:	04 8c       	ldd	r0, Z+28	; 0x1c
    313c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    313e:	e0 2d       	mov	r30, r0
    3140:	09 95       	icall
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	08 95       	ret

00003148 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	dc 01       	movw	r26, r24
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	06 8c       	ldd	r0, Z+30	; 0x1e
    3154:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3156:	e0 2d       	mov	r30, r0
    3158:	09 95       	icall
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	dc 01       	movw	r26, r24
    316a:	ed 91       	ld	r30, X+
    316c:	fc 91       	ld	r31, X
    316e:	00 a0       	ldd	r0, Z+32	; 0x20
    3170:	f1 a1       	ldd	r31, Z+33	; 0x21
    3172:	e0 2d       	mov	r30, r0
    3174:	09 95       	icall
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	08 95       	ret

00003180 <_ZN12Adafruit_GFX10startWriteEv>:
    3180:	08 95       	ret

00003182 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3182:	8f 92       	push	r8
    3184:	9f 92       	push	r9
    3186:	af 92       	push	r10
    3188:	bf 92       	push	r11
    318a:	cf 92       	push	r12
    318c:	df 92       	push	r13
    318e:	ef 92       	push	r14
    3190:	ff 92       	push	r15
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	ec 01       	movw	r28, r24
    319c:	5b 01       	movw	r10, r22
    319e:	4a 01       	movw	r8, r20
    31a0:	69 01       	movw	r12, r18
    31a2:	78 01       	movw	r14, r16
    31a4:	e8 81       	ld	r30, Y
    31a6:	f9 81       	ldd	r31, Y+1	; 0x01
    31a8:	02 84       	ldd	r0, Z+10	; 0x0a
    31aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    31ac:	e0 2d       	mov	r30, r0
    31ae:	09 95       	icall
    31b0:	c8 0c       	add	r12, r8
    31b2:	d9 1c       	adc	r13, r9
    31b4:	86 01       	movw	r16, r12
    31b6:	01 50       	subi	r16, 0x01	; 1
    31b8:	11 09       	sbc	r17, r1
    31ba:	e8 81       	ld	r30, Y
    31bc:	f9 81       	ldd	r31, Y+1	; 0x01
    31be:	04 88       	ldd	r0, Z+20	; 0x14
    31c0:	f5 89       	ldd	r31, Z+21	; 0x15
    31c2:	e0 2d       	mov	r30, r0
    31c4:	95 01       	movw	r18, r10
    31c6:	a4 01       	movw	r20, r8
    31c8:	b5 01       	movw	r22, r10
    31ca:	ce 01       	movw	r24, r28
    31cc:	09 95       	icall
    31ce:	e8 81       	ld	r30, Y
    31d0:	f9 81       	ldd	r31, Y+1	; 0x01
    31d2:	06 88       	ldd	r0, Z+22	; 0x16
    31d4:	f7 89       	ldd	r31, Z+23	; 0x17
    31d6:	e0 2d       	mov	r30, r0
    31d8:	ce 01       	movw	r24, r28
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	ef 90       	pop	r14
    31e6:	df 90       	pop	r13
    31e8:	cf 90       	pop	r12
    31ea:	bf 90       	pop	r11
    31ec:	af 90       	pop	r10
    31ee:	9f 90       	pop	r9
    31f0:	8f 90       	pop	r8
    31f2:	09 94       	ijmp

000031f4 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    31f4:	8f 92       	push	r8
    31f6:	9f 92       	push	r9
    31f8:	af 92       	push	r10
    31fa:	bf 92       	push	r11
    31fc:	cf 92       	push	r12
    31fe:	df 92       	push	r13
    3200:	ef 92       	push	r14
    3202:	ff 92       	push	r15
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	ec 01       	movw	r28, r24
    320e:	5b 01       	movw	r10, r22
    3210:	4a 01       	movw	r8, r20
    3212:	69 01       	movw	r12, r18
    3214:	e8 81       	ld	r30, Y
    3216:	f9 81       	ldd	r31, Y+1	; 0x01
    3218:	02 84       	ldd	r0, Z+10	; 0x0a
    321a:	f3 85       	ldd	r31, Z+11	; 0x0b
    321c:	e0 2d       	mov	r30, r0
    321e:	09 95       	icall
    3220:	95 01       	movw	r18, r10
    3222:	2c 0d       	add	r18, r12
    3224:	3d 1d       	adc	r19, r13
    3226:	21 50       	subi	r18, 0x01	; 1
    3228:	31 09       	sbc	r19, r1
    322a:	e8 81       	ld	r30, Y
    322c:	f9 81       	ldd	r31, Y+1	; 0x01
    322e:	04 88       	ldd	r0, Z+20	; 0x14
    3230:	f5 89       	ldd	r31, Z+21	; 0x15
    3232:	e0 2d       	mov	r30, r0
    3234:	78 01       	movw	r14, r16
    3236:	84 01       	movw	r16, r8
    3238:	a4 01       	movw	r20, r8
    323a:	b5 01       	movw	r22, r10
    323c:	ce 01       	movw	r24, r28
    323e:	09 95       	icall
    3240:	e8 81       	ld	r30, Y
    3242:	f9 81       	ldd	r31, Y+1	; 0x01
    3244:	06 88       	ldd	r0, Z+22	; 0x16
    3246:	f7 89       	ldd	r31, Z+23	; 0x17
    3248:	e0 2d       	mov	r30, r0
    324a:	ce 01       	movw	r24, r28
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	df 90       	pop	r13
    325a:	cf 90       	pop	r12
    325c:	bf 90       	pop	r11
    325e:	af 90       	pop	r10
    3260:	9f 90       	pop	r9
    3262:	8f 90       	pop	r8
    3264:	09 94       	ijmp

00003266 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3266:	4f 92       	push	r4
    3268:	5f 92       	push	r5
    326a:	6f 92       	push	r6
    326c:	7f 92       	push	r7
    326e:	8f 92       	push	r8
    3270:	9f 92       	push	r9
    3272:	af 92       	push	r10
    3274:	bf 92       	push	r11
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	6c 01       	movw	r12, r24
    3288:	2b 01       	movw	r4, r22
    328a:	5a 01       	movw	r10, r20
    328c:	39 01       	movw	r6, r18
    328e:	48 01       	movw	r8, r16
    3290:	dc 01       	movw	r26, r24
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	02 84       	ldd	r0, Z+10	; 0x0a
    3298:	f3 85       	ldd	r31, Z+11	; 0x0b
    329a:	e0 2d       	mov	r30, r0
    329c:	09 95       	icall
    329e:	e2 01       	movw	r28, r4
    32a0:	64 0c       	add	r6, r4
    32a2:	75 1c       	adc	r7, r5
    32a4:	d6 01       	movw	r26, r12
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	c6 15       	cp	r28, r6
    32ac:	d7 05       	cpc	r29, r7
    32ae:	5c f4       	brge	.+22     	; 0x32c6 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    32b0:	00 88       	ldd	r0, Z+16	; 0x10
    32b2:	f1 89       	ldd	r31, Z+17	; 0x11
    32b4:	e0 2d       	mov	r30, r0
    32b6:	87 01       	movw	r16, r14
    32b8:	94 01       	movw	r18, r8
    32ba:	a5 01       	movw	r20, r10
    32bc:	be 01       	movw	r22, r28
    32be:	c6 01       	movw	r24, r12
    32c0:	09 95       	icall
    32c2:	21 96       	adiw	r28, 0x01	; 1
    32c4:	ef cf       	rjmp	.-34     	; 0x32a4 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    32c6:	06 88       	ldd	r0, Z+22	; 0x16
    32c8:	f7 89       	ldd	r31, Z+23	; 0x17
    32ca:	e0 2d       	mov	r30, r0
    32cc:	c6 01       	movw	r24, r12
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	1f 91       	pop	r17
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	ef 90       	pop	r14
    32da:	df 90       	pop	r13
    32dc:	cf 90       	pop	r12
    32de:	bf 90       	pop	r11
    32e0:	af 90       	pop	r10
    32e2:	9f 90       	pop	r9
    32e4:	8f 90       	pop	r8
    32e6:	7f 90       	pop	r7
    32e8:	6f 90       	pop	r6
    32ea:	5f 90       	pop	r5
    32ec:	4f 90       	pop	r4
    32ee:	09 94       	ijmp

000032f0 <_ZN12Adafruit_GFX10fillScreenEj>:
    32f0:	ef 92       	push	r14
    32f2:	ff 92       	push	r15
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	dc 01       	movw	r26, r24
    32fa:	1a 96       	adiw	r26, 0x0a	; 10
    32fc:	0d 91       	ld	r16, X+
    32fe:	1c 91       	ld	r17, X
    3300:	1b 97       	sbiw	r26, 0x0b	; 11
    3302:	18 96       	adiw	r26, 0x08	; 8
    3304:	2d 91       	ld	r18, X+
    3306:	3c 91       	ld	r19, X
    3308:	19 97       	sbiw	r26, 0x09	; 9
    330a:	ed 91       	ld	r30, X+
    330c:	fc 91       	ld	r31, X
    330e:	00 a0       	ldd	r0, Z+32	; 0x20
    3310:	f1 a1       	ldd	r31, Z+33	; 0x21
    3312:	e0 2d       	mov	r30, r0
    3314:	7b 01       	movw	r14, r22
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	09 95       	icall
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	ff 90       	pop	r15
    3326:	ef 90       	pop	r14
    3328:	08 95       	ret

0000332a <_ZN12Adafruit_GFX8drawLineEiiiij>:
    332a:	8f 92       	push	r8
    332c:	9f 92       	push	r9
    332e:	af 92       	push	r10
    3330:	bf 92       	push	r11
    3332:	cf 92       	push	r12
    3334:	df 92       	push	r13
    3336:	ef 92       	push	r14
    3338:	ff 92       	push	r15
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	4c 01       	movw	r8, r24
    3344:	6b 01       	movw	r12, r22
    3346:	5a 01       	movw	r10, r20
    3348:	e9 01       	movw	r28, r18
    334a:	dc 01       	movw	r26, r24
    334c:	ed 91       	ld	r30, X+
    334e:	fc 91       	ld	r31, X
    3350:	62 17       	cp	r22, r18
    3352:	73 07       	cpc	r23, r19
    3354:	81 f4       	brne	.+32     	; 0x3376 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    3356:	04 17       	cp	r16, r20
    3358:	15 07       	cpc	r17, r21
    335a:	24 f4       	brge	.+8      	; 0x3364 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    335c:	8b 2d       	mov	r24, r11
    335e:	58 01       	movw	r10, r16
    3360:	04 2f       	mov	r16, r20
    3362:	18 2f       	mov	r17, r24
    3364:	0a 19       	sub	r16, r10
    3366:	1b 09       	sbc	r17, r11
    3368:	98 01       	movw	r18, r16
    336a:	2f 5f       	subi	r18, 0xFF	; 255
    336c:	3f 4f       	sbci	r19, 0xFF	; 255
    336e:	04 8c       	ldd	r0, Z+28	; 0x1c
    3370:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3372:	e0 2d       	mov	r30, r0
    3374:	12 c0       	rjmp	.+36     	; 0x339a <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    3376:	40 17       	cp	r20, r16
    3378:	51 07       	cpc	r21, r17
    337a:	09 f5       	brne	.+66     	; 0x33be <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    337c:	26 17       	cp	r18, r22
    337e:	37 07       	cpc	r19, r23
    3380:	24 f4       	brge	.+8      	; 0x338a <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    3382:	8d 2d       	mov	r24, r13
    3384:	69 01       	movw	r12, r18
    3386:	c6 2f       	mov	r28, r22
    3388:	d8 2f       	mov	r29, r24
    338a:	9e 01       	movw	r18, r28
    338c:	2c 19       	sub	r18, r12
    338e:	3d 09       	sbc	r19, r13
    3390:	2f 5f       	subi	r18, 0xFF	; 255
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	06 8c       	ldd	r0, Z+30	; 0x1e
    3396:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3398:	e0 2d       	mov	r30, r0
    339a:	87 01       	movw	r16, r14
    339c:	a5 01       	movw	r20, r10
    339e:	b6 01       	movw	r22, r12
    33a0:	c4 01       	movw	r24, r8
    33a2:	09 95       	icall
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	bf 90       	pop	r11
    33b6:	af 90       	pop	r10
    33b8:	9f 90       	pop	r9
    33ba:	8f 90       	pop	r8
    33bc:	08 95       	ret
    33be:	02 84       	ldd	r0, Z+10	; 0x0a
    33c0:	f3 85       	ldd	r31, Z+11	; 0x0b
    33c2:	e0 2d       	mov	r30, r0
    33c4:	09 95       	icall
    33c6:	d4 01       	movw	r26, r8
    33c8:	ed 91       	ld	r30, X+
    33ca:	fc 91       	ld	r31, X
    33cc:	04 88       	ldd	r0, Z+20	; 0x14
    33ce:	f5 89       	ldd	r31, Z+21	; 0x15
    33d0:	e0 2d       	mov	r30, r0
    33d2:	9e 01       	movw	r18, r28
    33d4:	a5 01       	movw	r20, r10
    33d6:	b6 01       	movw	r22, r12
    33d8:	c4 01       	movw	r24, r8
    33da:	09 95       	icall
    33dc:	d4 01       	movw	r26, r8
    33de:	ed 91       	ld	r30, X+
    33e0:	fc 91       	ld	r31, X
    33e2:	06 88       	ldd	r0, Z+22	; 0x16
    33e4:	f7 89       	ldd	r31, Z+23	; 0x17
    33e6:	e0 2d       	mov	r30, r0
    33e8:	c4 01       	movw	r24, r8
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	ef 90       	pop	r14
    33f6:	df 90       	pop	r13
    33f8:	cf 90       	pop	r12
    33fa:	bf 90       	pop	r11
    33fc:	af 90       	pop	r10
    33fe:	9f 90       	pop	r9
    3400:	8f 90       	pop	r8
    3402:	09 94       	ijmp

00003404 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3404:	6f 92       	push	r6
    3406:	7f 92       	push	r7
    3408:	8f 92       	push	r8
    340a:	9f 92       	push	r9
    340c:	af 92       	push	r10
    340e:	bf 92       	push	r11
    3410:	cf 92       	push	r12
    3412:	df 92       	push	r13
    3414:	ef 92       	push	r14
    3416:	ff 92       	push	r15
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	ec 01       	movw	r28, r24
    3422:	4b 01       	movw	r8, r22
    3424:	5a 01       	movw	r10, r20
    3426:	69 01       	movw	r12, r18
    3428:	38 01       	movw	r6, r16
    342a:	e8 81       	ld	r30, Y
    342c:	f9 81       	ldd	r31, Y+1	; 0x01
    342e:	02 84       	ldd	r0, Z+10	; 0x0a
    3430:	f3 85       	ldd	r31, Z+11	; 0x0b
    3432:	e0 2d       	mov	r30, r0
    3434:	09 95       	icall
    3436:	e8 81       	ld	r30, Y
    3438:	f9 81       	ldd	r31, Y+1	; 0x01
    343a:	02 88       	ldd	r0, Z+18	; 0x12
    343c:	f3 89       	ldd	r31, Z+19	; 0x13
    343e:	e0 2d       	mov	r30, r0
    3440:	87 01       	movw	r16, r14
    3442:	96 01       	movw	r18, r12
    3444:	a5 01       	movw	r20, r10
    3446:	b4 01       	movw	r22, r8
    3448:	ce 01       	movw	r24, r28
    344a:	09 95       	icall
    344c:	a5 01       	movw	r20, r10
    344e:	46 0d       	add	r20, r6
    3450:	57 1d       	adc	r21, r7
    3452:	41 50       	subi	r20, 0x01	; 1
    3454:	51 09       	sbc	r21, r1
    3456:	e8 81       	ld	r30, Y
    3458:	f9 81       	ldd	r31, Y+1	; 0x01
    345a:	02 88       	ldd	r0, Z+18	; 0x12
    345c:	f3 89       	ldd	r31, Z+19	; 0x13
    345e:	e0 2d       	mov	r30, r0
    3460:	96 01       	movw	r18, r12
    3462:	b4 01       	movw	r22, r8
    3464:	ce 01       	movw	r24, r28
    3466:	09 95       	icall
    3468:	e8 81       	ld	r30, Y
    346a:	f9 81       	ldd	r31, Y+1	; 0x01
    346c:	00 88       	ldd	r0, Z+16	; 0x10
    346e:	f1 89       	ldd	r31, Z+17	; 0x11
    3470:	e0 2d       	mov	r30, r0
    3472:	93 01       	movw	r18, r6
    3474:	a5 01       	movw	r20, r10
    3476:	b4 01       	movw	r22, r8
    3478:	ce 01       	movw	r24, r28
    347a:	09 95       	icall
    347c:	c8 0c       	add	r12, r8
    347e:	d9 1c       	adc	r13, r9
    3480:	b6 01       	movw	r22, r12
    3482:	61 50       	subi	r22, 0x01	; 1
    3484:	71 09       	sbc	r23, r1
    3486:	e8 81       	ld	r30, Y
    3488:	f9 81       	ldd	r31, Y+1	; 0x01
    348a:	00 88       	ldd	r0, Z+16	; 0x10
    348c:	f1 89       	ldd	r31, Z+17	; 0x11
    348e:	e0 2d       	mov	r30, r0
    3490:	93 01       	movw	r18, r6
    3492:	a5 01       	movw	r20, r10
    3494:	ce 01       	movw	r24, r28
    3496:	09 95       	icall
    3498:	e8 81       	ld	r30, Y
    349a:	f9 81       	ldd	r31, Y+1	; 0x01
    349c:	06 88       	ldd	r0, Z+22	; 0x16
    349e:	f7 89       	ldd	r31, Z+23	; 0x17
    34a0:	e0 2d       	mov	r30, r0
    34a2:	ce 01       	movw	r24, r28
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	bf 90       	pop	r11
    34b6:	af 90       	pop	r10
    34b8:	9f 90       	pop	r9
    34ba:	8f 90       	pop	r8
    34bc:	7f 90       	pop	r7
    34be:	6f 90       	pop	r6
    34c0:	09 94       	ijmp

000034c2 <_ZN12Adafruit_GFX13invertDisplayEb>:
    34c2:	08 95       	ret

000034c4 <_ZN12Adafruit_GFX11setRotationEh>:
    34c4:	fc 01       	movw	r30, r24
    34c6:	63 70       	andi	r22, 0x03	; 3
    34c8:	66 8b       	std	Z+22, r22	; 0x16
    34ca:	84 81       	ldd	r24, Z+4	; 0x04
    34cc:	95 81       	ldd	r25, Z+5	; 0x05
    34ce:	26 81       	ldd	r18, Z+6	; 0x06
    34d0:	37 81       	ldd	r19, Z+7	; 0x07
    34d2:	61 30       	cpi	r22, 0x01	; 1
    34d4:	39 f0       	breq	.+14     	; 0x34e4 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    34d6:	63 30       	cpi	r22, 0x03	; 3
    34d8:	29 f0       	breq	.+10     	; 0x34e4 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    34da:	91 87       	std	Z+9, r25	; 0x09
    34dc:	80 87       	std	Z+8, r24	; 0x08
    34de:	33 87       	std	Z+11, r19	; 0x0b
    34e0:	22 87       	std	Z+10, r18	; 0x0a
    34e2:	08 95       	ret
    34e4:	31 87       	std	Z+9, r19	; 0x09
    34e6:	20 87       	std	Z+8, r18	; 0x08
    34e8:	93 87       	std	Z+11, r25	; 0x0b
    34ea:	82 87       	std	Z+10, r24	; 0x0a
    34ec:	08 95       	ret

000034ee <_ZN12Adafruit_GFXC1Eii>:
    34ee:	fc 01       	movw	r30, r24
    34f0:	13 82       	std	Z+3, r1	; 0x03
    34f2:	12 82       	std	Z+2, r1	; 0x02
    34f4:	8d e6       	ldi	r24, 0x6D	; 109
    34f6:	91 e0       	ldi	r25, 0x01	; 1
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
    34fc:	75 83       	std	Z+5, r23	; 0x05
    34fe:	64 83       	std	Z+4, r22	; 0x04
    3500:	57 83       	std	Z+7, r21	; 0x07
    3502:	46 83       	std	Z+6, r20	; 0x06
    3504:	71 87       	std	Z+9, r23	; 0x09
    3506:	60 87       	std	Z+8, r22	; 0x08
    3508:	53 87       	std	Z+11, r21	; 0x0b
    350a:	42 87       	std	Z+10, r20	; 0x0a
    350c:	16 8a       	std	Z+22, r1	; 0x16
    350e:	15 86       	std	Z+13, r1	; 0x0d
    3510:	14 86       	std	Z+12, r1	; 0x0c
    3512:	17 86       	std	Z+15, r1	; 0x0f
    3514:	16 86       	std	Z+14, r1	; 0x0e
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	85 8b       	std	Z+21, r24	; 0x15
    351a:	84 8b       	std	Z+20, r24	; 0x14
    351c:	2f ef       	ldi	r18, 0xFF	; 255
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	33 8b       	std	Z+19, r19	; 0x13
    3522:	22 8b       	std	Z+18, r18	; 0x12
    3524:	31 8b       	std	Z+17, r19	; 0x11
    3526:	20 8b       	std	Z+16, r18	; 0x10
    3528:	87 8b       	std	Z+23, r24	; 0x17
    352a:	10 8e       	std	Z+24, r1	; 0x18
    352c:	12 8e       	std	Z+26, r1	; 0x1a
    352e:	11 8e       	std	Z+25, r1	; 0x19
    3530:	08 95       	ret

00003532 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    3532:	3f 92       	push	r3
    3534:	4f 92       	push	r4
    3536:	5f 92       	push	r5
    3538:	6f 92       	push	r6
    353a:	7f 92       	push	r7
    353c:	8f 92       	push	r8
    353e:	9f 92       	push	r9
    3540:	af 92       	push	r10
    3542:	bf 92       	push	r11
    3544:	cf 92       	push	r12
    3546:	df 92       	push	r13
    3548:	ef 92       	push	r14
    354a:	ff 92       	push	r15
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	2a 97       	sbiw	r28, 0x0a	; 10
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	5c 01       	movw	r10, r24
    3566:	7e 83       	std	Y+6, r23	; 0x06
    3568:	6d 83       	std	Y+5, r22	; 0x05
    356a:	58 87       	std	Y+8, r21	; 0x08
    356c:	4f 83       	std	Y+7, r20	; 0x07
    356e:	29 01       	movw	r4, r18
    3570:	37 01       	movw	r6, r14
    3572:	dc 01       	movw	r26, r24
    3574:	ed 91       	ld	r30, X+
    3576:	fc 91       	ld	r31, X
    3578:	02 84       	ldd	r0, Z+10	; 0x0a
    357a:	f3 85       	ldd	r31, Z+11	; 0x0b
    357c:	e0 2d       	mov	r30, r0
    357e:	09 95       	icall
    3580:	c8 01       	movw	r24, r16
    3582:	07 96       	adiw	r24, 0x07	; 7
    3584:	97 fd       	sbrc	r25, 7
    3586:	07 96       	adiw	r24, 0x07	; 7
    3588:	9c 01       	movw	r18, r24
    358a:	93 e0       	ldi	r25, 0x03	; 3
    358c:	35 95       	asr	r19
    358e:	27 95       	ror	r18
    3590:	9a 95       	dec	r25
    3592:	e1 f7       	brne	.-8      	; 0x358c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    3594:	3a 83       	std	Y+2, r19	; 0x02
    3596:	29 83       	std	Y+1, r18	; 0x01
    3598:	81 2c       	mov	r8, r1
    359a:	91 2c       	mov	r9, r1
    359c:	e1 2c       	mov	r14, r1
    359e:	f1 2c       	mov	r15, r1
    35a0:	31 2c       	mov	r3, r1
    35a2:	8f 81       	ldd	r24, Y+7	; 0x07
    35a4:	98 85       	ldd	r25, Y+8	; 0x08
    35a6:	8e 0d       	add	r24, r14
    35a8:	9f 1d       	adc	r25, r15
    35aa:	9c 83       	std	Y+4, r25	; 0x04
    35ac:	8b 83       	std	Y+3, r24	; 0x03
    35ae:	e6 14       	cp	r14, r6
    35b0:	f7 04       	cpc	r15, r7
    35b2:	0c f0       	brlt	.+2      	; 0x35b6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    35b4:	3d c0       	rjmp	.+122    	; 0x3630 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    35b6:	1a 86       	std	Y+10, r1	; 0x0a
    35b8:	19 86       	std	Y+9, r1	; 0x09
    35ba:	a9 85       	ldd	r26, Y+9	; 0x09
    35bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    35be:	a0 17       	cp	r26, r16
    35c0:	b1 07       	cpc	r27, r17
    35c2:	74 f5       	brge	.+92     	; 0x3620 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    35c4:	cd 01       	movw	r24, r26
    35c6:	87 70       	andi	r24, 0x07	; 7
    35c8:	99 27       	eor	r25, r25
    35ca:	89 2b       	or	r24, r25
    35cc:	11 f0       	breq	.+4      	; 0x35d2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    35ce:	33 0c       	add	r3, r3
    35d0:	0e c0       	rjmp	.+28     	; 0x35ee <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    35d2:	e9 85       	ldd	r30, Y+9	; 0x09
    35d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    35d6:	f7 fd       	sbrc	r31, 7
    35d8:	37 96       	adiw	r30, 0x07	; 7
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	f5 95       	asr	r31
    35de:	e7 95       	ror	r30
    35e0:	8a 95       	dec	r24
    35e2:	e1 f7       	brne	.-8      	; 0x35dc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    35e4:	e8 0d       	add	r30, r8
    35e6:	f9 1d       	adc	r31, r9
    35e8:	e4 0d       	add	r30, r4
    35ea:	f5 1d       	adc	r31, r5
    35ec:	34 90       	lpm	r3, Z
    35ee:	37 fe       	sbrs	r3, 7
    35f0:	11 c0       	rjmp	.+34     	; 0x3614 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    35f2:	d5 01       	movw	r26, r10
    35f4:	ed 91       	ld	r30, X+
    35f6:	fc 91       	ld	r31, X
    35f8:	04 84       	ldd	r0, Z+12	; 0x0c
    35fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    35fc:	e0 2d       	mov	r30, r0
    35fe:	96 01       	movw	r18, r12
    3600:	4b 81       	ldd	r20, Y+3	; 0x03
    3602:	5c 81       	ldd	r21, Y+4	; 0x04
    3604:	6d 81       	ldd	r22, Y+5	; 0x05
    3606:	7e 81       	ldd	r23, Y+6	; 0x06
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	68 0f       	add	r22, r24
    360e:	79 1f       	adc	r23, r25
    3610:	c5 01       	movw	r24, r10
    3612:	09 95       	icall
    3614:	a9 85       	ldd	r26, Y+9	; 0x09
    3616:	ba 85       	ldd	r27, Y+10	; 0x0a
    3618:	11 96       	adiw	r26, 0x01	; 1
    361a:	ba 87       	std	Y+10, r27	; 0x0a
    361c:	a9 87       	std	Y+9, r26	; 0x09
    361e:	cd cf       	rjmp	.-102    	; 0x35ba <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    3620:	bf ef       	ldi	r27, 0xFF	; 255
    3622:	eb 1a       	sub	r14, r27
    3624:	fb 0a       	sbc	r15, r27
    3626:	29 81       	ldd	r18, Y+1	; 0x01
    3628:	3a 81       	ldd	r19, Y+2	; 0x02
    362a:	82 0e       	add	r8, r18
    362c:	93 1e       	adc	r9, r19
    362e:	b9 cf       	rjmp	.-142    	; 0x35a2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    3630:	d5 01       	movw	r26, r10
    3632:	ed 91       	ld	r30, X+
    3634:	fc 91       	ld	r31, X
    3636:	06 88       	ldd	r0, Z+22	; 0x16
    3638:	f7 89       	ldd	r31, Z+23	; 0x17
    363a:	e0 2d       	mov	r30, r0
    363c:	c5 01       	movw	r24, r10
    363e:	2a 96       	adiw	r28, 0x0a	; 10
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	df 90       	pop	r13
    3658:	cf 90       	pop	r12
    365a:	bf 90       	pop	r11
    365c:	af 90       	pop	r10
    365e:	9f 90       	pop	r9
    3660:	8f 90       	pop	r8
    3662:	7f 90       	pop	r7
    3664:	6f 90       	pop	r6
    3666:	5f 90       	pop	r5
    3668:	4f 90       	pop	r4
    366a:	3f 90       	pop	r3
    366c:	09 94       	ijmp

0000366e <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    366e:	2f 92       	push	r2
    3670:	3f 92       	push	r3
    3672:	4f 92       	push	r4
    3674:	5f 92       	push	r5
    3676:	6f 92       	push	r6
    3678:	7f 92       	push	r7
    367a:	8f 92       	push	r8
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	6b 97       	sbiw	r28, 0x1b	; 27
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	9b 8f       	std	Y+27, r25	; 0x1b
    36a4:	8a 8f       	std	Y+26, r24	; 0x1a
    36a6:	2b 01       	movw	r4, r22
    36a8:	5a 83       	std	Y+2, r21	; 0x02
    36aa:	49 83       	std	Y+1, r20	; 0x01
    36ac:	d2 2e       	mov	r13, r18
    36ae:	19 87       	std	Y+9, r17	; 0x09
    36b0:	08 87       	std	Y+8, r16	; 0x08
    36b2:	47 01       	movw	r8, r14
    36b4:	ab 82       	std	Y+3, r10	; 0x03
    36b6:	dc 01       	movw	r26, r24
    36b8:	59 96       	adiw	r26, 0x19	; 25
    36ba:	2d 91       	ld	r18, X+
    36bc:	3c 91       	ld	r19, X
    36be:	5a 97       	sbiw	r26, 0x1a	; 26
    36c0:	21 15       	cp	r18, r1
    36c2:	31 05       	cpc	r19, r1
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    36c6:	00 c1       	rjmp	.+512    	; 0x38c8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    36c8:	18 96       	adiw	r26, 0x08	; 8
    36ca:	8d 91       	ld	r24, X+
    36cc:	9c 91       	ld	r25, X
    36ce:	19 97       	sbiw	r26, 0x09	; 9
    36d0:	68 17       	cp	r22, r24
    36d2:	79 07       	cpc	r23, r25
    36d4:	0c f0       	brlt	.+2      	; 0x36d8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    36d6:	e7 c1       	rjmp	.+974    	; 0x3aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    36d8:	1a 96       	adiw	r26, 0x0a	; 10
    36da:	8d 91       	ld	r24, X+
    36dc:	9c 91       	ld	r25, X
    36de:	1b 97       	sbiw	r26, 0x0b	; 11
    36e0:	48 17       	cp	r20, r24
    36e2:	59 07       	cpc	r21, r25
    36e4:	0c f0       	brlt	.+2      	; 0x36e8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    36e6:	df c1       	rjmp	.+958    	; 0x3aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    36e8:	2c 2c       	mov	r2, r12
    36ea:	31 2c       	mov	r3, r1
    36ec:	fb 01       	movw	r30, r22
    36ee:	26 e0       	ldi	r18, 0x06	; 6
    36f0:	c2 9e       	mul	r12, r18
    36f2:	e0 0d       	add	r30, r0
    36f4:	f1 1d       	adc	r31, r1
    36f6:	11 24       	eor	r1, r1
    36f8:	fd 87       	std	Y+13, r31	; 0x0d
    36fa:	ec 87       	std	Y+12, r30	; 0x0c
    36fc:	1e 16       	cp	r1, r30
    36fe:	1f 06       	cpc	r1, r31
    3700:	0c f0       	brlt	.+2      	; 0x3704 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    3702:	d1 c1       	rjmp	.+930    	; 0x3aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    3704:	4a 2d       	mov	r20, r10
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	5b 87       	std	Y+11, r21	; 0x0b
    370a:	4a 87       	std	Y+10, r20	; 0x0a
    370c:	83 e0       	ldi	r24, 0x03	; 3
    370e:	44 0f       	add	r20, r20
    3710:	55 1f       	adc	r21, r21
    3712:	8a 95       	dec	r24
    3714:	e1 f7       	brne	.-8      	; 0x370e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    3716:	5f 87       	std	Y+15, r21	; 0x0f
    3718:	4e 87       	std	Y+14, r20	; 0x0e
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	9a 81       	ldd	r25, Y+2	; 0x02
    371e:	84 0f       	add	r24, r20
    3720:	95 1f       	adc	r25, r21
    3722:	18 16       	cp	r1, r24
    3724:	19 06       	cpc	r1, r25
    3726:	0c f0       	brlt	.+2      	; 0x372a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    3728:	be c1       	rjmp	.+892    	; 0x3aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    372a:	58 96       	adiw	r26, 0x18	; 24
    372c:	8c 91       	ld	r24, X
    372e:	81 11       	cpse	r24, r1
    3730:	04 c0       	rjmp	.+8      	; 0x373a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    3732:	6f ea       	ldi	r22, 0xAF	; 175
    3734:	6d 15       	cp	r22, r13
    3736:	08 f4       	brcc	.+2      	; 0x373a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    3738:	d3 94       	inc	r13
    373a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    373c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    373e:	ed 91       	ld	r30, X+
    3740:	fc 91       	ld	r31, X
    3742:	11 97       	sbiw	r26, 0x01	; 1
    3744:	02 84       	ldd	r0, Z+10	; 0x0a
    3746:	f3 85       	ldd	r31, Z+11	; 0x0b
    3748:	e0 2d       	mov	r30, r0
    374a:	cd 01       	movw	r24, r26
    374c:	09 95       	icall
    374e:	b5 e0       	ldi	r27, 0x05	; 5
    3750:	db 9e       	mul	r13, r27
    3752:	c0 01       	movw	r24, r0
    3754:	11 24       	eor	r1, r1
    3756:	ec 2d       	mov	r30, r12
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	f9 8b       	std	Y+17, r31	; 0x11
    375c:	e8 8b       	std	Y+16, r30	; 0x10
    375e:	92 01       	movw	r18, r4
    3760:	2b 5f       	subi	r18, 0xFB	; 251
    3762:	3f 4f       	sbci	r19, 0xFF	; 255
    3764:	3b 8b       	std	Y+19, r19	; 0x13
    3766:	2a 8b       	std	Y+18, r18	; 0x12
    3768:	32 01       	movw	r6, r4
    376a:	5d 82       	std	Y+5, r5	; 0x05
    376c:	4c 82       	std	Y+4, r4	; 0x04
    376e:	ac 01       	movw	r20, r24
    3770:	44 19       	sub	r20, r4
    3772:	55 09       	sbc	r21, r5
    3774:	5d 8b       	std	Y+21, r21	; 0x15
    3776:	4c 8b       	std	Y+20, r20	; 0x14
    3778:	7b 81       	ldd	r23, Y+3	; 0x03
    377a:	67 2f       	mov	r22, r23
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	7f 8b       	std	Y+23, r23	; 0x17
    3780:	6e 8b       	std	Y+22, r22	; 0x16
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	08 96       	adiw	r24, 0x08	; 8
    3788:	99 8f       	std	Y+25, r25	; 0x19
    378a:	88 8f       	std	Y+24, r24	; 0x18
    378c:	ec 89       	ldd	r30, Y+20	; 0x14
    378e:	fd 89       	ldd	r31, Y+21	; 0x15
    3790:	e6 0d       	add	r30, r6
    3792:	f7 1d       	adc	r31, r7
    3794:	e2 5a       	subi	r30, 0xA2	; 162
    3796:	fe 4f       	sbci	r31, 0xFE	; 254
    3798:	d4 90       	lpm	r13, Z
    379a:	a9 81       	ldd	r26, Y+1	; 0x01
    379c:	ba 81       	ldd	r27, Y+2	; 0x02
    379e:	bf 83       	std	Y+7, r27	; 0x07
    37a0:	ae 83       	std	Y+6, r26	; 0x06
    37a2:	5d 01       	movw	r10, r26
    37a4:	d0 fe       	sbrs	r13, 0
    37a6:	16 c0       	rjmp	.+44     	; 0x37d4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    37a8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    37aa:	bb 8d       	ldd	r27, Y+27	; 0x1b
    37ac:	ed 91       	ld	r30, X+
    37ae:	fc 91       	ld	r31, X
    37b0:	b1 e0       	ldi	r27, 0x01	; 1
    37b2:	cb 12       	cpse	r12, r27
    37b4:	09 c0       	rjmp	.+18     	; 0x37c8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    37b6:	2b 81       	ldd	r18, Y+3	; 0x03
    37b8:	21 30       	cpi	r18, 0x01	; 1
    37ba:	31 f4       	brne	.+12     	; 0x37c8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    37bc:	04 84       	ldd	r0, Z+12	; 0x0c
    37be:	f5 85       	ldd	r31, Z+13	; 0x0d
    37c0:	e0 2d       	mov	r30, r0
    37c2:	28 85       	ldd	r18, Y+8	; 0x08
    37c4:	39 85       	ldd	r19, Y+9	; 0x09
    37c6:	19 c0       	rjmp	.+50     	; 0x37fa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    37c8:	06 84       	ldd	r0, Z+14	; 0x0e
    37ca:	f7 85       	ldd	r31, Z+15	; 0x0f
    37cc:	e0 2d       	mov	r30, r0
    37ce:	e8 84       	ldd	r14, Y+8	; 0x08
    37d0:	f9 84       	ldd	r15, Y+9	; 0x09
    37d2:	1d c0       	rjmp	.+58     	; 0x380e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    37d4:	48 85       	ldd	r20, Y+8	; 0x08
    37d6:	59 85       	ldd	r21, Y+9	; 0x09
    37d8:	48 15       	cp	r20, r8
    37da:	59 05       	cpc	r21, r9
    37dc:	11 f1       	breq	.+68     	; 0x3822 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    37de:	aa 8d       	ldd	r26, Y+26	; 0x1a
    37e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    37e2:	ed 91       	ld	r30, X+
    37e4:	fc 91       	ld	r31, X
    37e6:	b1 e0       	ldi	r27, 0x01	; 1
    37e8:	cb 12       	cpse	r12, r27
    37ea:	0d c0       	rjmp	.+26     	; 0x3806 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    37ec:	2b 81       	ldd	r18, Y+3	; 0x03
    37ee:	21 30       	cpi	r18, 0x01	; 1
    37f0:	51 f4       	brne	.+20     	; 0x3806 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    37f2:	04 84       	ldd	r0, Z+12	; 0x0c
    37f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    37f6:	e0 2d       	mov	r30, r0
    37f8:	94 01       	movw	r18, r8
    37fa:	a5 01       	movw	r20, r10
    37fc:	b3 01       	movw	r22, r6
    37fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3800:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3802:	09 95       	icall
    3804:	0e c0       	rjmp	.+28     	; 0x3822 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    3806:	06 84       	ldd	r0, Z+14	; 0x0e
    3808:	f7 85       	ldd	r31, Z+15	; 0x0f
    380a:	e0 2d       	mov	r30, r0
    380c:	74 01       	movw	r14, r8
    380e:	0a 85       	ldd	r16, Y+10	; 0x0a
    3810:	1b 85       	ldd	r17, Y+11	; 0x0b
    3812:	91 01       	movw	r18, r2
    3814:	4e 81       	ldd	r20, Y+6	; 0x06
    3816:	5f 81       	ldd	r21, Y+7	; 0x07
    3818:	6c 81       	ldd	r22, Y+4	; 0x04
    381a:	7d 81       	ldd	r23, Y+5	; 0x05
    381c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    381e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3820:	09 95       	icall
    3822:	d6 94       	lsr	r13
    3824:	4e 81       	ldd	r20, Y+6	; 0x06
    3826:	5f 81       	ldd	r21, Y+7	; 0x07
    3828:	6e 89       	ldd	r22, Y+22	; 0x16
    382a:	7f 89       	ldd	r23, Y+23	; 0x17
    382c:	46 0f       	add	r20, r22
    382e:	57 1f       	adc	r21, r23
    3830:	5f 83       	std	Y+7, r21	; 0x07
    3832:	4e 83       	std	Y+6, r20	; 0x06
    3834:	7f ef       	ldi	r23, 0xFF	; 255
    3836:	a7 1a       	sub	r10, r23
    3838:	b7 0a       	sbc	r11, r23
    383a:	88 8d       	ldd	r24, Y+24	; 0x18
    383c:	99 8d       	ldd	r25, Y+25	; 0x19
    383e:	a8 16       	cp	r10, r24
    3840:	b9 06       	cpc	r11, r25
    3842:	09 f0       	breq	.+2      	; 0x3846 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    3844:	af cf       	rjmp	.-162    	; 0x37a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    3846:	ac 81       	ldd	r26, Y+4	; 0x04
    3848:	bd 81       	ldd	r27, Y+5	; 0x05
    384a:	e8 89       	ldd	r30, Y+16	; 0x10
    384c:	f9 89       	ldd	r31, Y+17	; 0x11
    384e:	ae 0f       	add	r26, r30
    3850:	bf 1f       	adc	r27, r31
    3852:	bd 83       	std	Y+5, r27	; 0x05
    3854:	ac 83       	std	Y+4, r26	; 0x04
    3856:	ff ef       	ldi	r31, 0xFF	; 255
    3858:	6f 1a       	sub	r6, r31
    385a:	7f 0a       	sbc	r7, r31
    385c:	2a 89       	ldd	r18, Y+18	; 0x12
    385e:	3b 89       	ldd	r19, Y+19	; 0x13
    3860:	62 16       	cp	r6, r18
    3862:	73 06       	cpc	r7, r19
    3864:	09 f0       	breq	.+2      	; 0x3868 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    3866:	92 cf       	rjmp	.-220    	; 0x378c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    3868:	48 85       	ldd	r20, Y+8	; 0x08
    386a:	59 85       	ldd	r21, Y+9	; 0x09
    386c:	48 15       	cp	r20, r8
    386e:	59 05       	cpc	r21, r9
    3870:	09 f4       	brne	.+2      	; 0x3874 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    3872:	f7 c0       	rjmp	.+494    	; 0x3a62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3874:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3876:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3878:	ed 91       	ld	r30, X+
    387a:	fc 91       	ld	r31, X
    387c:	b1 e0       	ldi	r27, 0x01	; 1
    387e:	cb 12       	cpse	r12, r27
    3880:	12 c0       	rjmp	.+36     	; 0x38a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    3882:	2b 81       	ldd	r18, Y+3	; 0x03
    3884:	21 30       	cpi	r18, 0x01	; 1
    3886:	79 f4       	brne	.+30     	; 0x38a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    3888:	b2 01       	movw	r22, r4
    388a:	6b 5f       	subi	r22, 0xFB	; 251
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	00 88       	ldd	r0, Z+16	; 0x10
    3890:	f1 89       	ldd	r31, Z+17	; 0x11
    3892:	e0 2d       	mov	r30, r0
    3894:	84 01       	movw	r16, r8
    3896:	28 e0       	ldi	r18, 0x08	; 8
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	49 81       	ldd	r20, Y+1	; 0x01
    389c:	5a 81       	ldd	r21, Y+2	; 0x02
    389e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38a2:	09 95       	icall
    38a4:	de c0       	rjmp	.+444    	; 0x3a62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    38a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    38a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    38aa:	62 19       	sub	r22, r2
    38ac:	73 09       	sbc	r23, r3
    38ae:	06 84       	ldd	r0, Z+14	; 0x0e
    38b0:	f7 85       	ldd	r31, Z+15	; 0x0f
    38b2:	e0 2d       	mov	r30, r0
    38b4:	74 01       	movw	r14, r8
    38b6:	0e 85       	ldd	r16, Y+14	; 0x0e
    38b8:	1f 85       	ldd	r17, Y+15	; 0x0f
    38ba:	91 01       	movw	r18, r2
    38bc:	49 81       	ldd	r20, Y+1	; 0x01
    38be:	5a 81       	ldd	r21, Y+2	; 0x02
    38c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38c4:	09 95       	icall
    38c6:	cd c0       	rjmp	.+410    	; 0x3a62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    38c8:	f9 01       	movw	r30, r18
    38ca:	34 96       	adiw	r30, 0x04	; 4
    38cc:	e4 91       	lpm	r30, Z
    38ce:	de 1a       	sub	r13, r30
    38d0:	f9 01       	movw	r30, r18
    38d2:	32 96       	adiw	r30, 0x02	; 2
    38d4:	85 91       	lpm	r24, Z+
    38d6:	94 91       	lpm	r25, Z
    38d8:	b7 e0       	ldi	r27, 0x07	; 7
    38da:	db 9e       	mul	r13, r27
    38dc:	80 0d       	add	r24, r0
    38de:	91 1d       	adc	r25, r1
    38e0:	11 24       	eor	r1, r1
    38e2:	f9 01       	movw	r30, r18
    38e4:	25 91       	lpm	r18, Z+
    38e6:	34 91       	lpm	r19, Z
    38e8:	39 8b       	std	Y+17, r19	; 0x11
    38ea:	28 8b       	std	Y+16, r18	; 0x10
    38ec:	fc 01       	movw	r30, r24
    38ee:	25 90       	lpm	r2, Z+
    38f0:	34 90       	lpm	r3, Z
    38f2:	fc 01       	movw	r30, r24
    38f4:	32 96       	adiw	r30, 0x02	; 2
    38f6:	74 90       	lpm	r7, Z
    38f8:	31 96       	adiw	r30, 0x01	; 1
    38fa:	a4 90       	lpm	r10, Z
    38fc:	32 96       	adiw	r30, 0x02	; 2
    38fe:	94 90       	lpm	r9, Z
    3900:	31 96       	adiw	r30, 0x01	; 1
    3902:	b4 90       	lpm	r11, Z
    3904:	31 e0       	ldi	r19, 0x01	; 1
    3906:	3c 15       	cp	r19, r12
    3908:	18 f0       	brcs	.+6      	; 0x3910 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    390a:	4b 81       	ldd	r20, Y+3	; 0x03
    390c:	42 30       	cpi	r20, 0x02	; 2
    390e:	68 f0       	brcs	.+26     	; 0x392a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    3910:	69 2d       	mov	r22, r9
    3912:	09 2c       	mov	r0, r9
    3914:	00 0c       	add	r0, r0
    3916:	77 0b       	sbc	r23, r23
    3918:	7d 83       	std	Y+5, r23	; 0x05
    391a:	6c 83       	std	Y+4, r22	; 0x04
    391c:	8b 2d       	mov	r24, r11
    391e:	0b 2c       	mov	r0, r11
    3920:	00 0c       	add	r0, r0
    3922:	99 0b       	sbc	r25, r25
    3924:	9f 83       	std	Y+7, r25	; 0x07
    3926:	8e 83       	std	Y+6, r24	; 0x06
    3928:	04 c0       	rjmp	.+8      	; 0x3932 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    392a:	1f 82       	std	Y+7, r1	; 0x07
    392c:	1e 82       	std	Y+6, r1	; 0x06
    392e:	1d 82       	std	Y+5, r1	; 0x05
    3930:	1c 82       	std	Y+4, r1	; 0x04
    3932:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3934:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3936:	ed 91       	ld	r30, X+
    3938:	fc 91       	ld	r31, X
    393a:	11 97       	sbiw	r26, 0x01	; 1
    393c:	02 84       	ldd	r0, Z+10	; 0x0a
    393e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3940:	e0 2d       	mov	r30, r0
    3942:	cd 01       	movw	r24, r26
    3944:	09 95       	icall
    3946:	61 2c       	mov	r6, r1
    3948:	d1 2c       	mov	r13, r1
    394a:	81 2c       	mov	r8, r1
    394c:	fb 81       	ldd	r31, Y+3	; 0x03
    394e:	ef 2f       	mov	r30, r31
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	fb 87       	std	Y+11, r31	; 0x0b
    3954:	ea 87       	std	Y+10, r30	; 0x0a
    3956:	2c 2d       	mov	r18, r12
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	3d 87       	std	Y+13, r19	; 0x0d
    395c:	2c 87       	std	Y+12, r18	; 0x0c
    395e:	49 81       	ldd	r20, Y+1	; 0x01
    3960:	5a 81       	ldd	r21, Y+2	; 0x02
    3962:	4b 0d       	add	r20, r11
    3964:	51 1d       	adc	r21, r1
    3966:	b7 fc       	sbrc	r11, 7
    3968:	5a 95       	dec	r21
    396a:	5d 8b       	std	Y+21, r21	; 0x15
    396c:	4c 8b       	std	Y+20, r20	; 0x14
    396e:	b2 01       	movw	r22, r4
    3970:	69 0d       	add	r22, r9
    3972:	71 1d       	adc	r23, r1
    3974:	97 fc       	sbrc	r9, 7
    3976:	7a 95       	dec	r23
    3978:	7f 8b       	std	Y+23, r23	; 0x17
    397a:	6e 8b       	std	Y+22, r22	; 0x16
    397c:	8a 14       	cp	r8, r10
    397e:	08 f0       	brcs	.+2      	; 0x3982 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    3980:	70 c0       	rjmp	.+224    	; 0x3a62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3982:	28 2d       	mov	r18, r8
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4e 81       	ldd	r20, Y+6	; 0x06
    3988:	5f 81       	ldd	r21, Y+7	; 0x07
    398a:	42 0f       	add	r20, r18
    398c:	53 1f       	adc	r21, r19
    398e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3990:	bb 85       	ldd	r27, Y+11	; 0x0b
    3992:	a4 9f       	mul	r26, r20
    3994:	c0 01       	movw	r24, r0
    3996:	a5 9f       	mul	r26, r21
    3998:	90 0d       	add	r25, r0
    399a:	b4 9f       	mul	r27, r20
    399c:	90 0d       	add	r25, r0
    399e:	11 24       	eor	r1, r1
    39a0:	e9 81       	ldd	r30, Y+1	; 0x01
    39a2:	fa 81       	ldd	r31, Y+2	; 0x02
    39a4:	e8 0f       	add	r30, r24
    39a6:	f9 1f       	adc	r31, r25
    39a8:	ff 87       	std	Y+15, r31	; 0x0f
    39aa:	ee 87       	std	Y+14, r30	; 0x0e
    39ac:	86 2d       	mov	r24, r6
    39ae:	91 2c       	mov	r9, r1
    39b0:	4c 89       	ldd	r20, Y+20	; 0x14
    39b2:	5d 89       	ldd	r21, Y+21	; 0x15
    39b4:	42 0f       	add	r20, r18
    39b6:	53 1f       	adc	r21, r19
    39b8:	5b 8b       	std	Y+19, r21	; 0x13
    39ba:	4a 8b       	std	Y+18, r20	; 0x12
    39bc:	97 14       	cp	r9, r7
    39be:	08 f0       	brcs	.+2      	; 0x39c2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    39c0:	4d c0       	rjmp	.+154    	; 0x3a5c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    39c2:	bb 24       	eor	r11, r11
    39c4:	b3 94       	inc	r11
    39c6:	b8 0e       	add	r11, r24
    39c8:	87 70       	andi	r24, 0x07	; 7
    39ca:	41 f4       	brne	.+16     	; 0x39dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    39cc:	c1 01       	movw	r24, r2
    39ce:	01 96       	adiw	r24, 0x01	; 1
    39d0:	e8 89       	ldd	r30, Y+16	; 0x10
    39d2:	f9 89       	ldd	r31, Y+17	; 0x11
    39d4:	e2 0d       	add	r30, r2
    39d6:	f3 1d       	adc	r31, r3
    39d8:	d4 90       	lpm	r13, Z
    39da:	1c 01       	movw	r2, r24
    39dc:	d7 fe       	sbrs	r13, 7
    39de:	3a c0       	rjmp	.+116    	; 0x3a54 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    39e0:	51 e0       	ldi	r21, 0x01	; 1
    39e2:	c5 12       	cpse	r12, r21
    39e4:	16 c0       	rjmp	.+44     	; 0x3a12 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    39e6:	6b 81       	ldd	r22, Y+3	; 0x03
    39e8:	61 30       	cpi	r22, 0x01	; 1
    39ea:	99 f4       	brne	.+38     	; 0x3a12 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    39ec:	aa 8d       	ldd	r26, Y+26	; 0x1a
    39ee:	bb 8d       	ldd	r27, Y+27	; 0x1b
    39f0:	ed 91       	ld	r30, X+
    39f2:	fc 91       	ld	r31, X
    39f4:	11 97       	sbiw	r26, 0x01	; 1
    39f6:	04 84       	ldd	r0, Z+12	; 0x0c
    39f8:	f5 85       	ldd	r31, Z+13	; 0x0d
    39fa:	e0 2d       	mov	r30, r0
    39fc:	28 85       	ldd	r18, Y+8	; 0x08
    39fe:	39 85       	ldd	r19, Y+9	; 0x09
    3a00:	4a 89       	ldd	r20, Y+18	; 0x12
    3a02:	5b 89       	ldd	r21, Y+19	; 0x13
    3a04:	6e 89       	ldd	r22, Y+22	; 0x16
    3a06:	7f 89       	ldd	r23, Y+23	; 0x17
    3a08:	69 0d       	add	r22, r9
    3a0a:	71 1d       	adc	r23, r1
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	09 95       	icall
    3a10:	21 c0       	rjmp	.+66     	; 0x3a54 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    3a12:	8c 81       	ldd	r24, Y+4	; 0x04
    3a14:	9d 81       	ldd	r25, Y+5	; 0x05
    3a16:	89 0d       	add	r24, r9
    3a18:	91 1d       	adc	r25, r1
    3a1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a1c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3a1e:	8e 9f       	mul	r24, r30
    3a20:	b0 01       	movw	r22, r0
    3a22:	8f 9f       	mul	r24, r31
    3a24:	70 0d       	add	r23, r0
    3a26:	9e 9f       	mul	r25, r30
    3a28:	70 0d       	add	r23, r0
    3a2a:	11 24       	eor	r1, r1
    3a2c:	64 0d       	add	r22, r4
    3a2e:	75 1d       	adc	r23, r5
    3a30:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a32:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a34:	ed 91       	ld	r30, X+
    3a36:	fc 91       	ld	r31, X
    3a38:	11 97       	sbiw	r26, 0x01	; 1
    3a3a:	06 84       	ldd	r0, Z+14	; 0x0e
    3a3c:	f7 85       	ldd	r31, Z+15	; 0x0f
    3a3e:	e0 2d       	mov	r30, r0
    3a40:	e8 84       	ldd	r14, Y+8	; 0x08
    3a42:	f9 84       	ldd	r15, Y+9	; 0x09
    3a44:	0a 85       	ldd	r16, Y+10	; 0x0a
    3a46:	1b 85       	ldd	r17, Y+11	; 0x0b
    3a48:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a4a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a4c:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a4e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3a50:	cd 01       	movw	r24, r26
    3a52:	09 95       	icall
    3a54:	dd 0c       	add	r13, r13
    3a56:	93 94       	inc	r9
    3a58:	8b 2d       	mov	r24, r11
    3a5a:	b0 cf       	rjmp	.-160    	; 0x39bc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    3a5c:	67 0c       	add	r6, r7
    3a5e:	83 94       	inc	r8
    3a60:	8d cf       	rjmp	.-230    	; 0x397c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    3a62:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a64:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a66:	ed 91       	ld	r30, X+
    3a68:	fc 91       	ld	r31, X
    3a6a:	11 97       	sbiw	r26, 0x01	; 1
    3a6c:	06 88       	ldd	r0, Z+22	; 0x16
    3a6e:	f7 89       	ldd	r31, Z+23	; 0x17
    3a70:	e0 2d       	mov	r30, r0
    3a72:	cd 01       	movw	r24, r26
    3a74:	6b 96       	adiw	r28, 0x1b	; 27
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	bf 90       	pop	r11
    3a92:	af 90       	pop	r10
    3a94:	9f 90       	pop	r9
    3a96:	8f 90       	pop	r8
    3a98:	7f 90       	pop	r7
    3a9a:	6f 90       	pop	r6
    3a9c:	5f 90       	pop	r5
    3a9e:	4f 90       	pop	r4
    3aa0:	3f 90       	pop	r3
    3aa2:	2f 90       	pop	r2
    3aa4:	09 94       	ijmp
    3aa6:	6b 96       	adiw	r28, 0x1b	; 27
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	6f 90       	pop	r6
    3ace:	5f 90       	pop	r5
    3ad0:	4f 90       	pop	r4
    3ad2:	3f 90       	pop	r3
    3ad4:	2f 90       	pop	r2
    3ad6:	08 95       	ret

00003ad8 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    3ad8:	8f 92       	push	r8
    3ada:	9f 92       	push	r9
    3adc:	af 92       	push	r10
    3ade:	cf 92       	push	r12
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	ec 01       	movw	r28, r24
    3aee:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    3af0:	89 8d       	ldd	r24, Y+25	; 0x19
    3af2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	09 f0       	breq	.+2      	; 0x3afa <_ZN12Adafruit_GFX5writeEh+0x22>
    3af8:	42 c0       	rjmp	.+132    	; 0x3b7e <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    3afa:	6a 30       	cpi	r22, 0x0A	; 10
    3afc:	59 f4       	brne	.+22     	; 0x3b14 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    3afe:	1d 86       	std	Y+13, r1	; 0x0d
    3b00:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    3b02:	2d 89       	ldd	r18, Y+21	; 0x15
    3b04:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b06:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b08:	38 e0       	ldi	r19, 0x08	; 8
    3b0a:	23 9f       	mul	r18, r19
    3b0c:	80 0d       	add	r24, r0
    3b0e:	91 1d       	adc	r25, r1
    3b10:	11 24       	eor	r1, r1
    3b12:	43 c0       	rjmp	.+134    	; 0x3b9a <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    3b14:	6d 30       	cpi	r22, 0x0D	; 13
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <_ZN12Adafruit_GFX5writeEh+0x42>
    3b18:	aa c0       	rjmp	.+340    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1c:	88 23       	and	r24, r24
    3b1e:	c9 f0       	breq	.+50     	; 0x3b52 <_ZN12Adafruit_GFX5writeEh+0x7a>
    3b20:	3c 89       	ldd	r19, Y+20	; 0x14
    3b22:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b24:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b26:	46 e0       	ldi	r20, 0x06	; 6
    3b28:	34 9f       	mul	r19, r20
    3b2a:	80 0d       	add	r24, r0
    3b2c:	91 1d       	adc	r25, r1
    3b2e:	11 24       	eor	r1, r1
    3b30:	48 85       	ldd	r20, Y+8	; 0x08
    3b32:	59 85       	ldd	r21, Y+9	; 0x09
    3b34:	48 17       	cp	r20, r24
    3b36:	59 07       	cpc	r21, r25
    3b38:	64 f4       	brge	.+24     	; 0x3b52 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    3b3a:	1d 86       	std	Y+13, r1	; 0x0d
    3b3c:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    3b3e:	3d 89       	ldd	r19, Y+21	; 0x15
    3b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b44:	48 e0       	ldi	r20, 0x08	; 8
    3b46:	34 9f       	mul	r19, r20
    3b48:	80 0d       	add	r24, r0
    3b4a:	91 1d       	adc	r25, r1
    3b4c:	11 24       	eor	r1, r1
    3b4e:	9f 87       	std	Y+15, r25	; 0x0f
    3b50:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    3b52:	ea 88       	ldd	r14, Y+18	; 0x12
    3b54:	fb 88       	ldd	r15, Y+19	; 0x13
    3b56:	08 89       	ldd	r16, Y+16	; 0x10
    3b58:	19 89       	ldd	r17, Y+17	; 0x11
    3b5a:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b5c:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b60:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b62:	ad 88       	ldd	r10, Y+21	; 0x15
    3b64:	cc 88       	ldd	r12, Y+20	; 0x14
    3b66:	ce 01       	movw	r24, r28
    3b68:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    3b6c:	2c 89       	ldd	r18, Y+20	; 0x14
    3b6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b70:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b72:	36 e0       	ldi	r19, 0x06	; 6
    3b74:	23 9f       	mul	r18, r19
    3b76:	80 0d       	add	r24, r0
    3b78:	91 1d       	adc	r25, r1
    3b7a:	11 24       	eor	r1, r1
    3b7c:	3e c0       	rjmp	.+124    	; 0x3bfa <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    3b7e:	6a 30       	cpi	r22, 0x0A	; 10
    3b80:	79 f4       	brne	.+30     	; 0x3ba0 <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    3b82:	1d 86       	std	Y+13, r1	; 0x0d
    3b84:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3b86:	2d 89       	ldd	r18, Y+21	; 0x15
    3b88:	fc 01       	movw	r30, r24
    3b8a:	38 96       	adiw	r30, 0x08	; 8
    3b8c:	e4 91       	lpm	r30, Z
    3b8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b90:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b92:	2e 9f       	mul	r18, r30
    3b94:	80 0d       	add	r24, r0
    3b96:	91 1d       	adc	r25, r1
    3b98:	11 24       	eor	r1, r1
    3b9a:	9f 87       	std	Y+15, r25	; 0x0f
    3b9c:	8e 87       	std	Y+14, r24	; 0x0e
    3b9e:	67 c0       	rjmp	.+206    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    3ba0:	6d 30       	cpi	r22, 0x0D	; 13
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <_ZN12Adafruit_GFX5writeEh+0xce>
    3ba4:	64 c0       	rjmp	.+200    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	34 96       	adiw	r30, 0x04	; 4
    3baa:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    3bac:	63 17       	cp	r22, r19
    3bae:	08 f4       	brcc	.+2      	; 0x3bb2 <_ZN12Adafruit_GFX5writeEh+0xda>
    3bb0:	5e c0       	rjmp	.+188    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
    3bb2:	32 96       	adiw	r30, 0x02	; 2
    3bb4:	e4 91       	lpm	r30, Z
    3bb6:	e6 17       	cp	r30, r22
    3bb8:	08 f4       	brcc	.+2      	; 0x3bbc <_ZN12Adafruit_GFX5writeEh+0xe4>
    3bba:	59 c0       	rjmp	.+178    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    3bbc:	46 2f       	mov	r20, r22
    3bbe:	43 1b       	sub	r20, r19
    3bc0:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	32 96       	adiw	r30, 0x02	; 2
    3bc6:	85 90       	lpm	r8, Z+
    3bc8:	94 90       	lpm	r9, Z
    3bca:	47 e0       	ldi	r20, 0x07	; 7
    3bcc:	34 9f       	mul	r19, r20
    3bce:	80 0c       	add	r8, r0
    3bd0:	91 1c       	adc	r9, r1
    3bd2:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    3bd4:	f4 01       	movw	r30, r8
    3bd6:	32 96       	adiw	r30, 0x02	; 2
    3bd8:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    3bda:	31 96       	adiw	r30, 0x01	; 1
    3bdc:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3bde:	33 23       	and	r19, r19
    3be0:	11 f0       	breq	.+4      	; 0x3be6 <_ZN12Adafruit_GFX5writeEh+0x10e>
    3be2:	e1 11       	cpse	r30, r1
    3be4:	0d c0       	rjmp	.+26     	; 0x3c00 <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    3be6:	f4 01       	movw	r30, r8
    3be8:	34 96       	adiw	r30, 0x04	; 4
    3bea:	e4 91       	lpm	r30, Z
    3bec:	2c 89       	ldd	r18, Y+20	; 0x14
    3bee:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bf0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bf2:	e2 9f       	mul	r30, r18
    3bf4:	80 0d       	add	r24, r0
    3bf6:	91 1d       	adc	r25, r1
    3bf8:	11 24       	eor	r1, r1
    3bfa:	9d 87       	std	Y+13, r25	; 0x0d
    3bfc:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    3bfe:	37 c0       	rjmp	.+110    	; 0x3c6e <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    3c00:	f4 01       	movw	r30, r8
    3c02:	35 96       	adiw	r30, 0x05	; 5
    3c04:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    3c06:	5f 89       	ldd	r21, Y+23	; 0x17
    3c08:	55 23       	and	r21, r21
    3c0a:	19 f1       	breq	.+70     	; 0x3c52 <_ZN12Adafruit_GFX5writeEh+0x17a>
    3c0c:	5c 89       	ldd	r21, Y+20	; 0x14
    3c0e:	e3 2f       	mov	r30, r19
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	e4 0f       	add	r30, r20
    3c14:	f1 1d       	adc	r31, r1
    3c16:	47 fd       	sbrc	r20, 7
    3c18:	fa 95       	dec	r31
    3c1a:	5e 9f       	mul	r21, r30
    3c1c:	b0 01       	movw	r22, r0
    3c1e:	5f 9f       	mul	r21, r31
    3c20:	70 0d       	add	r23, r0
    3c22:	11 24       	eor	r1, r1
    3c24:	4c 85       	ldd	r20, Y+12	; 0x0c
    3c26:	5d 85       	ldd	r21, Y+13	; 0x0d
    3c28:	46 0f       	add	r20, r22
    3c2a:	57 1f       	adc	r21, r23
    3c2c:	68 85       	ldd	r22, Y+8	; 0x08
    3c2e:	79 85       	ldd	r23, Y+9	; 0x09
    3c30:	64 17       	cp	r22, r20
    3c32:	75 07       	cpc	r23, r21
    3c34:	74 f4       	brge	.+28     	; 0x3c52 <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    3c36:	1d 86       	std	Y+13, r1	; 0x0d
    3c38:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    3c3a:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	38 96       	adiw	r30, 0x08	; 8
    3c40:	e4 91       	lpm	r30, Z
    3c42:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c44:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c46:	3e 9f       	mul	r19, r30
    3c48:	80 0d       	add	r24, r0
    3c4a:	91 1d       	adc	r25, r1
    3c4c:	11 24       	eor	r1, r1
    3c4e:	9f 87       	std	Y+15, r25	; 0x0f
    3c50:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    3c52:	ea 88       	ldd	r14, Y+18	; 0x12
    3c54:	fb 88       	ldd	r15, Y+19	; 0x13
    3c56:	08 89       	ldd	r16, Y+16	; 0x10
    3c58:	19 89       	ldd	r17, Y+17	; 0x11
    3c5a:	4e 85       	ldd	r20, Y+14	; 0x0e
    3c5c:	5f 85       	ldd	r21, Y+15	; 0x0f
    3c5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c60:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c62:	ad 88       	ldd	r10, Y+21	; 0x15
    3c64:	cc 88       	ldd	r12, Y+20	; 0x14
    3c66:	ce 01       	movw	r24, r28
    3c68:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3c6c:	bc cf       	rjmp	.-136    	; 0x3be6 <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	ff 90       	pop	r15
    3c7c:	ef 90       	pop	r14
    3c7e:	cf 90       	pop	r12
    3c80:	af 90       	pop	r10
    3c82:	9f 90       	pop	r9
    3c84:	8f 90       	pop	r8
    3c86:	08 95       	ret

00003c88 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    3c88:	61 11       	cpse	r22, r1
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	fc 01       	movw	r30, r24
    3c90:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    3c92:	41 11       	cpse	r20, r1
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    3c96:	41 e0       	ldi	r20, 0x01	; 1
    3c98:	fc 01       	movw	r30, r24
    3c9a:	45 8b       	std	Z+21, r20	; 0x15
    3c9c:	08 95       	ret

00003c9e <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    3c9e:	46 2f       	mov	r20, r22
    3ca0:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <_ZN12Adafruit_GFX11setTextSizeEhh>

00003ca4 <_ZN17Adafruit_NeoPixelD1Ev>:

/*!
  @brief   Retrieve the last-set brightness value for the strip.
  @return  Brightness value: 0 = minimum (off), 255 = maximum.
*/
uint8_t Adafruit_NeoPixel::getBrightness(void) const { return brightness - 1; }
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	ec 01       	movw	r28, r24
    3caa:	89 85       	ldd	r24, Y+9	; 0x09
    3cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cae:	0e 94 b2 30 	call	0x6164	; 0x6164 <free>
    3cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cb6:	97 fd       	sbrc	r25, 7
    3cb8:	05 c0       	rjmp	.+10     	; 0x3cc4 <_ZN17Adafruit_NeoPixelD1Ev+0x20>
    3cba:	60 e0       	ldi	r22, 0x00	; 0
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <pinMode>
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	08 95       	ret

00003cca <_ZN17Adafruit_NeoPixel5beginEv>:
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	ec 01       	movw	r28, r24
    3cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd4:	97 fd       	sbrc	r25, 7
    3cd6:	07 c0       	rjmp	.+14     	; 0x3ce6 <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    3cd8:	61 e0       	ldi	r22, 0x01	; 1
    3cda:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ce2:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	89 83       	std	Y+1, r24	; 0x01
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <_ZN17Adafruit_NeoPixel12updateLengthEj>:
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	0f 93       	push	r16
    3cf6:	1f 93       	push	r17
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	ec 01       	movw	r28, r24
    3cfe:	7b 01       	movw	r14, r22
    3d00:	89 85       	ldd	r24, Y+9	; 0x09
    3d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d04:	0e 94 b2 30 	call	0x6164	; 0x6164 <free>
    3d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d0c:	98 17       	cp	r25, r24
    3d0e:	19 f0       	breq	.+6      	; 0x3d16 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x26>
    3d10:	84 e0       	ldi	r24, 0x04	; 4
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <_ZN17Adafruit_NeoPixel12updateLengthEj+0x2a>
    3d16:	83 e0       	ldi	r24, 0x03	; 3
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	8e 9d       	mul	r24, r14
    3d1c:	80 01       	movw	r16, r0
    3d1e:	8f 9d       	mul	r24, r15
    3d20:	10 0d       	add	r17, r0
    3d22:	9e 9d       	mul	r25, r14
    3d24:	10 0d       	add	r17, r0
    3d26:	11 24       	eor	r1, r1
    3d28:	1d 83       	std	Y+5, r17	; 0x05
    3d2a:	0c 83       	std	Y+4, r16	; 0x04
    3d2c:	c8 01       	movw	r24, r16
    3d2e:	0e 94 1a 30 	call	0x6034	; 0x6034 <malloc>
    3d32:	9a 87       	std	Y+10, r25	; 0x0a
    3d34:	89 87       	std	Y+9, r24	; 0x09
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	41 f0       	breq	.+16     	; 0x3d4a <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5a>
    3d3a:	a8 01       	movw	r20, r16
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <memset>
    3d44:	fb 82       	std	Y+3, r15	; 0x03
    3d46:	ea 82       	std	Y+2, r14	; 0x02
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x62>
    3d4a:	1d 82       	std	Y+5, r1	; 0x05
    3d4c:	1c 82       	std	Y+4, r1	; 0x04
    3d4e:	1b 82       	std	Y+3, r1	; 0x03
    3d50:	1a 82       	std	Y+2, r1	; 0x02
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	1f 91       	pop	r17
    3d58:	0f 91       	pop	r16
    3d5a:	ff 90       	pop	r15
    3d5c:	ef 90       	pop	r14
    3d5e:	08 95       	ret

00003d60 <_ZN17Adafruit_NeoPixel10updateTypeEj>:
    3d60:	fc 01       	movw	r30, r24
    3d62:	31 e0       	ldi	r19, 0x01	; 1
    3d64:	96 85       	ldd	r25, Z+14	; 0x0e
    3d66:	83 85       	ldd	r24, Z+11	; 0x0b
    3d68:	98 13       	cpse	r25, r24
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	26 e0       	ldi	r18, 0x06	; 6
    3d70:	96 95       	lsr	r25
    3d72:	87 95       	ror	r24
    3d74:	2a 95       	dec	r18
    3d76:	e1 f7       	brne	.-8      	; 0x3d70 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
    3d78:	28 2f       	mov	r18, r24
    3d7a:	23 70       	andi	r18, 0x03	; 3
    3d7c:	26 87       	std	Z+14, r18	; 0x0e
    3d7e:	cb 01       	movw	r24, r22
    3d80:	44 e0       	ldi	r20, 0x04	; 4
    3d82:	96 95       	lsr	r25
    3d84:	87 95       	ror	r24
    3d86:	4a 95       	dec	r20
    3d88:	e1 f7       	brne	.-8      	; 0x3d82 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
    3d8a:	83 70       	andi	r24, 0x03	; 3
    3d8c:	83 87       	std	Z+11, r24	; 0x0b
    3d8e:	ab 01       	movw	r20, r22
    3d90:	56 95       	lsr	r21
    3d92:	47 95       	ror	r20
    3d94:	56 95       	lsr	r21
    3d96:	47 95       	ror	r20
    3d98:	43 70       	andi	r20, 0x03	; 3
    3d9a:	44 87       	std	Z+12, r20	; 0x0c
    3d9c:	96 2f       	mov	r25, r22
    3d9e:	93 70       	andi	r25, 0x03	; 3
    3da0:	95 87       	std	Z+13, r25	; 0x0d
    3da2:	91 e0       	ldi	r25, 0x01	; 1
    3da4:	6f 3f       	cpi	r22, 0xFF	; 255
    3da6:	71 05       	cpc	r23, r1
    3da8:	11 f0       	breq	.+4      	; 0x3dae <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    3daa:	08 f0       	brcs	.+2      	; 0x3dae <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	90 83       	st	Z, r25
    3db0:	41 85       	ldd	r20, Z+9	; 0x09
    3db2:	52 85       	ldd	r21, Z+10	; 0x0a
    3db4:	45 2b       	or	r20, r21
    3db6:	51 f0       	breq	.+20     	; 0x3dcc <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	28 13       	cpse	r18, r24
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	39 17       	cp	r19, r25
    3dc0:	29 f0       	breq	.+10     	; 0x3dcc <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    3dc2:	62 81       	ldd	r22, Z+2	; 0x02
    3dc4:	73 81       	ldd	r23, Z+3	; 0x03
    3dc6:	cf 01       	movw	r24, r30
    3dc8:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    3dcc:	08 95       	ret

00003dce <_ZN17Adafruit_NeoPixel4showEv>:
    3dce:	cf 92       	push	r12
    3dd0:	df 92       	push	r13
    3dd2:	ef 92       	push	r14
    3dd4:	ff 92       	push	r15
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	29 97       	sbiw	r28, 0x09	; 9
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	8c 01       	movw	r16, r24
    3df0:	dc 01       	movw	r26, r24
    3df2:	19 96       	adiw	r26, 0x09	; 9
    3df4:	8d 91       	ld	r24, X+
    3df6:	9c 91       	ld	r25, X
    3df8:	1a 97       	sbiw	r26, 0x0a	; 10
    3dfa:	89 2b       	or	r24, r25
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    3dfe:	8f c1       	rjmp	.+798    	; 0x411e <nextbyte20+0x30>
    3e00:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    3e04:	f8 01       	movw	r30, r16
    3e06:	c7 84       	ldd	r12, Z+15	; 0x0f
    3e08:	d0 88       	ldd	r13, Z+16	; 0x10
    3e0a:	e1 88       	ldd	r14, Z+17	; 0x11
    3e0c:	f2 88       	ldd	r15, Z+18	; 0x12
    3e0e:	6c 15       	cp	r22, r12
    3e10:	7d 05       	cpc	r23, r13
    3e12:	8e 05       	cpc	r24, r14
    3e14:	9f 05       	cpc	r25, r15
    3e16:	20 f4       	brcc	.+8      	; 0x3e20 <_ZN17Adafruit_NeoPixel4showEv+0x52>
    3e18:	67 87       	std	Z+15, r22	; 0x0f
    3e1a:	70 8b       	std	Z+16, r23	; 0x10
    3e1c:	81 8b       	std	Z+17, r24	; 0x11
    3e1e:	92 8b       	std	Z+18, r25	; 0x12
    3e20:	f8 01       	movw	r30, r16
    3e22:	c7 84       	ldd	r12, Z+15	; 0x0f
    3e24:	d0 88       	ldd	r13, Z+16	; 0x10
    3e26:	e1 88       	ldd	r14, Z+17	; 0x11
    3e28:	f2 88       	ldd	r15, Z+18	; 0x12
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	8c 19       	sub	r24, r12
    3e30:	9d 09       	sbc	r25, r13
    3e32:	ae 09       	sbc	r26, r14
    3e34:	bf 09       	sbc	r27, r15
    3e36:	8c 32       	cpi	r24, 0x2C	; 44
    3e38:	91 40       	sbci	r25, 0x01	; 1
    3e3a:	a1 05       	cpc	r26, r1
    3e3c:	b1 05       	cpc	r27, r1
    3e3e:	00 f3       	brcs	.-64     	; 0x3e00 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    3e40:	f8 94       	cli
    3e42:	d8 01       	movw	r26, r16
    3e44:	14 96       	adiw	r26, 0x04	; 4
    3e46:	8d 91       	ld	r24, X+
    3e48:	9c 91       	ld	r25, X
    3e4a:	15 97       	sbiw	r26, 0x05	; 5
    3e4c:	9a 83       	std	Y+2, r25	; 0x02
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	19 96       	adiw	r26, 0x09	; 9
    3e52:	0d 90       	ld	r0, X+
    3e54:	bc 91       	ld	r27, X
    3e56:	a0 2d       	mov	r26, r0
    3e58:	7d 01       	movw	r14, r26
    3e5a:	ef ef       	ldi	r30, 0xFF	; 255
    3e5c:	ee 1a       	sub	r14, r30
    3e5e:	fe 0a       	sbc	r15, r30
    3e60:	8c 91       	ld	r24, X
    3e62:	89 87       	std	Y+9, r24	; 0x09
    3e64:	d8 01       	movw	r26, r16
    3e66:	8c 91       	ld	r24, X
    3e68:	53 96       	adiw	r26, 0x13	; 19
    3e6a:	0d 90       	ld	r0, X+
    3e6c:	bc 91       	ld	r27, X
    3e6e:	a0 2d       	mov	r26, r0
    3e70:	88 23       	and	r24, r24
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <_ZN17Adafruit_NeoPixel4showEv+0xa8>
    3e74:	1a c1       	rjmp	.+564    	; 0x40aa <headC+0x88>
    3e76:	1d 82       	std	Y+5, r1	; 0x05
    3e78:	ab 32       	cpi	r26, 0x2B	; 43
    3e7a:	b1 05       	cpc	r27, r1
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
    3e7e:	59 c0       	rjmp	.+178    	; 0x3f32 <headD+0x82>
    3e80:	9b b1       	in	r25, 0x0b	; 11
    3e82:	f8 01       	movw	r30, r16
    3e84:	85 89       	ldd	r24, Z+21	; 0x15
    3e86:	98 2b       	or	r25, r24
    3e88:	98 87       	std	Y+8, r25	; 0x08
    3e8a:	9b b1       	in	r25, 0x0b	; 11
    3e8c:	80 95       	com	r24
    3e8e:	89 23       	and	r24, r25
    3e90:	8f 83       	std	Y+7, r24	; 0x07
    3e92:	8f 81       	ldd	r24, Y+7	; 0x07
    3e94:	8e 83       	std	Y+6, r24	; 0x06
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	87 ff       	sbrs	r24, 7
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <_ZN17Adafruit_NeoPixel4showEv+0xd2>
    3e9c:	88 85       	ldd	r24, Y+8	; 0x08
    3e9e:	8e 83       	std	Y+6, r24	; 0x06
    3ea0:	58 85       	ldd	r21, Y+8	; 0x08
    3ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea4:	49 85       	ldd	r20, Y+9	; 0x09
    3ea6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ea8:	2d 81       	ldd	r18, Y+5	; 0x05
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	9a 81       	ldd	r25, Y+2	; 0x02
    3eae:	d7 01       	movw	r26, r14

00003eb0 <headD>:
    3eb0:	5b b9       	out	0x0b, r21	; 11
    3eb2:	26 2f       	mov	r18, r22
    3eb4:	3b b9       	out	0x0b, r19	; 11
    3eb6:	00 c0       	rjmp	.+0      	; 0x3eb8 <headD+0x8>
    3eb8:	46 fd       	sbrc	r20, 6
    3eba:	25 2f       	mov	r18, r21
    3ebc:	6b b9       	out	0x0b, r22	; 11
    3ebe:	00 c0       	rjmp	.+0      	; 0x3ec0 <headD+0x10>
    3ec0:	5b b9       	out	0x0b, r21	; 11
    3ec2:	36 2f       	mov	r19, r22
    3ec4:	2b b9       	out	0x0b, r18	; 11
    3ec6:	00 c0       	rjmp	.+0      	; 0x3ec8 <headD+0x18>
    3ec8:	45 fd       	sbrc	r20, 5
    3eca:	35 2f       	mov	r19, r21
    3ecc:	6b b9       	out	0x0b, r22	; 11
    3ece:	00 c0       	rjmp	.+0      	; 0x3ed0 <headD+0x20>
    3ed0:	5b b9       	out	0x0b, r21	; 11
    3ed2:	26 2f       	mov	r18, r22
    3ed4:	3b b9       	out	0x0b, r19	; 11
    3ed6:	00 c0       	rjmp	.+0      	; 0x3ed8 <headD+0x28>
    3ed8:	44 fd       	sbrc	r20, 4
    3eda:	25 2f       	mov	r18, r21
    3edc:	6b b9       	out	0x0b, r22	; 11
    3ede:	00 c0       	rjmp	.+0      	; 0x3ee0 <headD+0x30>
    3ee0:	5b b9       	out	0x0b, r21	; 11
    3ee2:	36 2f       	mov	r19, r22
    3ee4:	2b b9       	out	0x0b, r18	; 11
    3ee6:	00 c0       	rjmp	.+0      	; 0x3ee8 <headD+0x38>
    3ee8:	43 fd       	sbrc	r20, 3
    3eea:	35 2f       	mov	r19, r21
    3eec:	6b b9       	out	0x0b, r22	; 11
    3eee:	00 c0       	rjmp	.+0      	; 0x3ef0 <headD+0x40>
    3ef0:	5b b9       	out	0x0b, r21	; 11
    3ef2:	26 2f       	mov	r18, r22
    3ef4:	3b b9       	out	0x0b, r19	; 11
    3ef6:	00 c0       	rjmp	.+0      	; 0x3ef8 <headD+0x48>
    3ef8:	42 fd       	sbrc	r20, 2
    3efa:	25 2f       	mov	r18, r21
    3efc:	6b b9       	out	0x0b, r22	; 11
    3efe:	00 c0       	rjmp	.+0      	; 0x3f00 <headD+0x50>
    3f00:	5b b9       	out	0x0b, r21	; 11
    3f02:	36 2f       	mov	r19, r22
    3f04:	2b b9       	out	0x0b, r18	; 11
    3f06:	00 c0       	rjmp	.+0      	; 0x3f08 <headD+0x58>
    3f08:	41 fd       	sbrc	r20, 1
    3f0a:	35 2f       	mov	r19, r21
    3f0c:	6b b9       	out	0x0b, r22	; 11
    3f0e:	00 c0       	rjmp	.+0      	; 0x3f10 <headD+0x60>
    3f10:	5b b9       	out	0x0b, r21	; 11
    3f12:	26 2f       	mov	r18, r22
    3f14:	3b b9       	out	0x0b, r19	; 11
    3f16:	00 c0       	rjmp	.+0      	; 0x3f18 <headD+0x68>
    3f18:	40 fd       	sbrc	r20, 0
    3f1a:	25 2f       	mov	r18, r21
    3f1c:	6b b9       	out	0x0b, r22	; 11
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	5b b9       	out	0x0b, r21	; 11
    3f22:	36 2f       	mov	r19, r22
    3f24:	2b b9       	out	0x0b, r18	; 11
    3f26:	4d 91       	ld	r20, X+
    3f28:	47 fd       	sbrc	r20, 7
    3f2a:	35 2f       	mov	r19, r21
    3f2c:	6b b9       	out	0x0b, r22	; 11
    3f2e:	01 f6       	brne	.-128    	; 0x3eb0 <headD>
    3f30:	b8 c0       	rjmp	.+368    	; 0x40a2 <headC+0x80>
    3f32:	a5 32       	cpi	r26, 0x25	; 37
    3f34:	b1 05       	cpc	r27, r1
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <headD+0x8a>
    3f38:	59 c0       	rjmp	.+178    	; 0x3fec <headB+0x82>
    3f3a:	95 b1       	in	r25, 0x05	; 5
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	85 89       	ldd	r24, Z+21	; 0x15
    3f40:	98 2b       	or	r25, r24
    3f42:	98 87       	std	Y+8, r25	; 0x08
    3f44:	95 b1       	in	r25, 0x05	; 5
    3f46:	80 95       	com	r24
    3f48:	89 23       	and	r24, r25
    3f4a:	8f 83       	std	Y+7, r24	; 0x07
    3f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f4e:	8e 83       	std	Y+6, r24	; 0x06
    3f50:	89 85       	ldd	r24, Y+9	; 0x09
    3f52:	87 ff       	sbrs	r24, 7
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <headD+0xaa>
    3f56:	88 85       	ldd	r24, Y+8	; 0x08
    3f58:	8e 83       	std	Y+6, r24	; 0x06
    3f5a:	58 85       	ldd	r21, Y+8	; 0x08
    3f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5e:	49 85       	ldd	r20, Y+9	; 0x09
    3f60:	3e 81       	ldd	r19, Y+6	; 0x06
    3f62:	2d 81       	ldd	r18, Y+5	; 0x05
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	9a 81       	ldd	r25, Y+2	; 0x02
    3f68:	d7 01       	movw	r26, r14

00003f6a <headB>:
    3f6a:	55 b9       	out	0x05, r21	; 5
    3f6c:	26 2f       	mov	r18, r22
    3f6e:	35 b9       	out	0x05, r19	; 5
    3f70:	00 c0       	rjmp	.+0      	; 0x3f72 <headB+0x8>
    3f72:	46 fd       	sbrc	r20, 6
    3f74:	25 2f       	mov	r18, r21
    3f76:	65 b9       	out	0x05, r22	; 5
    3f78:	00 c0       	rjmp	.+0      	; 0x3f7a <headB+0x10>
    3f7a:	55 b9       	out	0x05, r21	; 5
    3f7c:	36 2f       	mov	r19, r22
    3f7e:	25 b9       	out	0x05, r18	; 5
    3f80:	00 c0       	rjmp	.+0      	; 0x3f82 <headB+0x18>
    3f82:	45 fd       	sbrc	r20, 5
    3f84:	35 2f       	mov	r19, r21
    3f86:	65 b9       	out	0x05, r22	; 5
    3f88:	00 c0       	rjmp	.+0      	; 0x3f8a <headB+0x20>
    3f8a:	55 b9       	out	0x05, r21	; 5
    3f8c:	26 2f       	mov	r18, r22
    3f8e:	35 b9       	out	0x05, r19	; 5
    3f90:	00 c0       	rjmp	.+0      	; 0x3f92 <headB+0x28>
    3f92:	44 fd       	sbrc	r20, 4
    3f94:	25 2f       	mov	r18, r21
    3f96:	65 b9       	out	0x05, r22	; 5
    3f98:	00 c0       	rjmp	.+0      	; 0x3f9a <headB+0x30>
    3f9a:	55 b9       	out	0x05, r21	; 5
    3f9c:	36 2f       	mov	r19, r22
    3f9e:	25 b9       	out	0x05, r18	; 5
    3fa0:	00 c0       	rjmp	.+0      	; 0x3fa2 <headB+0x38>
    3fa2:	43 fd       	sbrc	r20, 3
    3fa4:	35 2f       	mov	r19, r21
    3fa6:	65 b9       	out	0x05, r22	; 5
    3fa8:	00 c0       	rjmp	.+0      	; 0x3faa <headB+0x40>
    3faa:	55 b9       	out	0x05, r21	; 5
    3fac:	26 2f       	mov	r18, r22
    3fae:	35 b9       	out	0x05, r19	; 5
    3fb0:	00 c0       	rjmp	.+0      	; 0x3fb2 <headB+0x48>
    3fb2:	42 fd       	sbrc	r20, 2
    3fb4:	25 2f       	mov	r18, r21
    3fb6:	65 b9       	out	0x05, r22	; 5
    3fb8:	00 c0       	rjmp	.+0      	; 0x3fba <headB+0x50>
    3fba:	55 b9       	out	0x05, r21	; 5
    3fbc:	36 2f       	mov	r19, r22
    3fbe:	25 b9       	out	0x05, r18	; 5
    3fc0:	00 c0       	rjmp	.+0      	; 0x3fc2 <headB+0x58>
    3fc2:	41 fd       	sbrc	r20, 1
    3fc4:	35 2f       	mov	r19, r21
    3fc6:	65 b9       	out	0x05, r22	; 5
    3fc8:	00 c0       	rjmp	.+0      	; 0x3fca <headB+0x60>
    3fca:	55 b9       	out	0x05, r21	; 5
    3fcc:	26 2f       	mov	r18, r22
    3fce:	35 b9       	out	0x05, r19	; 5
    3fd0:	00 c0       	rjmp	.+0      	; 0x3fd2 <headB+0x68>
    3fd2:	40 fd       	sbrc	r20, 0
    3fd4:	25 2f       	mov	r18, r21
    3fd6:	65 b9       	out	0x05, r22	; 5
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	55 b9       	out	0x05, r21	; 5
    3fdc:	36 2f       	mov	r19, r22
    3fde:	25 b9       	out	0x05, r18	; 5
    3fe0:	4d 91       	ld	r20, X+
    3fe2:	47 fd       	sbrc	r20, 7
    3fe4:	35 2f       	mov	r19, r21
    3fe6:	65 b9       	out	0x05, r22	; 5
    3fe8:	01 f6       	brne	.-128    	; 0x3f6a <headB>
    3fea:	5b c0       	rjmp	.+182    	; 0x40a2 <headC+0x80>
    3fec:	98 97       	sbiw	r26, 0x28	; 40
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <headB+0x88>
    3ff0:	8c c0       	rjmp	.+280    	; 0x410a <nextbyte20+0x1c>
    3ff2:	98 b1       	in	r25, 0x08	; 8
    3ff4:	f8 01       	movw	r30, r16
    3ff6:	85 89       	ldd	r24, Z+21	; 0x15
    3ff8:	98 2b       	or	r25, r24
    3ffa:	98 87       	std	Y+8, r25	; 0x08
    3ffc:	98 b1       	in	r25, 0x08	; 8
    3ffe:	80 95       	com	r24
    4000:	89 23       	and	r24, r25
    4002:	8f 83       	std	Y+7, r24	; 0x07
    4004:	8f 81       	ldd	r24, Y+7	; 0x07
    4006:	8e 83       	std	Y+6, r24	; 0x06
    4008:	89 85       	ldd	r24, Y+9	; 0x09
    400a:	87 ff       	sbrs	r24, 7
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <headB+0xa8>
    400e:	88 85       	ldd	r24, Y+8	; 0x08
    4010:	8e 83       	std	Y+6, r24	; 0x06
    4012:	58 85       	ldd	r21, Y+8	; 0x08
    4014:	6f 81       	ldd	r22, Y+7	; 0x07
    4016:	49 85       	ldd	r20, Y+9	; 0x09
    4018:	3e 81       	ldd	r19, Y+6	; 0x06
    401a:	2d 81       	ldd	r18, Y+5	; 0x05
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	d7 01       	movw	r26, r14

00004022 <headC>:
    4022:	58 b9       	out	0x08, r21	; 8
    4024:	26 2f       	mov	r18, r22
    4026:	38 b9       	out	0x08, r19	; 8
    4028:	00 c0       	rjmp	.+0      	; 0x402a <headC+0x8>
    402a:	46 fd       	sbrc	r20, 6
    402c:	25 2f       	mov	r18, r21
    402e:	68 b9       	out	0x08, r22	; 8
    4030:	00 c0       	rjmp	.+0      	; 0x4032 <headC+0x10>
    4032:	58 b9       	out	0x08, r21	; 8
    4034:	36 2f       	mov	r19, r22
    4036:	28 b9       	out	0x08, r18	; 8
    4038:	00 c0       	rjmp	.+0      	; 0x403a <headC+0x18>
    403a:	45 fd       	sbrc	r20, 5
    403c:	35 2f       	mov	r19, r21
    403e:	68 b9       	out	0x08, r22	; 8
    4040:	00 c0       	rjmp	.+0      	; 0x4042 <headC+0x20>
    4042:	58 b9       	out	0x08, r21	; 8
    4044:	26 2f       	mov	r18, r22
    4046:	38 b9       	out	0x08, r19	; 8
    4048:	00 c0       	rjmp	.+0      	; 0x404a <headC+0x28>
    404a:	44 fd       	sbrc	r20, 4
    404c:	25 2f       	mov	r18, r21
    404e:	68 b9       	out	0x08, r22	; 8
    4050:	00 c0       	rjmp	.+0      	; 0x4052 <headC+0x30>
    4052:	58 b9       	out	0x08, r21	; 8
    4054:	36 2f       	mov	r19, r22
    4056:	28 b9       	out	0x08, r18	; 8
    4058:	00 c0       	rjmp	.+0      	; 0x405a <headC+0x38>
    405a:	43 fd       	sbrc	r20, 3
    405c:	35 2f       	mov	r19, r21
    405e:	68 b9       	out	0x08, r22	; 8
    4060:	00 c0       	rjmp	.+0      	; 0x4062 <headC+0x40>
    4062:	58 b9       	out	0x08, r21	; 8
    4064:	26 2f       	mov	r18, r22
    4066:	38 b9       	out	0x08, r19	; 8
    4068:	00 c0       	rjmp	.+0      	; 0x406a <headC+0x48>
    406a:	42 fd       	sbrc	r20, 2
    406c:	25 2f       	mov	r18, r21
    406e:	68 b9       	out	0x08, r22	; 8
    4070:	00 c0       	rjmp	.+0      	; 0x4072 <headC+0x50>
    4072:	58 b9       	out	0x08, r21	; 8
    4074:	36 2f       	mov	r19, r22
    4076:	28 b9       	out	0x08, r18	; 8
    4078:	00 c0       	rjmp	.+0      	; 0x407a <headC+0x58>
    407a:	41 fd       	sbrc	r20, 1
    407c:	35 2f       	mov	r19, r21
    407e:	68 b9       	out	0x08, r22	; 8
    4080:	00 c0       	rjmp	.+0      	; 0x4082 <headC+0x60>
    4082:	58 b9       	out	0x08, r21	; 8
    4084:	26 2f       	mov	r18, r22
    4086:	38 b9       	out	0x08, r19	; 8
    4088:	00 c0       	rjmp	.+0      	; 0x408a <headC+0x68>
    408a:	40 fd       	sbrc	r20, 0
    408c:	25 2f       	mov	r18, r21
    408e:	68 b9       	out	0x08, r22	; 8
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	58 b9       	out	0x08, r21	; 8
    4094:	36 2f       	mov	r19, r22
    4096:	28 b9       	out	0x08, r18	; 8
    4098:	4d 91       	ld	r20, X+
    409a:	47 fd       	sbrc	r20, 7
    409c:	35 2f       	mov	r19, r21
    409e:	68 b9       	out	0x08, r22	; 8
    40a0:	01 f6       	brne	.-128    	; 0x4022 <headC>
    40a2:	49 87       	std	Y+9, r20	; 0x09
    40a4:	3e 83       	std	Y+6, r19	; 0x06
    40a6:	2d 83       	std	Y+5, r18	; 0x05
    40a8:	2e c0       	rjmp	.+92     	; 0x4106 <nextbyte20+0x18>
    40aa:	9c 91       	ld	r25, X
    40ac:	f8 01       	movw	r30, r16
    40ae:	85 89       	ldd	r24, Z+21	; 0x15
    40b0:	98 2b       	or	r25, r24
    40b2:	98 87       	std	Y+8, r25	; 0x08
    40b4:	9c 91       	ld	r25, X
    40b6:	80 95       	com	r24
    40b8:	89 23       	and	r24, r25
    40ba:	8f 83       	std	Y+7, r24	; 0x07
    40bc:	8f 81       	ldd	r24, Y+7	; 0x07
    40be:	8c 83       	std	Y+4, r24	; 0x04
    40c0:	88 e0       	ldi	r24, 0x08	; 8
    40c2:	8b 83       	std	Y+3, r24	; 0x03
    40c4:	58 85       	ldd	r21, Y+8	; 0x08
    40c6:	6f 81       	ldd	r22, Y+7	; 0x07
    40c8:	49 85       	ldd	r20, Y+9	; 0x09
    40ca:	3b 81       	ldd	r19, Y+3	; 0x03
    40cc:	2c 81       	ldd	r18, Y+4	; 0x04
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	9a 81       	ldd	r25, Y+2	; 0x02
    40d2:	f7 01       	movw	r30, r14

000040d4 <head20>:
    40d4:	5c 93       	st	X, r21
    40d6:	47 fd       	sbrc	r20, 7
    40d8:	25 2f       	mov	r18, r21
    40da:	2c 93       	st	X, r18
    40dc:	26 2f       	mov	r18, r22
    40de:	3a 95       	dec	r19
    40e0:	31 f0       	breq	.+12     	; 0x40ee <nextbyte20>
    40e2:	44 1f       	adc	r20, r20
    40e4:	6c 93       	st	X, r22
    40e6:	00 c0       	rjmp	.+0      	; 0x40e8 <head20+0x14>
    40e8:	00 c0       	rjmp	.+0      	; 0x40ea <head20+0x16>
    40ea:	00 c0       	rjmp	.+0      	; 0x40ec <head20+0x18>
    40ec:	f3 cf       	rjmp	.-26     	; 0x40d4 <head20>

000040ee <nextbyte20>:
    40ee:	6c 93       	st	X, r22
    40f0:	00 00       	nop
    40f2:	38 e0       	ldi	r19, 0x08	; 8
    40f4:	41 91       	ld	r20, Z+
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	69 f7       	brne	.-38     	; 0x40d4 <head20>
    40fa:	f8 01       	movw	r30, r16
    40fc:	b4 8b       	std	Z+20, r27	; 0x14
    40fe:	a3 8b       	std	Z+19, r26	; 0x13
    4100:	49 87       	std	Y+9, r20	; 0x09
    4102:	3b 83       	std	Y+3, r19	; 0x03
    4104:	2c 83       	std	Y+4, r18	; 0x04
    4106:	9a 83       	std	Y+2, r25	; 0x02
    4108:	89 83       	std	Y+1, r24	; 0x01
    410a:	78 94       	sei
    410c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    4110:	d8 01       	movw	r26, r16
    4112:	1f 96       	adiw	r26, 0x0f	; 15
    4114:	6d 93       	st	X+, r22
    4116:	7d 93       	st	X+, r23
    4118:	8d 93       	st	X+, r24
    411a:	9c 93       	st	X, r25
    411c:	52 97       	sbiw	r26, 0x12	; 18
    411e:	29 96       	adiw	r28, 0x09	; 9
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	1f 91       	pop	r17
    4130:	0f 91       	pop	r16
    4132:	ff 90       	pop	r15
    4134:	ef 90       	pop	r14
    4136:	df 90       	pop	r13
    4138:	cf 90       	pop	r12
    413a:	08 95       	ret

0000413c <_ZN17Adafruit_NeoPixel6setPinEi>:
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	ec 01       	movw	r28, r24
    4146:	16 2f       	mov	r17, r22
    4148:	07 2f       	mov	r16, r23
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	88 23       	and	r24, r24
    414e:	39 f0       	breq	.+14     	; 0x415e <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    4150:	8e 81       	ldd	r24, Y+6	; 0x06
    4152:	9f 81       	ldd	r25, Y+7	; 0x07
    4154:	97 fd       	sbrc	r25, 7
    4156:	03 c0       	rjmp	.+6      	; 0x415e <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    415e:	1e 83       	std	Y+6, r17	; 0x06
    4160:	0f 83       	std	Y+7, r16	; 0x07
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	88 23       	and	r24, r24
    4166:	41 f0       	breq	.+16     	; 0x4178 <_ZN17Adafruit_NeoPixel6setPinEi+0x3c>
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	81 2f       	mov	r24, r17
    416c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	81 2f       	mov	r24, r17
    4174:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    4178:	81 2f       	mov	r24, r17
    417a:	90 2f       	mov	r25, r16
    417c:	fc 01       	movw	r30, r24
    417e:	e4 5d       	subi	r30, 0xD4	; 212
    4180:	fe 4f       	sbci	r31, 0xFE	; 254
    4182:	e4 91       	lpm	r30, Z
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	e6 5b       	subi	r30, 0xB6	; 182
    418c:	fe 4f       	sbci	r31, 0xFE	; 254
    418e:	25 91       	lpm	r18, Z+
    4190:	34 91       	lpm	r19, Z
    4192:	3c 8b       	std	Y+20, r19	; 0x14
    4194:	2b 8b       	std	Y+19, r18	; 0x13
    4196:	fc 01       	movw	r30, r24
    4198:	e8 5e       	subi	r30, 0xE8	; 232
    419a:	fe 4f       	sbci	r31, 0xFE	; 254
    419c:	e4 91       	lpm	r30, Z
    419e:	ed 8b       	std	Y+21, r30	; 0x15
    41a0:	df 91       	pop	r29
    41a2:	cf 91       	pop	r28
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	08 95       	ret

000041aa <_ZN17Adafruit_NeoPixelC1Ejij>:
    41aa:	ef 92       	push	r14
    41ac:	ff 92       	push	r15
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	ec 01       	movw	r28, r24
    41b8:	7b 01       	movw	r14, r22
    41ba:	8a 01       	movw	r16, r20
    41bc:	19 82       	std	Y+1, r1	; 0x01
    41be:	18 86       	std	Y+8, r1	; 0x08
    41c0:	1a 86       	std	Y+10, r1	; 0x0a
    41c2:	19 86       	std	Y+9, r1	; 0x09
    41c4:	1f 86       	std	Y+15, r1	; 0x0f
    41c6:	18 8a       	std	Y+16, r1	; 0x10
    41c8:	19 8a       	std	Y+17, r1	; 0x11
    41ca:	1a 8a       	std	Y+18, r1	; 0x12
    41cc:	b9 01       	movw	r22, r18
    41ce:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN17Adafruit_NeoPixel10updateTypeEj>
    41d2:	b7 01       	movw	r22, r14
    41d4:	ce 01       	movw	r24, r28
    41d6:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    41da:	b8 01       	movw	r22, r16
    41dc:	ce 01       	movw	r24, r28
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	ff 90       	pop	r15
    41e8:	ef 90       	pop	r14
    41ea:	0c 94 9e 20 	jmp	0x413c	; 0x413c <_ZN17Adafruit_NeoPixel6setPinEi>

000041ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
    41ee:	7f 92       	push	r7
    41f0:	8f 92       	push	r8
    41f2:	9f 92       	push	r9
    41f4:	af 92       	push	r10
    41f6:	bf 92       	push	r11
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	fc 01       	movw	r30, r24
    420a:	82 81       	ldd	r24, Z+2	; 0x02
    420c:	93 81       	ldd	r25, Z+3	; 0x03
    420e:	68 17       	cp	r22, r24
    4210:	79 07       	cpc	r23, r25
    4212:	08 f0       	brcs	.+2      	; 0x4216 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
    4214:	53 c0       	rjmp	.+166    	; 0x42bc <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    4216:	4a 01       	movw	r8, r20
    4218:	aa 24       	eor	r10, r10
    421a:	bb 24       	eor	r11, r11
    421c:	78 2c       	mov	r7, r8
    421e:	c3 2e       	mov	r12, r19
    4220:	d4 2e       	mov	r13, r20
    4222:	e5 2e       	mov	r14, r21
    4224:	ff 24       	eor	r15, r15
    4226:	bc 2d       	mov	r27, r12
    4228:	a2 2f       	mov	r26, r18
    422a:	80 85       	ldd	r24, Z+8	; 0x08
    422c:	88 23       	and	r24, r24
    422e:	61 f0       	breq	.+24     	; 0x4248 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
    4230:	88 9e       	mul	r8, r24
    4232:	40 01       	movw	r8, r0
    4234:	11 24       	eor	r1, r1
    4236:	79 2c       	mov	r7, r9
    4238:	8c 9d       	mul	r24, r12
    423a:	60 01       	movw	r12, r0
    423c:	11 24       	eor	r1, r1
    423e:	bd 2d       	mov	r27, r13
    4240:	82 9f       	mul	r24, r18
    4242:	70 01       	movw	r14, r0
    4244:	11 24       	eor	r1, r1
    4246:	af 2d       	mov	r26, r15
    4248:	96 85       	ldd	r25, Z+14	; 0x0e
    424a:	d3 85       	ldd	r29, Z+11	; 0x0b
    424c:	e1 84       	ldd	r14, Z+9	; 0x09
    424e:	f2 84       	ldd	r15, Z+10	; 0x0a
    4250:	9d 13       	cpse	r25, r29
    4252:	08 c0       	rjmp	.+16     	; 0x4264 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
    4254:	cb 01       	movw	r24, r22
    4256:	88 0f       	add	r24, r24
    4258:	99 1f       	adc	r25, r25
    425a:	68 0f       	add	r22, r24
    425c:	79 1f       	adc	r23, r25
    425e:	6e 0d       	add	r22, r14
    4260:	7f 1d       	adc	r23, r15
    4262:	1c c0       	rjmp	.+56     	; 0x429c <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    4264:	66 0f       	add	r22, r22
    4266:	77 1f       	adc	r23, r23
    4268:	66 0f       	add	r22, r22
    426a:	77 1f       	adc	r23, r23
    426c:	6e 0d       	add	r22, r14
    426e:	7f 1d       	adc	r23, r15
    4270:	05 2f       	mov	r16, r21
    4272:	11 27       	eor	r17, r17
    4274:	22 27       	eor	r18, r18
    4276:	33 27       	eor	r19, r19
    4278:	7b 01       	movw	r14, r22
    427a:	e9 0e       	add	r14, r25
    427c:	f1 1c       	adc	r15, r1
    427e:	81 11       	cpse	r24, r1
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
    4282:	20 2f       	mov	r18, r16
    4284:	09 c0       	rjmp	.+18     	; 0x4298 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	80 9f       	mul	r24, r16
    428a:	60 01       	movw	r12, r0
    428c:	81 9f       	mul	r24, r17
    428e:	d0 0c       	add	r13, r0
    4290:	90 9f       	mul	r25, r16
    4292:	d0 0c       	add	r13, r0
    4294:	11 24       	eor	r1, r1
    4296:	2d 2d       	mov	r18, r13
    4298:	e7 01       	movw	r28, r14
    429a:	28 83       	st	Y, r18
    429c:	83 85       	ldd	r24, Z+11	; 0x0b
    429e:	9b 01       	movw	r18, r22
    42a0:	28 0f       	add	r18, r24
    42a2:	31 1d       	adc	r19, r1
    42a4:	e9 01       	movw	r28, r18
    42a6:	78 82       	st	Y, r7
    42a8:	84 85       	ldd	r24, Z+12	; 0x0c
    42aa:	eb 01       	movw	r28, r22
    42ac:	c8 0f       	add	r28, r24
    42ae:	d1 1d       	adc	r29, r1
    42b0:	b8 83       	st	Y, r27
    42b2:	85 85       	ldd	r24, Z+13	; 0x0d
    42b4:	fb 01       	movw	r30, r22
    42b6:	e8 0f       	add	r30, r24
    42b8:	f1 1d       	adc	r31, r1
    42ba:	a0 83       	st	Z, r26
    42bc:	df 91       	pop	r29
    42be:	cf 91       	pop	r28
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	ff 90       	pop	r15
    42c6:	ef 90       	pop	r14
    42c8:	df 90       	pop	r13
    42ca:	cf 90       	pop	r12
    42cc:	bf 90       	pop	r11
    42ce:	af 90       	pop	r10
    42d0:	9f 90       	pop	r9
    42d2:	8f 90       	pop	r8
    42d4:	7f 90       	pop	r7
    42d6:	08 95       	ret

000042d8 <_ZN17Adafruit_NeoPixel4fillEmjj>:
    42d8:	8f 92       	push	r8
    42da:	9f 92       	push	r9
    42dc:	af 92       	push	r10
    42de:	bf 92       	push	r11
    42e0:	cf 92       	push	r12
    42e2:	df 92       	push	r13
    42e4:	ef 92       	push	r14
    42e6:	ff 92       	push	r15
    42e8:	0f 93       	push	r16
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	6c 01       	movw	r12, r24
    42f2:	4a 01       	movw	r8, r20
    42f4:	5b 01       	movw	r10, r22
    42f6:	e9 01       	movw	r28, r18
    42f8:	fc 01       	movw	r30, r24
    42fa:	e2 80       	ldd	r14, Z+2	; 0x02
    42fc:	f3 80       	ldd	r15, Z+3	; 0x03
    42fe:	2e 15       	cp	r18, r14
    4300:	3f 05       	cpc	r19, r15
    4302:	a0 f4       	brcc	.+40     	; 0x432c <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    4304:	01 15       	cp	r16, r1
    4306:	11 05       	cpc	r17, r1
    4308:	31 f0       	breq	.+12     	; 0x4316 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    430a:	02 0f       	add	r16, r18
    430c:	13 1f       	adc	r17, r19
    430e:	0e 15       	cp	r16, r14
    4310:	1f 05       	cpc	r17, r15
    4312:	08 f4       	brcc	.+2      	; 0x4316 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    4314:	78 01       	movw	r14, r16
    4316:	ce 15       	cp	r28, r14
    4318:	df 05       	cpc	r29, r15
    431a:	40 f4       	brcc	.+16     	; 0x432c <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    431c:	a5 01       	movw	r20, r10
    431e:	94 01       	movw	r18, r8
    4320:	be 01       	movw	r22, r28
    4322:	c6 01       	movw	r24, r12
    4324:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
    4328:	21 96       	adiw	r28, 0x01	; 1
    432a:	f5 cf       	rjmp	.-22     	; 0x4316 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	ff 90       	pop	r15
    4336:	ef 90       	pop	r14
    4338:	df 90       	pop	r13
    433a:	cf 90       	pop	r12
    433c:	bf 90       	pop	r11
    433e:	af 90       	pop	r10
    4340:	9f 90       	pop	r9
    4342:	8f 90       	pop	r8
    4344:	08 95       	ret

00004346 <_ZN17Adafruit_NeoPixel5clearEv>:

/*!
  @brief   Fill the whole NeoPixel strip with 0 / black / off.
*/
void Adafruit_NeoPixel::clear(void) { memset(pixels, 0, numBytes); }
    4346:	fc 01       	movw	r30, r24
    4348:	44 81       	ldd	r20, Z+4	; 0x04
    434a:	55 81       	ldd	r21, Z+5	; 0x05
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	81 85       	ldd	r24, Z+9	; 0x09
    4352:	92 85       	ldd	r25, Z+10	; 0x0a
    4354:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <memset>

00004358 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    4358:	fc 01       	movw	r30, r24
    435a:	77 fd       	sbrc	r23, 7
    435c:	b9 c0       	rjmp	.+370    	; 0x44d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    435e:	80 85       	ldd	r24, Z+8	; 0x08
    4360:	91 85       	ldd	r25, Z+9	; 0x09
    4362:	68 17       	cp	r22, r24
    4364:	79 07       	cpc	r23, r25
    4366:	0c f0       	brlt	.+2      	; 0x436a <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    4368:	b3 c0       	rjmp	.+358    	; 0x44d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    436a:	57 fd       	sbrc	r21, 7
    436c:	b1 c0       	rjmp	.+354    	; 0x44d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    436e:	82 85       	ldd	r24, Z+10	; 0x0a
    4370:	93 85       	ldd	r25, Z+11	; 0x0b
    4372:	48 17       	cp	r20, r24
    4374:	59 07       	cpc	r21, r25
    4376:	0c f0       	brlt	.+2      	; 0x437a <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    4378:	08 95       	ret
    437a:	86 89       	ldd	r24, Z+22	; 0x16
    437c:	82 30       	cpi	r24, 0x02	; 2
    437e:	79 f4       	brne	.+30     	; 0x439e <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    4380:	84 81       	ldd	r24, Z+4	; 0x04
    4382:	95 81       	ldd	r25, Z+5	; 0x05
    4384:	dc 01       	movw	r26, r24
    4386:	a6 1b       	sub	r26, r22
    4388:	b7 0b       	sbc	r27, r23
    438a:	bd 01       	movw	r22, r26
    438c:	61 50       	subi	r22, 0x01	; 1
    438e:	71 09       	sbc	r23, r1
    4390:	86 81       	ldd	r24, Z+6	; 0x06
    4392:	97 81       	ldd	r25, Z+7	; 0x07
    4394:	dc 01       	movw	r26, r24
    4396:	a4 1b       	sub	r26, r20
    4398:	b5 0b       	sbc	r27, r21
    439a:	ad 01       	movw	r20, r26
    439c:	0e c0       	rjmp	.+28     	; 0x43ba <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    439e:	83 30       	cpi	r24, 0x03	; 3
    43a0:	09 f0       	breq	.+2      	; 0x43a4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    43a2:	84 c0       	rjmp	.+264    	; 0x44ac <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    43a4:	64 27       	eor	r22, r20
    43a6:	75 27       	eor	r23, r21
    43a8:	ca 01       	movw	r24, r20
    43aa:	86 27       	eor	r24, r22
    43ac:	97 27       	eor	r25, r23
    43ae:	68 27       	eor	r22, r24
    43b0:	79 27       	eor	r23, r25
    43b2:	46 81       	ldd	r20, Z+6	; 0x06
    43b4:	57 81       	ldd	r21, Z+7	; 0x07
    43b6:	48 1b       	sub	r20, r24
    43b8:	59 0b       	sbc	r21, r25
    43ba:	41 50       	subi	r20, 0x01	; 1
    43bc:	51 09       	sbc	r21, r1
    43be:	21 30       	cpi	r18, 0x01	; 1
    43c0:	31 05       	cpc	r19, r1
    43c2:	31 f0       	breq	.+12     	; 0x43d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    43c4:	48 f1       	brcs	.+82     	; 0x4418 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    43c6:	22 30       	cpi	r18, 0x02	; 2
    43c8:	31 05       	cpc	r19, r1
    43ca:	09 f4       	brne	.+2      	; 0x43ce <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    43cc:	4a c0       	rjmp	.+148    	; 0x4462 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    43ce:	08 95       	ret
    43d0:	ca 01       	movw	r24, r20
    43d2:	57 fd       	sbrc	r21, 7
    43d4:	07 96       	adiw	r24, 0x07	; 7
    43d6:	9c 01       	movw	r18, r24
    43d8:	a3 e0       	ldi	r26, 0x03	; 3
    43da:	35 95       	asr	r19
    43dc:	27 95       	ror	r18
    43de:	aa 95       	dec	r26
    43e0:	e1 f7       	brne	.-8      	; 0x43da <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    43e2:	a4 81       	ldd	r26, Z+4	; 0x04
    43e4:	b5 81       	ldd	r27, Z+5	; 0x05
    43e6:	2a 9f       	mul	r18, r26
    43e8:	c0 01       	movw	r24, r0
    43ea:	2b 9f       	mul	r18, r27
    43ec:	90 0d       	add	r25, r0
    43ee:	3a 9f       	mul	r19, r26
    43f0:	90 0d       	add	r25, r0
    43f2:	11 24       	eor	r1, r1
    43f4:	68 0f       	add	r22, r24
    43f6:	79 1f       	adc	r23, r25
    43f8:	07 8c       	ldd	r0, Z+31	; 0x1f
    43fa:	f0 a1       	ldd	r31, Z+32	; 0x20
    43fc:	e0 2d       	mov	r30, r0
    43fe:	e6 0f       	add	r30, r22
    4400:	f7 1f       	adc	r31, r23
    4402:	47 70       	andi	r20, 0x07	; 7
    4404:	55 27       	eor	r21, r21
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	01 c0       	rjmp	.+2      	; 0x440e <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    440c:	88 0f       	add	r24, r24
    440e:	4a 95       	dec	r20
    4410:	ea f7       	brpl	.-6      	; 0x440c <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    4412:	90 81       	ld	r25, Z
    4414:	89 2b       	or	r24, r25
    4416:	48 c0       	rjmp	.+144    	; 0x44a8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4418:	ca 01       	movw	r24, r20
    441a:	57 fd       	sbrc	r21, 7
    441c:	07 96       	adiw	r24, 0x07	; 7
    441e:	9c 01       	movw	r18, r24
    4420:	93 e0       	ldi	r25, 0x03	; 3
    4422:	35 95       	asr	r19
    4424:	27 95       	ror	r18
    4426:	9a 95       	dec	r25
    4428:	e1 f7       	brne	.-8      	; 0x4422 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    442a:	a4 81       	ldd	r26, Z+4	; 0x04
    442c:	b5 81       	ldd	r27, Z+5	; 0x05
    442e:	2a 9f       	mul	r18, r26
    4430:	c0 01       	movw	r24, r0
    4432:	2b 9f       	mul	r18, r27
    4434:	90 0d       	add	r25, r0
    4436:	3a 9f       	mul	r19, r26
    4438:	90 0d       	add	r25, r0
    443a:	11 24       	eor	r1, r1
    443c:	68 0f       	add	r22, r24
    443e:	79 1f       	adc	r23, r25
    4440:	07 8c       	ldd	r0, Z+31	; 0x1f
    4442:	f0 a1       	ldd	r31, Z+32	; 0x20
    4444:	e0 2d       	mov	r30, r0
    4446:	e6 0f       	add	r30, r22
    4448:	f7 1f       	adc	r31, r23
    444a:	47 70       	andi	r20, 0x07	; 7
    444c:	55 27       	eor	r21, r21
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	01 c0       	rjmp	.+2      	; 0x4456 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    4454:	88 0f       	add	r24, r24
    4456:	4a 95       	dec	r20
    4458:	ea f7       	brpl	.-6      	; 0x4454 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    445a:	80 95       	com	r24
    445c:	90 81       	ld	r25, Z
    445e:	89 23       	and	r24, r25
    4460:	23 c0       	rjmp	.+70     	; 0x44a8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4462:	ca 01       	movw	r24, r20
    4464:	57 fd       	sbrc	r21, 7
    4466:	07 96       	adiw	r24, 0x07	; 7
    4468:	9c 01       	movw	r18, r24
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	35 95       	asr	r19
    446e:	27 95       	ror	r18
    4470:	8a 95       	dec	r24
    4472:	e1 f7       	brne	.-8      	; 0x446c <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    4474:	a4 81       	ldd	r26, Z+4	; 0x04
    4476:	b5 81       	ldd	r27, Z+5	; 0x05
    4478:	2a 9f       	mul	r18, r26
    447a:	c0 01       	movw	r24, r0
    447c:	2b 9f       	mul	r18, r27
    447e:	90 0d       	add	r25, r0
    4480:	3a 9f       	mul	r19, r26
    4482:	90 0d       	add	r25, r0
    4484:	11 24       	eor	r1, r1
    4486:	68 0f       	add	r22, r24
    4488:	79 1f       	adc	r23, r25
    448a:	07 8c       	ldd	r0, Z+31	; 0x1f
    448c:	f0 a1       	ldd	r31, Z+32	; 0x20
    448e:	e0 2d       	mov	r30, r0
    4490:	e6 0f       	add	r30, r22
    4492:	f7 1f       	adc	r31, r23
    4494:	47 70       	andi	r20, 0x07	; 7
    4496:	55 27       	eor	r21, r21
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	01 c0       	rjmp	.+2      	; 0x44a0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    449e:	88 0f       	add	r24, r24
    44a0:	4a 95       	dec	r20
    44a2:	ea f7       	brpl	.-6      	; 0x449e <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    44a4:	90 81       	ld	r25, Z
    44a6:	89 27       	eor	r24, r25
    44a8:	80 83       	st	Z, r24
    44aa:	08 95       	ret
    44ac:	81 30       	cpi	r24, 0x01	; 1
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    44b0:	86 cf       	rjmp	.-244    	; 0x43be <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    44b2:	64 27       	eor	r22, r20
    44b4:	75 27       	eor	r23, r21
    44b6:	46 27       	eor	r20, r22
    44b8:	57 27       	eor	r21, r23
    44ba:	64 27       	eor	r22, r20
    44bc:	75 27       	eor	r23, r21
    44be:	84 81       	ldd	r24, Z+4	; 0x04
    44c0:	95 81       	ldd	r25, Z+5	; 0x05
    44c2:	dc 01       	movw	r26, r24
    44c4:	a6 1b       	sub	r26, r22
    44c6:	b7 0b       	sbc	r27, r23
    44c8:	bd 01       	movw	r22, r26
    44ca:	61 50       	subi	r22, 0x01	; 1
    44cc:	71 09       	sbc	r23, r1
    44ce:	77 cf       	rjmp	.-274    	; 0x43be <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    44d0:	08 95       	ret

000044d2 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    44d2:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    44d6:	22 23       	and	r18, r18
    44d8:	99 f0       	breq	.+38     	; 0x4500 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    44da:	4f b7       	in	r20, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    44e2:	21 30       	cpi	r18, 0x01	; 1
    44e4:	59 f4       	brne	.+22     	; 0x44fc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    44e6:	2d b3       	in	r18, 0x1d	; 29
    44e8:	20 93 c7 03 	sts	0x03C7, r18	; 0x8003c7 <_ZN8SPIClass13interruptSaveE>
    44ec:	3d b3       	in	r19, 0x1d	; 29
    44ee:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <_ZN8SPIClass13interruptMaskE>
    44f2:	20 95       	com	r18
    44f4:	23 23       	and	r18, r19
    44f6:	2d bb       	out	0x1d, r18	; 29
    44f8:	4f bf       	out	0x3f, r20	; 63
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    44fc:	40 93 c7 03 	sts	0x03C7, r20	; 0x8003c7 <_ZN8SPIClass13interruptSaveE>
    4500:	8c bd       	out	0x2c, r24	; 44
    4502:	9d bd       	out	0x2d, r25	; 45
    4504:	08 95       	ret

00004506 <_ZN8SPIClass8transferEh>:
    4506:	8e bd       	out	0x2e, r24	; 46
    4508:	00 00       	nop
    450a:	0d b4       	in	r0, 0x2d	; 45
    450c:	07 fe       	sbrs	r0, 7
    450e:	fd cf       	rjmp	.-6      	; 0x450a <_ZN8SPIClass8transferEh+0x4>
    4510:	8e b5       	in	r24, 0x2e	; 46
    4512:	08 95       	ret

00004514 <_ZN8SPIClass14endTransactionEv>:
    4514:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    4518:	88 23       	and	r24, r24
    451a:	61 f0       	breq	.+24     	; 0x4534 <_ZN8SPIClass14endTransactionEv+0x20>
    451c:	9f b7       	in	r25, 0x3f	; 63
    451e:	f8 94       	cli
    4520:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN8SPIClass13interruptModeE>
    4524:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <_ZN8SPIClass13interruptSaveE>
    4528:	21 30       	cpi	r18, 0x01	; 1
    452a:	19 f4       	brne	.+6      	; 0x4532 <_ZN8SPIClass14endTransactionEv+0x1e>
    452c:	8d bb       	out	0x1d, r24	; 29
    452e:	9f bf       	out	0x3f, r25	; 63
    4530:	08 95       	ret
    4532:	8f bf       	out	0x3f, r24	; 63
    4534:	08 95       	ret

00004536 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    4536:	4f 92       	push	r4
    4538:	5f 92       	push	r5
    453a:	6f 92       	push	r6
    453c:	7f 92       	push	r7
    453e:	8f 92       	push	r8
    4540:	9f 92       	push	r9
    4542:	af 92       	push	r10
    4544:	bf 92       	push	r11
    4546:	cf 92       	push	r12
    4548:	df 92       	push	r13
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	0f 93       	push	r16
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	3c 01       	movw	r6, r24
    455a:	29 01       	movw	r4, r18
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	70 e0       	ldi	r23, 0x00	; 0
    4560:	0e 94 77 1a 	call	0x34ee	; 0x34ee <_ZN12Adafruit_GFXC1Eii>
    4564:	89 e9       	ldi	r24, 0x99	; 153
    4566:	91 e0       	ldi	r25, 0x01	; 1
    4568:	f3 01       	movw	r30, r6
    456a:	91 83       	std	Z+1, r25	; 0x01
    456c:	80 83       	st	Z, r24
    456e:	14 8e       	std	Z+28, r1	; 0x1c
    4570:	13 8e       	std	Z+27, r1	; 0x1b
    4572:	41 14       	cp	r4, r1
    4574:	51 04       	cpc	r5, r1
    4576:	11 f0       	breq	.+4      	; 0x457c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x46>
    4578:	c2 01       	movw	r24, r4
    457a:	02 c0       	rjmp	.+4      	; 0x4580 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x4a>
    457c:	8b ec       	ldi	r24, 0xCB	; 203
    457e:	93 e0       	ldi	r25, 0x03	; 3
    4580:	f3 01       	movw	r30, r6
    4582:	96 8f       	std	Z+30, r25	; 0x1e
    4584:	85 8f       	std	Z+29, r24	; 0x1d
    4586:	10 a2       	std	Z+32, r1	; 0x20
    4588:	17 8e       	std	Z+31, r1	; 0x1f
    458a:	8f ef       	ldi	r24, 0xFF	; 255
    458c:	84 a3       	std	Z+36, r24	; 0x24
    458e:	85 a3       	std	Z+37, r24	; 0x25
    4590:	86 a3       	std	Z+38, r24	; 0x26
    4592:	87 a3       	std	Z+39, r24	; 0x27
    4594:	00 a7       	std	Z+40, r16	; 0x28
    4596:	c5 aa       	std	Z+53, r12	; 0x35
    4598:	d6 aa       	std	Z+54, r13	; 0x36
    459a:	e7 aa       	std	Z+55, r14	; 0x37
    459c:	f0 ae       	std	Z+56, r15	; 0x38
    459e:	81 ae       	std	Z+57, r8	; 0x39
    45a0:	92 ae       	std	Z+58, r9	; 0x3a
    45a2:	a3 ae       	std	Z+59, r10	; 0x3b
    45a4:	b4 ae       	std	Z+60, r11	; 0x3c
    45a6:	80 e5       	ldi	r24, 0x50	; 80
    45a8:	86 af       	std	Z+62, r24	; 0x3e
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	87 af       	std	Z+63, r24	; 0x3f
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	bf 90       	pop	r11
    45be:	af 90       	pop	r10
    45c0:	9f 90       	pop	r9
    45c2:	8f 90       	pop	r8
    45c4:	7f 90       	pop	r7
    45c6:	6f 90       	pop	r6
    45c8:	5f 90       	pop	r5
    45ca:	4f 90       	pop	r4
    45cc:	08 95       	ret

000045ce <_ZN16Adafruit_SSD1306D1Ev>:
    45ce:	29 e9       	ldi	r18, 0x99	; 153
    45d0:	31 e0       	ldi	r19, 0x01	; 1
    45d2:	fc 01       	movw	r30, r24
    45d4:	31 83       	std	Z+1, r19	; 0x01
    45d6:	20 83       	st	Z, r18
    45d8:	87 8d       	ldd	r24, Z+31	; 0x1f
    45da:	90 a1       	ldd	r25, Z+32	; 0x20
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	11 f0       	breq	.+4      	; 0x45e4 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    45e0:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <free>
    45e4:	08 95       	ret

000045e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	fc 01       	movw	r30, r24
    45ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    45f0:	96 8d       	ldd	r25, Z+30	; 0x1e
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	19 f1       	breq	.+70     	; 0x463c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    45f6:	16 2f       	mov	r17, r22
    45f8:	ef 01       	movw	r28, r30
    45fa:	61 a1       	ldd	r22, Z+33	; 0x21
    45fc:	06 2e       	mov	r0, r22
    45fe:	00 0c       	add	r0, r0
    4600:	77 0b       	sbc	r23, r23
    4602:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN7TwoWire17beginTransmissionEi>
    4606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    460a:	dc 01       	movw	r26, r24
    460c:	ed 91       	ld	r30, X+
    460e:	fc 91       	ld	r31, X
    4610:	01 90       	ld	r0, Z+
    4612:	f0 81       	ld	r31, Z
    4614:	e0 2d       	mov	r30, r0
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	09 95       	icall
    461a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    461c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    461e:	dc 01       	movw	r26, r24
    4620:	ed 91       	ld	r30, X+
    4622:	fc 91       	ld	r31, X
    4624:	01 90       	ld	r0, Z+
    4626:	f0 81       	ld	r31, Z
    4628:	e0 2d       	mov	r30, r0
    462a:	61 2f       	mov	r22, r17
    462c:	09 95       	icall
    462e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	1f 91       	pop	r17
    4638:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <_ZN7TwoWire15endTransmissionEv>
    463c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    463e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4640:	9c 91       	ld	r25, X
    4642:	83 a9       	ldd	r24, Z+51	; 0x33
    4644:	80 95       	com	r24
    4646:	89 23       	and	r24, r25
    4648:	8c 93       	st	X, r24
    464a:	83 8d       	ldd	r24, Z+27	; 0x1b
    464c:	94 8d       	ldd	r25, Z+28	; 0x1c
    464e:	89 2b       	or	r24, r25
    4650:	31 f0       	breq	.+12     	; 0x465e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    4652:	86 2f       	mov	r24, r22
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	0c 94 83 22 	jmp	0x4506	; 0x4506 <_ZN8SPIClass8transferEh>
    465e:	28 e0       	ldi	r18, 0x08	; 8
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	80 e8       	ldi	r24, 0x80	; 128
    4664:	a1 a5       	ldd	r26, Z+41	; 0x29
    4666:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4668:	91 a9       	ldd	r25, Z+49	; 0x31
    466a:	46 2f       	mov	r20, r22
    466c:	48 23       	and	r20, r24
    466e:	19 f0       	breq	.+6      	; 0x4676 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    4670:	4c 91       	ld	r20, X
    4672:	94 2b       	or	r25, r20
    4674:	03 c0       	rjmp	.+6      	; 0x467c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    4676:	4c 91       	ld	r20, X
    4678:	90 95       	com	r25
    467a:	94 23       	and	r25, r20
    467c:	9c 93       	st	X, r25
    467e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4680:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4682:	4c 91       	ld	r20, X
    4684:	92 a9       	ldd	r25, Z+50	; 0x32
    4686:	94 2b       	or	r25, r20
    4688:	9c 93       	st	X, r25
    468a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    468c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    468e:	4c 91       	ld	r20, X
    4690:	92 a9       	ldd	r25, Z+50	; 0x32
    4692:	90 95       	com	r25
    4694:	94 23       	and	r25, r20
    4696:	9c 93       	st	X, r25
    4698:	86 95       	lsr	r24
    469a:	21 50       	subi	r18, 0x01	; 1
    469c:	31 09       	sbc	r19, r1
    469e:	11 f7       	brne	.-60     	; 0x4664 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    46a0:	df 91       	pop	r29
    46a2:	cf 91       	pop	r28
    46a4:	1f 91       	pop	r17
    46a6:	08 95       	ret

000046a8 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	ec 01       	movw	r28, r24
    46b0:	16 2f       	mov	r17, r22
    46b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46b6:	00 97       	sbiw	r24, 0x00	; 0
    46b8:	39 f0       	breq	.+14     	; 0x46c8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    46ba:	4d a9       	ldd	r20, Y+53	; 0x35
    46bc:	5e a9       	ldd	r21, Y+54	; 0x36
    46be:	6f a9       	ldd	r22, Y+55	; 0x37
    46c0:	78 ad       	ldd	r23, Y+56	; 0x38
    46c2:	0e 94 4f 2c 	call	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    46c6:	0f c0       	rjmp	.+30     	; 0x46e6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    46c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46cc:	89 2b       	or	r24, r25
    46ce:	21 f0       	breq	.+8      	; 0x46d8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    46d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    46d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    46d4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN8SPIClass16beginTransactionE11SPISettings>
    46d8:	ef a5       	ldd	r30, Y+47	; 0x2f
    46da:	f8 a9       	ldd	r31, Y+48	; 0x30
    46dc:	90 81       	ld	r25, Z
    46de:	8c a9       	ldd	r24, Y+52	; 0x34
    46e0:	80 95       	com	r24
    46e2:	89 23       	and	r24, r25
    46e4:	80 83       	st	Z, r24
    46e6:	11 11       	cpse	r17, r1
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    46ea:	66 ea       	ldi	r22, 0xA6	; 166
    46ec:	01 c0       	rjmp	.+2      	; 0x46f0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    46ee:	67 ea       	ldi	r22, 0xA7	; 167
    46f0:	ce 01       	movw	r24, r28
    46f2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    46f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46fa:	00 97       	sbiw	r24, 0x00	; 0
    46fc:	49 f0       	breq	.+18     	; 0x4710 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    46fe:	49 ad       	ldd	r20, Y+57	; 0x39
    4700:	5a ad       	ldd	r21, Y+58	; 0x3a
    4702:	6b ad       	ldd	r22, Y+59	; 0x3b
    4704:	7c ad       	ldd	r23, Y+60	; 0x3c
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    4710:	ef a5       	ldd	r30, Y+47	; 0x2f
    4712:	f8 a9       	ldd	r31, Y+48	; 0x30
    4714:	90 81       	ld	r25, Z
    4716:	8c a9       	ldd	r24, Y+52	; 0x34
    4718:	89 2b       	or	r24, r25
    471a:	80 83       	st	Z, r24
    471c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    471e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4720:	89 2b       	or	r24, r25
    4722:	29 f0       	breq	.+10     	; 0x472e <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	1f 91       	pop	r17
    472a:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <_ZN8SPIClass14endTransactionEv>
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	08 95       	ret

00004736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    4736:	bf 92       	push	r11
    4738:	cf 92       	push	r12
    473a:	df 92       	push	r13
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	ec 01       	movw	r28, r24
    474a:	b6 2e       	mov	r11, r22
    474c:	07 2f       	mov	r16, r23
    474e:	14 2f       	mov	r17, r20
    4750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	09 f4       	brne	.+2      	; 0x475a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    4758:	52 c0       	rjmp	.+164    	; 0x47fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    475a:	69 a1       	ldd	r22, Y+33	; 0x21
    475c:	06 2e       	mov	r0, r22
    475e:	00 0c       	add	r0, r0
    4760:	77 0b       	sbc	r23, r23
    4762:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN7TwoWire17beginTransmissionEi>
    4766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4768:	9e 8d       	ldd	r25, Y+30	; 0x1e
    476a:	dc 01       	movw	r26, r24
    476c:	ed 91       	ld	r30, X+
    476e:	fc 91       	ld	r31, X
    4770:	01 90       	ld	r0, Z+
    4772:	f0 81       	ld	r31, Z
    4774:	e0 2d       	mov	r30, r0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	09 95       	icall
    477a:	cb 2c       	mov	r12, r11
    477c:	d0 2e       	mov	r13, r16
    477e:	ee 24       	eor	r14, r14
    4780:	e3 94       	inc	r14
    4782:	f1 2c       	mov	r15, r1
    4784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4786:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4788:	11 23       	and	r17, r17
    478a:	71 f1       	breq	.+92     	; 0x47e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    478c:	b0 e2       	ldi	r27, 0x20	; 32
    478e:	eb 16       	cp	r14, r27
    4790:	f1 04       	cpc	r15, r1
    4792:	b8 f0       	brcs	.+46     	; 0x47c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    4794:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <_ZN7TwoWire15endTransmissionEv>
    4798:	69 a1       	ldd	r22, Y+33	; 0x21
    479a:	06 2e       	mov	r0, r22
    479c:	00 0c       	add	r0, r0
    479e:	77 0b       	sbc	r23, r23
    47a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47a4:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN7TwoWire17beginTransmissionEi>
    47a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47ac:	dc 01       	movw	r26, r24
    47ae:	ed 91       	ld	r30, X+
    47b0:	fc 91       	ld	r31, X
    47b2:	01 90       	ld	r0, Z+
    47b4:	f0 81       	ld	r31, Z
    47b6:	e0 2d       	mov	r30, r0
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	09 95       	icall
    47bc:	ee 24       	eor	r14, r14
    47be:	e3 94       	inc	r14
    47c0:	f1 2c       	mov	r15, r1
    47c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47c6:	f6 01       	movw	r30, r12
    47c8:	64 91       	lpm	r22, Z
    47ca:	dc 01       	movw	r26, r24
    47cc:	ed 91       	ld	r30, X+
    47ce:	fc 91       	ld	r31, X
    47d0:	01 90       	ld	r0, Z+
    47d2:	f0 81       	ld	r31, Z
    47d4:	e0 2d       	mov	r30, r0
    47d6:	09 95       	icall
    47d8:	bf ef       	ldi	r27, 0xFF	; 255
    47da:	eb 1a       	sub	r14, r27
    47dc:	fb 0a       	sbc	r15, r27
    47de:	11 50       	subi	r17, 0x01	; 1
    47e0:	f6 01       	movw	r30, r12
    47e2:	31 96       	adiw	r30, 0x01	; 1
    47e4:	6f 01       	movw	r12, r30
    47e6:	ce cf       	rjmp	.-100    	; 0x4784 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	ff 90       	pop	r15
    47f2:	ef 90       	pop	r14
    47f4:	df 90       	pop	r13
    47f6:	cf 90       	pop	r12
    47f8:	bf 90       	pop	r11
    47fa:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <_ZN7TwoWire15endTransmissionEv>
    47fe:	ed a5       	ldd	r30, Y+45	; 0x2d
    4800:	fe a5       	ldd	r31, Y+46	; 0x2e
    4802:	90 81       	ld	r25, Z
    4804:	8b a9       	ldd	r24, Y+51	; 0x33
    4806:	80 95       	com	r24
    4808:	89 23       	and	r24, r25
    480a:	80 83       	st	Z, r24
    480c:	e6 2e       	mov	r14, r22
    480e:	f7 2e       	mov	r15, r23
    4810:	11 23       	and	r17, r17
    4812:	79 f1       	breq	.+94     	; 0x4872 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    4814:	f7 01       	movw	r30, r14
    4816:	84 91       	lpm	r24, Z
    4818:	2b 8d       	ldd	r18, Y+27	; 0x1b
    481a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    481c:	23 2b       	or	r18, r19
    481e:	39 f0       	breq	.+14     	; 0x482e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    4820:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN8SPIClass8transferEh>
    4824:	11 50       	subi	r17, 0x01	; 1
    4826:	c7 01       	movw	r24, r14
    4828:	01 96       	adiw	r24, 0x01	; 1
    482a:	7c 01       	movw	r14, r24
    482c:	f1 cf       	rjmp	.-30     	; 0x4810 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    482e:	28 e0       	ldi	r18, 0x08	; 8
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	40 e8       	ldi	r20, 0x80	; 128
    4834:	e9 a5       	ldd	r30, Y+41	; 0x29
    4836:	fa a5       	ldd	r31, Y+42	; 0x2a
    4838:	99 a9       	ldd	r25, Y+49	; 0x31
    483a:	58 2f       	mov	r21, r24
    483c:	54 23       	and	r21, r20
    483e:	19 f0       	breq	.+6      	; 0x4846 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    4840:	50 81       	ld	r21, Z
    4842:	95 2b       	or	r25, r21
    4844:	03 c0       	rjmp	.+6      	; 0x484c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    4846:	50 81       	ld	r21, Z
    4848:	90 95       	com	r25
    484a:	95 23       	and	r25, r21
    484c:	90 83       	st	Z, r25
    484e:	eb a5       	ldd	r30, Y+43	; 0x2b
    4850:	fc a5       	ldd	r31, Y+44	; 0x2c
    4852:	50 81       	ld	r21, Z
    4854:	9a a9       	ldd	r25, Y+50	; 0x32
    4856:	95 2b       	or	r25, r21
    4858:	90 83       	st	Z, r25
    485a:	eb a5       	ldd	r30, Y+43	; 0x2b
    485c:	fc a5       	ldd	r31, Y+44	; 0x2c
    485e:	50 81       	ld	r21, Z
    4860:	9a a9       	ldd	r25, Y+50	; 0x32
    4862:	90 95       	com	r25
    4864:	95 23       	and	r25, r21
    4866:	90 83       	st	Z, r25
    4868:	46 95       	lsr	r20
    486a:	21 50       	subi	r18, 0x01	; 1
    486c:	31 09       	sbc	r19, r1
    486e:	11 f7       	brne	.-60     	; 0x4834 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    4870:	d9 cf       	rjmp	.-78     	; 0x4824 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    4872:	df 91       	pop	r29
    4874:	cf 91       	pop	r28
    4876:	1f 91       	pop	r17
    4878:	0f 91       	pop	r16
    487a:	ff 90       	pop	r15
    487c:	ef 90       	pop	r14
    487e:	df 90       	pop	r13
    4880:	cf 90       	pop	r12
    4882:	bf 90       	pop	r11
    4884:	08 95       	ret

00004886 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    4886:	fc 01       	movw	r30, r24
    4888:	86 81       	ldd	r24, Z+6	; 0x06
    488a:	97 81       	ldd	r25, Z+7	; 0x07
    488c:	9c 01       	movw	r18, r24
    488e:	29 5f       	subi	r18, 0xF9	; 249
    4890:	3f 4f       	sbci	r19, 0xFF	; 255
    4892:	37 ff       	sbrs	r19, 7
    4894:	02 c0       	rjmp	.+4      	; 0x489a <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    4896:	29 5f       	subi	r18, 0xF9	; 249
    4898:	3f 4f       	sbci	r19, 0xFF	; 255
    489a:	83 e0       	ldi	r24, 0x03	; 3
    489c:	35 95       	asr	r19
    489e:	27 95       	ror	r18
    48a0:	8a 95       	dec	r24
    48a2:	e1 f7       	brne	.-8      	; 0x489c <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    48a4:	84 81       	ldd	r24, Z+4	; 0x04
    48a6:	95 81       	ldd	r25, Z+5	; 0x05
    48a8:	28 9f       	mul	r18, r24
    48aa:	a0 01       	movw	r20, r0
    48ac:	29 9f       	mul	r18, r25
    48ae:	50 0d       	add	r21, r0
    48b0:	38 9f       	mul	r19, r24
    48b2:	50 0d       	add	r21, r0
    48b4:	11 24       	eor	r1, r1
    48b6:	60 e0       	ldi	r22, 0x00	; 0
    48b8:	70 e0       	ldi	r23, 0x00	; 0
    48ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    48bc:	90 a1       	ldd	r25, Z+32	; 0x20
    48be:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <memset>

000048c2 <_ZN16Adafruit_SSD13065beginEhhbb>:
    48c2:	8f 92       	push	r8
    48c4:	9f 92       	push	r9
    48c6:	af 92       	push	r10
    48c8:	bf 92       	push	r11
    48ca:	cf 92       	push	r12
    48cc:	df 92       	push	r13
    48ce:	ef 92       	push	r14
    48d0:	ff 92       	push	r15
    48d2:	0f 93       	push	r16
    48d4:	1f 93       	push	r17
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	ec 01       	movw	r28, r24
    48dc:	86 2e       	mov	r8, r22
    48de:	b4 2e       	mov	r11, r20
    48e0:	a2 2e       	mov	r10, r18
    48e2:	90 2e       	mov	r9, r16
    48e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48e6:	98 a1       	ldd	r25, Y+32	; 0x20
    48e8:	89 2b       	or	r24, r25
    48ea:	e9 f4       	brne	.+58     	; 0x4926 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    48ec:	2e 81       	ldd	r18, Y+6	; 0x06
    48ee:	3f 81       	ldd	r19, Y+7	; 0x07
    48f0:	c9 01       	movw	r24, r18
    48f2:	07 96       	adiw	r24, 0x07	; 7
    48f4:	97 fd       	sbrc	r25, 7
    48f6:	07 96       	adiw	r24, 0x07	; 7
    48f8:	23 e0       	ldi	r18, 0x03	; 3
    48fa:	95 95       	asr	r25
    48fc:	87 95       	ror	r24
    48fe:	2a 95       	dec	r18
    4900:	e1 f7       	brne	.-8      	; 0x48fa <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    4902:	2c 81       	ldd	r18, Y+4	; 0x04
    4904:	3d 81       	ldd	r19, Y+5	; 0x05
    4906:	ac 01       	movw	r20, r24
    4908:	42 9f       	mul	r20, r18
    490a:	c0 01       	movw	r24, r0
    490c:	43 9f       	mul	r20, r19
    490e:	90 0d       	add	r25, r0
    4910:	52 9f       	mul	r21, r18
    4912:	90 0d       	add	r25, r0
    4914:	11 24       	eor	r1, r1
    4916:	0e 94 1a 30 	call	0x6034	; 0x6034 <malloc>
    491a:	98 a3       	std	Y+32, r25	; 0x20
    491c:	8f 8f       	std	Y+31, r24	; 0x1f
    491e:	89 2b       	or	r24, r25
    4920:	11 f4       	brne	.+4      	; 0x4926 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	92 c1       	rjmp	.+804    	; 0x4c4a <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    4926:	ce 01       	movw	r24, r28
    4928:	0e 94 43 24 	call	0x4886	; 0x4886 <_ZN16Adafruit_SSD130612clearDisplayEv>
    492c:	8e 81       	ldd	r24, Y+6	; 0x06
    492e:	9f 81       	ldd	r25, Y+7	; 0x07
    4930:	6c 81       	ldd	r22, Y+4	; 0x04
    4932:	7d 81       	ldd	r23, Y+5	; 0x05
    4934:	81 32       	cpi	r24, 0x21	; 33
    4936:	91 05       	cpc	r25, r1
    4938:	e4 f0       	brlt	.+56     	; 0x4972 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    493a:	ac 01       	movw	r20, r24
    493c:	40 54       	subi	r20, 0x40	; 64
    493e:	51 09       	sbc	r21, r1
    4940:	57 ff       	sbrs	r21, 7
    4942:	02 c0       	rjmp	.+4      	; 0x4948 <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    4944:	4f 5f       	subi	r20, 0xFF	; 255
    4946:	5f 4f       	sbci	r21, 0xFF	; 255
    4948:	55 95       	asr	r21
    494a:	47 95       	ror	r20
    494c:	62 55       	subi	r22, 0x52	; 82
    494e:	71 09       	sbc	r23, r1
    4950:	77 ff       	sbrs	r23, 7
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    4954:	6f 5f       	subi	r22, 0xFF	; 255
    4956:	7f 4f       	sbci	r23, 0xFF	; 255
    4958:	75 95       	asr	r23
    495a:	67 95       	ror	r22
    495c:	cc 24       	eor	r12, r12
    495e:	c3 94       	inc	r12
    4960:	d1 2c       	mov	r13, r1
    4962:	80 e4       	ldi	r24, 0x40	; 64
    4964:	e8 2e       	mov	r14, r24
    4966:	f1 2c       	mov	r15, r1
    4968:	02 e5       	ldi	r16, 0x52	; 82
    496a:	10 e0       	ldi	r17, 0x00	; 0
    496c:	25 e6       	ldi	r18, 0x65	; 101
    496e:	38 e0       	ldi	r19, 0x08	; 8
    4970:	1b c0       	rjmp	.+54     	; 0x49a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    4972:	ac 01       	movw	r20, r24
    4974:	40 52       	subi	r20, 0x20	; 32
    4976:	51 09       	sbc	r21, r1
    4978:	57 ff       	sbrs	r21, 7
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    497c:	4f 5f       	subi	r20, 0xFF	; 255
    497e:	5f 4f       	sbci	r21, 0xFF	; 255
    4980:	55 95       	asr	r21
    4982:	47 95       	ror	r20
    4984:	63 57       	subi	r22, 0x73	; 115
    4986:	71 09       	sbc	r23, r1
    4988:	77 ff       	sbrs	r23, 7
    498a:	02 c0       	rjmp	.+4      	; 0x4990 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    498c:	6f 5f       	subi	r22, 0xFF	; 255
    498e:	7f 4f       	sbci	r23, 0xFF	; 255
    4990:	75 95       	asr	r23
    4992:	67 95       	ror	r22
    4994:	cc 24       	eor	r12, r12
    4996:	c3 94       	inc	r12
    4998:	d1 2c       	mov	r13, r1
    499a:	a0 e2       	ldi	r26, 0x20	; 32
    499c:	ea 2e       	mov	r14, r26
    499e:	f1 2c       	mov	r15, r1
    49a0:	03 e7       	ldi	r16, 0x73	; 115
    49a2:	10 e0       	ldi	r17, 0x00	; 0
    49a4:	25 e8       	ldi	r18, 0x85	; 133
    49a6:	36 e0       	ldi	r19, 0x06	; 6
    49a8:	ce 01       	movw	r24, r28
    49aa:	0e 94 99 1a 	call	0x3532	; 0x3532 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    49ae:	8a a2       	std	Y+34, r8	; 0x22
    49b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	99 f0       	breq	.+38     	; 0x49de <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    49b8:	b1 10       	cpse	r11, r1
    49ba:	07 c0       	rjmp	.+14     	; 0x49ca <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    49bc:	2e 81       	ldd	r18, Y+6	; 0x06
    49be:	3f 81       	ldd	r19, Y+7	; 0x07
    49c0:	20 32       	cpi	r18, 0x20	; 32
    49c2:	31 05       	cpc	r19, r1
    49c4:	21 f4       	brne	.+8      	; 0x49ce <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    49c6:	2c e3       	ldi	r18, 0x3C	; 60
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    49ca:	2b 2d       	mov	r18, r11
    49cc:	01 c0       	rjmp	.+2      	; 0x49d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    49ce:	2d e3       	ldi	r18, 0x3D	; 61
    49d0:	29 a3       	std	Y+33, r18	; 0x21
    49d2:	99 20       	and	r9, r9
    49d4:	09 f4       	brne	.+2      	; 0x49d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    49d6:	36 c1       	rjmp	.+620    	; 0x4c44 <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    49d8:	0e 94 3d 2c 	call	0x587a	; 0x587a <_ZN7TwoWire5beginEv>
    49dc:	79 c0       	rjmp	.+242    	; 0x4ad0 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    49de:	61 e0       	ldi	r22, 0x01	; 1
    49e0:	8e a1       	ldd	r24, Y+38	; 0x26
    49e2:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    49e6:	61 e0       	ldi	r22, 0x01	; 1
    49e8:	8f a1       	ldd	r24, Y+39	; 0x27
    49ea:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    49ee:	8e a1       	ldd	r24, Y+38	; 0x26
    49f0:	08 2e       	mov	r0, r24
    49f2:	00 0c       	add	r0, r0
    49f4:	99 0b       	sbc	r25, r25
    49f6:	fc 01       	movw	r30, r24
    49f8:	e4 5d       	subi	r30, 0xD4	; 212
    49fa:	fe 4f       	sbci	r31, 0xFE	; 254
    49fc:	e4 91       	lpm	r30, Z
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	ee 0f       	add	r30, r30
    4a02:	ff 1f       	adc	r31, r31
    4a04:	e6 5b       	subi	r30, 0xB6	; 182
    4a06:	fe 4f       	sbci	r31, 0xFE	; 254
    4a08:	25 91       	lpm	r18, Z+
    4a0a:	34 91       	lpm	r19, Z
    4a0c:	3e a7       	std	Y+46, r19	; 0x2e
    4a0e:	2d a7       	std	Y+45, r18	; 0x2d
    4a10:	fc 01       	movw	r30, r24
    4a12:	e8 5e       	subi	r30, 0xE8	; 232
    4a14:	fe 4f       	sbci	r31, 0xFE	; 254
    4a16:	e4 91       	lpm	r30, Z
    4a18:	eb ab       	std	Y+51, r30	; 0x33
    4a1a:	8f a1       	ldd	r24, Y+39	; 0x27
    4a1c:	08 2e       	mov	r0, r24
    4a1e:	00 0c       	add	r0, r0
    4a20:	99 0b       	sbc	r25, r25
    4a22:	fc 01       	movw	r30, r24
    4a24:	e4 5d       	subi	r30, 0xD4	; 212
    4a26:	fe 4f       	sbci	r31, 0xFE	; 254
    4a28:	e4 91       	lpm	r30, Z
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	ee 0f       	add	r30, r30
    4a2e:	ff 1f       	adc	r31, r31
    4a30:	e6 5b       	subi	r30, 0xB6	; 182
    4a32:	fe 4f       	sbci	r31, 0xFE	; 254
    4a34:	a5 91       	lpm	r26, Z+
    4a36:	b4 91       	lpm	r27, Z
    4a38:	b8 ab       	std	Y+48, r27	; 0x30
    4a3a:	af a7       	std	Y+47, r26	; 0x2f
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	e8 5e       	subi	r30, 0xE8	; 232
    4a40:	fe 4f       	sbci	r31, 0xFE	; 254
    4a42:	e4 91       	lpm	r30, Z
    4a44:	ec ab       	std	Y+52, r30	; 0x34
    4a46:	8c 91       	ld	r24, X
    4a48:	e8 2b       	or	r30, r24
    4a4a:	ec 93       	st	X, r30
    4a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a50:	89 2b       	or	r24, r25
    4a52:	31 f0       	breq	.+12     	; 0x4a60 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    4a54:	99 20       	and	r9, r9
    4a56:	09 f4       	brne	.+2      	; 0x4a5a <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    4a58:	3b c0       	rjmp	.+118    	; 0x4ad0 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4a5a:	0e 94 39 2b 	call	0x5672	; 0x5672 <_ZN8SPIClass5beginEv>
    4a5e:	38 c0       	rjmp	.+112    	; 0x4ad0 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4a60:	61 e0       	ldi	r22, 0x01	; 1
    4a62:	8c a1       	ldd	r24, Y+36	; 0x24
    4a64:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    4a68:	61 e0       	ldi	r22, 0x01	; 1
    4a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a6c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    4a70:	8c a1       	ldd	r24, Y+36	; 0x24
    4a72:	08 2e       	mov	r0, r24
    4a74:	00 0c       	add	r0, r0
    4a76:	99 0b       	sbc	r25, r25
    4a78:	fc 01       	movw	r30, r24
    4a7a:	e4 5d       	subi	r30, 0xD4	; 212
    4a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a7e:	e4 91       	lpm	r30, Z
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	ee 0f       	add	r30, r30
    4a84:	ff 1f       	adc	r31, r31
    4a86:	e6 5b       	subi	r30, 0xB6	; 182
    4a88:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8a:	25 91       	lpm	r18, Z+
    4a8c:	34 91       	lpm	r19, Z
    4a8e:	3a a7       	std	Y+42, r19	; 0x2a
    4a90:	29 a7       	std	Y+41, r18	; 0x29
    4a92:	fc 01       	movw	r30, r24
    4a94:	e8 5e       	subi	r30, 0xE8	; 232
    4a96:	fe 4f       	sbci	r31, 0xFE	; 254
    4a98:	e4 91       	lpm	r30, Z
    4a9a:	e9 ab       	std	Y+49, r30	; 0x31
    4a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a9e:	08 2e       	mov	r0, r24
    4aa0:	00 0c       	add	r0, r0
    4aa2:	99 0b       	sbc	r25, r25
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e4 5d       	subi	r30, 0xD4	; 212
    4aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4aaa:	e4 91       	lpm	r30, Z
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	ee 0f       	add	r30, r30
    4ab0:	ff 1f       	adc	r31, r31
    4ab2:	e6 5b       	subi	r30, 0xB6	; 182
    4ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ab6:	a5 91       	lpm	r26, Z+
    4ab8:	b4 91       	lpm	r27, Z
    4aba:	bc a7       	std	Y+44, r27	; 0x2c
    4abc:	ab a7       	std	Y+43, r26	; 0x2b
    4abe:	fc 01       	movw	r30, r24
    4ac0:	e8 5e       	subi	r30, 0xE8	; 232
    4ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac4:	e4 91       	lpm	r30, Z
    4ac6:	ea ab       	std	Y+50, r30	; 0x32
    4ac8:	8c 91       	ld	r24, X
    4aca:	e0 95       	com	r30
    4acc:	e8 23       	and	r30, r24
    4ace:	ec 93       	st	X, r30
    4ad0:	aa 20       	and	r10, r10
    4ad2:	f1 f0       	breq	.+60     	; 0x4b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    4ad4:	88 a5       	ldd	r24, Y+40	; 0x28
    4ad6:	87 fd       	sbrc	r24, 7
    4ad8:	1b c0       	rjmp	.+54     	; 0x4b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    4ada:	61 e0       	ldi	r22, 0x01	; 1
    4adc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    4ae0:	61 e0       	ldi	r22, 0x01	; 1
    4ae2:	88 a5       	ldd	r24, Y+40	; 0x28
    4ae4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    4ae8:	61 e0       	ldi	r22, 0x01	; 1
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <delay>
    4af4:	60 e0       	ldi	r22, 0x00	; 0
    4af6:	88 a5       	ldd	r24, Y+40	; 0x28
    4af8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    4afc:	6a e0       	ldi	r22, 0x0A	; 10
    4afe:	70 e0       	ldi	r23, 0x00	; 0
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	0e 94 6f 16 	call	0x2cde	; 0x2cde <delay>
    4b08:	61 e0       	ldi	r22, 0x01	; 1
    4b0a:	88 a5       	ldd	r24, Y+40	; 0x28
    4b0c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    4b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b14:	00 97       	sbiw	r24, 0x00	; 0
    4b16:	39 f0       	breq	.+14     	; 0x4b26 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    4b18:	4d a9       	ldd	r20, Y+53	; 0x35
    4b1a:	5e a9       	ldd	r21, Y+54	; 0x36
    4b1c:	6f a9       	ldd	r22, Y+55	; 0x37
    4b1e:	78 ad       	ldd	r23, Y+56	; 0x38
    4b20:	0e 94 4f 2c 	call	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    4b24:	0f c0       	rjmp	.+30     	; 0x4b44 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    4b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b2a:	89 2b       	or	r24, r25
    4b2c:	21 f0       	breq	.+8      	; 0x4b36 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    4b2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b32:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4b36:	ef a5       	ldd	r30, Y+47	; 0x2f
    4b38:	f8 a9       	ldd	r31, Y+48	; 0x30
    4b3a:	90 81       	ld	r25, Z
    4b3c:	8c a9       	ldd	r24, Y+52	; 0x34
    4b3e:	80 95       	com	r24
    4b40:	89 23       	and	r24, r25
    4b42:	80 83       	st	Z, r24
    4b44:	44 e0       	ldi	r20, 0x04	; 4
    4b46:	61 e8       	ldi	r22, 0x81	; 129
    4b48:	76 e0       	ldi	r23, 0x06	; 6
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4b50:	6e 81       	ldd	r22, Y+6	; 0x06
    4b52:	61 50       	subi	r22, 0x01	; 1
    4b54:	ce 01       	movw	r24, r28
    4b56:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4b5a:	44 e0       	ldi	r20, 0x04	; 4
    4b5c:	6d e7       	ldi	r22, 0x7D	; 125
    4b5e:	76 e0       	ldi	r23, 0x06	; 6
    4b60:	ce 01       	movw	r24, r28
    4b62:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4b66:	8a a1       	ldd	r24, Y+34	; 0x22
    4b68:	81 30       	cpi	r24, 0x01	; 1
    4b6a:	11 f4       	brne	.+4      	; 0x4b70 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    4b6c:	60 e1       	ldi	r22, 0x10	; 16
    4b6e:	01 c0       	rjmp	.+2      	; 0x4b72 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    4b70:	64 e1       	ldi	r22, 0x14	; 20
    4b72:	ce 01       	movw	r24, r28
    4b74:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4b78:	44 e0       	ldi	r20, 0x04	; 4
    4b7a:	69 e7       	ldi	r22, 0x79	; 121
    4b7c:	76 e0       	ldi	r23, 0x06	; 6
    4b7e:	ce 01       	movw	r24, r28
    4b80:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4b84:	8f e8       	ldi	r24, 0x8F	; 143
    4b86:	8d af       	std	Y+61, r24	; 0x3d
    4b88:	8c 81       	ldd	r24, Y+4	; 0x04
    4b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b8c:	80 38       	cpi	r24, 0x80	; 128
    4b8e:	91 05       	cpc	r25, r1
    4b90:	71 f4       	brne	.+28     	; 0x4bae <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    4b92:	8e 81       	ldd	r24, Y+6	; 0x06
    4b94:	9f 81       	ldd	r25, Y+7	; 0x07
    4b96:	80 34       	cpi	r24, 0x40	; 64
    4b98:	91 05       	cpc	r25, r1
    4b9a:	b9 f4       	brne	.+46     	; 0x4bca <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    4b9c:	8a a1       	ldd	r24, Y+34	; 0x22
    4b9e:	81 30       	cpi	r24, 0x01	; 1
    4ba0:	11 f4       	brne	.+4      	; 0x4ba6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    4ba2:	8f e9       	ldi	r24, 0x9F	; 159
    4ba4:	01 c0       	rjmp	.+2      	; 0x4ba8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    4ba6:	8f ec       	ldi	r24, 0xCF	; 207
    4ba8:	8d af       	std	Y+61, r24	; 0x3d
    4baa:	12 e1       	ldi	r17, 0x12	; 18
    4bac:	0f c0       	rjmp	.+30     	; 0x4bcc <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    4bae:	80 36       	cpi	r24, 0x60	; 96
    4bb0:	91 05       	cpc	r25, r1
    4bb2:	59 f4       	brne	.+22     	; 0x4bca <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    4bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    4bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    4bb8:	40 97       	sbiw	r24, 0x10	; 16
    4bba:	39 f4       	brne	.+14     	; 0x4bca <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    4bbc:	8a a1       	ldd	r24, Y+34	; 0x22
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	11 f4       	brne	.+4      	; 0x4bc6 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    4bc2:	80 e1       	ldi	r24, 0x10	; 16
    4bc4:	01 c0       	rjmp	.+2      	; 0x4bc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    4bc6:	8f ea       	ldi	r24, 0xAF	; 175
    4bc8:	8d af       	std	Y+61, r24	; 0x3d
    4bca:	12 e0       	ldi	r17, 0x02	; 2
    4bcc:	6a ed       	ldi	r22, 0xDA	; 218
    4bce:	ce 01       	movw	r24, r28
    4bd0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bd4:	61 2f       	mov	r22, r17
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bdc:	61 e8       	ldi	r22, 0x81	; 129
    4bde:	ce 01       	movw	r24, r28
    4be0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4be4:	6d ad       	ldd	r22, Y+61	; 0x3d
    4be6:	ce 01       	movw	r24, r28
    4be8:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bec:	69 ed       	ldi	r22, 0xD9	; 217
    4bee:	ce 01       	movw	r24, r28
    4bf0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bf4:	8a a1       	ldd	r24, Y+34	; 0x22
    4bf6:	81 30       	cpi	r24, 0x01	; 1
    4bf8:	11 f4       	brne	.+4      	; 0x4bfe <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    4bfa:	62 e2       	ldi	r22, 0x22	; 34
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    4bfe:	61 ef       	ldi	r22, 0xF1	; 241
    4c00:	ce 01       	movw	r24, r28
    4c02:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4c06:	46 e0       	ldi	r20, 0x06	; 6
    4c08:	63 e7       	ldi	r22, 0x73	; 115
    4c0a:	76 e0       	ldi	r23, 0x06	; 6
    4c0c:	ce 01       	movw	r24, r28
    4c0e:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4c12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c16:	00 97       	sbiw	r24, 0x00	; 0
    4c18:	39 f0       	breq	.+14     	; 0x4c28 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    4c1a:	49 ad       	ldd	r20, Y+57	; 0x39
    4c1c:	5a ad       	ldd	r21, Y+58	; 0x3a
    4c1e:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c20:	7c ad       	ldd	r23, Y+60	; 0x3c
    4c22:	0e 94 4f 2c 	call	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    4c26:	0c c0       	rjmp	.+24     	; 0x4c40 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    4c28:	ef a5       	ldd	r30, Y+47	; 0x2f
    4c2a:	f8 a9       	ldd	r31, Y+48	; 0x30
    4c2c:	90 81       	ld	r25, Z
    4c2e:	8c a9       	ldd	r24, Y+52	; 0x34
    4c30:	89 2b       	or	r24, r25
    4c32:	80 83       	st	Z, r24
    4c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c38:	89 2b       	or	r24, r25
    4c3a:	11 f0       	breq	.+4      	; 0x4c40 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    4c3c:	0e 94 8a 22 	call	0x4514	; 0x4514 <_ZN8SPIClass14endTransactionEv>
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	03 c0       	rjmp	.+6      	; 0x4c4a <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    4c44:	a1 10       	cpse	r10, r1
    4c46:	46 cf       	rjmp	.-372    	; 0x4ad4 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    4c48:	67 cf       	rjmp	.-306    	; 0x4b18 <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	ff 90       	pop	r15
    4c54:	ef 90       	pop	r14
    4c56:	df 90       	pop	r13
    4c58:	cf 90       	pop	r12
    4c5a:	bf 90       	pop	r11
    4c5c:	af 90       	pop	r10
    4c5e:	9f 90       	pop	r9
    4c60:	8f 90       	pop	r8
    4c62:	08 95       	ret

00004c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	dc 01       	movw	r26, r24
    4c6e:	57 fd       	sbrc	r21, 7
    4c70:	64 c0       	rjmp	.+200    	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4c72:	16 96       	adiw	r26, 0x06	; 6
    4c74:	8d 91       	ld	r24, X+
    4c76:	9c 91       	ld	r25, X
    4c78:	17 97       	sbiw	r26, 0x07	; 7
    4c7a:	48 17       	cp	r20, r24
    4c7c:	59 07       	cpc	r21, r25
    4c7e:	0c f0       	brlt	.+2      	; 0x4c82 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    4c80:	5c c0       	rjmp	.+184    	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4c82:	77 ff       	sbrs	r23, 7
    4c84:	04 c0       	rjmp	.+8      	; 0x4c8e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    4c86:	26 0f       	add	r18, r22
    4c88:	37 1f       	adc	r19, r23
    4c8a:	60 e0       	ldi	r22, 0x00	; 0
    4c8c:	70 e0       	ldi	r23, 0x00	; 0
    4c8e:	14 96       	adiw	r26, 0x04	; 4
    4c90:	cd 91       	ld	r28, X+
    4c92:	dc 91       	ld	r29, X
    4c94:	15 97       	sbiw	r26, 0x05	; 5
    4c96:	cb 01       	movw	r24, r22
    4c98:	82 0f       	add	r24, r18
    4c9a:	93 1f       	adc	r25, r19
    4c9c:	c8 17       	cp	r28, r24
    4c9e:	d9 07       	cpc	r29, r25
    4ca0:	1c f4       	brge	.+6      	; 0x4ca8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    4ca2:	9e 01       	movw	r18, r28
    4ca4:	26 1b       	sub	r18, r22
    4ca6:	37 0b       	sbc	r19, r23
    4ca8:	12 16       	cp	r1, r18
    4caa:	13 06       	cpc	r1, r19
    4cac:	0c f0       	brlt	.+2      	; 0x4cb0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    4cae:	45 c0       	rjmp	.+138    	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4cb0:	fa 01       	movw	r30, r20
    4cb2:	57 fd       	sbrc	r21, 7
    4cb4:	37 96       	adiw	r30, 0x07	; 7
    4cb6:	cf 01       	movw	r24, r30
    4cb8:	e3 e0       	ldi	r30, 0x03	; 3
    4cba:	95 95       	asr	r25
    4cbc:	87 95       	ror	r24
    4cbe:	ea 95       	dec	r30
    4cc0:	e1 f7       	brne	.-8      	; 0x4cba <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    4cc2:	8c 9f       	mul	r24, r28
    4cc4:	f0 01       	movw	r30, r0
    4cc6:	8d 9f       	mul	r24, r29
    4cc8:	f0 0d       	add	r31, r0
    4cca:	9c 9f       	mul	r25, r28
    4ccc:	f0 0d       	add	r31, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	6e 0f       	add	r22, r30
    4cd2:	7f 1f       	adc	r23, r31
    4cd4:	5f 96       	adiw	r26, 0x1f	; 31
    4cd6:	ed 91       	ld	r30, X+
    4cd8:	fc 91       	ld	r31, X
    4cda:	90 97       	sbiw	r26, 0x20	; 32
    4cdc:	e6 0f       	add	r30, r22
    4cde:	f7 1f       	adc	r31, r23
    4ce0:	47 70       	andi	r20, 0x07	; 7
    4ce2:	55 27       	eor	r21, r21
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	01 c0       	rjmp	.+2      	; 0x4cec <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    4cea:	88 0f       	add	r24, r24
    4cec:	4a 95       	dec	r20
    4cee:	ea f7       	brpl	.-6      	; 0x4cea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    4cf0:	48 2f       	mov	r20, r24
    4cf2:	01 30       	cpi	r16, 0x01	; 1
    4cf4:	11 05       	cpc	r17, r1
    4cf6:	39 f0       	breq	.+14     	; 0x4d06 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    4cf8:	78 f0       	brcs	.+30     	; 0x4d18 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    4cfa:	02 30       	cpi	r16, 0x02	; 2
    4cfc:	11 05       	cpc	r17, r1
    4cfe:	e9 f4       	brne	.+58     	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4d00:	2e 0f       	add	r18, r30
    4d02:	3f 1f       	adc	r19, r31
    4d04:	13 c0       	rjmp	.+38     	; 0x4d2c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    4d06:	2e 0f       	add	r18, r30
    4d08:	3f 1f       	adc	r19, r31
    4d0a:	e2 17       	cp	r30, r18
    4d0c:	f3 07       	cpc	r31, r19
    4d0e:	a9 f0       	breq	.+42     	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4d10:	80 81       	ld	r24, Z
    4d12:	84 2b       	or	r24, r20
    4d14:	81 93       	st	Z+, r24
    4d16:	f9 cf       	rjmp	.-14     	; 0x4d0a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    4d18:	80 95       	com	r24
    4d1a:	2e 0f       	add	r18, r30
    4d1c:	3f 1f       	adc	r19, r31
    4d1e:	e2 17       	cp	r30, r18
    4d20:	f3 07       	cpc	r31, r19
    4d22:	59 f0       	breq	.+22     	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4d24:	90 81       	ld	r25, Z
    4d26:	98 23       	and	r25, r24
    4d28:	91 93       	st	Z+, r25
    4d2a:	f9 cf       	rjmp	.-14     	; 0x4d1e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    4d2c:	e2 17       	cp	r30, r18
    4d2e:	f3 07       	cpc	r31, r19
    4d30:	21 f0       	breq	.+8      	; 0x4d3a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4d32:	80 81       	ld	r24, Z
    4d34:	84 27       	eor	r24, r20
    4d36:	81 93       	st	Z+, r24
    4d38:	f9 cf       	rjmp	.-14     	; 0x4d2c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    4d3a:	df 91       	pop	r29
    4d3c:	cf 91       	pop	r28
    4d3e:	1f 91       	pop	r17
    4d40:	0f 91       	pop	r16
    4d42:	08 95       	ret

00004d44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    4d44:	ef 92       	push	r14
    4d46:	ff 92       	push	r15
    4d48:	0f 93       	push	r16
    4d4a:	1f 93       	push	r17
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	ec 01       	movw	r28, r24
    4d52:	77 fd       	sbrc	r23, 7
    4d54:	a5 c0       	rjmp	.+330    	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4d56:	ec 80       	ldd	r14, Y+4	; 0x04
    4d58:	fd 80       	ldd	r15, Y+5	; 0x05
    4d5a:	6e 15       	cp	r22, r14
    4d5c:	7f 05       	cpc	r23, r15
    4d5e:	0c f0       	brlt	.+2      	; 0x4d62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    4d60:	9f c0       	rjmp	.+318    	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4d62:	57 ff       	sbrs	r21, 7
    4d64:	04 c0       	rjmp	.+8      	; 0x4d6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    4d66:	24 0f       	add	r18, r20
    4d68:	35 1f       	adc	r19, r21
    4d6a:	40 e0       	ldi	r20, 0x00	; 0
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    4d70:	9f 81       	ldd	r25, Y+7	; 0x07
    4d72:	fa 01       	movw	r30, r20
    4d74:	e2 0f       	add	r30, r18
    4d76:	f3 1f       	adc	r31, r19
    4d78:	8e 17       	cp	r24, r30
    4d7a:	9f 07       	cpc	r25, r31
    4d7c:	1c f4       	brge	.+6      	; 0x4d84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    4d7e:	9c 01       	movw	r18, r24
    4d80:	24 1b       	sub	r18, r20
    4d82:	35 0b       	sbc	r19, r21
    4d84:	12 16       	cp	r1, r18
    4d86:	13 06       	cpc	r1, r19
    4d88:	0c f0       	brlt	.+2      	; 0x4d8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    4d8a:	8a c0       	rjmp	.+276    	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4d8c:	92 2f       	mov	r25, r18
    4d8e:	84 2f       	mov	r24, r20
    4d90:	86 95       	lsr	r24
    4d92:	86 95       	lsr	r24
    4d94:	86 95       	lsr	r24
    4d96:	8e 9d       	mul	r24, r14
    4d98:	d0 01       	movw	r26, r0
    4d9a:	8f 9d       	mul	r24, r15
    4d9c:	b0 0d       	add	r27, r0
    4d9e:	11 24       	eor	r1, r1
    4da0:	6a 0f       	add	r22, r26
    4da2:	7b 1f       	adc	r23, r27
    4da4:	af 8d       	ldd	r26, Y+31	; 0x1f
    4da6:	b8 a1       	ldd	r27, Y+32	; 0x20
    4da8:	a6 0f       	add	r26, r22
    4daa:	b7 1f       	adc	r27, r23
    4dac:	47 70       	andi	r20, 0x07	; 7
    4dae:	b1 f1       	breq	.+108    	; 0x4e1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    4db0:	88 e0       	ldi	r24, 0x08	; 8
    4db2:	84 1b       	sub	r24, r20
    4db4:	48 2f       	mov	r20, r24
    4db6:	68 2f       	mov	r22, r24
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	fb 01       	movw	r30, r22
    4dbc:	e5 59       	subi	r30, 0x95	; 149
    4dbe:	f9 4f       	sbci	r31, 0xF9	; 249
    4dc0:	e4 91       	lpm	r30, Z
    4dc2:	28 17       	cp	r18, r24
    4dc4:	98 f4       	brcc	.+38     	; 0x4dec <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    4dc6:	62 1b       	sub	r22, r18
    4dc8:	71 09       	sbc	r23, r1
    4dca:	2f ef       	ldi	r18, 0xFF	; 255
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    4dd0:	35 95       	asr	r19
    4dd2:	27 95       	ror	r18
    4dd4:	6a 95       	dec	r22
    4dd6:	e2 f7       	brpl	.-8      	; 0x4dd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    4dd8:	e2 23       	and	r30, r18
    4dda:	01 30       	cpi	r16, 0x01	; 1
    4ddc:	11 05       	cpc	r17, r1
    4dde:	49 f0       	breq	.+18     	; 0x4df2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    4de0:	78 f0       	brcs	.+30     	; 0x4e00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4de2:	02 30       	cpi	r16, 0x02	; 2
    4de4:	11 05       	cpc	r17, r1
    4de6:	09 f0       	breq	.+2      	; 0x4dea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    4de8:	5b c0       	rjmp	.+182    	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4dea:	0e c0       	rjmp	.+28     	; 0x4e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    4dec:	01 30       	cpi	r16, 0x01	; 1
    4dee:	11 05       	cpc	r17, r1
    4df0:	19 f4       	brne	.+6      	; 0x4df8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    4df2:	8c 91       	ld	r24, X
    4df4:	e8 2b       	or	r30, r24
    4df6:	0a c0       	rjmp	.+20     	; 0x4e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    4df8:	01 30       	cpi	r16, 0x01	; 1
    4dfa:	11 05       	cpc	r17, r1
    4dfc:	08 f0       	brcs	.+2      	; 0x4e00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4dfe:	49 c0       	rjmp	.+146    	; 0x4e92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    4e00:	e0 95       	com	r30
    4e02:	8c 91       	ld	r24, X
    4e04:	e8 23       	and	r30, r24
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    4e08:	8c 91       	ld	r24, X
    4e0a:	e8 27       	eor	r30, r24
    4e0c:	ec 93       	st	X, r30
    4e0e:	94 17       	cp	r25, r20
    4e10:	08 f4       	brcc	.+2      	; 0x4e14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    4e12:	46 c0       	rjmp	.+140    	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4e14:	2c 81       	ldd	r18, Y+4	; 0x04
    4e16:	3d 81       	ldd	r19, Y+5	; 0x05
    4e18:	a2 0f       	add	r26, r18
    4e1a:	b3 1f       	adc	r27, r19
    4e1c:	e9 2f       	mov	r30, r25
    4e1e:	e4 1b       	sub	r30, r20
    4e20:	e8 30       	cpi	r30, 0x08	; 8
    4e22:	f8 f0       	brcs	.+62     	; 0x4e62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    4e24:	02 30       	cpi	r16, 0x02	; 2
    4e26:	11 05       	cpc	r17, r1
    4e28:	61 f4       	brne	.+24     	; 0x4e42 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    4e2a:	8e 2f       	mov	r24, r30
    4e2c:	9c 91       	ld	r25, X
    4e2e:	90 95       	com	r25
    4e30:	9c 93       	st	X, r25
    4e32:	2c 81       	ldd	r18, Y+4	; 0x04
    4e34:	3d 81       	ldd	r19, Y+5	; 0x05
    4e36:	a2 0f       	add	r26, r18
    4e38:	b3 1f       	adc	r27, r19
    4e3a:	88 50       	subi	r24, 0x08	; 8
    4e3c:	88 30       	cpi	r24, 0x08	; 8
    4e3e:	b0 f7       	brcc	.-20     	; 0x4e2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    4e40:	0f c0       	rjmp	.+30     	; 0x4e60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	01 15       	cp	r16, r1
    4e46:	11 05       	cpc	r17, r1
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	81 95       	neg	r24
    4e4e:	9e 2f       	mov	r25, r30
    4e50:	8c 93       	st	X, r24
    4e52:	2c 81       	ldd	r18, Y+4	; 0x04
    4e54:	3d 81       	ldd	r19, Y+5	; 0x05
    4e56:	a2 0f       	add	r26, r18
    4e58:	b3 1f       	adc	r27, r19
    4e5a:	98 50       	subi	r25, 0x08	; 8
    4e5c:	98 30       	cpi	r25, 0x08	; 8
    4e5e:	c0 f7       	brcc	.-16     	; 0x4e50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    4e60:	e7 70       	andi	r30, 0x07	; 7
    4e62:	ee 23       	and	r30, r30
    4e64:	e9 f0       	breq	.+58     	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4e66:	f0 e0       	ldi	r31, 0x00	; 0
    4e68:	ed 59       	subi	r30, 0x9D	; 157
    4e6a:	f9 4f       	sbci	r31, 0xF9	; 249
    4e6c:	e4 91       	lpm	r30, Z
    4e6e:	01 30       	cpi	r16, 0x01	; 1
    4e70:	11 05       	cpc	r17, r1
    4e72:	39 f0       	breq	.+14     	; 0x4e82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    4e74:	48 f0       	brcs	.+18     	; 0x4e88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    4e76:	02 30       	cpi	r16, 0x02	; 2
    4e78:	11 05       	cpc	r17, r1
    4e7a:	91 f4       	brne	.+36     	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4e7c:	8c 91       	ld	r24, X
    4e7e:	e8 27       	eor	r30, r24
    4e80:	06 c0       	rjmp	.+12     	; 0x4e8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    4e82:	8c 91       	ld	r24, X
    4e84:	e8 2b       	or	r30, r24
    4e86:	03 c0       	rjmp	.+6      	; 0x4e8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    4e88:	e0 95       	com	r30
    4e8a:	8c 91       	ld	r24, X
    4e8c:	e8 23       	and	r30, r24
    4e8e:	ec 93       	st	X, r30
    4e90:	07 c0       	rjmp	.+14     	; 0x4ea0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4e92:	02 30       	cpi	r16, 0x02	; 2
    4e94:	11 05       	cpc	r17, r1
    4e96:	09 f4       	brne	.+2      	; 0x4e9a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    4e98:	b7 cf       	rjmp	.-146    	; 0x4e08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    4e9a:	ae 0d       	add	r26, r14
    4e9c:	bf 1d       	adc	r27, r15
    4e9e:	be cf       	rjmp	.-132    	; 0x4e1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	1f 91       	pop	r17
    4ea6:	0f 91       	pop	r16
    4ea8:	ff 90       	pop	r15
    4eaa:	ef 90       	pop	r14
    4eac:	08 95       	ret

00004eae <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    4eae:	0f 93       	push	r16
    4eb0:	1f 93       	push	r17
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	56 96       	adiw	r26, 0x16	; 22
    4eb6:	ec 91       	ld	r30, X
    4eb8:	56 97       	sbiw	r26, 0x16	; 22
    4eba:	e2 30       	cpi	r30, 0x02	; 2
    4ebc:	61 f0       	breq	.+24     	; 0x4ed6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    4ebe:	e3 30       	cpi	r30, 0x03	; 3
    4ec0:	09 f1       	breq	.+66     	; 0x4f04 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    4ec2:	e1 30       	cpi	r30, 0x01	; 1
    4ec4:	81 f5       	brne	.+96     	; 0x4f26 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    4ec6:	14 96       	adiw	r26, 0x04	; 4
    4ec8:	ed 91       	ld	r30, X+
    4eca:	fc 91       	ld	r31, X
    4ecc:	15 97       	sbiw	r26, 0x05	; 5
    4ece:	e4 1b       	sub	r30, r20
    4ed0:	f5 0b       	sbc	r31, r21
    4ed2:	31 97       	sbiw	r30, 0x01	; 1
    4ed4:	23 c0       	rjmp	.+70     	; 0x4f1c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	14 96       	adiw	r26, 0x04	; 4
    4eda:	ed 91       	ld	r30, X+
    4edc:	fc 91       	ld	r31, X
    4ede:	15 97       	sbiw	r26, 0x05	; 5
    4ee0:	df 01       	movw	r26, r30
    4ee2:	a6 1b       	sub	r26, r22
    4ee4:	b7 0b       	sbc	r27, r23
    4ee6:	bd 01       	movw	r22, r26
    4ee8:	dc 01       	movw	r26, r24
    4eea:	16 96       	adiw	r26, 0x06	; 6
    4eec:	ed 91       	ld	r30, X+
    4eee:	fc 91       	ld	r31, X
    4ef0:	17 97       	sbiw	r26, 0x07	; 7
    4ef2:	df 01       	movw	r26, r30
    4ef4:	a4 1b       	sub	r26, r20
    4ef6:	b5 0b       	sbc	r27, r21
    4ef8:	ad 01       	movw	r20, r26
    4efa:	41 50       	subi	r20, 0x01	; 1
    4efc:	51 09       	sbc	r21, r1
    4efe:	62 1b       	sub	r22, r18
    4f00:	73 0b       	sbc	r23, r19
    4f02:	11 c0       	rjmp	.+34     	; 0x4f26 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    4f04:	fa 01       	movw	r30, r20
    4f06:	dc 01       	movw	r26, r24
    4f08:	16 96       	adiw	r26, 0x06	; 6
    4f0a:	4d 91       	ld	r20, X+
    4f0c:	5c 91       	ld	r21, X
    4f0e:	17 97       	sbiw	r26, 0x07	; 7
    4f10:	da 01       	movw	r26, r20
    4f12:	a6 1b       	sub	r26, r22
    4f14:	b7 0b       	sbc	r27, r23
    4f16:	bd 01       	movw	r22, r26
    4f18:	62 1b       	sub	r22, r18
    4f1a:	73 0b       	sbc	r23, r19
    4f1c:	ab 01       	movw	r20, r22
    4f1e:	bf 01       	movw	r22, r30
    4f20:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    4f24:	02 c0       	rjmp	.+4      	; 0x4f2a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    4f26:	0e 94 32 26 	call	0x4c64	; 0x4c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	08 95       	ret

00004f30 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    4f30:	0f 93       	push	r16
    4f32:	1f 93       	push	r17
    4f34:	dc 01       	movw	r26, r24
    4f36:	56 96       	adiw	r26, 0x16	; 22
    4f38:	ec 91       	ld	r30, X
    4f3a:	56 97       	sbiw	r26, 0x16	; 22
    4f3c:	e2 30       	cpi	r30, 0x02	; 2
    4f3e:	69 f0       	breq	.+26     	; 0x4f5a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    4f40:	e3 30       	cpi	r30, 0x03	; 3
    4f42:	11 f1       	breq	.+68     	; 0x4f88 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    4f44:	e1 30       	cpi	r30, 0x01	; 1
    4f46:	89 f5       	brne	.+98     	; 0x4faa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    4f48:	14 96       	adiw	r26, 0x04	; 4
    4f4a:	ed 91       	ld	r30, X+
    4f4c:	fc 91       	ld	r31, X
    4f4e:	15 97       	sbiw	r26, 0x05	; 5
    4f50:	e4 1b       	sub	r30, r20
    4f52:	f5 0b       	sbc	r31, r21
    4f54:	e2 1b       	sub	r30, r18
    4f56:	f3 0b       	sbc	r31, r19
    4f58:	23 c0       	rjmp	.+70     	; 0x4fa0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	14 96       	adiw	r26, 0x04	; 4
    4f5e:	ed 91       	ld	r30, X+
    4f60:	fc 91       	ld	r31, X
    4f62:	15 97       	sbiw	r26, 0x05	; 5
    4f64:	df 01       	movw	r26, r30
    4f66:	a6 1b       	sub	r26, r22
    4f68:	b7 0b       	sbc	r27, r23
    4f6a:	bd 01       	movw	r22, r26
    4f6c:	61 50       	subi	r22, 0x01	; 1
    4f6e:	71 09       	sbc	r23, r1
    4f70:	dc 01       	movw	r26, r24
    4f72:	16 96       	adiw	r26, 0x06	; 6
    4f74:	ed 91       	ld	r30, X+
    4f76:	fc 91       	ld	r31, X
    4f78:	17 97       	sbiw	r26, 0x07	; 7
    4f7a:	df 01       	movw	r26, r30
    4f7c:	a4 1b       	sub	r26, r20
    4f7e:	b5 0b       	sbc	r27, r21
    4f80:	ad 01       	movw	r20, r26
    4f82:	42 1b       	sub	r20, r18
    4f84:	53 0b       	sbc	r21, r19
    4f86:	11 c0       	rjmp	.+34     	; 0x4faa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    4f88:	fa 01       	movw	r30, r20
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	16 96       	adiw	r26, 0x06	; 6
    4f8e:	4d 91       	ld	r20, X+
    4f90:	5c 91       	ld	r21, X
    4f92:	17 97       	sbiw	r26, 0x07	; 7
    4f94:	da 01       	movw	r26, r20
    4f96:	a6 1b       	sub	r26, r22
    4f98:	b7 0b       	sbc	r27, r23
    4f9a:	bd 01       	movw	r22, r26
    4f9c:	61 50       	subi	r22, 0x01	; 1
    4f9e:	71 09       	sbc	r23, r1
    4fa0:	ab 01       	movw	r20, r22
    4fa2:	bf 01       	movw	r22, r30
    4fa4:	0e 94 32 26 	call	0x4c64	; 0x4c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    4fa8:	02 c0       	rjmp	.+4      	; 0x4fae <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    4faa:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	08 95       	ret

00004fb4 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    4fb4:	cf 92       	push	r12
    4fb6:	df 92       	push	r13
    4fb8:	ef 92       	push	r14
    4fba:	ff 92       	push	r15
    4fbc:	0f 93       	push	r16
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ec 01       	movw	r28, r24
  TRANSACTION_START
    4fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fca:	00 97       	sbiw	r24, 0x00	; 0
    4fcc:	39 f0       	breq	.+14     	; 0x4fdc <_ZN16Adafruit_SSD13067displayEv+0x28>
    4fce:	4d a9       	ldd	r20, Y+53	; 0x35
    4fd0:	5e a9       	ldd	r21, Y+54	; 0x36
    4fd2:	6f a9       	ldd	r22, Y+55	; 0x37
    4fd4:	78 ad       	ldd	r23, Y+56	; 0x38
    4fd6:	0e 94 4f 2c 	call	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    4fda:	0f c0       	rjmp	.+30     	; 0x4ffa <_ZN16Adafruit_SSD13067displayEv+0x46>
    4fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe0:	89 2b       	or	r24, r25
    4fe2:	21 f0       	breq	.+8      	; 0x4fec <_ZN16Adafruit_SSD13067displayEv+0x38>
    4fe4:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fe6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fe8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4fec:	ef a5       	ldd	r30, Y+47	; 0x2f
    4fee:	f8 a9       	ldd	r31, Y+48	; 0x30
    4ff0:	90 81       	ld	r25, Z
    4ff2:	8c a9       	ldd	r24, Y+52	; 0x34
    4ff4:	80 95       	com	r24
    4ff6:	89 23       	and	r24, r25
    4ff8:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    4ffa:	45 e0       	ldi	r20, 0x05	; 5
    4ffc:	6e e5       	ldi	r22, 0x5E	; 94
    4ffe:	76 e0       	ldi	r23, 0x06	; 6
    5000:	ce 01       	movw	r24, r28
    5002:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    5006:	6c 81       	ldd	r22, Y+4	; 0x04
    5008:	61 50       	subi	r22, 0x01	; 1
    500a:	ce 01       	movw	r24, r28
    500c:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    5010:	2e 81       	ldd	r18, Y+6	; 0x06
    5012:	3f 81       	ldd	r19, Y+7	; 0x07
    5014:	c9 01       	movw	r24, r18
    5016:	07 96       	adiw	r24, 0x07	; 7
    5018:	97 fd       	sbrc	r25, 7
    501a:	07 96       	adiw	r24, 0x07	; 7
    501c:	23 e0       	ldi	r18, 0x03	; 3
    501e:	95 95       	asr	r25
    5020:	87 95       	ror	r24
    5022:	2a 95       	dec	r18
    5024:	e1 f7       	brne	.-8      	; 0x501e <_ZN16Adafruit_SSD13067displayEv+0x6a>
    5026:	2c 81       	ldd	r18, Y+4	; 0x04
    5028:	3d 81       	ldd	r19, Y+5	; 0x05
    502a:	82 9f       	mul	r24, r18
    502c:	70 01       	movw	r14, r0
    502e:	83 9f       	mul	r24, r19
    5030:	f0 0c       	add	r15, r0
    5032:	92 9f       	mul	r25, r18
    5034:	f0 0c       	add	r15, r0
    5036:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    5038:	0f 8d       	ldd	r16, Y+31	; 0x1f
    503a:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    503c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    503e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5040:	e0 0e       	add	r14, r16
    5042:	f1 1e       	adc	r15, r17
    5044:	00 97       	sbiw	r24, 0x00	; 0
    5046:	09 f4       	brne	.+2      	; 0x504a <_ZN16Adafruit_SSD13067displayEv+0x96>
    5048:	43 c0       	rjmp	.+134    	; 0x50d0 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    504a:	69 a1       	ldd	r22, Y+33	; 0x21
    504c:	06 2e       	mov	r0, r22
    504e:	00 0c       	add	r0, r0
    5050:	77 0b       	sbc	r23, r23
    5052:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    5056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5058:	9e 8d       	ldd	r25, Y+30	; 0x1e
    505a:	dc 01       	movw	r26, r24
    505c:	ed 91       	ld	r30, X+
    505e:	fc 91       	ld	r31, X
    5060:	01 90       	ld	r0, Z+
    5062:	f0 81       	ld	r31, Z
    5064:	e0 2d       	mov	r30, r0
    5066:	60 e4       	ldi	r22, 0x40	; 64
    5068:	09 95       	icall
    506a:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    506c:	01 e0       	ldi	r16, 0x01	; 1
    506e:	10 e0       	ldi	r17, 0x00	; 0
    5070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    5074:	ec 14       	cp	r14, r12
    5076:	fd 04       	cpc	r15, r13
    5078:	41 f1       	breq	.+80     	; 0x50ca <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    507a:	00 32       	cpi	r16, 0x20	; 32
    507c:	11 05       	cpc	r17, r1
    507e:	b0 f0       	brcs	.+44     	; 0x50ac <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    5080:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    5084:	69 a1       	ldd	r22, Y+33	; 0x21
    5086:	06 2e       	mov	r0, r22
    5088:	00 0c       	add	r0, r0
    508a:	77 0b       	sbc	r23, r23
    508c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    508e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5090:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    5094:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5096:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5098:	dc 01       	movw	r26, r24
    509a:	ed 91       	ld	r30, X+
    509c:	fc 91       	ld	r31, X
    509e:	01 90       	ld	r0, Z+
    50a0:	f0 81       	ld	r31, Z
    50a2:	e0 2d       	mov	r30, r0
    50a4:	60 e4       	ldi	r22, 0x40	; 64
    50a6:	09 95       	icall
        bytesOut = 1;
    50a8:	01 e0       	ldi	r16, 0x01	; 1
    50aa:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    50ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50b0:	f6 01       	movw	r30, r12
    50b2:	61 91       	ld	r22, Z+
    50b4:	6f 01       	movw	r12, r30
    50b6:	dc 01       	movw	r26, r24
    50b8:	ed 91       	ld	r30, X+
    50ba:	fc 91       	ld	r31, X
    50bc:	01 90       	ld	r0, Z+
    50be:	f0 81       	ld	r31, Z
    50c0:	e0 2d       	mov	r30, r0
    50c2:	09 95       	icall
      bytesOut++;
    50c4:	0f 5f       	subi	r16, 0xFF	; 255
    50c6:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    50c8:	d3 cf       	rjmp	.-90     	; 0x5070 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    50ca:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <_ZN7TwoWire15endTransmissionEv>
    50ce:	35 c0       	rjmp	.+106    	; 0x513a <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    50d0:	ed a5       	ldd	r30, Y+45	; 0x2d
    50d2:	fe a5       	ldd	r31, Y+46	; 0x2e
    50d4:	90 81       	ld	r25, Z
    50d6:	8b a9       	ldd	r24, Y+51	; 0x33
    50d8:	89 2b       	or	r24, r25
    50da:	80 83       	st	Z, r24
    while (count--)
    50dc:	0e 15       	cp	r16, r14
    50de:	1f 05       	cpc	r17, r15
    50e0:	61 f1       	breq	.+88     	; 0x513a <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    50e2:	f8 01       	movw	r30, r16
    50e4:	81 91       	ld	r24, Z+
    50e6:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    50e8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    50ea:	3c 8d       	ldd	r19, Y+28	; 0x1c
    50ec:	23 2b       	or	r18, r19
    50ee:	19 f0       	breq	.+6      	; 0x50f6 <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    50f0:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN8SPIClass8transferEh>
    50f4:	f3 cf       	rjmp	.-26     	; 0x50dc <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    50f6:	28 e0       	ldi	r18, 0x08	; 8
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	e9 a5       	ldd	r30, Y+41	; 0x29
    50fe:	fa a5       	ldd	r31, Y+42	; 0x2a
    5100:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    5102:	58 2f       	mov	r21, r24
    5104:	54 23       	and	r21, r20
    5106:	19 f0       	breq	.+6      	; 0x510e <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    5108:	50 81       	ld	r21, Z
    510a:	95 2b       	or	r25, r21
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    510e:	50 81       	ld	r21, Z
    5110:	90 95       	com	r25
    5112:	95 23       	and	r25, r21
    5114:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    5116:	eb a5       	ldd	r30, Y+43	; 0x2b
    5118:	fc a5       	ldd	r31, Y+44	; 0x2c
    511a:	50 81       	ld	r21, Z
    511c:	9a a9       	ldd	r25, Y+50	; 0x32
    511e:	95 2b       	or	r25, r21
    5120:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    5122:	eb a5       	ldd	r30, Y+43	; 0x2b
    5124:	fc a5       	ldd	r31, Y+44	; 0x2c
    5126:	50 81       	ld	r21, Z
    5128:	9a a9       	ldd	r25, Y+50	; 0x32
    512a:	90 95       	com	r25
    512c:	95 23       	and	r25, r21
    512e:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    5130:	46 95       	lsr	r20
    5132:	21 50       	subi	r18, 0x01	; 1
    5134:	31 09       	sbc	r19, r1
    5136:	11 f7       	brne	.-60     	; 0x50fc <_ZN16Adafruit_SSD13067displayEv+0x148>
    5138:	d1 cf       	rjmp	.-94     	; 0x50dc <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    513a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    513c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    513e:	00 97       	sbiw	r24, 0x00	; 0
    5140:	71 f0       	breq	.+28     	; 0x515e <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    5142:	49 ad       	ldd	r20, Y+57	; 0x39
    5144:	5a ad       	ldd	r21, Y+58	; 0x3a
    5146:	6b ad       	ldd	r22, Y+59	; 0x3b
    5148:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    514a:	df 91       	pop	r29
    514c:	cf 91       	pop	r28
    514e:	1f 91       	pop	r17
    5150:	0f 91       	pop	r16
    5152:	ff 90       	pop	r15
    5154:	ef 90       	pop	r14
    5156:	df 90       	pop	r13
    5158:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    515a:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <_ZN7TwoWire8setClockEm>
    515e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5160:	f8 a9       	ldd	r31, Y+48	; 0x30
    5162:	90 81       	ld	r25, Z
    5164:	8c a9       	ldd	r24, Y+52	; 0x34
    5166:	89 2b       	or	r24, r25
    5168:	80 83       	st	Z, r24
    516a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    516c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    516e:	89 2b       	or	r24, r25
    5170:	51 f0       	breq	.+20     	; 0x5186 <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	df 90       	pop	r13
    5180:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5182:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	1f 91       	pop	r17
    518c:	0f 91       	pop	r16
    518e:	ff 90       	pop	r15
    5190:	ef 90       	pop	r14
    5192:	df 90       	pop	r13
    5194:	cf 90       	pop	r12
    5196:	08 95       	ret

00005198 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    5198:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    519c:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    51a0:	28 17       	cp	r18, r24
    51a2:	39 07       	cpc	r19, r25
    51a4:	b9 f4       	brne	.+46     	; 0x51d4 <_ZN14SoftwareSerial4readEv+0x3c>
    51a6:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    51aa:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    51ae:	98 17       	cp	r25, r24
    51b0:	89 f0       	breq	.+34     	; 0x51d4 <_ZN14SoftwareSerial4readEv+0x3c>
    51b2:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	eb 57       	subi	r30, 0x7B	; 123
    51ba:	fc 4f       	sbci	r31, 0xFC	; 252
    51bc:	80 81       	ld	r24, Z
    51be:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	2f 5f       	subi	r18, 0xFF	; 255
    51c6:	3f 4f       	sbci	r19, 0xFF	; 255
    51c8:	2f 73       	andi	r18, 0x3F	; 63
    51ca:	33 27       	eor	r19, r19
    51cc:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	08 95       	ret
    51d4:	8f ef       	ldi	r24, 0xFF	; 255
    51d6:	9f ef       	ldi	r25, 0xFF	; 255
    51d8:	08 95       	ret

000051da <_ZN14SoftwareSerial5writeEh>:
    51da:	1f 93       	push	r17
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	dc 01       	movw	r26, r24
    51e2:	5c 96       	adiw	r26, 0x1c	; 28
    51e4:	8d 91       	ld	r24, X+
    51e6:	9c 91       	ld	r25, X
    51e8:	5d 97       	sbiw	r26, 0x1d	; 29
    51ea:	00 97       	sbiw	r24, 0x00	; 0
    51ec:	39 f4       	brne	.+14     	; 0x51fc <_ZN14SoftwareSerial5writeEh+0x22>
    51ee:	21 e0       	ldi	r18, 0x01	; 1
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	13 96       	adiw	r26, 0x03	; 3
    51f4:	3c 93       	st	X, r19
    51f6:	2e 93       	st	-X, r18
    51f8:	12 97       	sbiw	r26, 0x02	; 2
    51fa:	3b c0       	rjmp	.+118    	; 0x5272 <_ZN14SoftwareSerial5writeEh+0x98>
    51fc:	51 96       	adiw	r26, 0x11	; 17
    51fe:	ed 91       	ld	r30, X+
    5200:	fc 91       	ld	r31, X
    5202:	52 97       	sbiw	r26, 0x12	; 18
    5204:	50 96       	adiw	r26, 0x10	; 16
    5206:	2c 91       	ld	r18, X
    5208:	50 97       	sbiw	r26, 0x10	; 16
    520a:	32 2f       	mov	r19, r18
    520c:	30 95       	com	r19
    520e:	1f b7       	in	r17, 0x3f	; 63
    5210:	5e 96       	adiw	r26, 0x1e	; 30
    5212:	4c 91       	ld	r20, X
    5214:	5e 97       	sbiw	r26, 0x1e	; 30
    5216:	74 2f       	mov	r23, r20
    5218:	72 70       	andi	r23, 0x02	; 2
    521a:	41 fd       	sbrc	r20, 1
    521c:	60 95       	com	r22
    521e:	f8 94       	cli
    5220:	40 81       	ld	r20, Z
    5222:	77 23       	and	r23, r23
    5224:	11 f0       	breq	.+4      	; 0x522a <_ZN14SoftwareSerial5writeEh+0x50>
    5226:	42 2b       	or	r20, r18
    5228:	01 c0       	rjmp	.+2      	; 0x522c <_ZN14SoftwareSerial5writeEh+0x52>
    522a:	43 23       	and	r20, r19
    522c:	40 83       	st	Z, r20
    522e:	ec 01       	movw	r28, r24
    5230:	21 97       	sbiw	r28, 0x01	; 1
    5232:	f1 f7       	brne	.-4      	; 0x5230 <_ZN14SoftwareSerial5writeEh+0x56>
    5234:	48 e0       	ldi	r20, 0x08	; 8
    5236:	50 81       	ld	r21, Z
    5238:	60 ff       	sbrs	r22, 0
    523a:	02 c0       	rjmp	.+4      	; 0x5240 <_ZN14SoftwareSerial5writeEh+0x66>
    523c:	52 2b       	or	r21, r18
    523e:	01 c0       	rjmp	.+2      	; 0x5242 <_ZN14SoftwareSerial5writeEh+0x68>
    5240:	53 23       	and	r21, r19
    5242:	50 83       	st	Z, r21
    5244:	ec 01       	movw	r28, r24
    5246:	21 97       	sbiw	r28, 0x01	; 1
    5248:	f1 f7       	brne	.-4      	; 0x5246 <_ZN14SoftwareSerial5writeEh+0x6c>
    524a:	66 95       	lsr	r22
    524c:	41 50       	subi	r20, 0x01	; 1
    524e:	99 f7       	brne	.-26     	; 0x5236 <_ZN14SoftwareSerial5writeEh+0x5c>
    5250:	80 81       	ld	r24, Z
    5252:	77 23       	and	r23, r23
    5254:	19 f0       	breq	.+6      	; 0x525c <_ZN14SoftwareSerial5writeEh+0x82>
    5256:	83 23       	and	r24, r19
    5258:	80 83       	st	Z, r24
    525a:	02 c0       	rjmp	.+4      	; 0x5260 <_ZN14SoftwareSerial5writeEh+0x86>
    525c:	28 2b       	or	r18, r24
    525e:	20 83       	st	Z, r18
    5260:	1f bf       	out	0x3f, r17	; 63
    5262:	5c 96       	adiw	r26, 0x1c	; 28
    5264:	8d 91       	ld	r24, X+
    5266:	9c 91       	ld	r25, X
    5268:	5d 97       	sbiw	r26, 0x1d	; 29
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <_ZN14SoftwareSerial5writeEh+0x90>
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	df 91       	pop	r29
    5274:	cf 91       	pop	r28
    5276:	1f 91       	pop	r17
    5278:	08 95       	ret

0000527a <_ZN14SoftwareSerial5flushEv>:
    527a:	08 95       	ret

0000527c <_ZN14SoftwareSerial4peekEv>:
    527c:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    5280:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    5284:	28 17       	cp	r18, r24
    5286:	39 07       	cpc	r19, r25
    5288:	71 f4       	brne	.+28     	; 0x52a6 <_ZN14SoftwareSerial4peekEv+0x2a>
    528a:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    528e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5292:	98 17       	cp	r25, r24
    5294:	41 f0       	breq	.+16     	; 0x52a6 <_ZN14SoftwareSerial4peekEv+0x2a>
    5296:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	eb 57       	subi	r30, 0x7B	; 123
    529e:	fc 4f       	sbci	r31, 0xFC	; 252
    52a0:	80 81       	ld	r24, Z
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	08 95       	ret
    52a6:	8f ef       	ldi	r24, 0xFF	; 255
    52a8:	9f ef       	ldi	r25, 0xFF	; 255
    52aa:	08 95       	ret

000052ac <_ZN14SoftwareSerial9availableEv>:
    52ac:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    52b0:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    52b4:	28 17       	cp	r18, r24
    52b6:	39 07       	cpc	r19, r25
    52b8:	71 f4       	brne	.+28     	; 0x52d6 <_ZN14SoftwareSerial9availableEv+0x2a>
    52ba:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    52be:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	80 5c       	subi	r24, 0xC0	; 192
    52c6:	9f 4f       	sbci	r25, 0xFF	; 255
    52c8:	82 1b       	sub	r24, r18
    52ca:	91 09       	sbc	r25, r1
    52cc:	60 e4       	ldi	r22, 0x40	; 64
    52ce:	70 e0       	ldi	r23, 0x00	; 0
    52d0:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__divmodhi4>
    52d4:	08 95       	ret
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	08 95       	ret

000052dc <_ZN14SoftwareSerial13stopListeningEv>:
    52dc:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    52e0:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    52e4:	e8 17       	cp	r30, r24
    52e6:	f9 07       	cpc	r31, r25
    52e8:	69 f4       	brne	.+26     	; 0x5304 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    52ea:	a3 89       	ldd	r26, Z+19	; 0x13
    52ec:	b4 89       	ldd	r27, Z+20	; 0x14
    52ee:	9c 91       	ld	r25, X
    52f0:	85 89       	ldd	r24, Z+21	; 0x15
    52f2:	80 95       	com	r24
    52f4:	89 23       	and	r24, r25
    52f6:	8c 93       	st	X, r24
    52f8:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    52fc:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	08 95       	ret
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	08 95       	ret

00005308 <_ZN14SoftwareSerial6listenEv>:
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	ec 01       	movw	r28, r24
    530e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5310:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5312:	89 2b       	or	r24, r25
    5314:	f1 f0       	breq	.+60     	; 0x5352 <_ZN14SoftwareSerial6listenEv+0x4a>
    5316:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    531a:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    531e:	c8 17       	cp	r28, r24
    5320:	d9 07       	cpc	r29, r25
    5322:	b9 f0       	breq	.+46     	; 0x5352 <_ZN14SoftwareSerial6listenEv+0x4a>
    5324:	00 97       	sbiw	r24, 0x00	; 0
    5326:	11 f0       	breq	.+4      	; 0x532c <_ZN14SoftwareSerial6listenEv+0x24>
    5328:	0e 94 6e 29 	call	0x52dc	; 0x52dc <_ZN14SoftwareSerial13stopListeningEv>
    532c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    532e:	8e 7f       	andi	r24, 0xFE	; 254
    5330:	8e 8f       	std	Y+30, r24	; 0x1e
    5332:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5336:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    533a:	d0 93 c6 03 	sts	0x03C6, r29	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    533e:	c0 93 c5 03 	sts	0x03C5, r28	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    5342:	eb 89       	ldd	r30, Y+19	; 0x13
    5344:	fc 89       	ldd	r31, Y+20	; 0x14
    5346:	90 81       	ld	r25, Z
    5348:	8d 89       	ldd	r24, Y+21	; 0x15
    534a:	89 2b       	or	r24, r25
    534c:	80 83       	st	Z, r24
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	01 c0       	rjmp	.+2      	; 0x5354 <_ZN14SoftwareSerial6listenEv+0x4c>
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	08 95       	ret

0000535a <__vector_3>:
    535a:	1f 92       	push	r1
    535c:	0f 92       	push	r0
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	0f 92       	push	r0
    5362:	11 24       	eor	r1, r1
    5364:	2f 93       	push	r18
    5366:	3f 93       	push	r19
    5368:	4f 93       	push	r20
    536a:	5f 93       	push	r21
    536c:	6f 93       	push	r22
    536e:	7f 93       	push	r23
    5370:	8f 93       	push	r24
    5372:	9f 93       	push	r25
    5374:	af 93       	push	r26
    5376:	bf 93       	push	r27
    5378:	ef 93       	push	r30
    537a:	ff 93       	push	r31
    537c:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <_ZN14SoftwareSerial13active_objectE>
    5380:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <_ZN14SoftwareSerial13active_objectE+0x1>
    5384:	30 97       	sbiw	r30, 0x00	; 0
    5386:	09 f4       	brne	.+2      	; 0x538a <__vector_3+0x30>
    5388:	51 c0       	rjmp	.+162    	; 0x542c <__vector_3+0xd2>
    538a:	96 8d       	ldd	r25, Z+30	; 0x1e
    538c:	a6 85       	ldd	r26, Z+14	; 0x0e
    538e:	b7 85       	ldd	r27, Z+15	; 0x0f
    5390:	85 85       	ldd	r24, Z+13	; 0x0d
    5392:	91 ff       	sbrs	r25, 1
    5394:	04 c0       	rjmp	.+8      	; 0x539e <__vector_3+0x44>
    5396:	9c 91       	ld	r25, X
    5398:	89 23       	and	r24, r25
    539a:	29 f4       	brne	.+10     	; 0x53a6 <__vector_3+0x4c>
    539c:	47 c0       	rjmp	.+142    	; 0x542c <__vector_3+0xd2>
    539e:	9c 91       	ld	r25, X
    53a0:	89 23       	and	r24, r25
    53a2:	09 f0       	breq	.+2      	; 0x53a6 <__vector_3+0x4c>
    53a4:	43 c0       	rjmp	.+134    	; 0x542c <__vector_3+0xd2>
    53a6:	a3 89       	ldd	r26, Z+19	; 0x13
    53a8:	b4 89       	ldd	r27, Z+20	; 0x14
    53aa:	9c 91       	ld	r25, X
    53ac:	85 89       	ldd	r24, Z+21	; 0x15
    53ae:	80 95       	com	r24
    53b0:	89 23       	and	r24, r25
    53b2:	8c 93       	st	X, r24
    53b4:	86 89       	ldd	r24, Z+22	; 0x16
    53b6:	97 89       	ldd	r25, Z+23	; 0x17
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	f1 f7       	brne	.-4      	; 0x53b8 <__vector_3+0x5e>
    53bc:	60 8d       	ldd	r22, Z+24	; 0x18
    53be:	71 8d       	ldd	r23, Z+25	; 0x19
    53c0:	a6 85       	ldd	r26, Z+14	; 0x0e
    53c2:	b7 85       	ldd	r27, Z+15	; 0x0f
    53c4:	55 85       	ldd	r21, Z+13	; 0x0d
    53c6:	38 e0       	ldi	r19, 0x08	; 8
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	cb 01       	movw	r24, r22
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	f1 f7       	brne	.-4      	; 0x53cc <__vector_3+0x72>
    53d0:	82 2f       	mov	r24, r18
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	95 95       	asr	r25
    53d6:	87 95       	ror	r24
    53d8:	28 2f       	mov	r18, r24
    53da:	4c 91       	ld	r20, X
    53dc:	45 23       	and	r20, r21
    53de:	09 f0       	breq	.+2      	; 0x53e2 <__vector_3+0x88>
    53e0:	20 68       	ori	r18, 0x80	; 128
    53e2:	31 50       	subi	r19, 0x01	; 1
    53e4:	91 f7       	brne	.-28     	; 0x53ca <__vector_3+0x70>
    53e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    53e8:	81 fd       	sbrc	r24, 1
    53ea:	20 95       	com	r18
    53ec:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	8f 73       	andi	r24, 0x3F	; 63
    53f6:	99 27       	eor	r25, r25
    53f8:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <_ZN14SoftwareSerial20_receive_buffer_headE>
    53fc:	38 17       	cp	r19, r24
    53fe:	49 f0       	breq	.+18     	; 0x5412 <__vector_3+0xb8>
    5400:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5404:	b0 e0       	ldi	r27, 0x00	; 0
    5406:	ab 57       	subi	r26, 0x7B	; 123
    5408:	bc 4f       	sbci	r27, 0xFC	; 252
    540a:	2c 93       	st	X, r18
    540c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5410:	03 c0       	rjmp	.+6      	; 0x5418 <__vector_3+0xbe>
    5412:	86 8d       	ldd	r24, Z+30	; 0x1e
    5414:	81 60       	ori	r24, 0x01	; 1
    5416:	86 8f       	std	Z+30, r24	; 0x1e
    5418:	82 8d       	ldd	r24, Z+26	; 0x1a
    541a:	93 8d       	ldd	r25, Z+27	; 0x1b
    541c:	01 97       	sbiw	r24, 0x01	; 1
    541e:	f1 f7       	brne	.-4      	; 0x541c <__vector_3+0xc2>
    5420:	a3 89       	ldd	r26, Z+19	; 0x13
    5422:	b4 89       	ldd	r27, Z+20	; 0x14
    5424:	9c 91       	ld	r25, X
    5426:	85 89       	ldd	r24, Z+21	; 0x15
    5428:	89 2b       	or	r24, r25
    542a:	8c 93       	st	X, r24
    542c:	ff 91       	pop	r31
    542e:	ef 91       	pop	r30
    5430:	bf 91       	pop	r27
    5432:	af 91       	pop	r26
    5434:	9f 91       	pop	r25
    5436:	8f 91       	pop	r24
    5438:	7f 91       	pop	r23
    543a:	6f 91       	pop	r22
    543c:	5f 91       	pop	r21
    543e:	4f 91       	pop	r20
    5440:	3f 91       	pop	r19
    5442:	2f 91       	pop	r18
    5444:	0f 90       	pop	r0
    5446:	0f be       	out	0x3f, r0	; 63
    5448:	0f 90       	pop	r0
    544a:	1f 90       	pop	r1
    544c:	18 95       	reti

0000544e <_ZN14SoftwareSerialD1Ev>:
    544e:	25 ec       	ldi	r18, 0xC5	; 197
    5450:	31 e0       	ldi	r19, 0x01	; 1
    5452:	fc 01       	movw	r30, r24
    5454:	31 83       	std	Z+1, r19	; 0x01
    5456:	20 83       	st	Z, r18
    5458:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <_ZN14SoftwareSerial13stopListeningEv>

0000545c <_ZN14SoftwareSerial5setTXEh>:
    545c:	1f 93       	push	r17
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	ec 01       	movw	r28, r24
    5464:	16 2f       	mov	r17, r22
    5466:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5468:	66 95       	lsr	r22
    546a:	61 70       	andi	r22, 0x01	; 1
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	68 27       	eor	r22, r24
    5470:	81 2f       	mov	r24, r17
    5472:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    5476:	61 e0       	ldi	r22, 0x01	; 1
    5478:	81 2f       	mov	r24, r17
    547a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    547e:	81 2f       	mov	r24, r17
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	fc 01       	movw	r30, r24
    5484:	e8 5e       	subi	r30, 0xE8	; 232
    5486:	fe 4f       	sbci	r31, 0xFE	; 254
    5488:	e4 91       	lpm	r30, Z
    548a:	e8 8b       	std	Y+16, r30	; 0x10
    548c:	fc 01       	movw	r30, r24
    548e:	e4 5d       	subi	r30, 0xD4	; 212
    5490:	fe 4f       	sbci	r31, 0xFE	; 254
    5492:	e4 91       	lpm	r30, Z
    5494:	f0 e0       	ldi	r31, 0x00	; 0
    5496:	ee 0f       	add	r30, r30
    5498:	ff 1f       	adc	r31, r31
    549a:	e6 5b       	subi	r30, 0xB6	; 182
    549c:	fe 4f       	sbci	r31, 0xFE	; 254
    549e:	85 91       	lpm	r24, Z+
    54a0:	94 91       	lpm	r25, Z
    54a2:	9a 8b       	std	Y+18, r25	; 0x12
    54a4:	89 8b       	std	Y+17, r24	; 0x11
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	1f 91       	pop	r17
    54ac:	08 95       	ret

000054ae <_ZN14SoftwareSerial5setRXEh>:
    54ae:	1f 93       	push	r17
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	ec 01       	movw	r28, r24
    54b6:	16 2f       	mov	r17, r22
    54b8:	60 e0       	ldi	r22, 0x00	; 0
    54ba:	81 2f       	mov	r24, r17
    54bc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    54c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54c2:	81 fd       	sbrc	r24, 1
    54c4:	04 c0       	rjmp	.+8      	; 0x54ce <_ZN14SoftwareSerial5setRXEh+0x20>
    54c6:	61 e0       	ldi	r22, 0x01	; 1
    54c8:	81 2f       	mov	r24, r17
    54ca:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    54ce:	1c 87       	std	Y+12, r17	; 0x0c
    54d0:	81 2f       	mov	r24, r17
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	fc 01       	movw	r30, r24
    54d6:	e8 5e       	subi	r30, 0xE8	; 232
    54d8:	fe 4f       	sbci	r31, 0xFE	; 254
    54da:	e4 91       	lpm	r30, Z
    54dc:	ed 87       	std	Y+13, r30	; 0x0d
    54de:	fc 01       	movw	r30, r24
    54e0:	e4 5d       	subi	r30, 0xD4	; 212
    54e2:	fe 4f       	sbci	r31, 0xFE	; 254
    54e4:	e4 91       	lpm	r30, Z
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31
    54ec:	e0 5c       	subi	r30, 0xC0	; 192
    54ee:	fe 4f       	sbci	r31, 0xFE	; 254
    54f0:	85 91       	lpm	r24, Z+
    54f2:	94 91       	lpm	r25, Z
    54f4:	9f 87       	std	Y+15, r25	; 0x0f
    54f6:	8e 87       	std	Y+14, r24	; 0x0e
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	1f 91       	pop	r17
    54fe:	08 95       	ret

00005500 <_ZN14SoftwareSerialC1Ehhb>:
    5500:	1f 93       	push	r17
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
    5506:	ec 01       	movw	r28, r24
    5508:	16 2f       	mov	r17, r22
    550a:	1b 82       	std	Y+3, r1	; 0x03
    550c:	1a 82       	std	Y+2, r1	; 0x02
    550e:	88 ee       	ldi	r24, 0xE8	; 232
    5510:	93 e0       	ldi	r25, 0x03	; 3
    5512:	a0 e0       	ldi	r26, 0x00	; 0
    5514:	b0 e0       	ldi	r27, 0x00	; 0
    5516:	8c 83       	std	Y+4, r24	; 0x04
    5518:	9d 83       	std	Y+5, r25	; 0x05
    551a:	ae 83       	std	Y+6, r26	; 0x06
    551c:	bf 83       	std	Y+7, r27	; 0x07
    551e:	85 ec       	ldi	r24, 0xC5	; 197
    5520:	91 e0       	ldi	r25, 0x01	; 1
    5522:	99 83       	std	Y+1, r25	; 0x01
    5524:	88 83       	st	Y, r24
    5526:	1f 8a       	std	Y+23, r1	; 0x17
    5528:	1e 8a       	std	Y+22, r1	; 0x16
    552a:	19 8e       	std	Y+25, r1	; 0x19
    552c:	18 8e       	std	Y+24, r1	; 0x18
    552e:	1b 8e       	std	Y+27, r1	; 0x1b
    5530:	1a 8e       	std	Y+26, r1	; 0x1a
    5532:	1d 8e       	std	Y+29, r1	; 0x1d
    5534:	1c 8e       	std	Y+28, r1	; 0x1c
    5536:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5538:	8e 7f       	andi	r24, 0xFE	; 254
    553a:	20 fb       	bst	r18, 0
    553c:	81 f9       	bld	r24, 1
    553e:	8e 8f       	std	Y+30, r24	; 0x1e
    5540:	64 2f       	mov	r22, r20
    5542:	ce 01       	movw	r24, r28
    5544:	0e 94 2e 2a 	call	0x545c	; 0x545c <_ZN14SoftwareSerial5setTXEh>
    5548:	61 2f       	mov	r22, r17
    554a:	ce 01       	movw	r24, r28
    554c:	df 91       	pop	r29
    554e:	cf 91       	pop	r28
    5550:	1f 91       	pop	r17
    5552:	0c 94 57 2a 	jmp	0x54ae	; 0x54ae <_ZN14SoftwareSerial5setRXEh>

00005556 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	ec 01       	movw	r28, r24
    555c:	9a 01       	movw	r18, r20
    555e:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    5560:	1b 8e       	std	Y+27, r1	; 0x1b
    5562:	1a 8e       	std	Y+26, r1	; 0x1a
    5564:	19 8e       	std	Y+25, r1	; 0x19
    5566:	18 8e       	std	Y+24, r1	; 0x18
    5568:	1f 8a       	std	Y+23, r1	; 0x17
    556a:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    556c:	60 e8       	ldi	r22, 0x80	; 128
    556e:	74 e8       	ldi	r23, 0x84	; 132
    5570:	8e e1       	ldi	r24, 0x1E	; 30
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divmodsi4>
    5578:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    557a:	24 30       	cpi	r18, 0x04	; 4
    557c:	31 05       	cpc	r19, r1
    557e:	18 f0       	brcs	.+6      	; 0x5586 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    5580:	c9 01       	movw	r24, r18
    5582:	03 97       	sbiw	r24, 0x03	; 3
    5584:	02 c0       	rjmp	.+4      	; 0x558a <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    558a:	9d 8f       	std	Y+29, r25	; 0x1d
    558c:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
    558e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5590:	66 31       	cpi	r22, 0x16	; 22
    5592:	08 f0       	brcs	.+2      	; 0x5596 <_ZN14SoftwareSerial5beginEl+0x40>
    5594:	69 c0       	rjmp	.+210    	; 0x5668 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5596:	c9 01       	movw	r24, r18
    5598:	96 95       	lsr	r25
    559a:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    559c:	84 31       	cpi	r24, 0x14	; 20
    559e:	91 05       	cpc	r25, r1
    55a0:	10 f0       	brcs	.+4      	; 0x55a6 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    55a2:	43 97       	sbiw	r24, 0x13	; 19
    55a4:	02 c0       	rjmp	.+4      	; 0x55aa <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    55aa:	9f 8b       	std	Y+23, r25	; 0x17
    55ac:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    55ae:	36 97       	sbiw	r30, 0x06	; 6
    55b0:	18 f0       	brcs	.+6      	; 0x55b8 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    55b2:	c9 01       	movw	r24, r18
    55b4:	05 97       	sbiw	r24, 0x05	; 5
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    55bc:	99 8f       	std	Y+25, r25	; 0x19
    55be:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    55c0:	c9 01       	movw	r24, r18
    55c2:	88 0f       	add	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	28 0f       	add	r18, r24
    55c8:	39 1f       	adc	r19, r25
    55ca:	36 95       	lsr	r19
    55cc:	27 95       	ror	r18
    55ce:	36 95       	lsr	r19
    55d0:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    55d2:	2d 30       	cpi	r18, 0x0D	; 13
    55d4:	31 05       	cpc	r19, r1
    55d6:	18 f0       	brcs	.+6      	; 0x55de <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    55d8:	2c 50       	subi	r18, 0x0C	; 12
    55da:	31 09       	sbc	r19, r1
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    55de:	21 e0       	ldi	r18, 0x01	; 1
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    55e2:	3b 8f       	std	Y+27, r19	; 0x1b
    55e4:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    55e6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    55ea:	68 30       	cpi	r22, 0x08	; 8
    55ec:	50 f0       	brcs	.+20     	; 0x5602 <_ZN14SoftwareSerial5beginEl+0xac>
    55ee:	21 e0       	ldi	r18, 0x01	; 1
    55f0:	6e 30       	cpi	r22, 0x0E	; 14
    55f2:	08 f4       	brcc	.+2      	; 0x55f6 <_ZN14SoftwareSerial5beginEl+0xa0>
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	01 c0       	rjmp	.+2      	; 0x55fc <_ZN14SoftwareSerial5beginEl+0xa6>
    55fa:	88 0f       	add	r24, r24
    55fc:	2a 95       	dec	r18
    55fe:	ea f7       	brpl	.-6      	; 0x55fa <_ZN14SoftwareSerial5beginEl+0xa4>
    5600:	01 c0       	rjmp	.+2      	; 0x5604 <_ZN14SoftwareSerial5beginEl+0xae>
    5602:	84 e0       	ldi	r24, 0x04	; 4
    5604:	89 2b       	or	r24, r25
    5606:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    560a:	9c 85       	ldd	r25, Y+12	; 0x0c
    560c:	98 30       	cpi	r25, 0x08	; 8
    560e:	38 f0       	brcs	.+14     	; 0x561e <_ZN14SoftwareSerial5beginEl+0xc8>
    5610:	9e 30       	cpi	r25, 0x0E	; 14
    5612:	40 f0       	brcs	.+16     	; 0x5624 <_ZN14SoftwareSerial5beginEl+0xce>
    5614:	96 31       	cpi	r25, 0x16	; 22
    5616:	48 f0       	brcs	.+18     	; 0x562a <_ZN14SoftwareSerial5beginEl+0xd4>
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	08 c0       	rjmp	.+16     	; 0x562e <_ZN14SoftwareSerial5beginEl+0xd8>
    561e:	2d e6       	ldi	r18, 0x6D	; 109
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	05 c0       	rjmp	.+10     	; 0x562e <_ZN14SoftwareSerial5beginEl+0xd8>
    5624:	2b e6       	ldi	r18, 0x6B	; 107
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	02 c0       	rjmp	.+4      	; 0x562e <_ZN14SoftwareSerial5beginEl+0xd8>
    562a:	2c e6       	ldi	r18, 0x6C	; 108
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	3c 8b       	std	Y+20, r19	; 0x14
    5630:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    5632:	98 30       	cpi	r25, 0x08	; 8
    5634:	30 f4       	brcc	.+12     	; 0x5642 <_ZN14SoftwareSerial5beginEl+0xec>
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	01 c0       	rjmp	.+2      	; 0x563c <_ZN14SoftwareSerial5beginEl+0xe6>
    563a:	88 0f       	add	r24, r24
    563c:	9a 95       	dec	r25
    563e:	ea f7       	brpl	.-6      	; 0x563a <_ZN14SoftwareSerial5beginEl+0xe4>
    5640:	0e c0       	rjmp	.+28     	; 0x565e <_ZN14SoftwareSerial5beginEl+0x108>
    5642:	29 2f       	mov	r18, r25
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	9e 30       	cpi	r25, 0x0E	; 14
    5648:	18 f4       	brcc	.+6      	; 0x5650 <_ZN14SoftwareSerial5beginEl+0xfa>
    564a:	28 50       	subi	r18, 0x08	; 8
    564c:	31 09       	sbc	r19, r1
    564e:	02 c0       	rjmp	.+4      	; 0x5654 <_ZN14SoftwareSerial5beginEl+0xfe>
    5650:	2e 50       	subi	r18, 0x0E	; 14
    5652:	31 09       	sbc	r19, r1
    5654:	81 e0       	ldi	r24, 0x01	; 1
    5656:	01 c0       	rjmp	.+2      	; 0x565a <_ZN14SoftwareSerial5beginEl+0x104>
    5658:	88 0f       	add	r24, r24
    565a:	2a 95       	dec	r18
    565c:	ea f7       	brpl	.-6      	; 0x5658 <_ZN14SoftwareSerial5beginEl+0x102>
    565e:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    5660:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5662:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    5668:	ce 01       	movw	r24, r28
}
    566a:	df 91       	pop	r29
    566c:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    566e:	0c 94 84 29 	jmp	0x5308	; 0x5308 <_ZN14SoftwareSerial6listenEv>

00005672 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5672:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5674:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5676:	f8 94       	cli
  if (!initialized) {
    5678:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SPIClass11initializedE>
    567c:	81 11       	cpse	r24, r1
    567e:	27 c0       	rjmp	.+78     	; 0x56ce <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5680:	e6 e3       	ldi	r30, 0x36	; 54
    5682:	f1 e0       	ldi	r31, 0x01	; 1
    5684:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5686:	e2 e2       	ldi	r30, 0x22	; 34
    5688:	f1 e0       	ldi	r31, 0x01	; 1
    568a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    568c:	e8 2f       	mov	r30, r24
    568e:	f0 e0       	ldi	r31, 0x00	; 0
    5690:	ee 0f       	add	r30, r30
    5692:	ff 1f       	adc	r31, r31
    5694:	ec 5a       	subi	r30, 0xAC	; 172
    5696:	fe 4f       	sbci	r31, 0xFE	; 254
    5698:	a5 91       	lpm	r26, Z+
    569a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    569c:	ec 91       	ld	r30, X
    569e:	e9 23       	and	r30, r25
    56a0:	21 f4       	brne	.+8      	; 0x56aa <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    56a2:	61 e0       	ldi	r22, 0x01	; 1
    56a4:	8a e0       	ldi	r24, 0x0A	; 10
    56a6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    56aa:	61 e0       	ldi	r22, 0x01	; 1
    56ac:	8a e0       	ldi	r24, 0x0A	; 10
    56ae:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    56b2:	8c b5       	in	r24, 0x2c	; 44
    56b4:	80 61       	ori	r24, 0x10	; 16
    56b6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    56b8:	8c b5       	in	r24, 0x2c	; 44
    56ba:	80 64       	ori	r24, 0x40	; 64
    56bc:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    56be:	61 e0       	ldi	r22, 0x01	; 1
    56c0:	8d e0       	ldi	r24, 0x0D	; 13
    56c2:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
    pinMode(MOSI, OUTPUT);
    56c6:	61 e0       	ldi	r22, 0x01	; 1
    56c8:	8b e0       	ldi	r24, 0x0B	; 11
    56ca:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <pinMode>
  }
  initialized++; // reference count
    56ce:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SPIClass11initializedE>
    56d2:	8f 5f       	subi	r24, 0xFF	; 255
    56d4:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_ZN8SPIClass11initializedE>
  SREG = sreg;
    56d8:	cf bf       	out	0x3f, r28	; 63
}
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    56de:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    56e8:	82 1b       	sub	r24, r18
    56ea:	91 09       	sbc	r25, r1
    56ec:	08 95       	ret

000056ee <_ZN7TwoWire4readEv>:
    56ee:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    56f2:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    56f6:	98 17       	cp	r25, r24
    56f8:	50 f4       	brcc	.+20     	; 0x570e <_ZN7TwoWire4readEv+0x20>
    56fa:	e9 2f       	mov	r30, r25
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	ef 5f       	subi	r30, 0xFF	; 255
    5700:	fb 4f       	sbci	r31, 0xFB	; 251
    5702:	20 81       	ld	r18, Z
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	9f 5f       	subi	r25, 0xFF	; 255
    5708:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    570c:	02 c0       	rjmp	.+4      	; 0x5712 <_ZN7TwoWire4readEv+0x24>
    570e:	2f ef       	ldi	r18, 0xFF	; 255
    5710:	3f ef       	ldi	r19, 0xFF	; 255
    5712:	c9 01       	movw	r24, r18
    5714:	08 95       	ret

00005716 <_ZN7TwoWire4peekEv>:
    5716:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    571a:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    571e:	e8 17       	cp	r30, r24
    5720:	30 f4       	brcc	.+12     	; 0x572e <_ZN7TwoWire4peekEv+0x18>
    5722:	f0 e0       	ldi	r31, 0x00	; 0
    5724:	ef 5f       	subi	r30, 0xFF	; 255
    5726:	fb 4f       	sbci	r31, 0xFB	; 251
    5728:	80 81       	ld	r24, Z
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	08 95       	ret
    572e:	8f ef       	ldi	r24, 0xFF	; 255
    5730:	9f ef       	ldi	r25, 0xFF	; 255
    5732:	08 95       	ret

00005734 <_ZN7TwoWire5flushEv>:
    5734:	08 95       	ret

00005736 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
    573a:	ec 01       	movw	r28, r24
    573c:	e0 91 d7 03 	lds	r30, 0x03D7	; 0x8003d7 <_ZN7TwoWire14user_onReceiveE>
    5740:	f0 91 d8 03 	lds	r31, 0x03D8	; 0x8003d8 <_ZN7TwoWire14user_onReceiveE+0x1>
    5744:	30 97       	sbiw	r30, 0x00	; 0
    5746:	f1 f0       	breq	.+60     	; 0x5784 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5748:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    574c:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    5750:	98 17       	cp	r25, r24
    5752:	c0 f0       	brcs	.+48     	; 0x5784 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	29 2f       	mov	r18, r25
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	26 17       	cp	r18, r22
    575c:	37 07       	cpc	r19, r23
    575e:	54 f4       	brge	.+20     	; 0x5774 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5760:	de 01       	movw	r26, r28
    5762:	a2 0f       	add	r26, r18
    5764:	b3 1f       	adc	r27, r19
    5766:	4c 91       	ld	r20, X
    5768:	d9 01       	movw	r26, r18
    576a:	af 5f       	subi	r26, 0xFF	; 255
    576c:	bb 4f       	sbci	r27, 0xFB	; 251
    576e:	4c 93       	st	X, r20
    5770:	9f 5f       	subi	r25, 0xFF	; 255
    5772:	f1 cf       	rjmp	.-30     	; 0x5756 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5774:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    5778:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    577c:	cb 01       	movw	r24, r22
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	09 94       	ijmp
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	08 95       	ret

0000578a <_ZN7TwoWire16onRequestServiceEv>:
    578a:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <_ZN7TwoWire14user_onRequestE>
    578e:	f0 91 da 03 	lds	r31, 0x03DA	; 0x8003da <_ZN7TwoWire14user_onRequestE+0x1>
    5792:	30 97       	sbiw	r30, 0x00	; 0
    5794:	29 f0       	breq	.+10     	; 0x57a0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    5796:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    579a:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    579e:	09 94       	ijmp
    57a0:	08 95       	ret

000057a2 <_ZN7TwoWire5writeEPKhj>:
    57a2:	cf 92       	push	r12
    57a4:	df 92       	push	r13
    57a6:	ef 92       	push	r14
    57a8:	ff 92       	push	r15
    57aa:	0f 93       	push	r16
    57ac:	1f 93       	push	r17
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	7c 01       	movw	r14, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	8a 01       	movw	r16, r20
    57b8:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <_ZN7TwoWire12transmittingE>
    57bc:	22 23       	and	r18, r18
    57be:	89 f0       	breq	.+34     	; 0x57e2 <_ZN7TwoWire5writeEPKhj+0x40>
    57c0:	eb 01       	movw	r28, r22
    57c2:	6b 01       	movw	r12, r22
    57c4:	c4 0e       	add	r12, r20
    57c6:	d5 1e       	adc	r13, r21
    57c8:	cc 15       	cp	r28, r12
    57ca:	dd 05       	cpc	r29, r13
    57cc:	69 f0       	breq	.+26     	; 0x57e8 <_ZN7TwoWire5writeEPKhj+0x46>
    57ce:	69 91       	ld	r22, Y+
    57d0:	d7 01       	movw	r26, r14
    57d2:	ed 91       	ld	r30, X+
    57d4:	fc 91       	ld	r31, X
    57d6:	01 90       	ld	r0, Z+
    57d8:	f0 81       	ld	r31, Z
    57da:	e0 2d       	mov	r30, r0
    57dc:	c7 01       	movw	r24, r14
    57de:	09 95       	icall
    57e0:	f3 cf       	rjmp	.-26     	; 0x57c8 <_ZN7TwoWire5writeEPKhj+0x26>
    57e2:	64 2f       	mov	r22, r20
    57e4:	0e 94 bb 2c 	call	0x5976	; 0x5976 <twi_transmit>
    57e8:	c8 01       	movw	r24, r16
    57ea:	df 91       	pop	r29
    57ec:	cf 91       	pop	r28
    57ee:	1f 91       	pop	r17
    57f0:	0f 91       	pop	r16
    57f2:	ff 90       	pop	r15
    57f4:	ef 90       	pop	r14
    57f6:	df 90       	pop	r13
    57f8:	cf 90       	pop	r12
    57fa:	08 95       	ret

000057fc <_ZN7TwoWire5writeEh>:
    57fc:	cf 93       	push	r28
    57fe:	df 93       	push	r29
    5800:	1f 92       	push	r1
    5802:	cd b7       	in	r28, 0x3d	; 61
    5804:	de b7       	in	r29, 0x3e	; 62
    5806:	69 83       	std	Y+1, r22	; 0x01
    5808:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <_ZN7TwoWire12transmittingE>
    580c:	22 23       	and	r18, r18
    580e:	d1 f0       	breq	.+52     	; 0x5844 <_ZN7TwoWire5writeEh+0x48>
    5810:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    5814:	20 32       	cpi	r18, 0x20	; 32
    5816:	40 f0       	brcs	.+16     	; 0x5828 <_ZN7TwoWire5writeEh+0x2c>
    5818:	21 e0       	ldi	r18, 0x01	; 1
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	fc 01       	movw	r30, r24
    581e:	33 83       	std	Z+3, r19	; 0x03
    5820:	22 83       	std	Z+2, r18	; 0x02
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	15 c0       	rjmp	.+42     	; 0x5852 <_ZN7TwoWire5writeEh+0x56>
    5828:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    582c:	e8 2f       	mov	r30, r24
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	e2 52       	subi	r30, 0x22	; 34
    5832:	fc 4f       	sbci	r31, 0xFC	; 252
    5834:	99 81       	ldd	r25, Y+1	; 0x01
    5836:	90 83       	st	Z, r25
    5838:	8f 5f       	subi	r24, 0xFF	; 255
    583a:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    583e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    5842:	05 c0       	rjmp	.+10     	; 0x584e <_ZN7TwoWire5writeEh+0x52>
    5844:	61 e0       	ldi	r22, 0x01	; 1
    5846:	ce 01       	movw	r24, r28
    5848:	01 96       	adiw	r24, 0x01	; 1
    584a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <twi_transmit>
    584e:	81 e0       	ldi	r24, 0x01	; 1
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	0f 90       	pop	r0
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <_ZN7TwoWireC1Ev>:
    585a:	fc 01       	movw	r30, r24
    585c:	13 82       	std	Z+3, r1	; 0x03
    585e:	12 82       	std	Z+2, r1	; 0x02
    5860:	88 ee       	ldi	r24, 0xE8	; 232
    5862:	93 e0       	ldi	r25, 0x03	; 3
    5864:	a0 e0       	ldi	r26, 0x00	; 0
    5866:	b0 e0       	ldi	r27, 0x00	; 0
    5868:	84 83       	std	Z+4, r24	; 0x04
    586a:	95 83       	std	Z+5, r25	; 0x05
    586c:	a6 83       	std	Z+6, r26	; 0x06
    586e:	b7 83       	std	Z+7, r27	; 0x07
    5870:	87 ed       	ldi	r24, 0xD7	; 215
    5872:	91 e0       	ldi	r25, 0x01	; 1
    5874:	91 83       	std	Z+1, r25	; 0x01
    5876:	80 83       	st	Z, r24
    5878:	08 95       	ret

0000587a <_ZN7TwoWire5beginEv>:
    587a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13rxBufferIndexE>
    587e:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire14rxBufferLengthE>
    5882:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    5886:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    588a:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <twi_init>
    588e:	85 ec       	ldi	r24, 0xC5	; 197
    5890:	9b e2       	ldi	r25, 0x2B	; 43
    5892:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <twi_attachSlaveTxEvent>
    5896:	8b e9       	ldi	r24, 0x9B	; 155
    5898:	9b e2       	ldi	r25, 0x2B	; 43
    589a:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <twi_attachSlaveRxEvent>

0000589e <_ZN7TwoWire8setClockEm>:
    589e:	cb 01       	movw	r24, r22
    58a0:	ba 01       	movw	r22, r20
    58a2:	0c 94 a7 2c 	jmp	0x594e	; 0x594e <twi_setFrequency>

000058a6 <_ZN7TwoWire17beginTransmissionEh>:
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <_ZN7TwoWire12transmittingE>
    58ac:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <_ZN7TwoWire9txAddressE>
    58b0:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    58b4:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    58b8:	08 95       	ret

000058ba <_ZN7TwoWire17beginTransmissionEi>:
    58ba:	0c 94 53 2c 	jmp	0x58a6	; 0x58a6 <_ZN7TwoWire17beginTransmissionEh>

000058be <_ZN7TwoWire15endTransmissionEh>:
    58be:	0f 93       	push	r16
    58c0:	06 2f       	mov	r16, r22
    58c2:	21 e0       	ldi	r18, 0x01	; 1
    58c4:	40 91 dc 03 	lds	r20, 0x03DC	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    58c8:	6e ed       	ldi	r22, 0xDE	; 222
    58ca:	73 e0       	ldi	r23, 0x03	; 3
    58cc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <_ZN7TwoWire9txAddressE>
    58d0:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <twi_writeTo>
    58d4:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZN7TwoWire13txBufferIndexE>
    58d8:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <_ZN7TwoWire14txBufferLengthE>
    58dc:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <_ZN7TwoWire12transmittingE>
    58e0:	0f 91       	pop	r16
    58e2:	08 95       	ret

000058e4 <_ZN7TwoWire15endTransmissionEv>:
    58e4:	61 e0       	ldi	r22, 0x01	; 1
    58e6:	0c 94 5f 2c 	jmp	0x58be	; 0x58be <_ZN7TwoWire15endTransmissionEh>

000058ea <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    58ea:	8b ec       	ldi	r24, 0xCB	; 203
    58ec:	93 e0       	ldi	r25, 0x03	; 3
    58ee:	0c 94 2d 2c 	jmp	0x585a	; 0x585a <_ZN7TwoWireC1Ev>

000058f2 <__cxa_pure_virtual>:
    58f2:	0e 94 dd 31 	call	0x63ba	; 0x63ba <abort>

000058f6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    58f6:	08 95       	ret

000058f8 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    58f8:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_state>
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <twi_sendStop>
    5902:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <twi_inRepStart>
    5906:	61 e0       	ldi	r22, 0x01	; 1
    5908:	82 e1       	ldi	r24, 0x12	; 18
    590a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    590e:	61 e0       	ldi	r22, 0x01	; 1
    5910:	83 e1       	ldi	r24, 0x13	; 19
    5912:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    5916:	e9 eb       	ldi	r30, 0xB9	; 185
    5918:	f0 e0       	ldi	r31, 0x00	; 0
    591a:	80 81       	ld	r24, Z
    591c:	8e 7f       	andi	r24, 0xFE	; 254
    591e:	80 83       	st	Z, r24
    5920:	80 81       	ld	r24, Z
    5922:	8d 7f       	andi	r24, 0xFD	; 253
    5924:	80 83       	st	Z, r24
    5926:	80 e2       	ldi	r24, 0x20	; 32
    5928:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    592c:	85 e4       	ldi	r24, 0x45	; 69
    592e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5932:	08 95       	ret

00005934 <twi_disable>:
    5934:	ec eb       	ldi	r30, 0xBC	; 188
    5936:	f0 e0       	ldi	r31, 0x00	; 0
    5938:	80 81       	ld	r24, Z
    593a:	8a 7b       	andi	r24, 0xBA	; 186
    593c:	80 83       	st	Z, r24
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	82 e1       	ldi	r24, 0x12	; 18
    5942:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <digitalWrite>
    5946:	60 e0       	ldi	r22, 0x00	; 0
    5948:	83 e1       	ldi	r24, 0x13	; 19
    594a:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <digitalWrite>

0000594e <twi_setFrequency>:
    594e:	9b 01       	movw	r18, r22
    5950:	ac 01       	movw	r20, r24
    5952:	60 e0       	ldi	r22, 0x00	; 0
    5954:	72 e1       	ldi	r23, 0x12	; 18
    5956:	8a e7       	ldi	r24, 0x7A	; 122
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__udivmodsi4>
    595e:	da 01       	movw	r26, r20
    5960:	c9 01       	movw	r24, r18
    5962:	40 97       	sbiw	r24, 0x10	; 16
    5964:	a1 09       	sbc	r26, r1
    5966:	b1 09       	sbc	r27, r1
    5968:	b6 95       	lsr	r27
    596a:	a7 95       	ror	r26
    596c:	97 95       	ror	r25
    596e:	87 95       	ror	r24
    5970:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5974:	08 95       	ret

00005976 <twi_transmit>:
    5976:	40 91 43 04 	lds	r20, 0x0443	; 0x800443 <twi_txBufferLength>
    597a:	26 2f       	mov	r18, r22
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	24 0f       	add	r18, r20
    5980:	31 1d       	adc	r19, r1
    5982:	21 32       	cpi	r18, 0x21	; 33
    5984:	31 05       	cpc	r19, r1
    5986:	dc f4       	brge	.+54     	; 0x59be <twi_transmit+0x48>
    5988:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <twi_state>
    598c:	24 30       	cpi	r18, 0x04	; 4
    598e:	c9 f4       	brne	.+50     	; 0x59c2 <twi_transmit+0x4c>
    5990:	fc 01       	movw	r30, r24
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	86 17       	cp	r24, r22
    5998:	58 f4       	brcc	.+22     	; 0x59b0 <twi_transmit+0x3a>
    599a:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <twi_txBufferLength>
    599e:	21 91       	ld	r18, Z+
    59a0:	dc 01       	movw	r26, r24
    59a2:	ab 5b       	subi	r26, 0xBB	; 187
    59a4:	bb 4f       	sbci	r27, 0xFB	; 251
    59a6:	a3 0f       	add	r26, r19
    59a8:	b1 1d       	adc	r27, r1
    59aa:	2c 93       	st	X, r18
    59ac:	01 96       	adiw	r24, 0x01	; 1
    59ae:	f3 cf       	rjmp	.-26     	; 0x5996 <twi_transmit+0x20>
    59b0:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    59b4:	68 0f       	add	r22, r24
    59b6:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <twi_txBufferLength>
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	08 95       	ret
    59be:	81 e0       	ldi	r24, 0x01	; 1
    59c0:	08 95       	ret
    59c2:	82 e0       	ldi	r24, 0x02	; 2
    59c4:	08 95       	ret

000059c6 <twi_attachSlaveRxEvent>:
    59c6:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <twi_onSlaveReceive+0x1>
    59ca:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <twi_onSlaveReceive>
    59ce:	08 95       	ret

000059d0 <twi_attachSlaveTxEvent>:
    59d0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <twi_onSlaveTransmit+0x1>
    59d4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_onSlaveTransmit>
    59d8:	08 95       	ret

000059da <twi_releaseBus>:
    59da:	85 ec       	ldi	r24, 0xC5	; 197
    59dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    59e0:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_state>
    59e4:	08 95       	ret

000059e6 <twi_handleTimeout>:
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    59ea:	91 e0       	ldi	r25, 0x01	; 1
    59ec:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <twi_timed_out_flag>
    59f0:	88 23       	and	r24, r24
    59f2:	61 f0       	breq	.+24     	; 0x5a0c <twi_handleTimeout+0x26>
    59f4:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    59f8:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    59fc:	0e 94 9a 2c 	call	0x5934	; 0x5934 <twi_disable>
    5a00:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <twi_init>
    5a04:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5a08:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	08 95       	ret

00005a12 <twi_writeTo>:
    5a12:	4f 92       	push	r4
    5a14:	5f 92       	push	r5
    5a16:	6f 92       	push	r6
    5a18:	7f 92       	push	r7
    5a1a:	8f 92       	push	r8
    5a1c:	9f 92       	push	r9
    5a1e:	af 92       	push	r10
    5a20:	bf 92       	push	r11
    5a22:	cf 92       	push	r12
    5a24:	df 92       	push	r13
    5a26:	ef 92       	push	r14
    5a28:	ff 92       	push	r15
    5a2a:	0f 93       	push	r16
    5a2c:	1f 93       	push	r17
    5a2e:	cf 93       	push	r28
    5a30:	df 93       	push	r29
    5a32:	41 32       	cpi	r20, 0x21	; 33
    5a34:	08 f0       	brcs	.+2      	; 0x5a38 <twi_writeTo+0x26>
    5a36:	c6 c0       	rjmp	.+396    	; 0x5bc4 <twi_writeTo+0x1b2>
    5a38:	12 2f       	mov	r17, r18
    5a3a:	f4 2e       	mov	r15, r20
    5a3c:	d7 2e       	mov	r13, r23
    5a3e:	e6 2e       	mov	r14, r22
    5a40:	d8 2f       	mov	r29, r24
    5a42:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5a46:	4b 01       	movw	r8, r22
    5a48:	5c 01       	movw	r10, r24
    5a4a:	c0 91 94 04 	lds	r28, 0x0494	; 0x800494 <twi_state>
    5a4e:	cc 23       	and	r28, r28
    5a50:	11 f1       	breq	.+68     	; 0x5a96 <twi_writeTo+0x84>
    5a52:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_timeout_us>
    5a56:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5a5a:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5a5e:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5a62:	89 2b       	or	r24, r25
    5a64:	8a 2b       	or	r24, r26
    5a66:	8b 2b       	or	r24, r27
    5a68:	81 f3       	breq	.-32     	; 0x5a4a <twi_writeTo+0x38>
    5a6a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5a6e:	40 90 8d 04 	lds	r4, 0x048D	; 0x80048d <twi_timeout_us>
    5a72:	50 90 8e 04 	lds	r5, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5a76:	60 90 8f 04 	lds	r6, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5a7a:	70 90 90 04 	lds	r7, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5a7e:	dc 01       	movw	r26, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	88 19       	sub	r24, r8
    5a84:	99 09       	sbc	r25, r9
    5a86:	aa 09       	sbc	r26, r10
    5a88:	bb 09       	sbc	r27, r11
    5a8a:	48 16       	cp	r4, r24
    5a8c:	59 06       	cpc	r5, r25
    5a8e:	6a 06       	cpc	r6, r26
    5a90:	7b 06       	cpc	r7, r27
    5a92:	d8 f6       	brcc	.-74     	; 0x5a4a <twi_writeTo+0x38>
    5a94:	83 c0       	rjmp	.+262    	; 0x5b9c <twi_writeTo+0x18a>
    5a96:	82 e0       	ldi	r24, 0x02	; 2
    5a98:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_state>
    5a9c:	00 93 92 04 	sts	0x0492, r16	; 0x800492 <twi_sendStop>
    5aa0:	8f ef       	ldi	r24, 0xFF	; 255
    5aa2:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_error>
    5aa6:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <twi_masterBufferIndex>
    5aaa:	f0 92 65 04 	sts	0x0465, r15	; 0x800465 <twi_masterBufferLength>
    5aae:	9e 2d       	mov	r25, r14
    5ab0:	a7 e6       	ldi	r26, 0x67	; 103
    5ab2:	b4 e0       	ldi	r27, 0x04	; 4
    5ab4:	ee 2d       	mov	r30, r14
    5ab6:	fd 2d       	mov	r31, r13
    5ab8:	8e 2f       	mov	r24, r30
    5aba:	89 1b       	sub	r24, r25
    5abc:	8f 15       	cp	r24, r15
    5abe:	18 f4       	brcc	.+6      	; 0x5ac6 <twi_writeTo+0xb4>
    5ac0:	81 91       	ld	r24, Z+
    5ac2:	8d 93       	st	X+, r24
    5ac4:	f9 cf       	rjmp	.-14     	; 0x5ab8 <twi_writeTo+0xa6>
    5ac6:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_slarw>
    5aca:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <twi_slarw>
    5ace:	dd 0f       	add	r29, r29
    5ad0:	d9 2b       	or	r29, r25
    5ad2:	d0 93 93 04 	sts	0x0493, r29	; 0x800493 <twi_slarw>
    5ad6:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <twi_inRepStart>
    5ada:	81 30       	cpi	r24, 0x01	; 1
    5adc:	89 f5       	brne	.+98     	; 0x5b40 <twi_writeTo+0x12e>
    5ade:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <twi_inRepStart>
    5ae2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5ae6:	6b 01       	movw	r12, r22
    5ae8:	7c 01       	movw	r14, r24
    5aea:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_slarw>
    5aee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5af2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_timeout_us>
    5af6:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5afa:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5afe:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5b02:	89 2b       	or	r24, r25
    5b04:	8a 2b       	or	r24, r26
    5b06:	8b 2b       	or	r24, r27
    5b08:	a9 f0       	breq	.+42     	; 0x5b34 <twi_writeTo+0x122>
    5b0a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5b0e:	80 90 8d 04 	lds	r8, 0x048D	; 0x80048d <twi_timeout_us>
    5b12:	90 90 8e 04 	lds	r9, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5b16:	a0 90 8f 04 	lds	r10, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5b1a:	b0 90 90 04 	lds	r11, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5b1e:	dc 01       	movw	r26, r24
    5b20:	cb 01       	movw	r24, r22
    5b22:	8c 19       	sub	r24, r12
    5b24:	9d 09       	sbc	r25, r13
    5b26:	ae 09       	sbc	r26, r14
    5b28:	bf 09       	sbc	r27, r15
    5b2a:	88 16       	cp	r8, r24
    5b2c:	99 06       	cpc	r9, r25
    5b2e:	aa 06       	cpc	r10, r26
    5b30:	bb 06       	cpc	r11, r27
    5b32:	a0 f1       	brcs	.+104    	; 0x5b9c <twi_writeTo+0x18a>
    5b34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5b38:	83 fd       	sbrc	r24, 3
    5b3a:	d7 cf       	rjmp	.-82     	; 0x5aea <twi_writeTo+0xd8>
    5b3c:	85 ec       	ldi	r24, 0xC5	; 197
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <twi_writeTo+0x130>
    5b40:	85 ee       	ldi	r24, 0xE5	; 229
    5b42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5b46:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5b4a:	6b 01       	movw	r12, r22
    5b4c:	7c 01       	movw	r14, r24
    5b4e:	11 23       	and	r17, r17
    5b50:	59 f1       	breq	.+86     	; 0x5ba8 <twi_writeTo+0x196>
    5b52:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_state>
    5b56:	82 30       	cpi	r24, 0x02	; 2
    5b58:	39 f5       	brne	.+78     	; 0x5ba8 <twi_writeTo+0x196>
    5b5a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_timeout_us>
    5b5e:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5b62:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5b66:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5b6a:	89 2b       	or	r24, r25
    5b6c:	8a 2b       	or	r24, r26
    5b6e:	8b 2b       	or	r24, r27
    5b70:	71 f3       	breq	.-36     	; 0x5b4e <twi_writeTo+0x13c>
    5b72:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <micros>
    5b76:	80 90 8d 04 	lds	r8, 0x048D	; 0x80048d <twi_timeout_us>
    5b7a:	90 90 8e 04 	lds	r9, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5b7e:	a0 90 8f 04 	lds	r10, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5b82:	b0 90 90 04 	lds	r11, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5b86:	dc 01       	movw	r26, r24
    5b88:	cb 01       	movw	r24, r22
    5b8a:	8c 19       	sub	r24, r12
    5b8c:	9d 09       	sbc	r25, r13
    5b8e:	ae 09       	sbc	r26, r14
    5b90:	bf 09       	sbc	r27, r15
    5b92:	88 16       	cp	r8, r24
    5b94:	99 06       	cpc	r9, r25
    5b96:	aa 06       	cpc	r10, r26
    5b98:	bb 06       	cpc	r11, r27
    5b9a:	c8 f6       	brcc	.-78     	; 0x5b4e <twi_writeTo+0x13c>
    5b9c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_do_reset_on_timeout>
    5ba0:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <twi_handleTimeout>
    5ba4:	c5 e0       	ldi	r28, 0x05	; 5
    5ba6:	13 c0       	rjmp	.+38     	; 0x5bce <twi_writeTo+0x1bc>
    5ba8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    5bac:	8f 3f       	cpi	r24, 0xFF	; 255
    5bae:	79 f0       	breq	.+30     	; 0x5bce <twi_writeTo+0x1bc>
    5bb0:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    5bb4:	80 32       	cpi	r24, 0x20	; 32
    5bb6:	41 f0       	breq	.+16     	; 0x5bc8 <twi_writeTo+0x1b6>
    5bb8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    5bbc:	80 33       	cpi	r24, 0x30	; 48
    5bbe:	31 f0       	breq	.+12     	; 0x5bcc <twi_writeTo+0x1ba>
    5bc0:	c4 e0       	ldi	r28, 0x04	; 4
    5bc2:	05 c0       	rjmp	.+10     	; 0x5bce <twi_writeTo+0x1bc>
    5bc4:	c1 e0       	ldi	r28, 0x01	; 1
    5bc6:	03 c0       	rjmp	.+6      	; 0x5bce <twi_writeTo+0x1bc>
    5bc8:	c2 e0       	ldi	r28, 0x02	; 2
    5bca:	01 c0       	rjmp	.+2      	; 0x5bce <twi_writeTo+0x1bc>
    5bcc:	c3 e0       	ldi	r28, 0x03	; 3
    5bce:	8c 2f       	mov	r24, r28
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	ff 90       	pop	r15
    5bda:	ef 90       	pop	r14
    5bdc:	df 90       	pop	r13
    5bde:	cf 90       	pop	r12
    5be0:	bf 90       	pop	r11
    5be2:	af 90       	pop	r10
    5be4:	9f 90       	pop	r9
    5be6:	8f 90       	pop	r8
    5be8:	7f 90       	pop	r7
    5bea:	6f 90       	pop	r6
    5bec:	5f 90       	pop	r5
    5bee:	4f 90       	pop	r4
    5bf0:	08 95       	ret

00005bf2 <twi_stop>:
    5bf2:	85 ed       	ldi	r24, 0xD5	; 213
    5bf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5bf8:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_timeout_us>
    5bfc:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5c00:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5c04:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5c08:	07 96       	adiw	r24, 0x07	; 7
    5c0a:	a1 1d       	adc	r26, r1
    5c0c:	b1 1d       	adc	r27, r1
    5c0e:	23 e0       	ldi	r18, 0x03	; 3
    5c10:	b6 95       	lsr	r27
    5c12:	a7 95       	ror	r26
    5c14:	97 95       	ror	r25
    5c16:	87 95       	ror	r24
    5c18:	2a 95       	dec	r18
    5c1a:	d1 f7       	brne	.-12     	; 0x5c10 <twi_stop+0x1e>
    5c1c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5c20:	24 ff       	sbrs	r18, 4
    5c22:	1c c0       	rjmp	.+56     	; 0x5c5c <twi_stop+0x6a>
    5c24:	40 91 8d 04 	lds	r20, 0x048D	; 0x80048d <twi_timeout_us>
    5c28:	50 91 8e 04 	lds	r21, 0x048E	; 0x80048e <twi_timeout_us+0x1>
    5c2c:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <twi_timeout_us+0x2>
    5c30:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <twi_timeout_us+0x3>
    5c34:	45 2b       	or	r20, r21
    5c36:	46 2b       	or	r20, r22
    5c38:	47 2b       	or	r20, r23
    5c3a:	81 f3       	breq	.-32     	; 0x5c1c <twi_stop+0x2a>
    5c3c:	00 97       	sbiw	r24, 0x00	; 0
    5c3e:	a1 05       	cpc	r26, r1
    5c40:	b1 05       	cpc	r27, r1
    5c42:	41 f0       	breq	.+16     	; 0x5c54 <twi_stop+0x62>
    5c44:	2a e1       	ldi	r18, 0x1A	; 26
    5c46:	2a 95       	dec	r18
    5c48:	f1 f7       	brne	.-4      	; 0x5c46 <twi_stop+0x54>
    5c4a:	00 c0       	rjmp	.+0      	; 0x5c4c <twi_stop+0x5a>
    5c4c:	01 97       	sbiw	r24, 0x01	; 1
    5c4e:	a1 09       	sbc	r26, r1
    5c50:	b1 09       	sbc	r27, r1
    5c52:	e4 cf       	rjmp	.-56     	; 0x5c1c <twi_stop+0x2a>
    5c54:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_do_reset_on_timeout>
    5c58:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <twi_handleTimeout>
    5c5c:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_state>
    5c60:	08 95       	ret

00005c62 <__vector_24>:

ISR(TWI_vect)
{
    5c62:	1f 92       	push	r1
    5c64:	0f 92       	push	r0
    5c66:	0f b6       	in	r0, 0x3f	; 63
    5c68:	0f 92       	push	r0
    5c6a:	11 24       	eor	r1, r1
    5c6c:	2f 93       	push	r18
    5c6e:	3f 93       	push	r19
    5c70:	4f 93       	push	r20
    5c72:	5f 93       	push	r21
    5c74:	6f 93       	push	r22
    5c76:	7f 93       	push	r23
    5c78:	8f 93       	push	r24
    5c7a:	9f 93       	push	r25
    5c7c:	af 93       	push	r26
    5c7e:	bf 93       	push	r27
    5c80:	ef 93       	push	r30
    5c82:	ff 93       	push	r31
  switch(TW_STATUS){
    5c84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    5c88:	88 7f       	andi	r24, 0xF8	; 248
    5c8a:	80 36       	cpi	r24, 0x60	; 96
    5c8c:	09 f4       	brne	.+2      	; 0x5c90 <__vector_24+0x2e>
    5c8e:	9e c0       	rjmp	.+316    	; 0x5dcc <__vector_24+0x16a>
    5c90:	78 f5       	brcc	.+94     	; 0x5cf0 <__vector_24+0x8e>
    5c92:	88 32       	cpi	r24, 0x28	; 40
    5c94:	09 f4       	brne	.+2      	; 0x5c98 <__vector_24+0x36>
    5c96:	5d c0       	rjmp	.+186    	; 0x5d52 <__vector_24+0xf0>
    5c98:	90 f4       	brcc	.+36     	; 0x5cbe <__vector_24+0x5c>
    5c9a:	80 31       	cpi	r24, 0x10	; 16
    5c9c:	09 f4       	brne	.+2      	; 0x5ca0 <__vector_24+0x3e>
    5c9e:	56 c0       	rjmp	.+172    	; 0x5d4c <__vector_24+0xea>
    5ca0:	38 f4       	brcc	.+14     	; 0x5cb0 <__vector_24+0x4e>
    5ca2:	88 23       	and	r24, r24
    5ca4:	09 f4       	brne	.+2      	; 0x5ca8 <__vector_24+0x46>
    5ca6:	f5 c0       	rjmp	.+490    	; 0x5e92 <__vector_24+0x230>
    5ca8:	88 30       	cpi	r24, 0x08	; 8
    5caa:	09 f4       	brne	.+2      	; 0x5cae <__vector_24+0x4c>
    5cac:	4f c0       	rjmp	.+158    	; 0x5d4c <__vector_24+0xea>
    5cae:	f5 c0       	rjmp	.+490    	; 0x5e9a <__vector_24+0x238>
    5cb0:	88 31       	cpi	r24, 0x18	; 24
    5cb2:	09 f4       	brne	.+2      	; 0x5cb6 <__vector_24+0x54>
    5cb4:	4e c0       	rjmp	.+156    	; 0x5d52 <__vector_24+0xf0>
    5cb6:	80 32       	cpi	r24, 0x20	; 32
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <__vector_24+0x5a>
    5cba:	5f c0       	rjmp	.+190    	; 0x5d7a <__vector_24+0x118>
    5cbc:	ee c0       	rjmp	.+476    	; 0x5e9a <__vector_24+0x238>
    5cbe:	80 34       	cpi	r24, 0x40	; 64
    5cc0:	09 f4       	brne	.+2      	; 0x5cc4 <__vector_24+0x62>
    5cc2:	6a c0       	rjmp	.+212    	; 0x5d98 <__vector_24+0x136>
    5cc4:	58 f4       	brcc	.+22     	; 0x5cdc <__vector_24+0x7a>
    5cc6:	80 33       	cpi	r24, 0x30	; 48
    5cc8:	09 f4       	brne	.+2      	; 0x5ccc <__vector_24+0x6a>
    5cca:	57 c0       	rjmp	.+174    	; 0x5d7a <__vector_24+0x118>
    5ccc:	88 33       	cpi	r24, 0x38	; 56
    5cce:	09 f0       	breq	.+2      	; 0x5cd2 <__vector_24+0x70>
    5cd0:	e4 c0       	rjmp	.+456    	; 0x5e9a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5cd2:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_error>
      twi_releaseBus();
    5cd6:	0e 94 ed 2c 	call	0x59da	; 0x59da <twi_releaseBus>
      break;
    5cda:	df c0       	rjmp	.+446    	; 0x5e9a <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5cdc:	80 35       	cpi	r24, 0x50	; 80
    5cde:	09 f4       	brne	.+2      	; 0x5ce2 <__vector_24+0x80>
    5ce0:	4f c0       	rjmp	.+158    	; 0x5d80 <__vector_24+0x11e>
    5ce2:	88 35       	cpi	r24, 0x58	; 88
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <__vector_24+0x86>
    5ce6:	5d c0       	rjmp	.+186    	; 0x5da2 <__vector_24+0x140>
    5ce8:	88 34       	cpi	r24, 0x48	; 72
    5cea:	09 f0       	breq	.+2      	; 0x5cee <__vector_24+0x8c>
    5cec:	d6 c0       	rjmp	.+428    	; 0x5e9a <__vector_24+0x238>
    5cee:	d3 c0       	rjmp	.+422    	; 0x5e96 <__vector_24+0x234>
    5cf0:	88 39       	cpi	r24, 0x98	; 152
    5cf2:	09 f4       	brne	.+2      	; 0x5cf6 <__vector_24+0x94>
    5cf4:	c4 c0       	rjmp	.+392    	; 0x5e7e <__vector_24+0x21c>
    5cf6:	a8 f4       	brcc	.+42     	; 0x5d22 <__vector_24+0xc0>
    5cf8:	88 37       	cpi	r24, 0x78	; 120
    5cfa:	09 f4       	brne	.+2      	; 0x5cfe <__vector_24+0x9c>
    5cfc:	67 c0       	rjmp	.+206    	; 0x5dcc <__vector_24+0x16a>
    5cfe:	38 f4       	brcc	.+14     	; 0x5d0e <__vector_24+0xac>
    5d00:	88 36       	cpi	r24, 0x68	; 104
    5d02:	09 f4       	brne	.+2      	; 0x5d06 <__vector_24+0xa4>
    5d04:	63 c0       	rjmp	.+198    	; 0x5dcc <__vector_24+0x16a>
    5d06:	80 37       	cpi	r24, 0x70	; 112
    5d08:	09 f4       	brne	.+2      	; 0x5d0c <__vector_24+0xaa>
    5d0a:	60 c0       	rjmp	.+192    	; 0x5dcc <__vector_24+0x16a>
    5d0c:	c6 c0       	rjmp	.+396    	; 0x5e9a <__vector_24+0x238>
    5d0e:	88 38       	cpi	r24, 0x88	; 136
    5d10:	09 f4       	brne	.+2      	; 0x5d14 <__vector_24+0xb2>
    5d12:	b5 c0       	rjmp	.+362    	; 0x5e7e <__vector_24+0x21c>
    5d14:	80 39       	cpi	r24, 0x90	; 144
    5d16:	09 f4       	brne	.+2      	; 0x5d1a <__vector_24+0xb8>
    5d18:	5f c0       	rjmp	.+190    	; 0x5dd8 <__vector_24+0x176>
    5d1a:	80 38       	cpi	r24, 0x80	; 128
    5d1c:	09 f0       	breq	.+2      	; 0x5d20 <__vector_24+0xbe>
    5d1e:	bd c0       	rjmp	.+378    	; 0x5e9a <__vector_24+0x238>
    5d20:	5b c0       	rjmp	.+182    	; 0x5dd8 <__vector_24+0x176>
    5d22:	80 3b       	cpi	r24, 0xB0	; 176
    5d24:	09 f4       	brne	.+2      	; 0x5d28 <__vector_24+0xc6>
    5d26:	83 c0       	rjmp	.+262    	; 0x5e2e <__vector_24+0x1cc>
    5d28:	38 f4       	brcc	.+14     	; 0x5d38 <__vector_24+0xd6>
    5d2a:	80 3a       	cpi	r24, 0xA0	; 160
    5d2c:	09 f4       	brne	.+2      	; 0x5d30 <__vector_24+0xce>
    5d2e:	66 c0       	rjmp	.+204    	; 0x5dfc <__vector_24+0x19a>
    5d30:	88 3a       	cpi	r24, 0xA8	; 168
    5d32:	09 f4       	brne	.+2      	; 0x5d36 <__vector_24+0xd4>
    5d34:	7c c0       	rjmp	.+248    	; 0x5e2e <__vector_24+0x1cc>
    5d36:	b1 c0       	rjmp	.+354    	; 0x5e9a <__vector_24+0x238>
    5d38:	80 3c       	cpi	r24, 0xC0	; 192
    5d3a:	09 f4       	brne	.+2      	; 0x5d3e <__vector_24+0xdc>
    5d3c:	a4 c0       	rjmp	.+328    	; 0x5e86 <__vector_24+0x224>
    5d3e:	88 3c       	cpi	r24, 0xC8	; 200
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <__vector_24+0xe2>
    5d42:	a1 c0       	rjmp	.+322    	; 0x5e86 <__vector_24+0x224>
    5d44:	88 3b       	cpi	r24, 0xB8	; 184
    5d46:	09 f4       	brne	.+2      	; 0x5d4a <__vector_24+0xe8>
    5d48:	87 c0       	rjmp	.+270    	; 0x5e58 <__vector_24+0x1f6>
    5d4a:	a7 c0       	rjmp	.+334    	; 0x5e9a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5d4c:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_slarw>
    5d50:	10 c0       	rjmp	.+32     	; 0x5d72 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5d52:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <twi_masterBufferIndex>
    5d56:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <twi_masterBufferLength>
    5d5a:	98 17       	cp	r25, r24
    5d5c:	70 f5       	brcc	.+92     	; 0x5dba <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5d5e:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    5d62:	81 e0       	ldi	r24, 0x01	; 1
    5d64:	8e 0f       	add	r24, r30
    5d66:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    5d6a:	f0 e0       	ldi	r31, 0x00	; 0
    5d6c:	e9 59       	subi	r30, 0x99	; 153
    5d6e:	fb 4f       	sbci	r31, 0xFB	; 251
    5d70:	80 81       	ld	r24, Z
    5d72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d76:	85 ec       	ldi	r24, 0xC5	; 197
    5d78:	83 c0       	rjmp	.+262    	; 0x5e80 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5d7a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_error>
    5d7e:	8b c0       	rjmp	.+278    	; 0x5e96 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5d80:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	8e 0f       	add	r24, r30
    5d88:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    5d8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	e9 59       	subi	r30, 0x99	; 153
    5d94:	fb 4f       	sbci	r31, 0xFB	; 251
    5d96:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5d98:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <twi_masterBufferIndex>
    5d9c:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <twi_masterBufferLength>
    5da0:	6b c0       	rjmp	.+214    	; 0x5e78 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5da2:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    5da6:	81 e0       	ldi	r24, 0x01	; 1
    5da8:	8e 0f       	add	r24, r30
    5daa:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    5dae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5db2:	f0 e0       	ldi	r31, 0x00	; 0
    5db4:	e9 59       	subi	r30, 0x99	; 153
    5db6:	fb 4f       	sbci	r31, 0xFB	; 251
    5db8:	80 83       	st	Z, r24
      if (twi_sendStop){
    5dba:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <twi_sendStop>
    5dbe:	81 11       	cpse	r24, r1
    5dc0:	6a c0       	rjmp	.+212    	; 0x5e96 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    5dc2:	81 e0       	ldi	r24, 0x01	; 1
    5dc4:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5dc8:	84 ea       	ldi	r24, 0xA4	; 164
    5dca:	5e c0       	rjmp	.+188    	; 0x5e88 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5dcc:	83 e0       	ldi	r24, 0x03	; 3
    5dce:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5dd2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_rxBufferIndex>
    5dd6:	cf cf       	rjmp	.-98     	; 0x5d76 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5dd8:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_rxBufferIndex>
    5ddc:	80 32       	cpi	r24, 0x20	; 32
    5dde:	08 f0       	brcs	.+2      	; 0x5de2 <__vector_24+0x180>
    5de0:	4e c0       	rjmp	.+156    	; 0x5e7e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5de2:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <twi_rxBufferIndex>
    5de6:	81 e0       	ldi	r24, 0x01	; 1
    5de8:	8e 0f       	add	r24, r30
    5dea:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <twi_rxBufferIndex>
    5dee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5df2:	f0 e0       	ldi	r31, 0x00	; 0
    5df4:	ed 5d       	subi	r30, 0xDD	; 221
    5df6:	fb 4f       	sbci	r31, 0xFB	; 251
    5df8:	80 83       	st	Z, r24
    5dfa:	bd cf       	rjmp	.-134    	; 0x5d76 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5dfc:	0e 94 ed 2c 	call	0x59da	; 0x59da <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5e00:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_rxBufferIndex>
    5e04:	80 32       	cpi	r24, 0x20	; 32
    5e06:	30 f4       	brcc	.+12     	; 0x5e14 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5e08:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <twi_rxBufferIndex>
    5e0c:	f0 e0       	ldi	r31, 0x00	; 0
    5e0e:	ed 5d       	subi	r30, 0xDD	; 221
    5e10:	fb 4f       	sbci	r31, 0xFB	; 251
    5e12:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5e14:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <twi_rxBufferIndex>
    5e18:	70 e0       	ldi	r23, 0x00	; 0
    5e1a:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <twi_onSlaveReceive>
    5e1e:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <twi_onSlaveReceive+0x1>
    5e22:	83 e2       	ldi	r24, 0x23	; 35
    5e24:	94 e0       	ldi	r25, 0x04	; 4
    5e26:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5e28:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_rxBufferIndex>
      break;
    5e2c:	36 c0       	rjmp	.+108    	; 0x5e9a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5e2e:	84 e0       	ldi	r24, 0x04	; 4
    5e30:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5e34:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5e38:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5e3c:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_onSlaveTransmit>
    5e40:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <twi_onSlaveTransmit+0x1>
    5e44:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5e46:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	05 c0       	rjmp	.+10     	; 0x5e58 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5e4e:	81 e0       	ldi	r24, 0x01	; 1
    5e50:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5e54:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5e58:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_txBufferIndex>
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	8e 0f       	add	r24, r30
    5e60:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_txBufferIndex>
    5e64:	f0 e0       	ldi	r31, 0x00	; 0
    5e66:	eb 5b       	subi	r30, 0xBB	; 187
    5e68:	fb 4f       	sbci	r31, 0xFB	; 251
    5e6a:	80 81       	ld	r24, Z
    5e6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5e70:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_txBufferIndex>
    5e74:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    5e78:	98 17       	cp	r25, r24
    5e7a:	08 f4       	brcc	.+2      	; 0x5e7e <__vector_24+0x21c>
    5e7c:	7c cf       	rjmp	.-264    	; 0x5d76 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5e7e:	85 e8       	ldi	r24, 0x85	; 133
    5e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5e84:	0a c0       	rjmp	.+20     	; 0x5e9a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e86:	85 ec       	ldi	r24, 0xC5	; 197
    5e88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5e8c:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_state>
      break;
    5e90:	04 c0       	rjmp	.+8      	; 0x5e9a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5e92:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <twi_error>
      twi_stop();
    5e96:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <twi_stop>
      break;
  }
}
    5e9a:	ff 91       	pop	r31
    5e9c:	ef 91       	pop	r30
    5e9e:	bf 91       	pop	r27
    5ea0:	af 91       	pop	r26
    5ea2:	9f 91       	pop	r25
    5ea4:	8f 91       	pop	r24
    5ea6:	7f 91       	pop	r23
    5ea8:	6f 91       	pop	r22
    5eaa:	5f 91       	pop	r21
    5eac:	4f 91       	pop	r20
    5eae:	3f 91       	pop	r19
    5eb0:	2f 91       	pop	r18
    5eb2:	0f 90       	pop	r0
    5eb4:	0f be       	out	0x3f, r0	; 63
    5eb6:	0f 90       	pop	r0
    5eb8:	1f 90       	pop	r1
    5eba:	18 95       	reti

00005ebc <__cmpsf2>:
    5ebc:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <__fp_cmp>
    5ec0:	08 f4       	brcc	.+2      	; 0x5ec4 <__cmpsf2+0x8>
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	08 95       	ret

00005ec6 <__fp_cmp>:
    5ec6:	99 0f       	add	r25, r25
    5ec8:	00 08       	sbc	r0, r0
    5eca:	55 0f       	add	r21, r21
    5ecc:	aa 0b       	sbc	r26, r26
    5ece:	e0 e8       	ldi	r30, 0x80	; 128
    5ed0:	fe ef       	ldi	r31, 0xFE	; 254
    5ed2:	16 16       	cp	r1, r22
    5ed4:	17 06       	cpc	r1, r23
    5ed6:	e8 07       	cpc	r30, r24
    5ed8:	f9 07       	cpc	r31, r25
    5eda:	c0 f0       	brcs	.+48     	; 0x5f0c <__fp_cmp+0x46>
    5edc:	12 16       	cp	r1, r18
    5ede:	13 06       	cpc	r1, r19
    5ee0:	e4 07       	cpc	r30, r20
    5ee2:	f5 07       	cpc	r31, r21
    5ee4:	98 f0       	brcs	.+38     	; 0x5f0c <__fp_cmp+0x46>
    5ee6:	62 1b       	sub	r22, r18
    5ee8:	73 0b       	sbc	r23, r19
    5eea:	84 0b       	sbc	r24, r20
    5eec:	95 0b       	sbc	r25, r21
    5eee:	39 f4       	brne	.+14     	; 0x5efe <__fp_cmp+0x38>
    5ef0:	0a 26       	eor	r0, r26
    5ef2:	61 f0       	breq	.+24     	; 0x5f0c <__fp_cmp+0x46>
    5ef4:	23 2b       	or	r18, r19
    5ef6:	24 2b       	or	r18, r20
    5ef8:	25 2b       	or	r18, r21
    5efa:	21 f4       	brne	.+8      	; 0x5f04 <__fp_cmp+0x3e>
    5efc:	08 95       	ret
    5efe:	0a 26       	eor	r0, r26
    5f00:	09 f4       	brne	.+2      	; 0x5f04 <__fp_cmp+0x3e>
    5f02:	a1 40       	sbci	r26, 0x01	; 1
    5f04:	a6 95       	lsr	r26
    5f06:	8f ef       	ldi	r24, 0xFF	; 255
    5f08:	81 1d       	adc	r24, r1
    5f0a:	81 1d       	adc	r24, r1
    5f0c:	08 95       	ret

00005f0e <__gesf2>:
    5f0e:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <__fp_cmp>
    5f12:	08 f4       	brcc	.+2      	; 0x5f16 <__gesf2+0x8>
    5f14:	8f ef       	ldi	r24, 0xFF	; 255
    5f16:	08 95       	ret

00005f18 <__unordsf2>:
    5f18:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <__fp_cmp>
    5f1c:	88 0b       	sbc	r24, r24
    5f1e:	99 0b       	sbc	r25, r25
    5f20:	08 95       	ret

00005f22 <__udivmodhi4>:
    5f22:	aa 1b       	sub	r26, r26
    5f24:	bb 1b       	sub	r27, r27
    5f26:	51 e1       	ldi	r21, 0x11	; 17
    5f28:	07 c0       	rjmp	.+14     	; 0x5f38 <__udivmodhi4_ep>

00005f2a <__udivmodhi4_loop>:
    5f2a:	aa 1f       	adc	r26, r26
    5f2c:	bb 1f       	adc	r27, r27
    5f2e:	a6 17       	cp	r26, r22
    5f30:	b7 07       	cpc	r27, r23
    5f32:	10 f0       	brcs	.+4      	; 0x5f38 <__udivmodhi4_ep>
    5f34:	a6 1b       	sub	r26, r22
    5f36:	b7 0b       	sbc	r27, r23

00005f38 <__udivmodhi4_ep>:
    5f38:	88 1f       	adc	r24, r24
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	5a 95       	dec	r21
    5f3e:	a9 f7       	brne	.-22     	; 0x5f2a <__udivmodhi4_loop>
    5f40:	80 95       	com	r24
    5f42:	90 95       	com	r25
    5f44:	bc 01       	movw	r22, r24
    5f46:	cd 01       	movw	r24, r26
    5f48:	08 95       	ret

00005f4a <__divmodhi4>:
    5f4a:	97 fb       	bst	r25, 7
    5f4c:	07 2e       	mov	r0, r23
    5f4e:	16 f4       	brtc	.+4      	; 0x5f54 <__divmodhi4+0xa>
    5f50:	00 94       	com	r0
    5f52:	07 d0       	rcall	.+14     	; 0x5f62 <__divmodhi4_neg1>
    5f54:	77 fd       	sbrc	r23, 7
    5f56:	09 d0       	rcall	.+18     	; 0x5f6a <__divmodhi4_neg2>
    5f58:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <__udivmodhi4>
    5f5c:	07 fc       	sbrc	r0, 7
    5f5e:	05 d0       	rcall	.+10     	; 0x5f6a <__divmodhi4_neg2>
    5f60:	3e f4       	brtc	.+14     	; 0x5f70 <__divmodhi4_exit>

00005f62 <__divmodhi4_neg1>:
    5f62:	90 95       	com	r25
    5f64:	81 95       	neg	r24
    5f66:	9f 4f       	sbci	r25, 0xFF	; 255
    5f68:	08 95       	ret

00005f6a <__divmodhi4_neg2>:
    5f6a:	70 95       	com	r23
    5f6c:	61 95       	neg	r22
    5f6e:	7f 4f       	sbci	r23, 0xFF	; 255

00005f70 <__divmodhi4_exit>:
    5f70:	08 95       	ret

00005f72 <__udivmodsi4>:
    5f72:	a1 e2       	ldi	r26, 0x21	; 33
    5f74:	1a 2e       	mov	r1, r26
    5f76:	aa 1b       	sub	r26, r26
    5f78:	bb 1b       	sub	r27, r27
    5f7a:	fd 01       	movw	r30, r26
    5f7c:	0d c0       	rjmp	.+26     	; 0x5f98 <__udivmodsi4_ep>

00005f7e <__udivmodsi4_loop>:
    5f7e:	aa 1f       	adc	r26, r26
    5f80:	bb 1f       	adc	r27, r27
    5f82:	ee 1f       	adc	r30, r30
    5f84:	ff 1f       	adc	r31, r31
    5f86:	a2 17       	cp	r26, r18
    5f88:	b3 07       	cpc	r27, r19
    5f8a:	e4 07       	cpc	r30, r20
    5f8c:	f5 07       	cpc	r31, r21
    5f8e:	20 f0       	brcs	.+8      	; 0x5f98 <__udivmodsi4_ep>
    5f90:	a2 1b       	sub	r26, r18
    5f92:	b3 0b       	sbc	r27, r19
    5f94:	e4 0b       	sbc	r30, r20
    5f96:	f5 0b       	sbc	r31, r21

00005f98 <__udivmodsi4_ep>:
    5f98:	66 1f       	adc	r22, r22
    5f9a:	77 1f       	adc	r23, r23
    5f9c:	88 1f       	adc	r24, r24
    5f9e:	99 1f       	adc	r25, r25
    5fa0:	1a 94       	dec	r1
    5fa2:	69 f7       	brne	.-38     	; 0x5f7e <__udivmodsi4_loop>
    5fa4:	60 95       	com	r22
    5fa6:	70 95       	com	r23
    5fa8:	80 95       	com	r24
    5faa:	90 95       	com	r25
    5fac:	9b 01       	movw	r18, r22
    5fae:	ac 01       	movw	r20, r24
    5fb0:	bd 01       	movw	r22, r26
    5fb2:	cf 01       	movw	r24, r30
    5fb4:	08 95       	ret

00005fb6 <__divmodsi4>:
    5fb6:	05 2e       	mov	r0, r21
    5fb8:	97 fb       	bst	r25, 7
    5fba:	1e f4       	brtc	.+6      	; 0x5fc2 <__divmodsi4+0xc>
    5fbc:	00 94       	com	r0
    5fbe:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__negsi2>
    5fc2:	57 fd       	sbrc	r21, 7
    5fc4:	07 d0       	rcall	.+14     	; 0x5fd4 <__divmodsi4_neg2>
    5fc6:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__udivmodsi4>
    5fca:	07 fc       	sbrc	r0, 7
    5fcc:	03 d0       	rcall	.+6      	; 0x5fd4 <__divmodsi4_neg2>
    5fce:	4e f4       	brtc	.+18     	; 0x5fe2 <__divmodsi4_exit>
    5fd0:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__negsi2>

00005fd4 <__divmodsi4_neg2>:
    5fd4:	50 95       	com	r21
    5fd6:	40 95       	com	r20
    5fd8:	30 95       	com	r19
    5fda:	21 95       	neg	r18
    5fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    5fde:	4f 4f       	sbci	r20, 0xFF	; 255
    5fe0:	5f 4f       	sbci	r21, 0xFF	; 255

00005fe2 <__divmodsi4_exit>:
    5fe2:	08 95       	ret

00005fe4 <__negsi2>:
    5fe4:	90 95       	com	r25
    5fe6:	80 95       	com	r24
    5fe8:	70 95       	com	r23
    5fea:	61 95       	neg	r22
    5fec:	7f 4f       	sbci	r23, 0xFF	; 255
    5fee:	8f 4f       	sbci	r24, 0xFF	; 255
    5ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff2:	08 95       	ret

00005ff4 <__umulhisi3>:
    5ff4:	a2 9f       	mul	r26, r18
    5ff6:	b0 01       	movw	r22, r0
    5ff8:	b3 9f       	mul	r27, r19
    5ffa:	c0 01       	movw	r24, r0
    5ffc:	a3 9f       	mul	r26, r19
    5ffe:	70 0d       	add	r23, r0
    6000:	81 1d       	adc	r24, r1
    6002:	11 24       	eor	r1, r1
    6004:	91 1d       	adc	r25, r1
    6006:	b2 9f       	mul	r27, r18
    6008:	70 0d       	add	r23, r0
    600a:	81 1d       	adc	r24, r1
    600c:	11 24       	eor	r1, r1
    600e:	91 1d       	adc	r25, r1
    6010:	08 95       	ret

00006012 <__muluhisi3>:
    6012:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <__umulhisi3>
    6016:	a5 9f       	mul	r26, r21
    6018:	90 0d       	add	r25, r0
    601a:	b4 9f       	mul	r27, r20
    601c:	90 0d       	add	r25, r0
    601e:	a4 9f       	mul	r26, r20
    6020:	80 0d       	add	r24, r0
    6022:	91 1d       	adc	r25, r1
    6024:	11 24       	eor	r1, r1
    6026:	08 95       	ret

00006028 <__tablejump2__>:
    6028:	ee 0f       	add	r30, r30
    602a:	ff 1f       	adc	r31, r31
    602c:	05 90       	lpm	r0, Z+
    602e:	f4 91       	lpm	r31, Z
    6030:	e0 2d       	mov	r30, r0
    6032:	09 94       	ijmp

00006034 <malloc>:
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
    603c:	82 30       	cpi	r24, 0x02	; 2
    603e:	91 05       	cpc	r25, r1
    6040:	10 f4       	brcc	.+4      	; 0x6046 <malloc+0x12>
    6042:	82 e0       	ldi	r24, 0x02	; 2
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <__flp>
    604a:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <__flp+0x1>
    604e:	20 e0       	ldi	r18, 0x00	; 0
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	a0 e0       	ldi	r26, 0x00	; 0
    6054:	b0 e0       	ldi	r27, 0x00	; 0
    6056:	30 97       	sbiw	r30, 0x00	; 0
    6058:	19 f1       	breq	.+70     	; 0x60a0 <malloc+0x6c>
    605a:	40 81       	ld	r20, Z
    605c:	51 81       	ldd	r21, Z+1	; 0x01
    605e:	02 81       	ldd	r16, Z+2	; 0x02
    6060:	13 81       	ldd	r17, Z+3	; 0x03
    6062:	48 17       	cp	r20, r24
    6064:	59 07       	cpc	r21, r25
    6066:	c8 f0       	brcs	.+50     	; 0x609a <malloc+0x66>
    6068:	84 17       	cp	r24, r20
    606a:	95 07       	cpc	r25, r21
    606c:	69 f4       	brne	.+26     	; 0x6088 <malloc+0x54>
    606e:	10 97       	sbiw	r26, 0x00	; 0
    6070:	31 f0       	breq	.+12     	; 0x607e <malloc+0x4a>
    6072:	12 96       	adiw	r26, 0x02	; 2
    6074:	0c 93       	st	X, r16
    6076:	12 97       	sbiw	r26, 0x02	; 2
    6078:	13 96       	adiw	r26, 0x03	; 3
    607a:	1c 93       	st	X, r17
    607c:	27 c0       	rjmp	.+78     	; 0x60cc <malloc+0x98>
    607e:	00 93 97 04 	sts	0x0497, r16	; 0x800497 <__flp>
    6082:	10 93 98 04 	sts	0x0498, r17	; 0x800498 <__flp+0x1>
    6086:	22 c0       	rjmp	.+68     	; 0x60cc <malloc+0x98>
    6088:	21 15       	cp	r18, r1
    608a:	31 05       	cpc	r19, r1
    608c:	19 f0       	breq	.+6      	; 0x6094 <malloc+0x60>
    608e:	42 17       	cp	r20, r18
    6090:	53 07       	cpc	r21, r19
    6092:	18 f4       	brcc	.+6      	; 0x609a <malloc+0x66>
    6094:	9a 01       	movw	r18, r20
    6096:	bd 01       	movw	r22, r26
    6098:	ef 01       	movw	r28, r30
    609a:	df 01       	movw	r26, r30
    609c:	f8 01       	movw	r30, r16
    609e:	db cf       	rjmp	.-74     	; 0x6056 <malloc+0x22>
    60a0:	21 15       	cp	r18, r1
    60a2:	31 05       	cpc	r19, r1
    60a4:	f9 f0       	breq	.+62     	; 0x60e4 <malloc+0xb0>
    60a6:	28 1b       	sub	r18, r24
    60a8:	39 0b       	sbc	r19, r25
    60aa:	24 30       	cpi	r18, 0x04	; 4
    60ac:	31 05       	cpc	r19, r1
    60ae:	80 f4       	brcc	.+32     	; 0x60d0 <malloc+0x9c>
    60b0:	8a 81       	ldd	r24, Y+2	; 0x02
    60b2:	9b 81       	ldd	r25, Y+3	; 0x03
    60b4:	61 15       	cp	r22, r1
    60b6:	71 05       	cpc	r23, r1
    60b8:	21 f0       	breq	.+8      	; 0x60c2 <malloc+0x8e>
    60ba:	fb 01       	movw	r30, r22
    60bc:	93 83       	std	Z+3, r25	; 0x03
    60be:	82 83       	std	Z+2, r24	; 0x02
    60c0:	04 c0       	rjmp	.+8      	; 0x60ca <malloc+0x96>
    60c2:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <__flp+0x1>
    60c6:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <__flp>
    60ca:	fe 01       	movw	r30, r28
    60cc:	32 96       	adiw	r30, 0x02	; 2
    60ce:	44 c0       	rjmp	.+136    	; 0x6158 <malloc+0x124>
    60d0:	fe 01       	movw	r30, r28
    60d2:	e2 0f       	add	r30, r18
    60d4:	f3 1f       	adc	r31, r19
    60d6:	81 93       	st	Z+, r24
    60d8:	91 93       	st	Z+, r25
    60da:	22 50       	subi	r18, 0x02	; 2
    60dc:	31 09       	sbc	r19, r1
    60de:	39 83       	std	Y+1, r19	; 0x01
    60e0:	28 83       	st	Y, r18
    60e2:	3a c0       	rjmp	.+116    	; 0x6158 <malloc+0x124>
    60e4:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <__brkval>
    60e8:	30 91 96 04 	lds	r19, 0x0496	; 0x800496 <__brkval+0x1>
    60ec:	23 2b       	or	r18, r19
    60ee:	41 f4       	brne	.+16     	; 0x6100 <malloc+0xcc>
    60f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    60f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    60f8:	30 93 96 04 	sts	0x0496, r19	; 0x800496 <__brkval+0x1>
    60fc:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <__brkval>
    6100:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6104:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6108:	21 15       	cp	r18, r1
    610a:	31 05       	cpc	r19, r1
    610c:	41 f4       	brne	.+16     	; 0x611e <malloc+0xea>
    610e:	2d b7       	in	r18, 0x3d	; 61
    6110:	3e b7       	in	r19, 0x3e	; 62
    6112:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6116:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    611a:	24 1b       	sub	r18, r20
    611c:	35 0b       	sbc	r19, r21
    611e:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <__brkval>
    6122:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <__brkval+0x1>
    6126:	e2 17       	cp	r30, r18
    6128:	f3 07       	cpc	r31, r19
    612a:	a0 f4       	brcc	.+40     	; 0x6154 <malloc+0x120>
    612c:	2e 1b       	sub	r18, r30
    612e:	3f 0b       	sbc	r19, r31
    6130:	28 17       	cp	r18, r24
    6132:	39 07       	cpc	r19, r25
    6134:	78 f0       	brcs	.+30     	; 0x6154 <malloc+0x120>
    6136:	ac 01       	movw	r20, r24
    6138:	4e 5f       	subi	r20, 0xFE	; 254
    613a:	5f 4f       	sbci	r21, 0xFF	; 255
    613c:	24 17       	cp	r18, r20
    613e:	35 07       	cpc	r19, r21
    6140:	48 f0       	brcs	.+18     	; 0x6154 <malloc+0x120>
    6142:	4e 0f       	add	r20, r30
    6144:	5f 1f       	adc	r21, r31
    6146:	50 93 96 04 	sts	0x0496, r21	; 0x800496 <__brkval+0x1>
    614a:	40 93 95 04 	sts	0x0495, r20	; 0x800495 <__brkval>
    614e:	81 93       	st	Z+, r24
    6150:	91 93       	st	Z+, r25
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <malloc+0x124>
    6154:	e0 e0       	ldi	r30, 0x00	; 0
    6156:	f0 e0       	ldi	r31, 0x00	; 0
    6158:	cf 01       	movw	r24, r30
    615a:	df 91       	pop	r29
    615c:	cf 91       	pop	r28
    615e:	1f 91       	pop	r17
    6160:	0f 91       	pop	r16
    6162:	08 95       	ret

00006164 <free>:
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	00 97       	sbiw	r24, 0x00	; 0
    616a:	09 f4       	brne	.+2      	; 0x616e <free+0xa>
    616c:	81 c0       	rjmp	.+258    	; 0x6270 <free+0x10c>
    616e:	fc 01       	movw	r30, r24
    6170:	32 97       	sbiw	r30, 0x02	; 2
    6172:	13 82       	std	Z+3, r1	; 0x03
    6174:	12 82       	std	Z+2, r1	; 0x02
    6176:	a0 91 97 04 	lds	r26, 0x0497	; 0x800497 <__flp>
    617a:	b0 91 98 04 	lds	r27, 0x0498	; 0x800498 <__flp+0x1>
    617e:	10 97       	sbiw	r26, 0x00	; 0
    6180:	81 f4       	brne	.+32     	; 0x61a2 <free+0x3e>
    6182:	20 81       	ld	r18, Z
    6184:	31 81       	ldd	r19, Z+1	; 0x01
    6186:	82 0f       	add	r24, r18
    6188:	93 1f       	adc	r25, r19
    618a:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <__brkval>
    618e:	30 91 96 04 	lds	r19, 0x0496	; 0x800496 <__brkval+0x1>
    6192:	28 17       	cp	r18, r24
    6194:	39 07       	cpc	r19, r25
    6196:	51 f5       	brne	.+84     	; 0x61ec <free+0x88>
    6198:	f0 93 96 04 	sts	0x0496, r31	; 0x800496 <__brkval+0x1>
    619c:	e0 93 95 04 	sts	0x0495, r30	; 0x800495 <__brkval>
    61a0:	67 c0       	rjmp	.+206    	; 0x6270 <free+0x10c>
    61a2:	ed 01       	movw	r28, r26
    61a4:	20 e0       	ldi	r18, 0x00	; 0
    61a6:	30 e0       	ldi	r19, 0x00	; 0
    61a8:	ce 17       	cp	r28, r30
    61aa:	df 07       	cpc	r29, r31
    61ac:	40 f4       	brcc	.+16     	; 0x61be <free+0x5a>
    61ae:	4a 81       	ldd	r20, Y+2	; 0x02
    61b0:	5b 81       	ldd	r21, Y+3	; 0x03
    61b2:	9e 01       	movw	r18, r28
    61b4:	41 15       	cp	r20, r1
    61b6:	51 05       	cpc	r21, r1
    61b8:	f1 f0       	breq	.+60     	; 0x61f6 <free+0x92>
    61ba:	ea 01       	movw	r28, r20
    61bc:	f5 cf       	rjmp	.-22     	; 0x61a8 <free+0x44>
    61be:	d3 83       	std	Z+3, r29	; 0x03
    61c0:	c2 83       	std	Z+2, r28	; 0x02
    61c2:	40 81       	ld	r20, Z
    61c4:	51 81       	ldd	r21, Z+1	; 0x01
    61c6:	84 0f       	add	r24, r20
    61c8:	95 1f       	adc	r25, r21
    61ca:	c8 17       	cp	r28, r24
    61cc:	d9 07       	cpc	r29, r25
    61ce:	59 f4       	brne	.+22     	; 0x61e6 <free+0x82>
    61d0:	88 81       	ld	r24, Y
    61d2:	99 81       	ldd	r25, Y+1	; 0x01
    61d4:	84 0f       	add	r24, r20
    61d6:	95 1f       	adc	r25, r21
    61d8:	02 96       	adiw	r24, 0x02	; 2
    61da:	91 83       	std	Z+1, r25	; 0x01
    61dc:	80 83       	st	Z, r24
    61de:	8a 81       	ldd	r24, Y+2	; 0x02
    61e0:	9b 81       	ldd	r25, Y+3	; 0x03
    61e2:	93 83       	std	Z+3, r25	; 0x03
    61e4:	82 83       	std	Z+2, r24	; 0x02
    61e6:	21 15       	cp	r18, r1
    61e8:	31 05       	cpc	r19, r1
    61ea:	29 f4       	brne	.+10     	; 0x61f6 <free+0x92>
    61ec:	f0 93 98 04 	sts	0x0498, r31	; 0x800498 <__flp+0x1>
    61f0:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <__flp>
    61f4:	3d c0       	rjmp	.+122    	; 0x6270 <free+0x10c>
    61f6:	e9 01       	movw	r28, r18
    61f8:	fb 83       	std	Y+3, r31	; 0x03
    61fa:	ea 83       	std	Y+2, r30	; 0x02
    61fc:	49 91       	ld	r20, Y+
    61fe:	59 91       	ld	r21, Y+
    6200:	c4 0f       	add	r28, r20
    6202:	d5 1f       	adc	r29, r21
    6204:	ec 17       	cp	r30, r28
    6206:	fd 07       	cpc	r31, r29
    6208:	61 f4       	brne	.+24     	; 0x6222 <free+0xbe>
    620a:	80 81       	ld	r24, Z
    620c:	91 81       	ldd	r25, Z+1	; 0x01
    620e:	84 0f       	add	r24, r20
    6210:	95 1f       	adc	r25, r21
    6212:	02 96       	adiw	r24, 0x02	; 2
    6214:	e9 01       	movw	r28, r18
    6216:	99 83       	std	Y+1, r25	; 0x01
    6218:	88 83       	st	Y, r24
    621a:	82 81       	ldd	r24, Z+2	; 0x02
    621c:	93 81       	ldd	r25, Z+3	; 0x03
    621e:	9b 83       	std	Y+3, r25	; 0x03
    6220:	8a 83       	std	Y+2, r24	; 0x02
    6222:	e0 e0       	ldi	r30, 0x00	; 0
    6224:	f0 e0       	ldi	r31, 0x00	; 0
    6226:	12 96       	adiw	r26, 0x02	; 2
    6228:	8d 91       	ld	r24, X+
    622a:	9c 91       	ld	r25, X
    622c:	13 97       	sbiw	r26, 0x03	; 3
    622e:	00 97       	sbiw	r24, 0x00	; 0
    6230:	19 f0       	breq	.+6      	; 0x6238 <free+0xd4>
    6232:	fd 01       	movw	r30, r26
    6234:	dc 01       	movw	r26, r24
    6236:	f7 cf       	rjmp	.-18     	; 0x6226 <free+0xc2>
    6238:	8d 91       	ld	r24, X+
    623a:	9c 91       	ld	r25, X
    623c:	11 97       	sbiw	r26, 0x01	; 1
    623e:	9d 01       	movw	r18, r26
    6240:	2e 5f       	subi	r18, 0xFE	; 254
    6242:	3f 4f       	sbci	r19, 0xFF	; 255
    6244:	82 0f       	add	r24, r18
    6246:	93 1f       	adc	r25, r19
    6248:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <__brkval>
    624c:	30 91 96 04 	lds	r19, 0x0496	; 0x800496 <__brkval+0x1>
    6250:	28 17       	cp	r18, r24
    6252:	39 07       	cpc	r19, r25
    6254:	69 f4       	brne	.+26     	; 0x6270 <free+0x10c>
    6256:	30 97       	sbiw	r30, 0x00	; 0
    6258:	29 f4       	brne	.+10     	; 0x6264 <free+0x100>
    625a:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <__flp+0x1>
    625e:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <__flp>
    6262:	02 c0       	rjmp	.+4      	; 0x6268 <free+0x104>
    6264:	13 82       	std	Z+3, r1	; 0x03
    6266:	12 82       	std	Z+2, r1	; 0x02
    6268:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <__brkval+0x1>
    626c:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <__brkval>
    6270:	df 91       	pop	r29
    6272:	cf 91       	pop	r28
    6274:	08 95       	ret

00006276 <random_r>:
    6276:	8f 92       	push	r8
    6278:	9f 92       	push	r9
    627a:	af 92       	push	r10
    627c:	bf 92       	push	r11
    627e:	cf 92       	push	r12
    6280:	df 92       	push	r13
    6282:	ef 92       	push	r14
    6284:	ff 92       	push	r15
    6286:	cf 93       	push	r28
    6288:	df 93       	push	r29
    628a:	ec 01       	movw	r28, r24
    628c:	68 81       	ld	r22, Y
    628e:	79 81       	ldd	r23, Y+1	; 0x01
    6290:	8a 81       	ldd	r24, Y+2	; 0x02
    6292:	9b 81       	ldd	r25, Y+3	; 0x03
    6294:	61 15       	cp	r22, r1
    6296:	71 05       	cpc	r23, r1
    6298:	81 05       	cpc	r24, r1
    629a:	91 05       	cpc	r25, r1
    629c:	21 f4       	brne	.+8      	; 0x62a6 <random_r+0x30>
    629e:	64 e2       	ldi	r22, 0x24	; 36
    62a0:	79 ed       	ldi	r23, 0xD9	; 217
    62a2:	8b e5       	ldi	r24, 0x5B	; 91
    62a4:	97 e0       	ldi	r25, 0x07	; 7
    62a6:	2d e1       	ldi	r18, 0x1D	; 29
    62a8:	33 ef       	ldi	r19, 0xF3	; 243
    62aa:	41 e0       	ldi	r20, 0x01	; 1
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divmodsi4>
    62b2:	49 01       	movw	r8, r18
    62b4:	5a 01       	movw	r10, r20
    62b6:	9b 01       	movw	r18, r22
    62b8:	ac 01       	movw	r20, r24
    62ba:	a7 ea       	ldi	r26, 0xA7	; 167
    62bc:	b1 e4       	ldi	r27, 0x41	; 65
    62be:	0e 94 09 30 	call	0x6012	; 0x6012 <__muluhisi3>
    62c2:	6b 01       	movw	r12, r22
    62c4:	7c 01       	movw	r14, r24
    62c6:	ac ee       	ldi	r26, 0xEC	; 236
    62c8:	b4 ef       	ldi	r27, 0xF4	; 244
    62ca:	a5 01       	movw	r20, r10
    62cc:	94 01       	movw	r18, r8
    62ce:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__mulohisi3>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	8c 0d       	add	r24, r12
    62d8:	9d 1d       	adc	r25, r13
    62da:	ae 1d       	adc	r26, r14
    62dc:	bf 1d       	adc	r27, r15
    62de:	b7 ff       	sbrs	r27, 7
    62e0:	03 c0       	rjmp	.+6      	; 0x62e8 <random_r+0x72>
    62e2:	01 97       	sbiw	r24, 0x01	; 1
    62e4:	a1 09       	sbc	r26, r1
    62e6:	b0 48       	sbci	r27, 0x80	; 128
    62e8:	88 83       	st	Y, r24
    62ea:	99 83       	std	Y+1, r25	; 0x01
    62ec:	aa 83       	std	Y+2, r26	; 0x02
    62ee:	bb 83       	std	Y+3, r27	; 0x03
    62f0:	bc 01       	movw	r22, r24
    62f2:	cd 01       	movw	r24, r26
    62f4:	9f 77       	andi	r25, 0x7F	; 127
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	ff 90       	pop	r15
    62fc:	ef 90       	pop	r14
    62fe:	df 90       	pop	r13
    6300:	cf 90       	pop	r12
    6302:	bf 90       	pop	r11
    6304:	af 90       	pop	r10
    6306:	9f 90       	pop	r9
    6308:	8f 90       	pop	r8
    630a:	08 95       	ret

0000630c <random>:
    630c:	8f 92       	push	r8
    630e:	9f 92       	push	r9
    6310:	af 92       	push	r10
    6312:	bf 92       	push	r11
    6314:	cf 92       	push	r12
    6316:	df 92       	push	r13
    6318:	ef 92       	push	r14
    631a:	ff 92       	push	r15
    631c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    6320:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    6324:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    6328:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    632c:	61 15       	cp	r22, r1
    632e:	71 05       	cpc	r23, r1
    6330:	81 05       	cpc	r24, r1
    6332:	91 05       	cpc	r25, r1
    6334:	21 f4       	brne	.+8      	; 0x633e <random+0x32>
    6336:	64 e2       	ldi	r22, 0x24	; 36
    6338:	79 ed       	ldi	r23, 0xD9	; 217
    633a:	8b e5       	ldi	r24, 0x5B	; 91
    633c:	97 e0       	ldi	r25, 0x07	; 7
    633e:	2d e1       	ldi	r18, 0x1D	; 29
    6340:	33 ef       	ldi	r19, 0xF3	; 243
    6342:	41 e0       	ldi	r20, 0x01	; 1
    6344:	50 e0       	ldi	r21, 0x00	; 0
    6346:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__divmodsi4>
    634a:	49 01       	movw	r8, r18
    634c:	5a 01       	movw	r10, r20
    634e:	9b 01       	movw	r18, r22
    6350:	ac 01       	movw	r20, r24
    6352:	a7 ea       	ldi	r26, 0xA7	; 167
    6354:	b1 e4       	ldi	r27, 0x41	; 65
    6356:	0e 94 09 30 	call	0x6012	; 0x6012 <__muluhisi3>
    635a:	6b 01       	movw	r12, r22
    635c:	7c 01       	movw	r14, r24
    635e:	ac ee       	ldi	r26, 0xEC	; 236
    6360:	b4 ef       	ldi	r27, 0xF4	; 244
    6362:	a5 01       	movw	r20, r10
    6364:	94 01       	movw	r18, r8
    6366:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__mulohisi3>
    636a:	dc 01       	movw	r26, r24
    636c:	cb 01       	movw	r24, r22
    636e:	8c 0d       	add	r24, r12
    6370:	9d 1d       	adc	r25, r13
    6372:	ae 1d       	adc	r26, r14
    6374:	bf 1d       	adc	r27, r15
    6376:	b7 ff       	sbrs	r27, 7
    6378:	03 c0       	rjmp	.+6      	; 0x6380 <random+0x74>
    637a:	01 97       	sbiw	r24, 0x01	; 1
    637c:	a1 09       	sbc	r26, r1
    637e:	b0 48       	sbci	r27, 0x80	; 128
    6380:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    6384:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    6388:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    638c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    6390:	bc 01       	movw	r22, r24
    6392:	cd 01       	movw	r24, r26
    6394:	9f 77       	andi	r25, 0x7F	; 127
    6396:	ff 90       	pop	r15
    6398:	ef 90       	pop	r14
    639a:	df 90       	pop	r13
    639c:	cf 90       	pop	r12
    639e:	bf 90       	pop	r11
    63a0:	af 90       	pop	r10
    63a2:	9f 90       	pop	r9
    63a4:	8f 90       	pop	r8
    63a6:	08 95       	ret

000063a8 <srandom>:
    63a8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    63ac:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    63b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    63b4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    63b8:	08 95       	ret

000063ba <abort>:
    63ba:	81 e0       	ldi	r24, 0x01	; 1
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	f8 94       	cli
    63c0:	0c 94 f1 31 	jmp	0x63e2	; 0x63e2 <__do_global_dtors>

000063c4 <memset>:
    63c4:	dc 01       	movw	r26, r24
    63c6:	01 c0       	rjmp	.+2      	; 0x63ca <memset+0x6>
    63c8:	6d 93       	st	X+, r22
    63ca:	41 50       	subi	r20, 0x01	; 1
    63cc:	50 40       	sbci	r21, 0x00	; 0
    63ce:	e0 f7       	brcc	.-8      	; 0x63c8 <memset+0x4>
    63d0:	08 95       	ret

000063d2 <__mulshisi3>:
    63d2:	b7 ff       	sbrs	r27, 7
    63d4:	0c 94 09 30 	jmp	0x6012	; 0x6012 <__muluhisi3>

000063d8 <__mulohisi3>:
    63d8:	0e 94 09 30 	call	0x6012	; 0x6012 <__muluhisi3>
    63dc:	82 1b       	sub	r24, r18
    63de:	93 0b       	sbc	r25, r19
    63e0:	08 95       	ret

000063e2 <__do_global_dtors>:
    63e2:	15 e0       	ldi	r17, 0x05	; 5
    63e4:	c9 e9       	ldi	r28, 0x99	; 153
    63e6:	d5 e0       	ldi	r29, 0x05	; 5
    63e8:	04 c0       	rjmp	.+8      	; 0x63f2 <__do_global_dtors+0x10>
    63ea:	fe 01       	movw	r30, r28
    63ec:	0e 94 14 30 	call	0x6028	; 0x6028 <__tablejump2__>
    63f0:	21 96       	adiw	r28, 0x01	; 1
    63f2:	cc 39       	cpi	r28, 0x9C	; 156
    63f4:	d1 07       	cpc	r29, r17
    63f6:	c9 f7       	brne	.-14     	; 0x63ea <__do_global_dtors+0x8>
    63f8:	f8 94       	cli

000063fa <__stop_program>:
    63fa:	ff cf       	rjmp	.-2      	; 0x63fa <__stop_program>
