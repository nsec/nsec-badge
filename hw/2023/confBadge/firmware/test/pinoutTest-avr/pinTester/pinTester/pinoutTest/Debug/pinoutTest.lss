
pinoutTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000017d6  0000186a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080012e  0080012e  00001898  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009abd  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ead  00000000  00000000  0000b775  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000228c  00000000  00000000  0000d622  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c20  00000000  00000000  0000f8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269c  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048b0  00000000  00000000  00012b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0001741c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_18>
      4c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	b0 01       	movw	r22, r0
      c4:	5c 03       	fmul	r21, r20

000000c6 <__ctors_end>:
      c6:	ba 01       	movw	r22, r20

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 ed       	ldi	r30, 0xD6	; 214
      dc:	f7 e1       	ldi	r31, 0x17	; 23
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 32       	cpi	r26, 0x2E	; 46
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	ae e2       	ldi	r26, 0x2E	; 46
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 3f       	cpi	r26, 0xF3	; 243
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 06 0a 	call	0x140c	; 0x140c <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 8a 03 	call	0x714	; 0x714 <main>
     114:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
#define DELAYVAL 20 // Time (in milliseconds) to pause between pixels

bool ledState = false;
void setup() 
{
	pinMode(A0, INPUT_PULLUP);
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	8e e0       	ldi	r24, 0x0E	; 14
     120:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(A1, INPUT_PULLUP);
     124:	62 e0       	ldi	r22, 0x02	; 2
     126:	8f e0       	ldi	r24, 0x0F	; 15
     128:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(A2, INPUT_PULLUP);
     12c:	62 e0       	ldi	r22, 0x02	; 2
     12e:	80 e1       	ldi	r24, 0x10	; 16
     130:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(A3, INPUT_PULLUP);
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	81 e1       	ldi	r24, 0x11	; 17
     138:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(A6, INPUT_PULLUP);
     13c:	62 e0       	ldi	r22, 0x02	; 2
     13e:	84 e1       	ldi	r24, 0x14	; 20
     140:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(A7, INPUT_PULLUP);
     144:	62 e0       	ldi	r22, 0x02	; 2
     146:	85 e1       	ldi	r24, 0x15	; 21
     148:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(13, OUTPUT);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	8d e0       	ldi	r24, 0x0D	; 13
     150:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	digitalWrite(13, ledState);
     154:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <ledState>
     158:	8d e0       	ldi	r24, 0x0D	; 13
     15a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     15e:	26 e0       	ldi	r18, 0x06	; 6
     160:	40 e8       	ldi	r20, 0x80	; 128
     162:	55 e2       	ldi	r21, 0x25	; 37
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	89 e4       	ldi	r24, 0x49	; 73
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
     170:	83 e3       	ldi	r24, 0x33	; 51
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <_ZN17Adafruit_NeoPixel5beginEv>

00000178 <loop>:
}


void loop() 
{
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
	ledState = !ledState;
     186:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <ledState>
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	68 27       	eor	r22, r24
     18e:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <ledState>
	digitalWrite(13, ledState);
     192:	8d e0       	ldi	r24, 0x0D	; 13
     194:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
	
	static uint32_t ts_uart = 0;
	if(millis() - ts_uart > 250)
     198:	0e 94 e6 04 	call	0x9cc	; 0x9cc <millis>
     19c:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <__data_end>
     1a0:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <__data_end+0x1>
     1a4:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <__data_end+0x2>
     1a8:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <__data_end+0x3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	8c 19       	sub	r24, r12
     1b2:	9d 09       	sbc	r25, r13
     1b4:	ae 09       	sbc	r26, r14
     1b6:	bf 09       	sbc	r27, r15
     1b8:	8b 3f       	cpi	r24, 0xFB	; 251
     1ba:	91 05       	cpc	r25, r1
     1bc:	a1 05       	cpc	r26, r1
     1be:	b1 05       	cpc	r27, r1
     1c0:	08 f4       	brcc	.+2      	; 0x1c4 <loop+0x4c>
     1c2:	7a c0       	rjmp	.+244    	; 0x2b8 <loop+0x140>
	{
		ts_uart = millis();
     1c4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <millis>
     1c8:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <__data_end>
     1cc:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <__data_end+0x1>
     1d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end+0x2>
     1d4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x3>
	  Serial.print(millis()); Serial.print("\t"); 
     1d8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <millis>
     1dc:	ab 01       	movw	r20, r22
     1de:	bc 01       	movw	r22, r24
     1e0:	2a e0       	ldi	r18, 0x0A	; 10
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	89 e4       	ldi	r24, 0x49	; 73
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	0e 94 40 04 	call	0x880	; 0x880 <_ZN5Print5printEmi>
     1ec:	6a e0       	ldi	r22, 0x0A	; 10
     1ee:	71 e0       	ldi	r23, 0x01	; 1
     1f0:	89 e4       	ldi	r24, 0x49	; 73
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A0)); Serial.print("\t"); 
     1f8:	8e e0       	ldi	r24, 0x0E	; 14
     1fa:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     1fe:	4a e0       	ldi	r20, 0x0A	; 10
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	bc 01       	movw	r22, r24
     204:	89 e4       	ldi	r24, 0x49	; 73
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     20c:	6a e0       	ldi	r22, 0x0A	; 10
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	89 e4       	ldi	r24, 0x49	; 73
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A1)); Serial.print("\t"); 
     218:	8f e0       	ldi	r24, 0x0F	; 15
     21a:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     21e:	4a e0       	ldi	r20, 0x0A	; 10
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	bc 01       	movw	r22, r24
     224:	89 e4       	ldi	r24, 0x49	; 73
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     22c:	6a e0       	ldi	r22, 0x0A	; 10
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	89 e4       	ldi	r24, 0x49	; 73
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A2)); Serial.print("\t"); 
     238:	80 e1       	ldi	r24, 0x10	; 16
     23a:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     23e:	4a e0       	ldi	r20, 0x0A	; 10
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	bc 01       	movw	r22, r24
     244:	89 e4       	ldi	r24, 0x49	; 73
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	89 e4       	ldi	r24, 0x49	; 73
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A3)); Serial.print("\t"); 
     258:	81 e1       	ldi	r24, 0x11	; 17
     25a:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     25e:	4a e0       	ldi	r20, 0x0A	; 10
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	bc 01       	movw	r22, r24
     264:	89 e4       	ldi	r24, 0x49	; 73
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     26c:	6a e0       	ldi	r22, 0x0A	; 10
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	89 e4       	ldi	r24, 0x49	; 73
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A6)); Serial.print("\t"); 
     278:	84 e1       	ldi	r24, 0x14	; 20
     27a:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     27e:	4a e0       	ldi	r20, 0x0A	; 10
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	bc 01       	movw	r22, r24
     284:	89 e4       	ldi	r24, 0x49	; 73
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     28c:	6a e0       	ldi	r22, 0x0A	; 10
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	89 e4       	ldi	r24, 0x49	; 73
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEPKc>
	  Serial.print(digitalRead(A7)); Serial.println("\t"); 
     298:	85 e1       	ldi	r24, 0x15	; 21
     29a:	0e 94 22 06 	call	0xc44	; 0xc44 <digitalRead>
     29e:	4a e0       	ldi	r20, 0x0A	; 10
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	bc 01       	movw	r22, r24
     2a4:	89 e4       	ldi	r24, 0x49	; 73
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN5Print5printEii>
     2ac:	6a e0       	ldi	r22, 0x0A	; 10
     2ae:	71 e0       	ldi	r23, 0x01	; 1
     2b0:	89 e4       	ldi	r24, 0x49	; 73
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_ZN5Print7printlnEPKc>
	}
  
  pixels.clear(); // Set all pixel colors to 'off'
     2b8:	83 e3       	ldi	r24, 0x33	; 51
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 a1 09 	call	0x1342	; 0x1342 <_ZN17Adafruit_NeoPixel5clearEv>
  for(int i=0; i<NUMPIXELS; i++) 
     2c0:	c0 e0       	ldi	r28, 0x00	; 0
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
  { 
    pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
     2c4:	2a e0       	ldi	r18, 0x0A	; 10
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	cb 01       	movw	r24, r22
     2d2:	0e 94 65 06 	call	0xcca	; 0xcca <_Z6randomll>
     2d6:	16 2f       	mov	r17, r22
     2d8:	2a e0       	ldi	r18, 0x0A	; 10
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 65 06 	call	0xcca	; 0xcca <_Z6randomll>
     2ea:	6b 01       	movw	r12, r22
     2ec:	7c 01       	movw	r14, r24
     2ee:	2a e0       	ldi	r18, 0x0A	; 10
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	cb 01       	movw	r24, r22
     2fc:	0e 94 65 06 	call	0xcca	; 0xcca <_Z6randomll>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	99 27       	eor	r25, r25
     306:	aa 27       	eor	r26, r26
     308:	bb 27       	eor	r27, r27
     30a:	dc 01       	movw	r26, r24
     30c:	99 27       	eor	r25, r25
     30e:	88 27       	eor	r24, r24
     310:	dd 24       	eor	r13, r13
     312:	ee 24       	eor	r14, r14
     314:	ff 24       	eor	r15, r15
     316:	fe 2c       	mov	r15, r14
     318:	ed 2c       	mov	r14, r13
     31a:	dc 2c       	mov	r13, r12
     31c:	cc 24       	eor	r12, r12
     31e:	8c 29       	or	r24, r12
     320:	9d 29       	or	r25, r13
     322:	ae 29       	or	r26, r14
     324:	bf 29       	or	r27, r15
     326:	9c 01       	movw	r18, r24
     328:	ad 01       	movw	r20, r26
     32a:	21 2b       	or	r18, r17
     32c:	be 01       	movw	r22, r28
     32e:	83 e3       	ldi	r24, 0x33	; 51
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
	  Serial.print(digitalRead(A6)); Serial.print("\t"); 
	  Serial.print(digitalRead(A7)); Serial.println("\t"); 
	}
  
  pixels.clear(); // Set all pixel colors to 'off'
  for(int i=0; i<NUMPIXELS; i++) 
     336:	21 96       	adiw	r28, 0x01	; 1
     338:	c0 31       	cpi	r28, 0x10	; 16
     33a:	d1 05       	cpc	r29, r1
     33c:	19 f6       	brne	.-122    	; 0x2c4 <loop+0x14c>
  { 
    pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
  }
  pixels.show();   // Send the updated pixel colors to the hardware.
     33e:	83 e3       	ldi	r24, 0x33	; 51
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 1c 07 	call	0xe38	; 0xe38 <_ZN17Adafruit_NeoPixel4showEv>
  delay(DELAYVAL); // Pause before next pass through loop
     346:	64 e1       	ldi	r22, 0x14	; 20
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
  for(int i=0; i<NUMPIXELS; i++) 
  { 
    pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
  }
  pixels.show();   // Send the updated pixel colors to the hardware.
  delay(DELAYVAL); // Pause before next pass through loop
     35c:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <delay>

00000360 <_GLOBAL__sub_I_pixels>:


#define PIN        9 // On Trinket or Gemma, suggest changing this to 1
#define NUMPIXELS 16 // Popular NeoPixel ring size

Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     360:	22 e5       	ldi	r18, 0x52	; 82
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	49 e0       	ldi	r20, 0x09	; 9
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	60 e1       	ldi	r22, 0x10	; 16
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	83 e3       	ldi	r24, 0x33	; 51
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_ZN17Adafruit_NeoPixelC1Ejij>

00000374 <_GLOBAL__sub_D_pixels>:
     374:	83 e3       	ldi	r24, 0x33	; 51
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_ZN17Adafruit_NeoPixelD1Ev>

0000037c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     37c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     37e:	91 8d       	ldd	r25, Z+25	; 0x19
     380:	22 8d       	ldd	r18, Z+26	; 0x1a
     382:	89 2f       	mov	r24, r25
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 5c       	subi	r24, 0xC0	; 192
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	82 1b       	sub	r24, r18
     38c:	91 09       	sbc	r25, r1
}
     38e:	8f 73       	andi	r24, 0x3F	; 63
     390:	99 27       	eor	r25, r25
     392:	08 95       	ret

00000394 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     394:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     396:	91 8d       	ldd	r25, Z+25	; 0x19
     398:	82 8d       	ldd	r24, Z+26	; 0x1a
     39a:	98 17       	cp	r25, r24
     39c:	31 f0       	breq	.+12     	; 0x3aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     39e:	82 8d       	ldd	r24, Z+26	; 0x1a
     3a0:	e8 0f       	add	r30, r24
     3a2:	f1 1d       	adc	r31, r1
     3a4:	85 8d       	ldd	r24, Z+29	; 0x1d
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     3ae:	08 95       	ret

000003b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     3b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     3b2:	91 8d       	ldd	r25, Z+25	; 0x19
     3b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     3b6:	98 17       	cp	r25, r24
     3b8:	61 f0       	breq	.+24     	; 0x3d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     3ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     3bc:	df 01       	movw	r26, r30
     3be:	a8 0f       	add	r26, r24
     3c0:	b1 1d       	adc	r27, r1
     3c2:	5d 96       	adiw	r26, 0x1d	; 29
     3c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     3c6:	92 8d       	ldd	r25, Z+26	; 0x1a
     3c8:	9f 5f       	subi	r25, 0xFF	; 255
     3ca:	9f 73       	andi	r25, 0x3F	; 63
     3cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     3d6:	08 95       	ret

000003d8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     3d8:	fc 01       	movw	r30, r24
     3da:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     3dc:	44 8d       	ldd	r20, Z+28	; 0x1c
     3de:	25 2f       	mov	r18, r21
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	84 2f       	mov	r24, r20
     3e4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     3e6:	82 1b       	sub	r24, r18
     3e8:	93 0b       	sbc	r25, r19
     3ea:	54 17       	cp	r21, r20
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     3ee:	cf 96       	adiw	r24, 0x3f	; 63
     3f0:	08 95       	ret
  return tail - head - 1;
     3f2:	01 97       	sbiw	r24, 0x01	; 1
}
     3f4:	08 95       	ret

000003f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3f6:	82 e5       	ldi	r24, 0x52	; 82
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	89 2b       	or	r24, r25
     3fc:	49 f0       	breq	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	89 2b       	or	r24, r25
     404:	29 f0       	breq	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     406:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_Z17Serial0_availablev>
     40a:	81 11       	cpse	r24, r1
     40c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     410:	08 95       	ret

00000412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     412:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     414:	84 8d       	ldd	r24, Z+28	; 0x1c
     416:	df 01       	movw	r26, r30
     418:	a8 0f       	add	r26, r24
     41a:	b1 1d       	adc	r27, r1
     41c:	a3 5a       	subi	r26, 0xA3	; 163
     41e:	bf 4f       	sbci	r27, 0xFF	; 255
     420:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     422:	84 8d       	ldd	r24, Z+28	; 0x1c
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	8f 73       	andi	r24, 0x3F	; 63
     42a:	99 27       	eor	r25, r25
     42c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     42e:	a6 89       	ldd	r26, Z+22	; 0x16
     430:	b7 89       	ldd	r27, Z+23	; 0x17
     432:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     434:	a0 89       	ldd	r26, Z+16	; 0x10
     436:	b1 89       	ldd	r27, Z+17	; 0x11
     438:	8c 91       	ld	r24, X
     43a:	83 70       	andi	r24, 0x03	; 3
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     440:	93 8d       	ldd	r25, Z+27	; 0x1b
     442:	84 8d       	ldd	r24, Z+28	; 0x1c
     444:	98 13       	cpse	r25, r24
     446:	06 c0       	rjmp	.+12     	; 0x454 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     448:	02 88       	ldd	r0, Z+18	; 0x12
     44a:	f3 89       	ldd	r31, Z+19	; 0x13
     44c:	e0 2d       	mov	r30, r0
     44e:	80 81       	ld	r24, Z
     450:	8f 7d       	andi	r24, 0xDF	; 223
     452:	80 83       	st	Z, r24
     454:	08 95       	ret

00000456 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
  _written = true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     468:	9b 8d       	ldd	r25, Y+27	; 0x1b
     46a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     46c:	98 13       	cpse	r25, r24
     46e:	05 c0       	rjmp	.+10     	; 0x47a <_ZN14HardwareSerial5writeEh+0x24>
     470:	e8 89       	ldd	r30, Y+16	; 0x10
     472:	f9 89       	ldd	r31, Y+17	; 0x11
     474:	80 81       	ld	r24, Z
     476:	85 fd       	sbrc	r24, 5
     478:	26 c0       	rjmp	.+76     	; 0x4c6 <_ZN14HardwareSerial5writeEh+0x70>
     47a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     47c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	0f 73       	andi	r16, 0x3F	; 63
     486:	11 27       	eor	r17, r17
     488:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     48a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     48c:	e8 12       	cpse	r14, r24
     48e:	0c c0       	rjmp	.+24     	; 0x4a8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	07 fc       	sbrc	r0, 7
     494:	fa cf       	rjmp	.-12     	; 0x48a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     496:	e8 89       	ldd	r30, Y+16	; 0x10
     498:	f9 89       	ldd	r31, Y+17	; 0x11
     49a:	80 81       	ld	r24, Z
     49c:	85 ff       	sbrs	r24, 5
     49e:	f5 cf       	rjmp	.-22     	; 0x48a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     4a0:	ce 01       	movw	r24, r28
     4a2:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     4a6:	f1 cf       	rjmp	.-30     	; 0x48a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     4a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4aa:	fe 01       	movw	r30, r28
     4ac:	e8 0f       	add	r30, r24
     4ae:	f1 1d       	adc	r31, r1
     4b0:	e3 5a       	subi	r30, 0xA3	; 163
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4b6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b8:	f8 94       	cli
    _tx_buffer_head = i;
     4ba:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     4bc:	ea 89       	ldd	r30, Y+18	; 0x12
     4be:	fb 89       	ldd	r31, Y+19	; 0x13
     4c0:	80 81       	ld	r24, Z
     4c2:	80 62       	ori	r24, 0x20	; 32
     4c4:	0a c0       	rjmp	.+20     	; 0x4da <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4c6:	9f b7       	in	r25, 0x3f	; 63
     4c8:	f8 94       	cli
      *_udr = c;
     4ca:	ee 89       	ldd	r30, Y+22	; 0x16
     4cc:	ff 89       	ldd	r31, Y+23	; 0x17
     4ce:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     4d0:	e8 89       	ldd	r30, Y+16	; 0x10
     4d2:	f9 89       	ldd	r31, Y+17	; 0x11
     4d4:	80 81       	ld	r24, Z
     4d6:	83 70       	andi	r24, 0x03	; 3
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4dc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4f6:	88 8d       	ldd	r24, Y+24	; 0x18
     4f8:	88 23       	and	r24, r24
     4fa:	c9 f0       	breq	.+50     	; 0x52e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4fc:	ea 89       	ldd	r30, Y+18	; 0x12
     4fe:	fb 89       	ldd	r31, Y+19	; 0x13
     500:	80 81       	ld	r24, Z
     502:	85 fd       	sbrc	r24, 5
     504:	05 c0       	rjmp	.+10     	; 0x510 <_ZN14HardwareSerial5flushEv+0x20>
     506:	a8 89       	ldd	r26, Y+16	; 0x10
     508:	b9 89       	ldd	r27, Y+17	; 0x11
     50a:	8c 91       	ld	r24, X
     50c:	86 fd       	sbrc	r24, 6
     50e:	0f c0       	rjmp	.+30     	; 0x52e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	07 fc       	sbrc	r0, 7
     514:	f5 cf       	rjmp	.-22     	; 0x500 <_ZN14HardwareSerial5flushEv+0x10>
     516:	80 81       	ld	r24, Z
     518:	85 ff       	sbrs	r24, 5
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     51c:	a8 89       	ldd	r26, Y+16	; 0x10
     51e:	b9 89       	ldd	r27, Y+17	; 0x11
     520:	8c 91       	ld	r24, X
     522:	85 ff       	sbrs	r24, 5
     524:	ed cf       	rjmp	.-38     	; 0x500 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     526:	ce 01       	movw	r24, r28
     528:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     52c:	e7 cf       	rjmp	.-50     	; 0x4fc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	6a 01       	movw	r12, r20
     546:	7b 01       	movw	r14, r22
     548:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     54a:	60 e8       	ldi	r22, 0x80	; 128
     54c:	74 e8       	ldi	r23, 0x84	; 132
     54e:	8e e1       	ldi	r24, 0x1E	; 30
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	a7 01       	movw	r20, r14
     554:	96 01       	movw	r18, r12
     556:	0e 94 ab 09 	call	0x1356	; 0x1356 <__udivmodsi4>
     55a:	da 01       	movw	r26, r20
     55c:	c9 01       	movw	r24, r18
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	a1 09       	sbc	r26, r1
     562:	b1 09       	sbc	r27, r1
     564:	b6 95       	lsr	r27
     566:	a7 95       	ror	r26
     568:	97 95       	ror	r25
     56a:	87 95       	ror	r24
     56c:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
     56e:	e8 89       	ldd	r30, Y+16	; 0x10
     570:	f9 89       	ldd	r31, Y+17	; 0x11
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     576:	21 15       	cp	r18, r1
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	38 07       	cpc	r19, r24
     57c:	a8 f0       	brcs	.+42     	; 0x5a8 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
     57e:	e8 89       	ldd	r30, Y+16	; 0x10
     580:	f9 89       	ldd	r31, Y+17	; 0x11
     582:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     584:	60 e4       	ldi	r22, 0x40	; 64
     586:	72 e4       	ldi	r23, 0x42	; 66
     588:	8f e0       	ldi	r24, 0x0F	; 15
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a7 01       	movw	r20, r14
     58e:	96 01       	movw	r18, r12
     590:	0e 94 ab 09 	call	0x1356	; 0x1356 <__udivmodsi4>
     594:	da 01       	movw	r26, r20
     596:	c9 01       	movw	r24, r18
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	a1 09       	sbc	r26, r1
     59c:	b1 09       	sbc	r27, r1
     59e:	b6 95       	lsr	r27
     5a0:	a7 95       	ror	r26
     5a2:	97 95       	ror	r25
     5a4:	87 95       	ror	r24
     5a6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5a8:	ec 85       	ldd	r30, Y+12	; 0x0c
     5aa:	fd 85       	ldd	r31, Y+13	; 0x0d
     5ac:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     5ae:	ee 85       	ldd	r30, Y+14	; 0x0e
     5b0:	ff 85       	ldd	r31, Y+15	; 0x0f
     5b2:	20 83       	st	Z, r18

  _written = false;
     5b4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     5b6:	ec 89       	ldd	r30, Y+20	; 0x14
     5b8:	fd 89       	ldd	r31, Y+21	; 0x15
     5ba:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     5bc:	ea 89       	ldd	r30, Y+18	; 0x12
     5be:	fb 89       	ldd	r31, Y+19	; 0x13
     5c0:	80 81       	ld	r24, Z
     5c2:	80 61       	ori	r24, 0x10	; 16
     5c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     5c6:	ea 89       	ldd	r30, Y+18	; 0x12
     5c8:	fb 89       	ldd	r31, Y+19	; 0x13
     5ca:	80 81       	ld	r24, Z
     5cc:	88 60       	ori	r24, 0x08	; 8
     5ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     5d0:	ea 89       	ldd	r30, Y+18	; 0x12
     5d2:	fb 89       	ldd	r31, Y+19	; 0x13
     5d4:	80 81       	ld	r24, Z
     5d6:	80 68       	ori	r24, 0x80	; 128
     5d8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     5da:	ea 89       	ldd	r30, Y+18	; 0x12
     5dc:	fb 89       	ldd	r31, Y+19	; 0x13
     5de:	80 81       	ld	r24, Z
     5e0:	8f 7d       	andi	r24, 0xDF	; 223
     5e2:	80 83       	st	Z, r24
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	08 95       	ret

000005f4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     608:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <Serial+0x10>
     60c:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <Serial+0x11>
     610:	80 81       	ld	r24, Z
     612:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Serial+0x16>
     616:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Serial+0x17>
     61a:	82 fd       	sbrc	r24, 2
     61c:	12 c0       	rjmp	.+36     	; 0x642 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     61e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     620:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <Serial+0x19>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     628:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <Serial+0x1a>
     62c:	82 17       	cp	r24, r18
     62e:	51 f0       	breq	.+20     	; 0x644 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     630:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <Serial+0x19>
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	e7 5b       	subi	r30, 0xB7	; 183
     638:	fe 4f       	sbci	r31, 0xFE	; 254
     63a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     63c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <Serial+0x19>
     640:	01 c0       	rjmp	.+2      	; 0x644 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     642:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     644:	ff 91       	pop	r31
     646:	ef 91       	pop	r30
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	2f 91       	pop	r18
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     67a:	89 e4       	ldi	r24, 0x49	; 73
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6a4:	89 e4       	ldi	r24, 0x49	; 73
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN14HardwareSerial9availableEv>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	89 2b       	or	r24, r25
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <_Z17Serial0_availablev+0x10>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
}
     6b4:	82 2f       	mov	r24, r18
     6b6:	08 95       	ret

000006b8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6b8:	e9 e4       	ldi	r30, 0x49	; 73
     6ba:	f1 e0       	ldi	r31, 0x01	; 1
     6bc:	13 82       	std	Z+3, r1	; 0x03
     6be:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     6c0:	88 ee       	ldi	r24, 0xE8	; 232
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	a0 e0       	ldi	r26, 0x00	; 0
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	84 83       	std	Z+4, r24	; 0x04
     6ca:	95 83       	std	Z+5, r25	; 0x05
     6cc:	a6 83       	std	Z+6, r26	; 0x06
     6ce:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	91 83       	std	Z+1, r25	; 0x01
     6d6:	80 83       	st	Z, r24
     6d8:	85 ec       	ldi	r24, 0xC5	; 197
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	95 87       	std	Z+13, r25	; 0x0d
     6de:	84 87       	std	Z+12, r24	; 0x0c
     6e0:	84 ec       	ldi	r24, 0xC4	; 196
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	97 87       	std	Z+15, r25	; 0x0f
     6e6:	86 87       	std	Z+14, r24	; 0x0e
     6e8:	80 ec       	ldi	r24, 0xC0	; 192
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	91 8b       	std	Z+17, r25	; 0x11
     6ee:	80 8b       	std	Z+16, r24	; 0x10
     6f0:	81 ec       	ldi	r24, 0xC1	; 193
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	93 8b       	std	Z+19, r25	; 0x13
     6f6:	82 8b       	std	Z+18, r24	; 0x12
     6f8:	82 ec       	ldi	r24, 0xC2	; 194
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	95 8b       	std	Z+21, r25	; 0x15
     6fe:	84 8b       	std	Z+20, r24	; 0x14
     700:	86 ec       	ldi	r24, 0xC6	; 198
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	97 8b       	std	Z+23, r25	; 0x17
     706:	86 8b       	std	Z+22, r24	; 0x16
     708:	11 8e       	std	Z+25, r1	; 0x19
     70a:	12 8e       	std	Z+26, r1	; 0x1a
     70c:	13 8e       	std	Z+27, r1	; 0x1b
     70e:	14 8e       	std	Z+28, r1	; 0x1c
     710:	08 95       	ret

00000712 <initVariant>:
     712:	08 95       	ret

00000714 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     714:	0e 94 53 05 	call	0xaa6	; 0xaa6 <init>

	initVariant();
     718:	0e 94 89 03 	call	0x712	; 0x712 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     71c:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     720:	cb ef       	ldi	r28, 0xFB	; 251
     722:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     724:	0e 94 bc 00 	call	0x178	; 0x178 <loop>
		if (serialEventRun) serialEventRun();
     728:	20 97       	sbiw	r28, 0x00	; 0
     72a:	e1 f3       	breq	.-8      	; 0x724 <main+0x10>
     72c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z14serialEventRunv>
     730:	f9 cf       	rjmp	.-14     	; 0x724 <main+0x10>

00000732 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	6c 01       	movw	r12, r24
     744:	7a 01       	movw	r14, r20
     746:	8b 01       	movw	r16, r22
     748:	c0 e0       	ldi	r28, 0x00	; 0
     74a:	d0 e0       	ldi	r29, 0x00	; 0
     74c:	ce 15       	cp	r28, r14
     74e:	df 05       	cpc	r29, r15
     750:	81 f0       	breq	.+32     	; 0x772 <_ZN5Print5writeEPKhj+0x40>
     752:	d8 01       	movw	r26, r16
     754:	6d 91       	ld	r22, X+
     756:	8d 01       	movw	r16, r26
     758:	d6 01       	movw	r26, r12
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	01 90       	ld	r0, Z+
     760:	f0 81       	ld	r31, Z
     762:	e0 2d       	mov	r30, r0
     764:	c6 01       	movw	r24, r12
     766:	09 95       	icall
     768:	89 2b       	or	r24, r25
     76a:	11 f0       	breq	.+4      	; 0x770 <_ZN5Print5writeEPKhj+0x3e>
     76c:	21 96       	adiw	r28, 0x01	; 1
     76e:	ee cf       	rjmp	.-36     	; 0x74c <_ZN5Print5writeEPKhj+0x1a>
     770:	7e 01       	movw	r14, r28
     772:	c7 01       	movw	r24, r14
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <_ZN5Print5writeEPKc>:
     786:	61 15       	cp	r22, r1
     788:	71 05       	cpc	r23, r1
     78a:	79 f0       	breq	.+30     	; 0x7aa <_ZN5Print5writeEPKc+0x24>
     78c:	fb 01       	movw	r30, r22
     78e:	01 90       	ld	r0, Z+
     790:	00 20       	and	r0, r0
     792:	e9 f7       	brne	.-6      	; 0x78e <_ZN5Print5writeEPKc+0x8>
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	af 01       	movw	r20, r30
     798:	46 1b       	sub	r20, r22
     79a:	57 0b       	sbc	r21, r23
     79c:	dc 01       	movw	r26, r24
     79e:	ed 91       	ld	r30, X+
     7a0:	fc 91       	ld	r31, X
     7a2:	02 80       	ldd	r0, Z+2	; 0x02
     7a4:	f3 81       	ldd	r31, Z+3	; 0x03
     7a6:	e0 2d       	mov	r30, r0
     7a8:	09 94       	ijmp
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 95       	ret

000007b0 <_ZN5Print5printEPKc>:
     7b0:	0c 94 c3 03 	jmp	0x786	; 0x786 <_ZN5Print5writeEPKc>

000007b4 <_ZN5Print5printEc>:
     7b4:	dc 01       	movw	r26, r24
     7b6:	ed 91       	ld	r30, X+
     7b8:	fc 91       	ld	r31, X
     7ba:	01 90       	ld	r0, Z+
     7bc:	f0 81       	ld	r31, Z
     7be:	e0 2d       	mov	r30, r0
     7c0:	09 94       	ijmp

000007c2 <_ZN5Print7printlnEv>:
     7c2:	6e e1       	ldi	r22, 0x1E	; 30
     7c4:	71 e0       	ldi	r23, 0x01	; 1
     7c6:	0c 94 c3 03 	jmp	0x786	; 0x786 <_ZN5Print5writeEPKc>

000007ca <_ZN5Print7printlnEPKc>:
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ec 01       	movw	r28, r24
     7d4:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN5Print5writeEPKc>
     7d8:	8c 01       	movw	r16, r24
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN5Print7printlnEv>
     7e0:	80 0f       	add	r24, r16
     7e2:	91 1f       	adc	r25, r17
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <_ZN5Print11printNumberEmh>:
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	a1 97       	sbiw	r28, 0x21	; 33
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	7c 01       	movw	r14, r24
     814:	fa 01       	movw	r30, r20
     816:	cb 01       	movw	r24, r22
     818:	19 a2       	std	Y+33, r1	; 0x21
     81a:	22 30       	cpi	r18, 0x02	; 2
     81c:	08 f4       	brcc	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	2a e0       	ldi	r18, 0x0A	; 10
     820:	8e 01       	movw	r16, r28
     822:	0f 5d       	subi	r16, 0xDF	; 223
     824:	1f 4f       	sbci	r17, 0xFF	; 255
     826:	82 2e       	mov	r8, r18
     828:	91 2c       	mov	r9, r1
     82a:	a1 2c       	mov	r10, r1
     82c:	b1 2c       	mov	r11, r1
     82e:	bf 01       	movw	r22, r30
     830:	a5 01       	movw	r20, r10
     832:	94 01       	movw	r18, r8
     834:	0e 94 ab 09 	call	0x1356	; 0x1356 <__udivmodsi4>
     838:	f9 01       	movw	r30, r18
     83a:	ca 01       	movw	r24, r20
     83c:	01 50       	subi	r16, 0x01	; 1
     83e:	11 09       	sbc	r17, r1
     840:	6a 30       	cpi	r22, 0x0A	; 10
     842:	10 f4       	brcc	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     844:	60 5d       	subi	r22, 0xD0	; 208
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	69 5c       	subi	r22, 0xC9	; 201
     84a:	d8 01       	movw	r26, r16
     84c:	6c 93       	st	X, r22
     84e:	23 2b       	or	r18, r19
     850:	24 2b       	or	r18, r20
     852:	25 2b       	or	r18, r21
     854:	61 f7       	brne	.-40     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     856:	b8 01       	movw	r22, r16
     858:	c7 01       	movw	r24, r14
     85a:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN5Print5writeEPKc>
     85e:	a1 96       	adiw	r28, 0x21	; 33
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	08 95       	ret

00000880 <_ZN5Print5printEmi>:
     880:	21 15       	cp	r18, r1
     882:	31 05       	cpc	r19, r1
     884:	41 f4       	brne	.+16     	; 0x896 <_ZN5Print5printEmi+0x16>
     886:	dc 01       	movw	r26, r24
     888:	ed 91       	ld	r30, X+
     88a:	fc 91       	ld	r31, X
     88c:	01 90       	ld	r0, Z+
     88e:	f0 81       	ld	r31, Z
     890:	e0 2d       	mov	r30, r0
     892:	64 2f       	mov	r22, r20
     894:	09 94       	ijmp
     896:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN5Print11printNumberEmh>

0000089a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
  if (base == 0) {
     8aa:	21 15       	cp	r18, r1
     8ac:	31 05       	cpc	r19, r1
     8ae:	81 f4       	brne	.+32     	; 0x8d0 <_ZN5Print5printEli+0x36>
    return write(n);
     8b0:	dc 01       	movw	r26, r24
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	01 90       	ld	r0, Z+
     8b8:	f0 81       	ld	r31, Z
     8ba:	e0 2d       	mov	r30, r0
     8bc:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     8ce:	09 94       	ijmp
  } else if (base == 10) {
     8d0:	2a 30       	cpi	r18, 0x0A	; 10
     8d2:	31 05       	cpc	r19, r1
     8d4:	01 f5       	brne	.+64     	; 0x916 <__stack+0x17>
    if (n < 0) {
     8d6:	77 ff       	sbrs	r23, 7
     8d8:	1d c0       	rjmp	.+58     	; 0x914 <__stack+0x15>
     8da:	6a 01       	movw	r12, r20
     8dc:	7b 01       	movw	r14, r22
     8de:	ec 01       	movw	r28, r24
      int t = print('-');
     8e0:	6d e2       	ldi	r22, 0x2D	; 45
     8e2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN5Print5printEc>
     8e6:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     8e8:	44 27       	eor	r20, r20
     8ea:	55 27       	eor	r21, r21
     8ec:	ba 01       	movw	r22, r20
     8ee:	4c 19       	sub	r20, r12
     8f0:	5d 09       	sbc	r21, r13
     8f2:	6e 09       	sbc	r22, r14
     8f4:	7f 09       	sbc	r23, r15
     8f6:	2a e0       	ldi	r18, 0x0A	; 10
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN5Print11printNumberEmh>
     8fe:	80 0f       	add	r24, r16
     900:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     914:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     926:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN5Print11printNumberEmh>

0000092a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     92a:	9a 01       	movw	r18, r20
  return print((long) n, base);
     92c:	ab 01       	movw	r20, r22
     92e:	77 0f       	add	r23, r23
     930:	66 0b       	sbc	r22, r22
     932:	77 0b       	sbc	r23, r23
     934:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_ZN5Print5printEli>

00000938 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
     952:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
     956:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
     95a:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
     95e:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>
     962:	26 e0       	ldi	r18, 0x06	; 6
     964:	23 0f       	add	r18, r19
     966:	2d 37       	cpi	r18, 0x7D	; 125
     968:	20 f4       	brcc	.+8      	; 0x972 <__vector_16+0x3a>
     96a:	02 96       	adiw	r24, 0x02	; 2
     96c:	a1 1d       	adc	r26, r1
     96e:	b1 1d       	adc	r27, r1
     970:	05 c0       	rjmp	.+10     	; 0x97c <__vector_16+0x44>
     972:	29 e8       	ldi	r18, 0x89	; 137
     974:	23 0f       	add	r18, r19
     976:	03 96       	adiw	r24, 0x03	; 3
     978:	a1 1d       	adc	r26, r1
     97a:	b1 1d       	adc	r27, r1
     97c:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
     980:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
     984:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
     988:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
     98c:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
     990:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
     994:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
     998:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
     99c:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	a1 1d       	adc	r26, r1
     9a4:	b1 1d       	adc	r27, r1
     9a6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
     9aa:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
     9ae:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
     9b2:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti

000009cc <millis>:
     9cc:	2f b7       	in	r18, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
     9d4:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
     9d8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
     9dc:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
     9e0:	2f bf       	out	0x3f, r18	; 63
     9e2:	08 95       	ret

000009e4 <micros>:
     9e4:	3f b7       	in	r19, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
     9ec:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
     9f0:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
     9f4:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
     9f8:	26 b5       	in	r18, 0x26	; 38
     9fa:	a8 9b       	sbis	0x15, 0	; 21
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <micros+0x24>
     9fe:	2f 3f       	cpi	r18, 0xFF	; 255
     a00:	19 f0       	breq	.+6      	; 0xa08 <micros+0x24>
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	a1 1d       	adc	r26, r1
     a06:	b1 1d       	adc	r27, r1
     a08:	3f bf       	out	0x3f, r19	; 63
     a0a:	ba 2f       	mov	r27, r26
     a0c:	a9 2f       	mov	r26, r25
     a0e:	98 2f       	mov	r25, r24
     a10:	88 27       	eor	r24, r24
     a12:	82 0f       	add	r24, r18
     a14:	91 1d       	adc	r25, r1
     a16:	a1 1d       	adc	r26, r1
     a18:	b1 1d       	adc	r27, r1
     a1a:	bc 01       	movw	r22, r24
     a1c:	cd 01       	movw	r24, r26
     a1e:	43 e0       	ldi	r20, 0x03	; 3
     a20:	66 0f       	add	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	88 1f       	adc	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	4a 95       	dec	r20
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <micros+0x3c>
     a2c:	08 95       	ret

00000a2e <delay>:
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	6b 01       	movw	r12, r22
     a40:	7c 01       	movw	r14, r24
     a42:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
     a46:	4b 01       	movw	r8, r22
     a48:	5c 01       	movw	r10, r24
     a4a:	c1 14       	cp	r12, r1
     a4c:	d1 04       	cpc	r13, r1
     a4e:	e1 04       	cpc	r14, r1
     a50:	f1 04       	cpc	r15, r1
     a52:	01 f1       	breq	.+64     	; 0xa94 <delay+0x66>
     a54:	0e 94 aa 09 	call	0x1354	; 0x1354 <yield>
     a58:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	88 19       	sub	r24, r8
     a62:	99 09       	sbc	r25, r9
     a64:	aa 09       	sbc	r26, r10
     a66:	bb 09       	sbc	r27, r11
     a68:	88 3e       	cpi	r24, 0xE8	; 232
     a6a:	93 40       	sbci	r25, 0x03	; 3
     a6c:	a1 05       	cpc	r26, r1
     a6e:	b1 05       	cpc	r27, r1
     a70:	60 f3       	brcs	.-40     	; 0xa4a <delay+0x1c>
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	c2 1a       	sub	r12, r18
     a76:	d1 08       	sbc	r13, r1
     a78:	e1 08       	sbc	r14, r1
     a7a:	f1 08       	sbc	r15, r1
     a7c:	88 ee       	ldi	r24, 0xE8	; 232
     a7e:	88 0e       	add	r8, r24
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	98 1e       	adc	r9, r24
     a84:	a1 1c       	adc	r10, r1
     a86:	b1 1c       	adc	r11, r1
     a88:	c1 14       	cp	r12, r1
     a8a:	d1 04       	cpc	r13, r1
     a8c:	e1 04       	cpc	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	19 f7       	brne	.-58     	; 0xa58 <delay+0x2a>
     a92:	db cf       	rjmp	.-74     	; 0xa4a <delay+0x1c>
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	8f 90       	pop	r8
     aa4:	08 95       	ret

00000aa6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     aa6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     aa8:	84 b5       	in	r24, 0x24	; 36
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     aae:	84 b5       	in	r24, 0x24	; 36
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ab4:	85 b5       	in	r24, 0x25	; 37
     ab6:	82 60       	ori	r24, 0x02	; 2
     ab8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     aba:	85 b5       	in	r24, 0x25	; 37
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ac0:	ee e6       	ldi	r30, 0x6E	; 110
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aca:	e1 e8       	ldi	r30, 0x81	; 129
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ad0:	80 81       	ld	r24, Z
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ad6:	80 81       	ld	r24, Z
     ad8:	81 60       	ori	r24, 0x01	; 1
     ada:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     adc:	e0 e8       	ldi	r30, 0x80	; 128
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	81 60       	ori	r24, 0x01	; 1
     ae4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ae6:	e1 eb       	ldi	r30, 0xB1	; 177
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	84 60       	ori	r24, 0x04	; 4
     aee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     af0:	e0 eb       	ldi	r30, 0xB0	; 176
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
     afa:	ea e7       	ldi	r30, 0x7A	; 122
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b04:	80 81       	ld	r24, Z
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
     b0a:	80 81       	ld	r24, Z
     b0c:	8e 7f       	andi	r24, 0xFE	; 254
     b0e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b10:	80 81       	ld	r24, Z
     b12:	80 68       	ori	r24, 0x80	; 128
     b14:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b16:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b1a:	08 95       	ret

00000b1c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	81 f0       	breq	.+32     	; 0xb40 <turnOffPWM+0x24>
     b20:	28 f4       	brcc	.+10     	; 0xb2c <turnOffPWM+0x10>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	99 f0       	breq	.+38     	; 0xb4c <turnOffPWM+0x30>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	a1 f0       	breq	.+40     	; 0xb52 <turnOffPWM+0x36>
     b2a:	08 95       	ret
     b2c:	87 30       	cpi	r24, 0x07	; 7
     b2e:	a9 f0       	breq	.+42     	; 0xb5a <turnOffPWM+0x3e>
     b30:	88 30       	cpi	r24, 0x08	; 8
     b32:	b9 f0       	breq	.+46     	; 0xb62 <turnOffPWM+0x46>
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	d1 f4       	brne	.+52     	; 0xb6c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b3c:	8f 7d       	andi	r24, 0xDF	; 223
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b44:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b46:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b4a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b4c:	84 b5       	in	r24, 0x24	; 36
     b4e:	8f 77       	andi	r24, 0x7F	; 127
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b52:	84 b5       	in	r24, 0x24	; 36
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	84 bd       	out	0x24, r24	; 36
     b58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b5a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b5e:	8f 77       	andi	r24, 0x7F	; 127
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b66:	8f 7d       	andi	r24, 0xDF	; 223
     b68:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b6c:	08 95       	ret

00000b6e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	e4 58       	subi	r30, 0x84	; 132
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b7c:	fc 01       	movw	r30, r24
     b7e:	e0 57       	subi	r30, 0x70	; 112
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b84:	88 23       	and	r24, r24
     b86:	61 f1       	breq	.+88     	; 0xbe0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	fc 01       	movw	r30, r24
     b90:	e8 54       	subi	r30, 0x48	; 72
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	c5 91       	lpm	r28, Z+
     b96:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     b98:	fc 01       	movw	r30, r24
     b9a:	e2 55       	subi	r30, 0x52	; 82
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	a5 91       	lpm	r26, Z+
     ba0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ba2:	61 11       	cpse	r22, r1
     ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ba6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ba8:	f8 94       	cli
		*reg &= ~bit;
     baa:	88 81       	ld	r24, Y
     bac:	20 95       	com	r18
     bae:	82 23       	and	r24, r18
     bb0:	88 83       	st	Y, r24
		*out &= ~bit;
     bb2:	ec 91       	ld	r30, X
     bb4:	2e 23       	and	r18, r30
     bb6:	0b c0       	rjmp	.+22     	; 0xbce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bb8:	62 30       	cpi	r22, 0x02	; 2
     bba:	61 f4       	brne	.+24     	; 0xbd4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     bbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bbe:	f8 94       	cli
		*reg &= ~bit;
     bc0:	88 81       	ld	r24, Y
     bc2:	32 2f       	mov	r19, r18
     bc4:	30 95       	com	r19
     bc6:	83 23       	and	r24, r19
     bc8:	88 83       	st	Y, r24
		*out |= bit;
     bca:	ec 91       	ld	r30, X
     bcc:	2e 2b       	or	r18, r30
     bce:	2c 93       	st	X, r18
		SREG = oldSREG;
     bd0:	9f bf       	out	0x3f, r25	; 63
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     bd4:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bd6:	f8 94       	cli
		*reg |= bit;
     bd8:	e8 81       	ld	r30, Y
     bda:	2e 2b       	or	r18, r30
     bdc:	28 83       	st	Y, r18
		SREG = oldSREG;
     bde:	8f bf       	out	0x3f, r24	; 63
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	f9 01       	movw	r30, r18
     bf2:	e8 59       	subi	r30, 0x98	; 152
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     bf8:	f9 01       	movw	r30, r18
     bfa:	e4 58       	subi	r30, 0x84	; 132
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c00:	f9 01       	movw	r30, r18
     c02:	e0 57       	subi	r30, 0x70	; 112
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c08:	cc 23       	and	r28, r28
     c0a:	c1 f0       	breq	.+48     	; 0xc3c <digitalWrite+0x56>
     c0c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c0e:	81 11       	cpse	r24, r1
     c10:	0e 94 8e 05 	call	0xb1c	; 0xb1c <turnOffPWM>

	out = portOutputRegister(port);
     c14:	ec 2f       	mov	r30, r28
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	e2 55       	subi	r30, 0x52	; 82
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	a5 91       	lpm	r26, Z+
     c22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c24:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c26:	f8 94       	cli

	if (val == LOW) {
     c28:	11 11       	cpse	r17, r1
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <digitalWrite+0x4e>
		*out &= ~bit;
     c2c:	8c 91       	ld	r24, X
     c2e:	d0 95       	com	r29
     c30:	d8 23       	and	r29, r24
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <digitalWrite+0x52>
	} else {
		*out |= bit;
     c34:	ec 91       	ld	r30, X
     c36:	de 2b       	or	r29, r30
     c38:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     c3a:	9f bf       	out	0x3f, r25	; 63
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	08 95       	ret

00000c44 <digitalRead>:

int digitalRead(uint8_t pin)
{
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	f9 01       	movw	r30, r18
     c4e:	e8 59       	subi	r30, 0x98	; 152
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c54:	f9 01       	movw	r30, r18
     c56:	e4 58       	subi	r30, 0x84	; 132
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c5c:	f9 01       	movw	r30, r18
     c5e:	e0 57       	subi	r30, 0x70	; 112
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     c64:	cc 23       	and	r28, r28
     c66:	91 f0       	breq	.+36     	; 0xc8c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c68:	81 11       	cpse	r24, r1
     c6a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     c6e:	ec 2f       	mov	r30, r28
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ec 55       	subi	r30, 0x5C	; 92
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	a5 91       	lpm	r26, Z+
     c7c:	b4 91       	lpm	r27, Z
     c7e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     c80:	ed 23       	and	r30, r29
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	21 f4       	brne	.+8      	; 0xc90 <digitalRead+0x4c>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <digitalRead+0x4c>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
  if (howbig == 0) {
     c9e:	61 15       	cp	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	81 05       	cpc	r24, r1
     ca4:	91 05       	cpc	r25, r1
     ca6:	49 f0       	breq	.+18     	; 0xcba <_Z6randoml+0x24>
     ca8:	6b 01       	movw	r12, r22
     caa:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
     cac:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <random>
     cb0:	a7 01       	movw	r20, r14
     cb2:	96 01       	movw	r18, r12
     cb4:	0e 94 cd 09 	call	0x139a	; 0x139a <__divmodsi4>
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <_Z6randomll>:

long random(long howsmall, long howbig)
{
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
  if (howsmall >= howbig) {
     cd6:	62 17       	cp	r22, r18
     cd8:	73 07       	cpc	r23, r19
     cda:	84 07       	cpc	r24, r20
     cdc:	95 07       	cpc	r25, r21
     cde:	84 f4       	brge	.+32     	; 0xd00 <_Z6randomll+0x36>
     ce0:	89 01       	movw	r16, r18
     ce2:	9a 01       	movw	r18, r20
     ce4:	6b 01       	movw	r12, r22
     ce6:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
     ce8:	c9 01       	movw	r24, r18
     cea:	b8 01       	movw	r22, r16
     cec:	6c 19       	sub	r22, r12
     cee:	7d 09       	sbc	r23, r13
     cf0:	8e 09       	sbc	r24, r14
     cf2:	9f 09       	sbc	r25, r15
     cf4:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z6randoml>
     cf8:	6c 0d       	add	r22, r12
     cfa:	7d 1d       	adc	r23, r13
     cfc:	8e 1d       	adc	r24, r14
     cfe:	9f 1d       	adc	r25, r15
}
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <_ZN17Adafruit_NeoPixelD1Ev>:

/*!
  @brief   Retrieve the last-set brightness value for the strip.
  @return  Brightness value: 0 = minimum (off), 255 = maximum.
*/
uint8_t Adafruit_NeoPixel::getBrightness(void) const { return brightness - 1; }
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	0e 94 a4 0a 	call	0x1548	; 0x1548 <free>
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	9f 81       	ldd	r25, Y+7	; 0x07
     d20:	97 fd       	sbrc	r25, 7
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <_ZN17Adafruit_NeoPixelD1Ev+0x20>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <pinMode>
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <_ZN17Adafruit_NeoPixel5beginEv>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	9f 81       	ldd	r25, Y+7	; 0x07
     d3e:	97 fd       	sbrc	r25, 7
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <_ZN17Adafruit_NeoPixel12updateLengthEj>:
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	7b 01       	movw	r14, r22
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <free>
     d72:	9e 85       	ldd	r25, Y+14	; 0x0e
     d74:	8b 85       	ldd	r24, Y+11	; 0x0b
     d76:	98 17       	cp	r25, r24
     d78:	19 f0       	breq	.+6      	; 0xd80 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x26>
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x2a>
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	8e 9d       	mul	r24, r14
     d86:	80 01       	movw	r16, r0
     d88:	8f 9d       	mul	r24, r15
     d8a:	10 0d       	add	r17, r0
     d8c:	9e 9d       	mul	r25, r14
     d8e:	10 0d       	add	r17, r0
     d90:	11 24       	eor	r1, r1
     d92:	1d 83       	std	Y+5, r17	; 0x05
     d94:	0c 83       	std	Y+4, r16	; 0x04
     d96:	c8 01       	movw	r24, r16
     d98:	0e 94 0c 0a 	call	0x1418	; 0x1418 <malloc>
     d9c:	9a 87       	std	Y+10, r25	; 0x0a
     d9e:	89 87       	std	Y+9, r24	; 0x09
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	41 f0       	breq	.+16     	; 0xdb4 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5a>
     da4:	a8 01       	movw	r20, r16
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	0e 94 cf 0b 	call	0x179e	; 0x179e <memset>
     dae:	fb 82       	std	Y+3, r15	; 0x03
     db0:	ea 82       	std	Y+2, r14	; 0x02
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <_ZN17Adafruit_NeoPixel12updateLengthEj+0x62>
     db4:	1d 82       	std	Y+5, r1	; 0x05
     db6:	1c 82       	std	Y+4, r1	; 0x04
     db8:	1b 82       	std	Y+3, r1	; 0x03
     dba:	1a 82       	std	Y+2, r1	; 0x02
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	08 95       	ret

00000dca <_ZN17Adafruit_NeoPixel10updateTypeEj>:
     dca:	fc 01       	movw	r30, r24
     dcc:	31 e0       	ldi	r19, 0x01	; 1
     dce:	96 85       	ldd	r25, Z+14	; 0x0e
     dd0:	83 85       	ldd	r24, Z+11	; 0x0b
     dd2:	98 13       	cpse	r25, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	cb 01       	movw	r24, r22
     dd8:	26 e0       	ldi	r18, 0x06	; 6
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	2a 95       	dec	r18
     de0:	e1 f7       	brne	.-8      	; 0xdda <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
     de2:	28 2f       	mov	r18, r24
     de4:	23 70       	andi	r18, 0x03	; 3
     de6:	26 87       	std	Z+14, r18	; 0x0e
     de8:	cb 01       	movw	r24, r22
     dea:	44 e0       	ldi	r20, 0x04	; 4
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	4a 95       	dec	r20
     df2:	e1 f7       	brne	.-8      	; 0xdec <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	83 87       	std	Z+11, r24	; 0x0b
     df8:	ab 01       	movw	r20, r22
     dfa:	56 95       	lsr	r21
     dfc:	47 95       	ror	r20
     dfe:	56 95       	lsr	r21
     e00:	47 95       	ror	r20
     e02:	43 70       	andi	r20, 0x03	; 3
     e04:	44 87       	std	Z+12, r20	; 0x0c
     e06:	96 2f       	mov	r25, r22
     e08:	93 70       	andi	r25, 0x03	; 3
     e0a:	95 87       	std	Z+13, r25	; 0x0d
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	6f 3f       	cpi	r22, 0xFF	; 255
     e10:	71 05       	cpc	r23, r1
     e12:	11 f0       	breq	.+4      	; 0xe18 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     e14:	08 f0       	brcs	.+2      	; 0xe18 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 83       	st	Z, r25
     e1a:	41 85       	ldd	r20, Z+9	; 0x09
     e1c:	52 85       	ldd	r21, Z+10	; 0x0a
     e1e:	45 2b       	or	r20, r21
     e20:	51 f0       	breq	.+20     	; 0xe36 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	28 13       	cpse	r18, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	39 17       	cp	r19, r25
     e2a:	29 f0       	breq	.+10     	; 0xe36 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
     e2c:	62 81       	ldd	r22, Z+2	; 0x02
     e2e:	73 81       	ldd	r23, Z+3	; 0x03
     e30:	cf 01       	movw	r24, r30
     e32:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_ZN17Adafruit_NeoPixel12updateLengthEj>
     e36:	08 95       	ret

00000e38 <_ZN17Adafruit_NeoPixel4showEv>:
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	29 97       	sbiw	r28, 0x09	; 9
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	8c 01       	movw	r16, r24
     e5a:	dc 01       	movw	r26, r24
     e5c:	19 96       	adiw	r26, 0x09	; 9
     e5e:	8d 91       	ld	r24, X+
     e60:	9c 91       	ld	r25, X
     e62:	1a 97       	sbiw	r26, 0x0a	; 10
     e64:	89 2b       	or	r24, r25
     e66:	09 f4       	brne	.+2      	; 0xe6a <_ZN17Adafruit_NeoPixel4showEv+0x32>
     e68:	8f c1       	rjmp	.+798    	; 0x1188 <nextbyte20+0x30>
     e6a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
     e6e:	f8 01       	movw	r30, r16
     e70:	c7 84       	ldd	r12, Z+15	; 0x0f
     e72:	d0 88       	ldd	r13, Z+16	; 0x10
     e74:	e1 88       	ldd	r14, Z+17	; 0x11
     e76:	f2 88       	ldd	r15, Z+18	; 0x12
     e78:	6c 15       	cp	r22, r12
     e7a:	7d 05       	cpc	r23, r13
     e7c:	8e 05       	cpc	r24, r14
     e7e:	9f 05       	cpc	r25, r15
     e80:	20 f4       	brcc	.+8      	; 0xe8a <_ZN17Adafruit_NeoPixel4showEv+0x52>
     e82:	67 87       	std	Z+15, r22	; 0x0f
     e84:	70 8b       	std	Z+16, r23	; 0x10
     e86:	81 8b       	std	Z+17, r24	; 0x11
     e88:	92 8b       	std	Z+18, r25	; 0x12
     e8a:	f8 01       	movw	r30, r16
     e8c:	c7 84       	ldd	r12, Z+15	; 0x0f
     e8e:	d0 88       	ldd	r13, Z+16	; 0x10
     e90:	e1 88       	ldd	r14, Z+17	; 0x11
     e92:	f2 88       	ldd	r15, Z+18	; 0x12
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8c 19       	sub	r24, r12
     e9a:	9d 09       	sbc	r25, r13
     e9c:	ae 09       	sbc	r26, r14
     e9e:	bf 09       	sbc	r27, r15
     ea0:	8c 32       	cpi	r24, 0x2C	; 44
     ea2:	91 40       	sbci	r25, 0x01	; 1
     ea4:	a1 05       	cpc	r26, r1
     ea6:	b1 05       	cpc	r27, r1
     ea8:	00 f3       	brcs	.-64     	; 0xe6a <_ZN17Adafruit_NeoPixel4showEv+0x32>
     eaa:	f8 94       	cli
     eac:	d8 01       	movw	r26, r16
     eae:	14 96       	adiw	r26, 0x04	; 4
     eb0:	8d 91       	ld	r24, X+
     eb2:	9c 91       	ld	r25, X
     eb4:	15 97       	sbiw	r26, 0x05	; 5
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	19 96       	adiw	r26, 0x09	; 9
     ebc:	0d 90       	ld	r0, X+
     ebe:	bc 91       	ld	r27, X
     ec0:	a0 2d       	mov	r26, r0
     ec2:	7d 01       	movw	r14, r26
     ec4:	ef ef       	ldi	r30, 0xFF	; 255
     ec6:	ee 1a       	sub	r14, r30
     ec8:	fe 0a       	sbc	r15, r30
     eca:	8c 91       	ld	r24, X
     ecc:	89 87       	std	Y+9, r24	; 0x09
     ece:	d8 01       	movw	r26, r16
     ed0:	8c 91       	ld	r24, X
     ed2:	53 96       	adiw	r26, 0x13	; 19
     ed4:	0d 90       	ld	r0, X+
     ed6:	bc 91       	ld	r27, X
     ed8:	a0 2d       	mov	r26, r0
     eda:	88 23       	and	r24, r24
     edc:	09 f4       	brne	.+2      	; 0xee0 <_ZN17Adafruit_NeoPixel4showEv+0xa8>
     ede:	1a c1       	rjmp	.+564    	; 0x1114 <headC+0x88>
     ee0:	1d 82       	std	Y+5, r1	; 0x05
     ee2:	ab 32       	cpi	r26, 0x2B	; 43
     ee4:	b1 05       	cpc	r27, r1
     ee6:	09 f0       	breq	.+2      	; 0xeea <_ZN17Adafruit_NeoPixel4showEv+0xb2>
     ee8:	59 c0       	rjmp	.+178    	; 0xf9c <headD+0x82>
     eea:	9b b1       	in	r25, 0x0b	; 11
     eec:	f8 01       	movw	r30, r16
     eee:	85 89       	ldd	r24, Z+21	; 0x15
     ef0:	98 2b       	or	r25, r24
     ef2:	98 87       	std	Y+8, r25	; 0x08
     ef4:	9b b1       	in	r25, 0x0b	; 11
     ef6:	80 95       	com	r24
     ef8:	89 23       	and	r24, r25
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	8e 83       	std	Y+6, r24	; 0x06
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	87 ff       	sbrs	r24, 7
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <_ZN17Adafruit_NeoPixel4showEv+0xd2>
     f06:	88 85       	ldd	r24, Y+8	; 0x08
     f08:	8e 83       	std	Y+6, r24	; 0x06
     f0a:	58 85       	ldd	r21, Y+8	; 0x08
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	49 85       	ldd	r20, Y+9	; 0x09
     f10:	3e 81       	ldd	r19, Y+6	; 0x06
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	d7 01       	movw	r26, r14

00000f1a <headD>:
     f1a:	5b b9       	out	0x0b, r21	; 11
     f1c:	26 2f       	mov	r18, r22
     f1e:	3b b9       	out	0x0b, r19	; 11
     f20:	00 c0       	rjmp	.+0      	; 0xf22 <headD+0x8>
     f22:	46 fd       	sbrc	r20, 6
     f24:	25 2f       	mov	r18, r21
     f26:	6b b9       	out	0x0b, r22	; 11
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <headD+0x10>
     f2a:	5b b9       	out	0x0b, r21	; 11
     f2c:	36 2f       	mov	r19, r22
     f2e:	2b b9       	out	0x0b, r18	; 11
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <headD+0x18>
     f32:	45 fd       	sbrc	r20, 5
     f34:	35 2f       	mov	r19, r21
     f36:	6b b9       	out	0x0b, r22	; 11
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <headD+0x20>
     f3a:	5b b9       	out	0x0b, r21	; 11
     f3c:	26 2f       	mov	r18, r22
     f3e:	3b b9       	out	0x0b, r19	; 11
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <headD+0x28>
     f42:	44 fd       	sbrc	r20, 4
     f44:	25 2f       	mov	r18, r21
     f46:	6b b9       	out	0x0b, r22	; 11
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <headD+0x30>
     f4a:	5b b9       	out	0x0b, r21	; 11
     f4c:	36 2f       	mov	r19, r22
     f4e:	2b b9       	out	0x0b, r18	; 11
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <headD+0x38>
     f52:	43 fd       	sbrc	r20, 3
     f54:	35 2f       	mov	r19, r21
     f56:	6b b9       	out	0x0b, r22	; 11
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <headD+0x40>
     f5a:	5b b9       	out	0x0b, r21	; 11
     f5c:	26 2f       	mov	r18, r22
     f5e:	3b b9       	out	0x0b, r19	; 11
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <headD+0x48>
     f62:	42 fd       	sbrc	r20, 2
     f64:	25 2f       	mov	r18, r21
     f66:	6b b9       	out	0x0b, r22	; 11
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <headD+0x50>
     f6a:	5b b9       	out	0x0b, r21	; 11
     f6c:	36 2f       	mov	r19, r22
     f6e:	2b b9       	out	0x0b, r18	; 11
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <headD+0x58>
     f72:	41 fd       	sbrc	r20, 1
     f74:	35 2f       	mov	r19, r21
     f76:	6b b9       	out	0x0b, r22	; 11
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <headD+0x60>
     f7a:	5b b9       	out	0x0b, r21	; 11
     f7c:	26 2f       	mov	r18, r22
     f7e:	3b b9       	out	0x0b, r19	; 11
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <headD+0x68>
     f82:	40 fd       	sbrc	r20, 0
     f84:	25 2f       	mov	r18, r21
     f86:	6b b9       	out	0x0b, r22	; 11
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	5b b9       	out	0x0b, r21	; 11
     f8c:	36 2f       	mov	r19, r22
     f8e:	2b b9       	out	0x0b, r18	; 11
     f90:	4d 91       	ld	r20, X+
     f92:	47 fd       	sbrc	r20, 7
     f94:	35 2f       	mov	r19, r21
     f96:	6b b9       	out	0x0b, r22	; 11
     f98:	01 f6       	brne	.-128    	; 0xf1a <headD>
     f9a:	b8 c0       	rjmp	.+368    	; 0x110c <headC+0x80>
     f9c:	a5 32       	cpi	r26, 0x25	; 37
     f9e:	b1 05       	cpc	r27, r1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <headD+0x8a>
     fa2:	59 c0       	rjmp	.+178    	; 0x1056 <headB+0x82>
     fa4:	95 b1       	in	r25, 0x05	; 5
     fa6:	f8 01       	movw	r30, r16
     fa8:	85 89       	ldd	r24, Z+21	; 0x15
     faa:	98 2b       	or	r25, r24
     fac:	98 87       	std	Y+8, r25	; 0x08
     fae:	95 b1       	in	r25, 0x05	; 5
     fb0:	80 95       	com	r24
     fb2:	89 23       	and	r24, r25
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	8f 81       	ldd	r24, Y+7	; 0x07
     fb8:	8e 83       	std	Y+6, r24	; 0x06
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	87 ff       	sbrs	r24, 7
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <headD+0xaa>
     fc0:	88 85       	ldd	r24, Y+8	; 0x08
     fc2:	8e 83       	std	Y+6, r24	; 0x06
     fc4:	58 85       	ldd	r21, Y+8	; 0x08
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	49 85       	ldd	r20, Y+9	; 0x09
     fca:	3e 81       	ldd	r19, Y+6	; 0x06
     fcc:	2d 81       	ldd	r18, Y+5	; 0x05
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	d7 01       	movw	r26, r14

00000fd4 <headB>:
     fd4:	55 b9       	out	0x05, r21	; 5
     fd6:	26 2f       	mov	r18, r22
     fd8:	35 b9       	out	0x05, r19	; 5
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <headB+0x8>
     fdc:	46 fd       	sbrc	r20, 6
     fde:	25 2f       	mov	r18, r21
     fe0:	65 b9       	out	0x05, r22	; 5
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <headB+0x10>
     fe4:	55 b9       	out	0x05, r21	; 5
     fe6:	36 2f       	mov	r19, r22
     fe8:	25 b9       	out	0x05, r18	; 5
     fea:	00 c0       	rjmp	.+0      	; 0xfec <headB+0x18>
     fec:	45 fd       	sbrc	r20, 5
     fee:	35 2f       	mov	r19, r21
     ff0:	65 b9       	out	0x05, r22	; 5
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <headB+0x20>
     ff4:	55 b9       	out	0x05, r21	; 5
     ff6:	26 2f       	mov	r18, r22
     ff8:	35 b9       	out	0x05, r19	; 5
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <headB+0x28>
     ffc:	44 fd       	sbrc	r20, 4
     ffe:	25 2f       	mov	r18, r21
    1000:	65 b9       	out	0x05, r22	; 5
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <headB+0x30>
    1004:	55 b9       	out	0x05, r21	; 5
    1006:	36 2f       	mov	r19, r22
    1008:	25 b9       	out	0x05, r18	; 5
    100a:	00 c0       	rjmp	.+0      	; 0x100c <headB+0x38>
    100c:	43 fd       	sbrc	r20, 3
    100e:	35 2f       	mov	r19, r21
    1010:	65 b9       	out	0x05, r22	; 5
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <headB+0x40>
    1014:	55 b9       	out	0x05, r21	; 5
    1016:	26 2f       	mov	r18, r22
    1018:	35 b9       	out	0x05, r19	; 5
    101a:	00 c0       	rjmp	.+0      	; 0x101c <headB+0x48>
    101c:	42 fd       	sbrc	r20, 2
    101e:	25 2f       	mov	r18, r21
    1020:	65 b9       	out	0x05, r22	; 5
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <headB+0x50>
    1024:	55 b9       	out	0x05, r21	; 5
    1026:	36 2f       	mov	r19, r22
    1028:	25 b9       	out	0x05, r18	; 5
    102a:	00 c0       	rjmp	.+0      	; 0x102c <headB+0x58>
    102c:	41 fd       	sbrc	r20, 1
    102e:	35 2f       	mov	r19, r21
    1030:	65 b9       	out	0x05, r22	; 5
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <headB+0x60>
    1034:	55 b9       	out	0x05, r21	; 5
    1036:	26 2f       	mov	r18, r22
    1038:	35 b9       	out	0x05, r19	; 5
    103a:	00 c0       	rjmp	.+0      	; 0x103c <headB+0x68>
    103c:	40 fd       	sbrc	r20, 0
    103e:	25 2f       	mov	r18, r21
    1040:	65 b9       	out	0x05, r22	; 5
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	55 b9       	out	0x05, r21	; 5
    1046:	36 2f       	mov	r19, r22
    1048:	25 b9       	out	0x05, r18	; 5
    104a:	4d 91       	ld	r20, X+
    104c:	47 fd       	sbrc	r20, 7
    104e:	35 2f       	mov	r19, r21
    1050:	65 b9       	out	0x05, r22	; 5
    1052:	01 f6       	brne	.-128    	; 0xfd4 <headB>
    1054:	5b c0       	rjmp	.+182    	; 0x110c <headC+0x80>
    1056:	98 97       	sbiw	r26, 0x28	; 40
    1058:	09 f0       	breq	.+2      	; 0x105c <headB+0x88>
    105a:	8c c0       	rjmp	.+280    	; 0x1174 <nextbyte20+0x1c>
    105c:	98 b1       	in	r25, 0x08	; 8
    105e:	f8 01       	movw	r30, r16
    1060:	85 89       	ldd	r24, Z+21	; 0x15
    1062:	98 2b       	or	r25, r24
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	98 b1       	in	r25, 0x08	; 8
    1068:	80 95       	com	r24
    106a:	89 23       	and	r24, r25
    106c:	8f 83       	std	Y+7, r24	; 0x07
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	8e 83       	std	Y+6, r24	; 0x06
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	87 ff       	sbrs	r24, 7
    1076:	02 c0       	rjmp	.+4      	; 0x107c <headB+0xa8>
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	58 85       	ldd	r21, Y+8	; 0x08
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	49 85       	ldd	r20, Y+9	; 0x09
    1082:	3e 81       	ldd	r19, Y+6	; 0x06
    1084:	2d 81       	ldd	r18, Y+5	; 0x05
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	d7 01       	movw	r26, r14

0000108c <headC>:
    108c:	58 b9       	out	0x08, r21	; 8
    108e:	26 2f       	mov	r18, r22
    1090:	38 b9       	out	0x08, r19	; 8
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <headC+0x8>
    1094:	46 fd       	sbrc	r20, 6
    1096:	25 2f       	mov	r18, r21
    1098:	68 b9       	out	0x08, r22	; 8
    109a:	00 c0       	rjmp	.+0      	; 0x109c <headC+0x10>
    109c:	58 b9       	out	0x08, r21	; 8
    109e:	36 2f       	mov	r19, r22
    10a0:	28 b9       	out	0x08, r18	; 8
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <headC+0x18>
    10a4:	45 fd       	sbrc	r20, 5
    10a6:	35 2f       	mov	r19, r21
    10a8:	68 b9       	out	0x08, r22	; 8
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <headC+0x20>
    10ac:	58 b9       	out	0x08, r21	; 8
    10ae:	26 2f       	mov	r18, r22
    10b0:	38 b9       	out	0x08, r19	; 8
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <headC+0x28>
    10b4:	44 fd       	sbrc	r20, 4
    10b6:	25 2f       	mov	r18, r21
    10b8:	68 b9       	out	0x08, r22	; 8
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <headC+0x30>
    10bc:	58 b9       	out	0x08, r21	; 8
    10be:	36 2f       	mov	r19, r22
    10c0:	28 b9       	out	0x08, r18	; 8
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <headC+0x38>
    10c4:	43 fd       	sbrc	r20, 3
    10c6:	35 2f       	mov	r19, r21
    10c8:	68 b9       	out	0x08, r22	; 8
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <headC+0x40>
    10cc:	58 b9       	out	0x08, r21	; 8
    10ce:	26 2f       	mov	r18, r22
    10d0:	38 b9       	out	0x08, r19	; 8
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <headC+0x48>
    10d4:	42 fd       	sbrc	r20, 2
    10d6:	25 2f       	mov	r18, r21
    10d8:	68 b9       	out	0x08, r22	; 8
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <headC+0x50>
    10dc:	58 b9       	out	0x08, r21	; 8
    10de:	36 2f       	mov	r19, r22
    10e0:	28 b9       	out	0x08, r18	; 8
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <headC+0x58>
    10e4:	41 fd       	sbrc	r20, 1
    10e6:	35 2f       	mov	r19, r21
    10e8:	68 b9       	out	0x08, r22	; 8
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <headC+0x60>
    10ec:	58 b9       	out	0x08, r21	; 8
    10ee:	26 2f       	mov	r18, r22
    10f0:	38 b9       	out	0x08, r19	; 8
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <headC+0x68>
    10f4:	40 fd       	sbrc	r20, 0
    10f6:	25 2f       	mov	r18, r21
    10f8:	68 b9       	out	0x08, r22	; 8
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	58 b9       	out	0x08, r21	; 8
    10fe:	36 2f       	mov	r19, r22
    1100:	28 b9       	out	0x08, r18	; 8
    1102:	4d 91       	ld	r20, X+
    1104:	47 fd       	sbrc	r20, 7
    1106:	35 2f       	mov	r19, r21
    1108:	68 b9       	out	0x08, r22	; 8
    110a:	01 f6       	brne	.-128    	; 0x108c <headC>
    110c:	49 87       	std	Y+9, r20	; 0x09
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	2e c0       	rjmp	.+92     	; 0x1170 <nextbyte20+0x18>
    1114:	9c 91       	ld	r25, X
    1116:	f8 01       	movw	r30, r16
    1118:	85 89       	ldd	r24, Z+21	; 0x15
    111a:	98 2b       	or	r25, r24
    111c:	98 87       	std	Y+8, r25	; 0x08
    111e:	9c 91       	ld	r25, X
    1120:	80 95       	com	r24
    1122:	89 23       	and	r24, r25
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	8c 83       	std	Y+4, r24	; 0x04
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	58 85       	ldd	r21, Y+8	; 0x08
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	49 85       	ldd	r20, Y+9	; 0x09
    1134:	3b 81       	ldd	r19, Y+3	; 0x03
    1136:	2c 81       	ldd	r18, Y+4	; 0x04
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	f7 01       	movw	r30, r14

0000113e <head20>:
    113e:	5c 93       	st	X, r21
    1140:	47 fd       	sbrc	r20, 7
    1142:	25 2f       	mov	r18, r21
    1144:	2c 93       	st	X, r18
    1146:	26 2f       	mov	r18, r22
    1148:	3a 95       	dec	r19
    114a:	31 f0       	breq	.+12     	; 0x1158 <nextbyte20>
    114c:	44 1f       	adc	r20, r20
    114e:	6c 93       	st	X, r22
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <head20+0x14>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <head20+0x16>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <head20+0x18>
    1156:	f3 cf       	rjmp	.-26     	; 0x113e <head20>

00001158 <nextbyte20>:
    1158:	6c 93       	st	X, r22
    115a:	00 00       	nop
    115c:	38 e0       	ldi	r19, 0x08	; 8
    115e:	41 91       	ld	r20, Z+
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	69 f7       	brne	.-38     	; 0x113e <head20>
    1164:	f8 01       	movw	r30, r16
    1166:	b4 8b       	std	Z+20, r27	; 0x14
    1168:	a3 8b       	std	Z+19, r26	; 0x13
    116a:	49 87       	std	Y+9, r20	; 0x09
    116c:	3b 83       	std	Y+3, r19	; 0x03
    116e:	2c 83       	std	Y+4, r18	; 0x04
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	78 94       	sei
    1176:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
    117a:	d8 01       	movw	r26, r16
    117c:	1f 96       	adiw	r26, 0x0f	; 15
    117e:	6d 93       	st	X+, r22
    1180:	7d 93       	st	X+, r23
    1182:	8d 93       	st	X+, r24
    1184:	9c 93       	st	X, r25
    1186:	52 97       	sbiw	r26, 0x12	; 18
    1188:	29 96       	adiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret

000011a6 <_ZN17Adafruit_NeoPixel6setPinEi>:
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	ec 01       	movw	r28, r24
    11b0:	16 2f       	mov	r17, r22
    11b2:	07 2f       	mov	r16, r23
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 23       	and	r24, r24
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	97 fd       	sbrc	r25, 7
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
    11c8:	1e 83       	std	Y+6, r17	; 0x06
    11ca:	0f 83       	std	Y+7, r16	; 0x07
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	88 23       	and	r24, r24
    11d0:	41 f0       	breq	.+16     	; 0x11e2 <_ZN17Adafruit_NeoPixel6setPinEi+0x3c>
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	81 2f       	mov	r24, r17
    11d6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	81 2f       	mov	r24, r17
    11de:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
    11e2:	81 2f       	mov	r24, r17
    11e4:	90 2f       	mov	r25, r16
    11e6:	fc 01       	movw	r30, r24
    11e8:	e0 57       	subi	r30, 0x70	; 112
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	e4 91       	lpm	r30, Z
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	e2 55       	subi	r30, 0x52	; 82
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	25 91       	lpm	r18, Z+
    11fa:	34 91       	lpm	r19, Z
    11fc:	3c 8b       	std	Y+20, r19	; 0x14
    11fe:	2b 8b       	std	Y+19, r18	; 0x13
    1200:	fc 01       	movw	r30, r24
    1202:	e4 58       	subi	r30, 0x84	; 132
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	e4 91       	lpm	r30, Z
    1208:	ed 8b       	std	Y+21, r30	; 0x15
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	08 95       	ret

00001214 <_ZN17Adafruit_NeoPixelC1Ejij>:
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
    1222:	7b 01       	movw	r14, r22
    1224:	8a 01       	movw	r16, r20
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	18 86       	std	Y+8, r1	; 0x08
    122a:	1a 86       	std	Y+10, r1	; 0x0a
    122c:	19 86       	std	Y+9, r1	; 0x09
    122e:	1f 86       	std	Y+15, r1	; 0x0f
    1230:	18 8a       	std	Y+16, r1	; 0x10
    1232:	19 8a       	std	Y+17, r1	; 0x11
    1234:	1a 8a       	std	Y+18, r1	; 0x12
    1236:	b9 01       	movw	r22, r18
    1238:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN17Adafruit_NeoPixel10updateTypeEj>
    123c:	b7 01       	movw	r22, r14
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN17Adafruit_NeoPixel12updateLengthEj>
    1244:	b8 01       	movw	r22, r16
    1246:	ce 01       	movw	r24, r28
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_ZN17Adafruit_NeoPixel6setPinEi>

00001258 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	fc 01       	movw	r30, r24
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	68 17       	cp	r22, r24
    127a:	79 07       	cpc	r23, r25
    127c:	08 f0       	brcs	.+2      	; 0x1280 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
    127e:	53 c0       	rjmp	.+166    	; 0x1326 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    1280:	4a 01       	movw	r8, r20
    1282:	aa 24       	eor	r10, r10
    1284:	bb 24       	eor	r11, r11
    1286:	78 2c       	mov	r7, r8
    1288:	c3 2e       	mov	r12, r19
    128a:	d4 2e       	mov	r13, r20
    128c:	e5 2e       	mov	r14, r21
    128e:	ff 24       	eor	r15, r15
    1290:	bc 2d       	mov	r27, r12
    1292:	a2 2f       	mov	r26, r18
    1294:	80 85       	ldd	r24, Z+8	; 0x08
    1296:	88 23       	and	r24, r24
    1298:	61 f0       	breq	.+24     	; 0x12b2 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
    129a:	88 9e       	mul	r8, r24
    129c:	40 01       	movw	r8, r0
    129e:	11 24       	eor	r1, r1
    12a0:	79 2c       	mov	r7, r9
    12a2:	8c 9d       	mul	r24, r12
    12a4:	60 01       	movw	r12, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	bd 2d       	mov	r27, r13
    12aa:	82 9f       	mul	r24, r18
    12ac:	70 01       	movw	r14, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	af 2d       	mov	r26, r15
    12b2:	96 85       	ldd	r25, Z+14	; 0x0e
    12b4:	d3 85       	ldd	r29, Z+11	; 0x0b
    12b6:	e1 84       	ldd	r14, Z+9	; 0x09
    12b8:	f2 84       	ldd	r15, Z+10	; 0x0a
    12ba:	9d 13       	cpse	r25, r29
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
    12be:	cb 01       	movw	r24, r22
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	68 0f       	add	r22, r24
    12c6:	79 1f       	adc	r23, r25
    12c8:	6e 0d       	add	r22, r14
    12ca:	7f 1d       	adc	r23, r15
    12cc:	1c c0       	rjmp	.+56     	; 0x1306 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	66 0f       	add	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	6e 0d       	add	r22, r14
    12d8:	7f 1d       	adc	r23, r15
    12da:	05 2f       	mov	r16, r21
    12dc:	11 27       	eor	r17, r17
    12de:	22 27       	eor	r18, r18
    12e0:	33 27       	eor	r19, r19
    12e2:	7b 01       	movw	r14, r22
    12e4:	e9 0e       	add	r14, r25
    12e6:	f1 1c       	adc	r15, r1
    12e8:	81 11       	cpse	r24, r1
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
    12ec:	20 2f       	mov	r18, r16
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	80 9f       	mul	r24, r16
    12f4:	60 01       	movw	r12, r0
    12f6:	81 9f       	mul	r24, r17
    12f8:	d0 0c       	add	r13, r0
    12fa:	90 9f       	mul	r25, r16
    12fc:	d0 0c       	add	r13, r0
    12fe:	11 24       	eor	r1, r1
    1300:	2d 2d       	mov	r18, r13
    1302:	e7 01       	movw	r28, r14
    1304:	28 83       	st	Y, r18
    1306:	83 85       	ldd	r24, Z+11	; 0x0b
    1308:	9b 01       	movw	r18, r22
    130a:	28 0f       	add	r18, r24
    130c:	31 1d       	adc	r19, r1
    130e:	e9 01       	movw	r28, r18
    1310:	78 82       	st	Y, r7
    1312:	84 85       	ldd	r24, Z+12	; 0x0c
    1314:	eb 01       	movw	r28, r22
    1316:	c8 0f       	add	r28, r24
    1318:	d1 1d       	adc	r29, r1
    131a:	b8 83       	st	Y, r27
    131c:	85 85       	ldd	r24, Z+13	; 0x0d
    131e:	fb 01       	movw	r30, r22
    1320:	e8 0f       	add	r30, r24
    1322:	f1 1d       	adc	r31, r1
    1324:	a0 83       	st	Z, r26
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	7f 90       	pop	r7
    1340:	08 95       	ret

00001342 <_ZN17Adafruit_NeoPixel5clearEv>:

/*!
  @brief   Fill the whole NeoPixel strip with 0 / black / off.
*/
void Adafruit_NeoPixel::clear(void) { memset(pixels, 0, numBytes); }
    1342:	fc 01       	movw	r30, r24
    1344:	44 81       	ldd	r20, Z+4	; 0x04
    1346:	55 81       	ldd	r21, Z+5	; 0x05
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	81 85       	ldd	r24, Z+9	; 0x09
    134e:	92 85       	ldd	r25, Z+10	; 0x0a
    1350:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <memset>

00001354 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1354:	08 95       	ret

00001356 <__udivmodsi4>:
    1356:	a1 e2       	ldi	r26, 0x21	; 33
    1358:	1a 2e       	mov	r1, r26
    135a:	aa 1b       	sub	r26, r26
    135c:	bb 1b       	sub	r27, r27
    135e:	fd 01       	movw	r30, r26
    1360:	0d c0       	rjmp	.+26     	; 0x137c <__udivmodsi4_ep>

00001362 <__udivmodsi4_loop>:
    1362:	aa 1f       	adc	r26, r26
    1364:	bb 1f       	adc	r27, r27
    1366:	ee 1f       	adc	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	a2 17       	cp	r26, r18
    136c:	b3 07       	cpc	r27, r19
    136e:	e4 07       	cpc	r30, r20
    1370:	f5 07       	cpc	r31, r21
    1372:	20 f0       	brcs	.+8      	; 0x137c <__udivmodsi4_ep>
    1374:	a2 1b       	sub	r26, r18
    1376:	b3 0b       	sbc	r27, r19
    1378:	e4 0b       	sbc	r30, r20
    137a:	f5 0b       	sbc	r31, r21

0000137c <__udivmodsi4_ep>:
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	1a 94       	dec	r1
    1386:	69 f7       	brne	.-38     	; 0x1362 <__udivmodsi4_loop>
    1388:	60 95       	com	r22
    138a:	70 95       	com	r23
    138c:	80 95       	com	r24
    138e:	90 95       	com	r25
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	bd 01       	movw	r22, r26
    1396:	cf 01       	movw	r24, r30
    1398:	08 95       	ret

0000139a <__divmodsi4>:
    139a:	05 2e       	mov	r0, r21
    139c:	97 fb       	bst	r25, 7
    139e:	1e f4       	brtc	.+6      	; 0x13a6 <__divmodsi4+0xc>
    13a0:	00 94       	com	r0
    13a2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__negsi2>
    13a6:	57 fd       	sbrc	r21, 7
    13a8:	07 d0       	rcall	.+14     	; 0x13b8 <__divmodsi4_neg2>
    13aa:	0e 94 ab 09 	call	0x1356	; 0x1356 <__udivmodsi4>
    13ae:	07 fc       	sbrc	r0, 7
    13b0:	03 d0       	rcall	.+6      	; 0x13b8 <__divmodsi4_neg2>
    13b2:	4e f4       	brtc	.+18     	; 0x13c6 <__divmodsi4_exit>
    13b4:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__negsi2>

000013b8 <__divmodsi4_neg2>:
    13b8:	50 95       	com	r21
    13ba:	40 95       	com	r20
    13bc:	30 95       	com	r19
    13be:	21 95       	neg	r18
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	4f 4f       	sbci	r20, 0xFF	; 255
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255

000013c6 <__divmodsi4_exit>:
    13c6:	08 95       	ret

000013c8 <__negsi2>:
    13c8:	90 95       	com	r25
    13ca:	80 95       	com	r24
    13cc:	70 95       	com	r23
    13ce:	61 95       	neg	r22
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	8f 4f       	sbci	r24, 0xFF	; 255
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__umulhisi3>:
    13d8:	a2 9f       	mul	r26, r18
    13da:	b0 01       	movw	r22, r0
    13dc:	b3 9f       	mul	r27, r19
    13de:	c0 01       	movw	r24, r0
    13e0:	a3 9f       	mul	r26, r19
    13e2:	70 0d       	add	r23, r0
    13e4:	81 1d       	adc	r24, r1
    13e6:	11 24       	eor	r1, r1
    13e8:	91 1d       	adc	r25, r1
    13ea:	b2 9f       	mul	r27, r18
    13ec:	70 0d       	add	r23, r0
    13ee:	81 1d       	adc	r24, r1
    13f0:	11 24       	eor	r1, r1
    13f2:	91 1d       	adc	r25, r1
    13f4:	08 95       	ret

000013f6 <__muluhisi3>:
    13f6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__umulhisi3>
    13fa:	a5 9f       	mul	r26, r21
    13fc:	90 0d       	add	r25, r0
    13fe:	b4 9f       	mul	r27, r20
    1400:	90 0d       	add	r25, r0
    1402:	a4 9f       	mul	r26, r20
    1404:	80 0d       	add	r24, r0
    1406:	91 1d       	adc	r25, r1
    1408:	11 24       	eor	r1, r1
    140a:	08 95       	ret

0000140c <__tablejump2__>:
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	05 90       	lpm	r0, Z+
    1412:	f4 91       	lpm	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	09 94       	ijmp

00001418 <malloc>:
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	10 f4       	brcc	.+4      	; 0x142a <malloc+0x12>
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <__flp>
    142e:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <__flp+0x1>
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	19 f1       	breq	.+70     	; 0x1484 <malloc+0x6c>
    143e:	40 81       	ld	r20, Z
    1440:	51 81       	ldd	r21, Z+1	; 0x01
    1442:	02 81       	ldd	r16, Z+2	; 0x02
    1444:	13 81       	ldd	r17, Z+3	; 0x03
    1446:	48 17       	cp	r20, r24
    1448:	59 07       	cpc	r21, r25
    144a:	c8 f0       	brcs	.+50     	; 0x147e <malloc+0x66>
    144c:	84 17       	cp	r24, r20
    144e:	95 07       	cpc	r25, r21
    1450:	69 f4       	brne	.+26     	; 0x146c <malloc+0x54>
    1452:	10 97       	sbiw	r26, 0x00	; 0
    1454:	31 f0       	breq	.+12     	; 0x1462 <malloc+0x4a>
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	0c 93       	st	X, r16
    145a:	12 97       	sbiw	r26, 0x02	; 2
    145c:	13 96       	adiw	r26, 0x03	; 3
    145e:	1c 93       	st	X, r17
    1460:	27 c0       	rjmp	.+78     	; 0x14b0 <malloc+0x98>
    1462:	00 93 f1 01 	sts	0x01F1, r16	; 0x8001f1 <__flp>
    1466:	10 93 f2 01 	sts	0x01F2, r17	; 0x8001f2 <__flp+0x1>
    146a:	22 c0       	rjmp	.+68     	; 0x14b0 <malloc+0x98>
    146c:	21 15       	cp	r18, r1
    146e:	31 05       	cpc	r19, r1
    1470:	19 f0       	breq	.+6      	; 0x1478 <malloc+0x60>
    1472:	42 17       	cp	r20, r18
    1474:	53 07       	cpc	r21, r19
    1476:	18 f4       	brcc	.+6      	; 0x147e <malloc+0x66>
    1478:	9a 01       	movw	r18, r20
    147a:	bd 01       	movw	r22, r26
    147c:	ef 01       	movw	r28, r30
    147e:	df 01       	movw	r26, r30
    1480:	f8 01       	movw	r30, r16
    1482:	db cf       	rjmp	.-74     	; 0x143a <malloc+0x22>
    1484:	21 15       	cp	r18, r1
    1486:	31 05       	cpc	r19, r1
    1488:	f9 f0       	breq	.+62     	; 0x14c8 <malloc+0xb0>
    148a:	28 1b       	sub	r18, r24
    148c:	39 0b       	sbc	r19, r25
    148e:	24 30       	cpi	r18, 0x04	; 4
    1490:	31 05       	cpc	r19, r1
    1492:	80 f4       	brcc	.+32     	; 0x14b4 <malloc+0x9c>
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	61 15       	cp	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	21 f0       	breq	.+8      	; 0x14a6 <malloc+0x8e>
    149e:	fb 01       	movw	r30, r22
    14a0:	93 83       	std	Z+3, r25	; 0x03
    14a2:	82 83       	std	Z+2, r24	; 0x02
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <malloc+0x96>
    14a6:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <__flp+0x1>
    14aa:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <__flp>
    14ae:	fe 01       	movw	r30, r28
    14b0:	32 96       	adiw	r30, 0x02	; 2
    14b2:	44 c0       	rjmp	.+136    	; 0x153c <malloc+0x124>
    14b4:	fe 01       	movw	r30, r28
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	81 93       	st	Z+, r24
    14bc:	91 93       	st	Z+, r25
    14be:	22 50       	subi	r18, 0x02	; 2
    14c0:	31 09       	sbc	r19, r1
    14c2:	39 83       	std	Y+1, r19	; 0x01
    14c4:	28 83       	st	Y, r18
    14c6:	3a c0       	rjmp	.+116    	; 0x153c <malloc+0x124>
    14c8:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <__brkval>
    14cc:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <__brkval+0x1>
    14d0:	23 2b       	or	r18, r19
    14d2:	41 f4       	brne	.+16     	; 0x14e4 <malloc+0xcc>
    14d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    14d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    14dc:	30 93 f0 01 	sts	0x01F0, r19	; 0x8001f0 <__brkval+0x1>
    14e0:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <__brkval>
    14e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    14e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	41 f4       	brne	.+16     	; 0x1502 <malloc+0xea>
    14f2:	2d b7       	in	r18, 0x3d	; 61
    14f4:	3e b7       	in	r19, 0x3e	; 62
    14f6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    14fa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    14fe:	24 1b       	sub	r18, r20
    1500:	35 0b       	sbc	r19, r21
    1502:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <__brkval>
    1506:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <__brkval+0x1>
    150a:	e2 17       	cp	r30, r18
    150c:	f3 07       	cpc	r31, r19
    150e:	a0 f4       	brcc	.+40     	; 0x1538 <malloc+0x120>
    1510:	2e 1b       	sub	r18, r30
    1512:	3f 0b       	sbc	r19, r31
    1514:	28 17       	cp	r18, r24
    1516:	39 07       	cpc	r19, r25
    1518:	78 f0       	brcs	.+30     	; 0x1538 <malloc+0x120>
    151a:	ac 01       	movw	r20, r24
    151c:	4e 5f       	subi	r20, 0xFE	; 254
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	24 17       	cp	r18, r20
    1522:	35 07       	cpc	r19, r21
    1524:	48 f0       	brcs	.+18     	; 0x1538 <malloc+0x120>
    1526:	4e 0f       	add	r20, r30
    1528:	5f 1f       	adc	r21, r31
    152a:	50 93 f0 01 	sts	0x01F0, r21	; 0x8001f0 <__brkval+0x1>
    152e:	40 93 ef 01 	sts	0x01EF, r20	; 0x8001ef <__brkval>
    1532:	81 93       	st	Z+, r24
    1534:	91 93       	st	Z+, r25
    1536:	02 c0       	rjmp	.+4      	; 0x153c <malloc+0x124>
    1538:	e0 e0       	ldi	r30, 0x00	; 0
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	cf 01       	movw	r24, r30
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <free>:
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f4       	brne	.+2      	; 0x1552 <free+0xa>
    1550:	81 c0       	rjmp	.+258    	; 0x1654 <free+0x10c>
    1552:	fc 01       	movw	r30, r24
    1554:	32 97       	sbiw	r30, 0x02	; 2
    1556:	13 82       	std	Z+3, r1	; 0x03
    1558:	12 82       	std	Z+2, r1	; 0x02
    155a:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <__flp>
    155e:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <__flp+0x1>
    1562:	10 97       	sbiw	r26, 0x00	; 0
    1564:	81 f4       	brne	.+32     	; 0x1586 <free+0x3e>
    1566:	20 81       	ld	r18, Z
    1568:	31 81       	ldd	r19, Z+1	; 0x01
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <__brkval>
    1572:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <__brkval+0x1>
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	51 f5       	brne	.+84     	; 0x15d0 <free+0x88>
    157c:	f0 93 f0 01 	sts	0x01F0, r31	; 0x8001f0 <__brkval+0x1>
    1580:	e0 93 ef 01 	sts	0x01EF, r30	; 0x8001ef <__brkval>
    1584:	67 c0       	rjmp	.+206    	; 0x1654 <free+0x10c>
    1586:	ed 01       	movw	r28, r26
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	ce 17       	cp	r28, r30
    158e:	df 07       	cpc	r29, r31
    1590:	40 f4       	brcc	.+16     	; 0x15a2 <free+0x5a>
    1592:	4a 81       	ldd	r20, Y+2	; 0x02
    1594:	5b 81       	ldd	r21, Y+3	; 0x03
    1596:	9e 01       	movw	r18, r28
    1598:	41 15       	cp	r20, r1
    159a:	51 05       	cpc	r21, r1
    159c:	f1 f0       	breq	.+60     	; 0x15da <free+0x92>
    159e:	ea 01       	movw	r28, r20
    15a0:	f5 cf       	rjmp	.-22     	; 0x158c <free+0x44>
    15a2:	d3 83       	std	Z+3, r29	; 0x03
    15a4:	c2 83       	std	Z+2, r28	; 0x02
    15a6:	40 81       	ld	r20, Z
    15a8:	51 81       	ldd	r21, Z+1	; 0x01
    15aa:	84 0f       	add	r24, r20
    15ac:	95 1f       	adc	r25, r21
    15ae:	c8 17       	cp	r28, r24
    15b0:	d9 07       	cpc	r29, r25
    15b2:	59 f4       	brne	.+22     	; 0x15ca <free+0x82>
    15b4:	88 81       	ld	r24, Y
    15b6:	99 81       	ldd	r25, Y+1	; 0x01
    15b8:	84 0f       	add	r24, r20
    15ba:	95 1f       	adc	r25, r21
    15bc:	02 96       	adiw	r24, 0x02	; 2
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	80 83       	st	Z, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	93 83       	std	Z+3, r25	; 0x03
    15c8:	82 83       	std	Z+2, r24	; 0x02
    15ca:	21 15       	cp	r18, r1
    15cc:	31 05       	cpc	r19, r1
    15ce:	29 f4       	brne	.+10     	; 0x15da <free+0x92>
    15d0:	f0 93 f2 01 	sts	0x01F2, r31	; 0x8001f2 <__flp+0x1>
    15d4:	e0 93 f1 01 	sts	0x01F1, r30	; 0x8001f1 <__flp>
    15d8:	3d c0       	rjmp	.+122    	; 0x1654 <free+0x10c>
    15da:	e9 01       	movw	r28, r18
    15dc:	fb 83       	std	Y+3, r31	; 0x03
    15de:	ea 83       	std	Y+2, r30	; 0x02
    15e0:	49 91       	ld	r20, Y+
    15e2:	59 91       	ld	r21, Y+
    15e4:	c4 0f       	add	r28, r20
    15e6:	d5 1f       	adc	r29, r21
    15e8:	ec 17       	cp	r30, r28
    15ea:	fd 07       	cpc	r31, r29
    15ec:	61 f4       	brne	.+24     	; 0x1606 <free+0xbe>
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	84 0f       	add	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	02 96       	adiw	r24, 0x02	; 2
    15f8:	e9 01       	movw	r28, r18
    15fa:	99 83       	std	Y+1, r25	; 0x01
    15fc:	88 83       	st	Y, r24
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	9b 83       	std	Y+3, r25	; 0x03
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	e0 e0       	ldi	r30, 0x00	; 0
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	8d 91       	ld	r24, X+
    160e:	9c 91       	ld	r25, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	19 f0       	breq	.+6      	; 0x161c <free+0xd4>
    1616:	fd 01       	movw	r30, r26
    1618:	dc 01       	movw	r26, r24
    161a:	f7 cf       	rjmp	.-18     	; 0x160a <free+0xc2>
    161c:	8d 91       	ld	r24, X+
    161e:	9c 91       	ld	r25, X
    1620:	11 97       	sbiw	r26, 0x01	; 1
    1622:	9d 01       	movw	r18, r26
    1624:	2e 5f       	subi	r18, 0xFE	; 254
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <__brkval>
    1630:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <__brkval+0x1>
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	69 f4       	brne	.+26     	; 0x1654 <free+0x10c>
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	29 f4       	brne	.+10     	; 0x1648 <free+0x100>
    163e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <__flp+0x1>
    1642:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__flp>
    1646:	02 c0       	rjmp	.+4      	; 0x164c <free+0x104>
    1648:	13 82       	std	Z+3, r1	; 0x03
    164a:	12 82       	std	Z+2, r1	; 0x02
    164c:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <__brkval+0x1>
    1650:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <__brkval>
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <random_r>:
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    1670:	68 81       	ld	r22, Y
    1672:	79 81       	ldd	r23, Y+1	; 0x01
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	61 15       	cp	r22, r1
    167a:	71 05       	cpc	r23, r1
    167c:	81 05       	cpc	r24, r1
    167e:	91 05       	cpc	r25, r1
    1680:	21 f4       	brne	.+8      	; 0x168a <random_r+0x30>
    1682:	64 e2       	ldi	r22, 0x24	; 36
    1684:	79 ed       	ldi	r23, 0xD9	; 217
    1686:	8b e5       	ldi	r24, 0x5B	; 91
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	2d e1       	ldi	r18, 0x1D	; 29
    168c:	33 ef       	ldi	r19, 0xF3	; 243
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	0e 94 cd 09 	call	0x139a	; 0x139a <__divmodsi4>
    1696:	49 01       	movw	r8, r18
    1698:	5a 01       	movw	r10, r20
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	a7 ea       	ldi	r26, 0xA7	; 167
    16a0:	b1 e4       	ldi	r27, 0x41	; 65
    16a2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__muluhisi3>
    16a6:	6b 01       	movw	r12, r22
    16a8:	7c 01       	movw	r14, r24
    16aa:	ac ee       	ldi	r26, 0xEC	; 236
    16ac:	b4 ef       	ldi	r27, 0xF4	; 244
    16ae:	a5 01       	movw	r20, r10
    16b0:	94 01       	movw	r18, r8
    16b2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulohisi3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	8c 0d       	add	r24, r12
    16bc:	9d 1d       	adc	r25, r13
    16be:	ae 1d       	adc	r26, r14
    16c0:	bf 1d       	adc	r27, r15
    16c2:	b7 ff       	sbrs	r27, 7
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <random_r+0x72>
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	a1 09       	sbc	r26, r1
    16ca:	b0 48       	sbci	r27, 0x80	; 128
    16cc:	88 83       	st	Y, r24
    16ce:	99 83       	std	Y+1, r25	; 0x01
    16d0:	aa 83       	std	Y+2, r26	; 0x02
    16d2:	bb 83       	std	Y+3, r27	; 0x03
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	9f 77       	andi	r25, 0x7F	; 127
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	08 95       	ret

000016f0 <random>:
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    1704:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    1708:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    170c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    1710:	61 15       	cp	r22, r1
    1712:	71 05       	cpc	r23, r1
    1714:	81 05       	cpc	r24, r1
    1716:	91 05       	cpc	r25, r1
    1718:	21 f4       	brne	.+8      	; 0x1722 <random+0x32>
    171a:	64 e2       	ldi	r22, 0x24	; 36
    171c:	79 ed       	ldi	r23, 0xD9	; 217
    171e:	8b e5       	ldi	r24, 0x5B	; 91
    1720:	97 e0       	ldi	r25, 0x07	; 7
    1722:	2d e1       	ldi	r18, 0x1D	; 29
    1724:	33 ef       	ldi	r19, 0xF3	; 243
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0e 94 cd 09 	call	0x139a	; 0x139a <__divmodsi4>
    172e:	49 01       	movw	r8, r18
    1730:	5a 01       	movw	r10, r20
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	a7 ea       	ldi	r26, 0xA7	; 167
    1738:	b1 e4       	ldi	r27, 0x41	; 65
    173a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__muluhisi3>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	ac ee       	ldi	r26, 0xEC	; 236
    1744:	b4 ef       	ldi	r27, 0xF4	; 244
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulohisi3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8c 0d       	add	r24, r12
    1754:	9d 1d       	adc	r25, r13
    1756:	ae 1d       	adc	r26, r14
    1758:	bf 1d       	adc	r27, r15
    175a:	b7 ff       	sbrs	r27, 7
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <random+0x74>
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	a1 09       	sbc	r26, r1
    1762:	b0 48       	sbci	r27, 0x80	; 128
    1764:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1768:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    176c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1770:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	9f 77       	andi	r25, 0x7F	; 127
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	08 95       	ret

0000178c <srandom>:
    178c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    1790:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    1794:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    1798:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    179c:	08 95       	ret

0000179e <memset>:
    179e:	dc 01       	movw	r26, r24
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <memset+0x6>
    17a2:	6d 93       	st	X+, r22
    17a4:	41 50       	subi	r20, 0x01	; 1
    17a6:	50 40       	sbci	r21, 0x00	; 0
    17a8:	e0 f7       	brcc	.-8      	; 0x17a2 <memset+0x4>
    17aa:	08 95       	ret

000017ac <__mulshisi3>:
    17ac:	b7 ff       	sbrs	r27, 7
    17ae:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__muluhisi3>

000017b2 <__mulohisi3>:
    17b2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__muluhisi3>
    17b6:	82 1b       	sub	r24, r18
    17b8:	93 0b       	sbc	r25, r19
    17ba:	08 95       	ret

000017bc <__do_global_dtors>:
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	c3 e6       	ldi	r28, 0x63	; 99
    17c0:	d0 e0       	ldi	r29, 0x00	; 0
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <__do_global_dtors+0x10>
    17c4:	fe 01       	movw	r30, r28
    17c6:	0e 94 06 0a 	call	0x140c	; 0x140c <__tablejump2__>
    17ca:	21 96       	adiw	r28, 0x01	; 1
    17cc:	c4 36       	cpi	r28, 0x64	; 100
    17ce:	d1 07       	cpc	r29, r17
    17d0:	c9 f7       	brne	.-14     	; 0x17c4 <__do_global_dtors+0x8>
    17d2:	f8 94       	cli

000017d4 <__stop_program>:
    17d4:	ff cf       	rjmp	.-2      	; 0x17d4 <__stop_program>
