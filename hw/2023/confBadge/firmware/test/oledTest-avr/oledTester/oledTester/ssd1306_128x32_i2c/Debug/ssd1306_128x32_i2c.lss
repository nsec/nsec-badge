
ssd1306_128x32_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000062d2  00006366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b8  00800196  00800196  000063fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000642c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018914  00000000  00000000  00006dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034f3  00000000  00000000  0001f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d25  00000000  00000000  00022bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002960  00000000  00000000  000298f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004d83  00000000  00000000  0002c258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000142bd  00000000  00000000  00030fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b48  00000000  00000000  00045298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__dtors_end>
       4:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
       8:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
       c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      10:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      14:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      18:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      1c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      20:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      24:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      28:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      2c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      30:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      34:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      38:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      3c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      40:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__vector_16>
      44:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      48:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_18>
      4c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_19>
      50:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      54:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      58:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      5c:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>
      60:	0c 94 ac 2b 	jmp	0x5758	; 0x5758 <__vector_24>
      64:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 64       	ori	r18, 0x40	; 64
      6a:	79 3a       	cpi	r23, 0xA9	; 169
      6c:	20 00       	.word	0x0020	; ????

0000006e <_ZZ11testanimatePKhhhE3__c_0>:
      6e:	20 79 3a 20 00                                       y: .

00000073 <_ZZ11testanimatePKhhhE3__c>:
      73:	78 3a 20 00                                         x: .

00000077 <_ZZ14testscrolltextvE3__c>:
      77:	73 63 72 6f 6c 6c 00                                scroll.

0000007e <_ZZ14testdrawstylesvE3__c_0>:
      7e:	30 78 00                                            0x.

00000081 <_ZZ14testdrawstylesvE3__c>:
      81:	48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21 00           Hello, world!.

0000008f <_ZZ5setupE3__c>:
      8f:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
      9f:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

000000a9 <_ZL8logo_bmp>:
      a9:	00 c0 01 c0 01 c0 03 e0 f3 e0 fe f8 7e ff 33 9f     ............~.3.
      b9:	1f fc 0d 70 1b a0 3f e0 3f f0 7c f0 70 70 00 30     ...p..?.?.|.pp.0

000000c9 <_ZL4font>:
      c9:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      d9:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      e9:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
      f9:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     109:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     119:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     129:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     139:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     149:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     159:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     169:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     179:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     189:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     199:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1a9:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1b9:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1c9:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1d9:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1e9:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     1f9:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     209:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     219:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     229:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     239:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     249:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     259:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     269:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     279:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     289:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     299:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2a9:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2b9:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2c9:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2d9:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2e9:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2f9:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     309:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     319:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     329:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     339:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     349:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     359:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     369:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     379:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     389:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     399:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3a9:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3b9:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3c9:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3d9:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3e9:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     3f9:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     409:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     419:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     429:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     439:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     449:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     459:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     469:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     479:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     489:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     499:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4a9:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4b9:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4c9:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4d9:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4e9:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     4f9:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     509:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     519:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     529:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     539:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     549:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     559:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     569:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     579:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     589:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     599:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5a9:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5b9:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005c9 <_ZZN16Adafruit_SSD130619startscrolldiagleftEhhE12scrollList4c>:
     5c9:	01 2f                                               ./

000005cb <_ZZN16Adafruit_SSD130619startscrolldiagleftEhhE12scrollList4b>:
     5cb:	2a 00                                               *.

000005cd <_ZZN16Adafruit_SSD130619startscrolldiagleftEhhE12scrollList4a>:
     5cd:	a3 00                                               ..

000005cf <_ZZN16Adafruit_SSD130620startscrolldiagrightEhhE12scrollList3c>:
     5cf:	01 2f                                               ./

000005d1 <_ZZN16Adafruit_SSD130620startscrolldiagrightEhhE12scrollList3b>:
     5d1:	29 00                                               ).

000005d3 <_ZZN16Adafruit_SSD130620startscrolldiagrightEhhE12scrollList3a>:
     5d3:	a3 00                                               ..

000005d5 <_ZZN16Adafruit_SSD130615startscrollleftEhhE12scrollList2b>:
     5d5:	00 ff 2f                                            ../

000005d8 <_ZZN16Adafruit_SSD130615startscrollleftEhhE12scrollList2a>:
     5d8:	27 00                                               '.

000005da <_ZZN16Adafruit_SSD130616startscrollrightEhhE12scrollList1b>:
     5da:	00 ff 2f                                            ../

000005dd <_ZZN16Adafruit_SSD130616startscrollrightEhhE12scrollList1a>:
     5dd:	26 00                                               &.

000005df <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     5df:	22 00 ff 21 00                                      "..!.

000005e4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     5e4:	00 01 03 07 0f 1f 3f 7f                             ......?.

000005ec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     5ec:	00 80 c0 e0 f0 f8 fc fe                             ........

000005f4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     5f4:	db 40 a4 a6 2e af                                   .@....

000005fa <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     5fa:	20 00 a1 c8                                          ...

000005fe <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     5fe:	d3 00 40 8d                                         ..@.

00000602 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     602:	ae d5 80 a8                                         ....

00000606 <_ZL12splash2_data>:
     606:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     616:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     626:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     642:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     652:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     662:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     672:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     682:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     692:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6a2:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     6b2:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     6c2:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     6d2:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     6e2:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     6f2:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     702:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     712:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     722:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     732:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     742:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     752:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     762:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     772:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     782:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     79a:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     7aa:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     7ba:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     7ca:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     7da:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

000007e6 <_ZL12splash1_data>:
     7e6:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     7f6:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     806:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     816:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     826:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     836:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     84e:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     85e:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     86e:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     87e:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     88e:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     89e:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     8ae:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     8be:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     8ce:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     8de:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     8ee:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     8fe:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     90e:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     91e:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     92e:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     93e:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     94e:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     95e:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     976:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     98e:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     99e:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     9ae:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     9be:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     9ce:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     9de:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     9ee:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     9fe:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a0e:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a1e:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a2e:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a3e:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     a4e:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     a5e:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     a6e:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     a7e:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     a8e:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     a9e:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000aa6 <digital_pin_to_timer_PGM>:
     aa6:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     ab6:	00 00 00 00                                         ....

00000aba <digital_pin_to_bit_mask_PGM>:
     aba:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     aca:	04 08 10 20                                         ... 

00000ace <digital_pin_to_port_PGM>:
     ace:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     ade:	03 03 03 03                                         ....

00000ae2 <port_to_output_PGM>:
     ae2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000aec <port_to_mode_PGM>:
     aec:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000af6 <__ctors_start>:
     af6:	7b 09       	sbc	r23, r11
     af8:	f9 0d       	add	r31, r9
     afa:	5c 29       	or	r21, r12

00000afc <__ctors_end>:
     afc:	a5 09       	sbc	r26, r5

00000afe <__dtors_end>:
     afe:	11 24       	eor	r1, r1
     b00:	1f be       	out	0x3f, r1	; 63
     b02:	cf ef       	ldi	r28, 0xFF	; 255
     b04:	d8 e0       	ldi	r29, 0x08	; 8
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	cd bf       	out	0x3d, r28	; 61

00000b0a <__do_copy_data>:
     b0a:	11 e0       	ldi	r17, 0x01	; 1
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b1 e0       	ldi	r27, 0x01	; 1
     b10:	e2 ed       	ldi	r30, 0xD2	; 210
     b12:	f2 e6       	ldi	r31, 0x62	; 98
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__do_copy_data+0x10>
     b16:	05 90       	lpm	r0, Z+
     b18:	0d 92       	st	X+, r0
     b1a:	a6 39       	cpi	r26, 0x96	; 150
     b1c:	b1 07       	cpc	r27, r17
     b1e:	d9 f7       	brne	.-10     	; 0xb16 <__do_copy_data+0xc>

00000b20 <__do_clear_bss>:
     b20:	23 e0       	ldi	r18, 0x03	; 3
     b22:	a6 e9       	ldi	r26, 0x96	; 150
     b24:	b1 e0       	ldi	r27, 0x01	; 1
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <.do_clear_bss_start>

00000b28 <.do_clear_bss_loop>:
     b28:	1d 92       	st	X+, r1

00000b2a <.do_clear_bss_start>:
     b2a:	ae 34       	cpi	r26, 0x4E	; 78
     b2c:	b2 07       	cpc	r27, r18
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <.do_clear_bss_loop>

00000b30 <__do_global_ctors>:
     b30:	15 e0       	ldi	r17, 0x05	; 5
     b32:	ce e7       	ldi	r28, 0x7E	; 126
     b34:	d5 e0       	ldi	r29, 0x05	; 5
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__do_global_ctors+0x10>
     b38:	21 97       	sbiw	r28, 0x01	; 1
     b3a:	fe 01       	movw	r30, r28
     b3c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__tablejump2__>
     b40:	cb 37       	cpi	r28, 0x7B	; 123
     b42:	d1 07       	cpc	r29, r17
     b44:	c9 f7       	brne	.-14     	; 0xb38 <__do_global_ctors+0x8>
     b46:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <main>
     b4a:	0c 94 5c 31 	jmp	0x62b8	; 0x62b8 <__do_global_dtors>

00000b4e <__bad_interrupt>:
     b4e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b52 <loop>:
  delay(1000);

  testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
}

void loop() {
     b52:	08 95       	ret

00000b54 <_Z14testdrawcirclev>:
  }

  delay(2000);
}

void testdrawcircle(void) {
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
  display.clearDisplay();
     b5c:	86 e9       	ldi	r24, 0x96	; 150
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0
     b68:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
     b6c:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
     b70:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
     b74:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
     b78:	46 17       	cp	r20, r22
     b7a:	57 07       	cpc	r21, r23
     b7c:	24 f4       	brge	.+8      	; 0xb86 <_Z14testdrawcirclev+0x32>
     b7e:	cb 01       	movw	r24, r22
     b80:	77 ff       	sbrs	r23, 7
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <_Z14testdrawcirclev+0x38>
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <_Z14testdrawcirclev+0x36>
     b86:	ca 01       	movw	r24, r20
     b88:	57 fd       	sbrc	r21, 7
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	95 95       	asr	r25
     b8e:	87 95       	ror	r24
     b90:	c8 17       	cp	r28, r24
     b92:	d9 07       	cpc	r29, r25
     b94:	fc f4       	brge	.+62     	; 0xbd4 <_Z14testdrawcirclev+0x80>
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
     b96:	57 ff       	sbrs	r21, 7
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_Z14testdrawcirclev+0x4a>
     b9a:	4f 5f       	subi	r20, 0xFF	; 255
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	55 95       	asr	r21
     ba0:	47 95       	ror	r20
     ba2:	77 ff       	sbrs	r23, 7
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <_Z14testdrawcirclev+0x56>
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	75 95       	asr	r23
     bac:	67 95       	ror	r22
     bae:	01 e0       	ldi	r16, 0x01	; 1
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	9e 01       	movw	r18, r28
     bb4:	86 e9       	ldi	r24, 0x96	; 150
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 4e 14 	call	0x289c	; 0x289c <_ZN12Adafruit_GFX10drawCircleEiiij>
    display.display();
     bbc:	86 e9       	ldi	r24, 0x96	; 150
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
     bd0:	22 96       	adiw	r28, 0x02	; 2
     bd2:	ca cf       	rjmp	.-108    	; 0xb68 <_Z14testdrawcirclev+0x14>
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     bd4:	60 ed       	ldi	r22, 0xD0	; 208
     bd6:	77 e0       	ldi	r23, 0x07	; 7
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     be4:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000be8 <_Z14testfillcirclev>:
}

void testfillcircle(void) {
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
  display.clearDisplay();
     bf0:	86 e9       	ldi	r24, 0x96	; 150
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>
     bf8:	c0 91 9e 01 	lds	r28, 0x019E	; 0x80019e <__data_end+0x8>
     bfc:	d0 91 9f 01 	lds	r29, 0x019F	; 0x80019f <__data_end+0x9>
     c00:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0xa>
     c04:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0xb>

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
     c08:	8c 17       	cp	r24, r28
     c0a:	9d 07       	cpc	r25, r29
     c0c:	0c f0       	brlt	.+2      	; 0xc10 <_Z14testfillcirclev+0x28>
     c0e:	ec 01       	movw	r28, r24
     c10:	d7 fd       	sbrc	r29, 7
     c12:	21 96       	adiw	r28, 0x01	; 1
     c14:	d5 95       	asr	r29
     c16:	c7 95       	ror	r28
     c18:	1c 16       	cp	r1, r28
     c1a:	1d 06       	cpc	r1, r29
     c1c:	3c f5       	brge	.+78     	; 0xc6c <_Z14testfillcirclev+0x84>
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
     c1e:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
     c22:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
     c26:	57 ff       	sbrs	r21, 7
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <_Z14testfillcirclev+0x46>
     c2a:	4f 5f       	subi	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	55 95       	asr	r21
     c30:	47 95       	ror	r20
     c32:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
     c36:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
     c3a:	77 ff       	sbrs	r23, 7
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <_Z14testfillcirclev+0x5a>
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	75 95       	asr	r23
     c44:	67 95       	ror	r22
     c46:	02 e0       	ldi	r16, 0x02	; 2
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	9e 01       	movw	r18, r28
     c4c:	86 e9       	ldi	r24, 0x96	; 150
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN12Adafruit_GFX10fillCircleEiiij>
    display.display(); // Update screen with each newly-drawn circle
     c54:	86 e9       	ldi	r24, 0x96	; 150
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
     c68:	23 97       	sbiw	r28, 0x03	; 3
     c6a:	d6 cf       	rjmp	.-84     	; 0xc18 <_Z14testfillcirclev+0x30>
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
     c6c:	60 ed       	ldi	r22, 0xD0	; 208
     c6e:	77 e0       	ldi	r23, 0x07	; 7
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
     c7c:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000c80 <_Z17testdrawroundrectv>:
}

void testdrawroundrect(void) {
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
  display.clearDisplay();
     c90:	86 e9       	ldi	r24, 0x96	; 150
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
     c98:	c0 e0       	ldi	r28, 0x00	; 0
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
     ca0:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
     ca4:	c8 01       	movw	r24, r16
     ca6:	17 fd       	sbrc	r17, 7
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	95 95       	asr	r25
     cac:	87 95       	ror	r24
     cae:	02 97       	sbiw	r24, 0x02	; 2
     cb0:	c8 17       	cp	r28, r24
     cb2:	d9 07       	cpc	r29, r25
     cb4:	54 f5       	brge	.+84     	; 0xd0a <_Z17testdrawroundrectv+0x8a>
     cb6:	ce 01       	movw	r24, r28
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_WHITE);
     cbc:	78 01       	movw	r14, r16
     cbe:	17 ff       	sbrs	r17, 7
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <_Z17testdrawroundrectv+0x48>
     cc2:	23 e0       	ldi	r18, 0x03	; 3
     cc4:	e2 0e       	add	r14, r18
     cc6:	f1 1c       	adc	r15, r1
     cc8:	f5 94       	asr	r15
     cca:	e7 94       	ror	r14
     ccc:	f5 94       	asr	r15
     cce:	e7 94       	ror	r14
     cd0:	08 1b       	sub	r16, r24
     cd2:	19 0b       	sbc	r17, r25
     cd4:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
     cd8:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
     cdc:	28 1b       	sub	r18, r24
     cde:	39 0b       	sbc	r19, r25
     ce0:	cc 24       	eor	r12, r12
     ce2:	c3 94       	inc	r12
     ce4:	d1 2c       	mov	r13, r1
     ce6:	ae 01       	movw	r20, r28
     ce8:	be 01       	movw	r22, r28
     cea:	86 e9       	ldi	r24, 0x96	; 150
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>
    display.display();
     cf2:	86 e9       	ldi	r24, 0x96	; 150
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
     d06:	22 96       	adiw	r28, 0x02	; 2
     d08:	c9 cf       	rjmp	.-110    	; 0xc9c <_Z17testdrawroundrectv+0x1c>
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     d0a:	60 ed       	ldi	r22, 0xD0	; 208
     d0c:	77 e0       	ldi	r23, 0x07	; 7
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     d22:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000d26 <_Z17testfillroundrectv>:
}

void testfillroundrect(void) {
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
  display.clearDisplay();
     d36:	86 e9       	ldi	r24, 0x96	; 150
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
     d46:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
     d4a:	c8 01       	movw	r24, r16
     d4c:	17 fd       	sbrc	r17, 7
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	95 95       	asr	r25
     d52:	87 95       	ror	r24
     d54:	02 97       	sbiw	r24, 0x02	; 2
     d56:	c8 17       	cp	r28, r24
     d58:	d9 07       	cpc	r29, r25
     d5a:	54 f5       	brge	.+84     	; 0xdb0 <_Z17testfillroundrectv+0x8a>
     d5c:	ce 01       	movw	r24, r28
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_INVERSE);
     d62:	78 01       	movw	r14, r16
     d64:	17 ff       	sbrs	r17, 7
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <_Z17testfillroundrectv+0x48>
     d68:	23 e0       	ldi	r18, 0x03	; 3
     d6a:	e2 0e       	add	r14, r18
     d6c:	f1 1c       	adc	r15, r1
     d6e:	f5 94       	asr	r15
     d70:	e7 94       	ror	r14
     d72:	f5 94       	asr	r15
     d74:	e7 94       	ror	r14
     d76:	08 1b       	sub	r16, r24
     d78:	19 0b       	sbc	r17, r25
     d7a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
     d7e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
     d82:	28 1b       	sub	r18, r24
     d84:	39 0b       	sbc	r19, r25
     d86:	42 e0       	ldi	r20, 0x02	; 2
     d88:	c4 2e       	mov	r12, r20
     d8a:	d1 2c       	mov	r13, r1
     d8c:	ae 01       	movw	r20, r28
     d8e:	be 01       	movw	r22, r28
     d90:	86 e9       	ldi	r24, 0x96	; 150
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij>
    display.display();
     d98:	86 e9       	ldi	r24, 0x96	; 150
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testfillroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
     dac:	22 96       	adiw	r28, 0x02	; 2
     dae:	c9 cf       	rjmp	.-110    	; 0xd42 <_Z17testfillroundrectv+0x1c>
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
     db0:	60 ed       	ldi	r22, 0xD0	; 208
     db2:	77 e0       	ldi	r23, 0x07	; 7
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
     dc8:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000dcc <_Z16testdrawtrianglev>:
}

void testdrawtriangle(void) {
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
  display.clearDisplay();
     de0:	86 e9       	ldi	r24, 0x96	; 150
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
     de8:	c0 e0       	ldi	r28, 0x00	; 0
     dea:	d0 e0       	ldi	r29, 0x00	; 0
     dec:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
     df0:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
     df4:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
     df8:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
     dfc:	46 17       	cp	r20, r22
     dfe:	57 07       	cpc	r21, r23
     e00:	24 f4       	brge	.+8      	; 0xe0a <_Z16testdrawtrianglev+0x3e>
     e02:	cb 01       	movw	r24, r22
     e04:	77 ff       	sbrs	r23, 7
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <_Z16testdrawtrianglev+0x44>
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <_Z16testdrawtrianglev+0x42>
     e0a:	ca 01       	movw	r24, r20
     e0c:	57 fd       	sbrc	r21, 7
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	95 95       	asr	r25
     e12:	87 95       	ror	r24
     e14:	c8 17       	cp	r28, r24
     e16:	d9 07       	cpc	r29, r25
     e18:	5c f5       	brge	.+86     	; 0xe70 <_Z16testdrawtrianglev+0xa4>
    display.drawTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
     e1a:	57 ff       	sbrs	r21, 7
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <_Z16testdrawtrianglev+0x56>
     e1e:	4f 5f       	subi	r20, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	55 95       	asr	r21
     e24:	47 95       	ror	r20

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(
     e26:	8e 01       	movw	r16, r28
     e28:	04 0f       	add	r16, r20
     e2a:	15 1f       	adc	r17, r21
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
     e2c:	77 ff       	sbrs	r23, 7
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <_Z16testdrawtrianglev+0x68>
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	75 95       	asr	r23
     e36:	67 95       	ror	r22
     e38:	7e 01       	movw	r14, r28
     e3a:	e6 0e       	add	r14, r22
     e3c:	f7 1e       	adc	r15, r23
     e3e:	9b 01       	movw	r18, r22
     e40:	2c 1b       	sub	r18, r28
     e42:	3d 0b       	sbc	r19, r29
     e44:	4c 1b       	sub	r20, r28
     e46:	5d 0b       	sbc	r21, r29
     e48:	aa 24       	eor	r10, r10
     e4a:	a3 94       	inc	r10
     e4c:	b1 2c       	mov	r11, r1
     e4e:	68 01       	movw	r12, r16
     e50:	86 e9       	ldi	r24, 0x96	; 150
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 48 19 	call	0x3290	; 0x3290 <_ZN12Adafruit_GFX12drawTriangleEiiiiiij>
    display.display();
     e58:	86 e9       	ldi	r24, 0x96	; 150
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
     e6c:	25 96       	adiw	r28, 0x05	; 5
     e6e:	be cf       	rjmp	.-132    	; 0xdec <_Z16testdrawtrianglev+0x20>
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     e70:	60 ed       	ldi	r22, 0xD0	; 208
     e72:	77 e0       	ldi	r23, 0x07	; 7
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
     e8c:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000e90 <_Z16testfilltrianglev>:
}

void testfilltriangle(void) {
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
  display.clearDisplay();
     ea4:	86 e9       	ldi	r24, 0x96	; 150
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>
     eac:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end+0x8>
     eb0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x9>
     eb4:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <__data_end+0xa>
     eb8:	d0 91 a1 01 	lds	r29, 0x01A1	; 0x8001a1 <__data_end+0xb>

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
     ebc:	c8 17       	cp	r28, r24
     ebe:	d9 07       	cpc	r29, r25
     ec0:	0c f4       	brge	.+2      	; 0xec4 <_Z16testfilltrianglev+0x34>
     ec2:	ec 01       	movw	r28, r24
     ec4:	d7 fd       	sbrc	r29, 7
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	d5 95       	asr	r29
     eca:	c7 95       	ror	r28
     ecc:	1c 16       	cp	r1, r28
     ece:	1d 06       	cpc	r1, r29
     ed0:	9c f5       	brge	.+102    	; 0xf38 <_Z16testfilltrianglev+0xa8>
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
     ed2:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
     ed6:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
     eda:	57 ff       	sbrs	r21, 7
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z16testfilltrianglev+0x52>
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	55 95       	asr	r21
     ee4:	47 95       	ror	r20
void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
     ee6:	8e 01       	movw	r16, r28
     ee8:	04 0f       	add	r16, r20
     eea:	15 1f       	adc	r17, r21
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
     eec:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
     ef0:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
     ef4:	77 ff       	sbrs	r23, 7
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <_Z16testfilltrianglev+0x6c>
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	75 95       	asr	r23
     efe:	67 95       	ror	r22
     f00:	7e 01       	movw	r14, r28
     f02:	e6 0e       	add	r14, r22
     f04:	f7 1e       	adc	r15, r23
     f06:	9b 01       	movw	r18, r22
     f08:	2c 1b       	sub	r18, r28
     f0a:	3d 0b       	sbc	r19, r29
     f0c:	4c 1b       	sub	r20, r28
     f0e:	5d 0b       	sbc	r21, r29
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	a9 2e       	mov	r10, r25
     f14:	b1 2c       	mov	r11, r1
     f16:	68 01       	movw	r12, r16
     f18:	86 e9       	ldi	r24, 0x96	; 150
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	0e 94 a3 19 	call	0x3346	; 0x3346 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>
    display.display();
     f20:	86 e9       	ldi	r24, 0x96	; 150
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
     f34:	25 97       	sbiw	r28, 0x05	; 5
     f36:	ca cf       	rjmp	.-108    	; 0xecc <_Z16testfilltrianglev+0x3c>
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
     f38:	60 ed       	ldi	r22, 0xD0	; 208
     f3a:	77 e0       	ldi	r23, 0x07	; 7
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
     f54:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000f58 <_Z14testdrawstylesv>:

  display.display();
  delay(2000);
}

void testdrawstyles(void) {
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
  display.clearDisplay();
     f60:	86 e9       	ldi	r24, 0x96	; 150
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.setTextSize(1);             // Normal 1:1 pixel scale
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	86 e9       	ldi	r24, 0x96	; 150
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     f72:	c6 e9       	ldi	r28, 0x96	; 150
     f74:	d1 e0       	ldi	r29, 0x01	; 1
     f76:	01 e0       	ldi	r16, 0x01	; 1
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	1b 8b       	std	Y+19, r17	; 0x13
     f7c:	0a 8b       	std	Y+18, r16	; 0x12
     f7e:	19 8b       	std	Y+17, r17	; 0x11
     f80:	08 8b       	std	Y+16, r16	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     f82:	1d 86       	std	Y+13, r1	; 0x0d
     f84:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
     f86:	1f 86       	std	Y+15, r1	; 0x0f
     f88:	1e 86       	std	Y+14, r1	; 0x0e
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Hello, world!"));
     f8a:	61 e8       	ldi	r22, 0x81	; 129
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	ce 01       	movw	r24, r28
     f90:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
     f94:	19 8a       	std	Y+17, r1	; 0x11
     f96:	18 8a       	std	Y+16, r1	; 0x10
    textbgcolor = bg;
     f98:	1b 8b       	std	Y+19, r17	; 0x13
     f9a:	0a 8b       	std	Y+18, r16	; 0x12

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);
     f9c:	22 e0       	ldi	r18, 0x02	; 2
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	48 ed       	ldi	r20, 0xD8	; 216
     fa2:	5f e0       	ldi	r21, 0x0F	; 15
     fa4:	69 e4       	ldi	r22, 0x49	; 73
     fa6:	70 e4       	ldi	r23, 0x40	; 64
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN5Print7printlnEdi>

  display.setTextSize(2);             // Draw 2X-scale text
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     fb6:	1b 8b       	std	Y+19, r17	; 0x13
     fb8:	0a 8b       	std	Y+18, r16	; 0x12
     fba:	19 8b       	std	Y+17, r17	; 0x11
     fbc:	08 8b       	std	Y+16, r16	; 0x10
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);
     fbe:	6e e7       	ldi	r22, 0x7E	; 126
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEPK19__FlashStringHelper>
     fc8:	20 e1       	ldi	r18, 0x10	; 16
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	4f ee       	ldi	r20, 0xEF	; 239
     fce:	5e eb       	ldi	r21, 0xBE	; 190
     fd0:	6d ea       	ldi	r22, 0xAD	; 173
     fd2:	7e ed       	ldi	r23, 0xDE	; 222
     fd4:	ce 01       	movw	r24, r28
     fd6:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN5Print7printlnEmi>

  display.display();
     fda:	ce 01       	movw	r24, r28
     fdc:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
     fe0:	60 ed       	ldi	r22, 0xD0	; 208
     fe2:	77 e0       	ldi	r23, 0x07	; 7
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
     ff0:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00000ff4 <_Z14testscrolltextv>:
}

void testscrolltext(void) {
  display.clearDisplay();
     ff4:	86 e9       	ldi	r24, 0x96	; 150
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.setTextSize(2); // Draw 2X-scale text
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	86 e9       	ldi	r24, 0x96	; 150
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN12Adafruit_GFX11setTextSizeEh>
    1006:	e6 e9       	ldi	r30, 0x96	; 150
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	93 8b       	std	Z+19, r25	; 0x13
    1010:	82 8b       	std	Z+18, r24	; 0x12
    1012:	91 8b       	std	Z+17, r25	; 0x11
    1014:	80 8b       	std	Z+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1016:	8a e0       	ldi	r24, 0x0A	; 10
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	95 87       	std	Z+13, r25	; 0x0d
    101c:	84 87       	std	Z+12, r24	; 0x0c
    cursor_y = y;
    101e:	17 86       	std	Z+15, r1	; 0x0f
    1020:	16 86       	std	Z+14, r1	; 0x0e
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
    1022:	67 e7       	ldi	r22, 0x77	; 119
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	cf 01       	movw	r24, r30
    1028:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();      // Show initial text
    102c:	86 e9       	ldi	r24, 0x96	; 150
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(100);
    1034:	64 e6       	ldi	r22, 0x64	; 100
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
    1040:	4f e0       	ldi	r20, 0x0F	; 15
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	86 e9       	ldi	r24, 0x96	; 150
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <_ZN16Adafruit_SSD130616startscrollrightEhh>
  delay(2000);
    104c:	60 ed       	ldi	r22, 0xD0	; 208
    104e:	77 e0       	ldi	r23, 0x07	; 7
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.stopscroll();
    1058:	86 e9       	ldi	r24, 0x96	; 150
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN16Adafruit_SSD130610stopscrollEv>
  delay(1000);
    1060:	68 ee       	ldi	r22, 0xE8	; 232
    1062:	73 e0       	ldi	r23, 0x03	; 3
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.startscrollleft(0x00, 0x0F);
    106c:	4f e0       	ldi	r20, 0x0F	; 15
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	86 e9       	ldi	r24, 0x96	; 150
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <_ZN16Adafruit_SSD130615startscrollleftEhh>
  delay(2000);
    1078:	60 ed       	ldi	r22, 0xD0	; 208
    107a:	77 e0       	ldi	r23, 0x07	; 7
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.stopscroll();
    1084:	86 e9       	ldi	r24, 0x96	; 150
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN16Adafruit_SSD130610stopscrollEv>
  delay(1000);
    108c:	68 ee       	ldi	r22, 0xE8	; 232
    108e:	73 e0       	ldi	r23, 0x03	; 3
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.startscrolldiagright(0x00, 0x07);
    1098:	47 e0       	ldi	r20, 0x07	; 7
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	86 e9       	ldi	r24, 0x96	; 150
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <_ZN16Adafruit_SSD130620startscrolldiagrightEhh>
  delay(2000);
    10a4:	60 ed       	ldi	r22, 0xD0	; 208
    10a6:	77 e0       	ldi	r23, 0x07	; 7
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.startscrolldiagleft(0x00, 0x07);
    10b0:	47 e0       	ldi	r20, 0x07	; 7
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	86 e9       	ldi	r24, 0x96	; 150
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN16Adafruit_SSD130619startscrolldiagleftEhh>
  delay(2000);
    10bc:	60 ed       	ldi	r22, 0xD0	; 208
    10be:	77 e0       	ldi	r23, 0x07	; 7
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.stopscroll();
    10c8:	86 e9       	ldi	r24, 0x96	; 150
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN16Adafruit_SSD130610stopscrollEv>
  delay(1000);
    10d0:	68 ee       	ldi	r22, 0xE8	; 232
    10d2:	73 e0       	ldi	r23, 0x03	; 3
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

000010dc <_Z14testdrawbitmapv>:
}

void testdrawbitmap(void) {
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
  display.clearDisplay();
    10e8:	86 e9       	ldi	r24, 0x96	; 150
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    10f0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0xa>
    10f4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0xb>
    10f8:	ac 01       	movw	r20, r24
    10fa:	40 51       	subi	r20, 0x10	; 16
    10fc:	51 09       	sbc	r21, r1
    10fe:	57 ff       	sbrs	r21, 7
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <_Z14testdrawbitmapv+0x2a>
    1102:	4f 5f       	subi	r20, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end+0x8>
    110e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x9>
    1112:	bc 01       	movw	r22, r24
    1114:	60 51       	subi	r22, 0x10	; 16
    1116:	71 09       	sbc	r23, r1
    1118:	77 ff       	sbrs	r23, 7
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <_Z14testdrawbitmapv+0x44>
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	75 95       	asr	r23
    1122:	67 95       	ror	r22
    1124:	cc 24       	eor	r12, r12
    1126:	c3 94       	inc	r12
    1128:	d1 2c       	mov	r13, r1
    112a:	20 e1       	ldi	r18, 0x10	; 16
    112c:	e2 2e       	mov	r14, r18
    112e:	f1 2c       	mov	r15, r1
    1130:	00 e1       	ldi	r16, 0x10	; 16
    1132:	10 e0       	ldi	r17, 0x00	; 0
    1134:	29 ea       	ldi	r18, 0xA9	; 169
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	86 e9       	ldi	r24, 0x96	; 150
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
  display.display();
    1140:	86 e9       	ldi	r24, 0x96	; 150
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(1000);
    1148:	68 ee       	ldi	r22, 0xE8	; 232
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
}
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
    115c:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00001160 <_Z11testanimatePKhhh>:

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	6e 97       	sbiw	r28, 0x1e	; 30
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	3c 01       	movw	r6, r24
    1176:	46 2e       	mov	r4, r22
    1178:	24 2e       	mov	r2, r20
    117a:	4e 01       	movw	r8, r28
    117c:	8f e1       	ldi	r24, 0x1F	; 31
    117e:	88 0e       	add	r8, r24
    1180:	91 1c       	adc	r9, r1
    1182:	fe 01       	movw	r30, r28
    1184:	31 96       	adiw	r30, 0x01	; 1
    1186:	5f 01       	movw	r10, r30
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    1188:	10 ef       	ldi	r17, 0xF0	; 240
void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    118a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    118e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    1192:	03 2e       	mov	r0, r19
    1194:	00 0c       	add	r0, r0
    1196:	44 0b       	sbc	r20, r20
    1198:	55 0b       	sbc	r21, r21
    119a:	61 ef       	ldi	r22, 0xF1	; 241
    119c:	7f ef       	ldi	r23, 0xFF	; 255
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_Z6randomll>
    11a6:	36 2e       	mov	r3, r22
    11a8:	f5 01       	movw	r30, r10
    11aa:	60 83       	st	Z, r22
    icons[f][YPOS]   = -LOGO_HEIGHT;
    11ac:	11 83       	std	Z+1, r17	; 0x01
    icons[f][DELTAY] = random(1, 6);
    11ae:	26 e0       	ldi	r18, 0x06	; 6
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_Z6randomll>
    11c2:	56 2e       	mov	r5, r22
    11c4:	f5 01       	movw	r30, r10
    11c6:	62 83       	std	Z+2, r22	; 0x02
    Serial.print(F("x: "));
    11c8:	63 e7       	ldi	r22, 0x73	; 115
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	86 ed       	ldi	r24, 0xD6	; 214
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(icons[f][XPOS], DEC);
    11d4:	63 2d       	mov	r22, r3
    11d6:	33 0c       	add	r3, r3
    11d8:	77 0b       	sbc	r23, r23
    11da:	4a e0       	ldi	r20, 0x0A	; 10
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	86 ed       	ldi	r24, 0xD6	; 214
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print5printEii>
    Serial.print(F(" y: "));
    11e6:	6e e6       	ldi	r22, 0x6E	; 110
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	86 ed       	ldi	r24, 0xD6	; 214
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(icons[f][YPOS], DEC);
    11f2:	4a e0       	ldi	r20, 0x0A	; 10
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	60 ef       	ldi	r22, 0xF0	; 240
    11f8:	7f ef       	ldi	r23, 0xFF	; 255
    11fa:	86 ed       	ldi	r24, 0xD6	; 214
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print5printEii>
    Serial.print(F(" dy: "));
    1202:	68 e6       	ldi	r22, 0x68	; 104
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	86 ed       	ldi	r24, 0xD6	; 214
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(icons[f][DELTAY], DEC);
    120e:	65 2d       	mov	r22, r5
    1210:	55 0c       	add	r5, r5
    1212:	77 0b       	sbc	r23, r23
    1214:	4a e0       	ldi	r20, 0x0A	; 10
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	86 ed       	ldi	r24, 0xD6	; 214
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN5Print7printlnEii>
    1220:	f3 e0       	ldi	r31, 0x03	; 3
    1222:	af 0e       	add	r10, r31
    1224:	b1 1c       	adc	r11, r1

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    1226:	a8 14       	cp	r10, r8
    1228:	b9 04       	cpc	r11, r9
    122a:	09 f0       	breq	.+2      	; 0x122e <_Z11testanimatePKhhh+0xce>
    122c:	ae cf       	rjmp	.-164    	; 0x118a <_Z11testanimatePKhhh+0x2a>
  for(;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    122e:	31 2c       	mov	r3, r1
    1230:	51 2c       	mov	r5, r1
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);
  }

  for(;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer
    1232:	86 e9       	ldi	r24, 0x96	; 150
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	5c 01       	movw	r10, r24

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    1240:	f5 01       	movw	r30, r10
    1242:	41 81       	ldd	r20, Z+1	; 0x01
    1244:	04 2e       	mov	r0, r20
    1246:	00 0c       	add	r0, r0
    1248:	55 0b       	sbc	r21, r21
    124a:	60 81       	ld	r22, Z
    124c:	06 2e       	mov	r0, r22
    124e:	00 0c       	add	r0, r0
    1250:	77 0b       	sbc	r23, r23
    1252:	cc 24       	eor	r12, r12
    1254:	c3 94       	inc	r12
    1256:	d1 2c       	mov	r13, r1
    1258:	71 01       	movw	r14, r2
    125a:	82 01       	movw	r16, r4
    125c:	93 01       	movw	r18, r6
    125e:	86 e9       	ldi	r24, 0x96	; 150
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    1266:	f3 e0       	ldi	r31, 0x03	; 3
    1268:	af 0e       	add	r10, r31
    126a:	b1 1c       	adc	r11, r1

  for(;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
    126c:	a8 14       	cp	r10, r8
    126e:	b9 04       	cpc	r11, r9
    1270:	39 f7       	brne	.-50     	; 0x1240 <_Z11testanimatePKhhh+0xe0>
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    }

    display.display(); // Show the display buffer on the screen
    1272:	86 e9       	ldi	r24, 0x96	; 150
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(200);        // Pause for 1/10 second
    127a:	68 ec       	ldi	r22, 0xC8	; 200
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	5c 01       	movw	r10, r24

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
    128c:	f5 01       	movw	r30, r10
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	89 0f       	add	r24, r25
    1294:	81 83       	std	Z+1, r24	; 0x01
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
    1296:	08 2e       	mov	r0, r24
    1298:	00 0c       	add	r0, r0
    129a:	99 0b       	sbc	r25, r25
    129c:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end+0xa>
    12a0:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0xb>
    12a4:	82 17       	cp	r24, r18
    12a6:	93 07       	cpc	r25, r19
    12a8:	f4 f0       	brlt	.+60     	; 0x12e6 <_Z11testanimatePKhhh+0x186>
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    12aa:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    12ae:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    12b2:	03 2e       	mov	r0, r19
    12b4:	00 0c       	add	r0, r0
    12b6:	44 0b       	sbc	r20, r20
    12b8:	55 0b       	sbc	r21, r21
    12ba:	61 ef       	ldi	r22, 0xF1	; 241
    12bc:	7f ef       	ldi	r23, 0xFF	; 255
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_Z6randomll>
    12c6:	f5 01       	movw	r30, r10
    12c8:	60 83       	st	Z, r22
        icons[f][YPOS]   = -LOGO_HEIGHT;
    12ca:	80 ef       	ldi	r24, 0xF0	; 240
    12cc:	81 83       	std	Z+1, r24	; 0x01
        icons[f][DELTAY] = random(1, 6);
    12ce:	26 e0       	ldi	r18, 0x06	; 6
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_Z6randomll>
    12e2:	f5 01       	movw	r30, r10
    12e4:	62 83       	std	Z+2, r22	; 0x02
    12e6:	f3 e0       	ldi	r31, 0x03	; 3
    12e8:	af 0e       	add	r10, r31
    12ea:	b1 1c       	adc	r11, r1

    display.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
    12ec:	8a 14       	cp	r8, r10
    12ee:	9b 04       	cpc	r9, r11
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <_Z11testanimatePKhhh+0x194>
    12f2:	9f cf       	rjmp	.-194    	; 0x1232 <_Z11testanimatePKhhh+0xd2>
    12f4:	cb cf       	rjmp	.-106    	; 0x128c <_Z11testanimatePKhhh+0x12c>

000012f6 <_GLOBAL__sub_I_display>:
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1308:	80 ea       	ldi	r24, 0xA0	; 160
    130a:	88 2e       	mov	r8, r24
    130c:	86 e8       	ldi	r24, 0x86	; 134
    130e:	98 2e       	mov	r9, r24
    1310:	aa 24       	eor	r10, r10
    1312:	a3 94       	inc	r10
    1314:	b1 2c       	mov	r11, r1
    1316:	90 e8       	ldi	r25, 0x80	; 128
    1318:	c9 2e       	mov	r12, r25
    131a:	9a e1       	ldi	r25, 0x1A	; 26
    131c:	d9 2e       	mov	r13, r25
    131e:	96 e0       	ldi	r25, 0x06	; 6
    1320:	e9 2e       	mov	r14, r25
    1322:	f1 2c       	mov	r15, r1
    1324:	0f ef       	ldi	r16, 0xFF	; 255
    1326:	20 e8       	ldi	r18, 0x80	; 128
    1328:	32 e0       	ldi	r19, 0x02	; 2
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	60 e8       	ldi	r22, 0x80	; 128
    132e:	86 e9       	ldi	r24, 0x96	; 150
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 2d 20 	call	0x405a	; 0x405a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	8f 90       	pop	r8
    1348:	08 95       	ret

0000134a <_GLOBAL__sub_D_display>:
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    134a:	86 e9       	ldi	r24, 0x96	; 150
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <_ZN16Adafruit_SSD1306D1Ev>

00001352 <_Z12testdrawlinev>:
}

void loop() {
}

void testdrawline() {
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
  int16_t i;

  display.clearDisplay(); // Clear display buffer
    1362:	86 e9       	ldi	r24, 0x96	; 150
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(i=0; i<display.width(); i+=4) {
    136a:	c0 e0       	ldi	r28, 0x00	; 0
    136c:	d0 e0       	ldi	r29, 0x00	; 0
    136e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end+0x8>
    1372:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x9>
    1376:	c8 17       	cp	r28, r24
    1378:	d9 07       	cpc	r29, r25
    137a:	1c f0       	brlt	.+6      	; 0x1382 <_Z12testdrawlinev+0x30>
    137c:	c0 e0       	ldi	r28, 0x00	; 0
    137e:	d0 e0       	ldi	r29, 0x00	; 0
    1380:	1e c0       	rjmp	.+60     	; 0x13be <_Z12testdrawlinev+0x6c>
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    1382:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
    1386:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
    138a:	01 50       	subi	r16, 0x01	; 1
    138c:	11 09       	sbc	r17, r1
    138e:	ee 24       	eor	r14, r14
    1390:	e3 94       	inc	r14
    1392:	f1 2c       	mov	r15, r1
    1394:	9e 01       	movw	r18, r28
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	86 e9       	ldi	r24, 0x96	; 150
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display(); // Update screen with each newly-drawn line
    13a6:	86 e9       	ldi	r24, 0x96	; 150
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    13ba:	24 96       	adiw	r28, 0x04	; 4
    13bc:	d8 cf       	rjmp	.-80     	; 0x136e <_Z12testdrawlinev+0x1c>
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    13be:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0xa>
    13c2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0xb>
    13c6:	c8 17       	cp	r28, r24
    13c8:	d9 07       	cpc	r29, r25
    13ca:	f4 f4       	brge	.+60     	; 0x1408 <_Z12testdrawlinev+0xb6>
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    13cc:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    13d0:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    13d4:	21 50       	subi	r18, 0x01	; 1
    13d6:	31 09       	sbc	r19, r1
    13d8:	ee 24       	eor	r14, r14
    13da:	e3 94       	inc	r14
    13dc:	f1 2c       	mov	r15, r1
    13de:	8e 01       	movw	r16, r28
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	86 e9       	ldi	r24, 0x96	; 150
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    13f0:	86 e9       	ldi	r24, 0x96	; 150
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    1404:	24 96       	adiw	r28, 0x04	; 4
    1406:	db cf       	rjmp	.-74     	; 0x13be <_Z12testdrawlinev+0x6c>
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);
    1408:	6a ef       	ldi	r22, 0xFA	; 250
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  display.clearDisplay();
    1414:	86 e9       	ldi	r24, 0x96	; 150
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(i=0; i<display.width(); i+=4) {
    141c:	c1 2c       	mov	r12, r1
    141e:	d1 2c       	mov	r13, r1
    1420:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end+0x8>
    1424:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x9>
    1428:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <__data_end+0xa>
    142c:	d0 91 a1 01 	lds	r29, 0x01A1	; 0x8001a1 <__data_end+0xb>
    1430:	c8 16       	cp	r12, r24
    1432:	d9 06       	cpc	r13, r25
    1434:	ec f4       	brge	.+58     	; 0x1470 <_Z12testdrawlinev+0x11e>
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    1436:	ae 01       	movw	r20, r28
    1438:	41 50       	subi	r20, 0x01	; 1
    143a:	51 09       	sbc	r21, r1
    143c:	ee 24       	eor	r14, r14
    143e:	e3 94       	inc	r14
    1440:	f1 2c       	mov	r15, r1
    1442:	00 e0       	ldi	r16, 0x00	; 0
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	96 01       	movw	r18, r12
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	86 e9       	ldi	r24, 0x96	; 150
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    1454:	86 e9       	ldi	r24, 0x96	; 150
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.width(); i+=4) {
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	c8 0e       	add	r12, r24
    146c:	d1 1c       	adc	r13, r1
    146e:	d8 cf       	rjmp	.-80     	; 0x1420 <_Z12testdrawlinev+0xce>
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    1470:	21 97       	sbiw	r28, 0x01	; 1
    1472:	d7 fd       	sbrc	r29, 7
    1474:	22 c0       	rjmp	.+68     	; 0x14ba <_Z12testdrawlinev+0x168>
    display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
    1476:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    147a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    147e:	21 50       	subi	r18, 0x01	; 1
    1480:	31 09       	sbc	r19, r1
    1482:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
    1486:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
    148a:	41 50       	subi	r20, 0x01	; 1
    148c:	51 09       	sbc	r21, r1
    148e:	ee 24       	eor	r14, r14
    1490:	e3 94       	inc	r14
    1492:	f1 2c       	mov	r15, r1
    1494:	8e 01       	movw	r16, r28
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	86 e9       	ldi	r24, 0x96	; 150
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    14a2:	86 e9       	ldi	r24, 0x96	; 150
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    14b6:	24 97       	sbiw	r28, 0x04	; 4
    14b8:	dc cf       	rjmp	.-72     	; 0x1472 <_Z12testdrawlinev+0x120>
    display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);
    14ba:	6a ef       	ldi	r22, 0xFA	; 250
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  display.clearDisplay();
    14c6:	86 e9       	ldi	r24, 0x96	; 150
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(i=display.width()-1; i>=0; i-=4) {
    14ce:	c0 90 9e 01 	lds	r12, 0x019E	; 0x80019e <__data_end+0x8>
    14d2:	d0 90 9f 01 	lds	r13, 0x019F	; 0x80019f <__data_end+0x9>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	c8 1a       	sub	r12, r24
    14da:	d1 08       	sbc	r13, r1
    14dc:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <__data_end+0xa>
    14e0:	d0 91 a1 01 	lds	r29, 0x01A1	; 0x8001a1 <__data_end+0xb>
    14e4:	d7 fc       	sbrc	r13, 7
    14e6:	21 c0       	rjmp	.+66     	; 0x152a <_Z12testdrawlinev+0x1d8>
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    14e8:	ae 01       	movw	r20, r28
    14ea:	41 50       	subi	r20, 0x01	; 1
    14ec:	51 09       	sbc	r21, r1
    14ee:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
    14f2:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
    14f6:	61 50       	subi	r22, 0x01	; 1
    14f8:	71 09       	sbc	r23, r1
    14fa:	ee 24       	eor	r14, r14
    14fc:	e3 94       	inc	r14
    14fe:	f1 2c       	mov	r15, r1
    1500:	00 e0       	ldi	r16, 0x00	; 0
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	96 01       	movw	r18, r12
    1506:	86 e9       	ldi	r24, 0x96	; 150
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    150e:	86 e9       	ldi	r24, 0x96	; 150
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  }
  delay(250);

  display.clearDisplay();

  for(i=display.width()-1; i>=0; i-=4) {
    1522:	84 e0       	ldi	r24, 0x04	; 4
    1524:	c8 1a       	sub	r12, r24
    1526:	d1 08       	sbc	r13, r1
    1528:	d9 cf       	rjmp	.-78     	; 0x14dc <_Z12testdrawlinev+0x18a>
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    152a:	21 97       	sbiw	r28, 0x01	; 1
    152c:	d7 fd       	sbrc	r29, 7
    152e:	22 c0       	rjmp	.+68     	; 0x1574 <_Z12testdrawlinev+0x222>
    display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
    1530:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end+0xa>
    1534:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <__data_end+0xb>
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	51 09       	sbc	r21, r1
    153c:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
    1540:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
    1544:	61 50       	subi	r22, 0x01	; 1
    1546:	71 09       	sbc	r23, r1
    1548:	ee 24       	eor	r14, r14
    154a:	e3 94       	inc	r14
    154c:	f1 2c       	mov	r15, r1
    154e:	8e 01       	movw	r16, r28
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	86 e9       	ldi	r24, 0x96	; 150
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    155c:	86 e9       	ldi	r24, 0x96	; 150
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  for(i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    1570:	24 97       	sbiw	r28, 0x04	; 4
    1572:	dc cf       	rjmp	.-72     	; 0x152c <_Z12testdrawlinev+0x1da>
    display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);
    1574:	6a ef       	ldi	r22, 0xFA	; 250
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  display.clearDisplay();
    1580:	86 e9       	ldi	r24, 0x96	; 150
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(i=0; i<display.height(); i+=4) {
    1588:	c0 e0       	ldi	r28, 0x00	; 0
    158a:	d0 e0       	ldi	r29, 0x00	; 0
    158c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0xa>
    1590:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0xb>
    1594:	c8 17       	cp	r28, r24
    1596:	d9 07       	cpc	r29, r25
    1598:	1c f0       	brlt	.+6      	; 0x15a0 <_Z12testdrawlinev+0x24e>
    159a:	c0 e0       	ldi	r28, 0x00	; 0
    159c:	d0 e0       	ldi	r29, 0x00	; 0
    159e:	1e c0       	rjmp	.+60     	; 0x15dc <_Z12testdrawlinev+0x28a>
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    15a0:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
    15a4:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
    15a8:	61 50       	subi	r22, 0x01	; 1
    15aa:	71 09       	sbc	r23, r1
    15ac:	ee 24       	eor	r14, r14
    15ae:	e3 94       	inc	r14
    15b0:	f1 2c       	mov	r15, r1
    15b2:	8e 01       	movw	r16, r28
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	86 e9       	ldi	r24, 0x96	; 150
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    15c4:	86 e9       	ldi	r24, 0x96	; 150
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.height(); i+=4) {
    15d8:	24 96       	adiw	r28, 0x04	; 4
    15da:	d8 cf       	rjmp	.-80     	; 0x158c <_Z12testdrawlinev+0x23a>
    15dc:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x8>
    15e0:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x9>
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=0; i<display.width(); i+=4) {
    15e4:	c6 17       	cp	r28, r22
    15e6:	d7 07       	cpc	r29, r23
    15e8:	f4 f4       	brge	.+60     	; 0x1626 <_Z12testdrawlinev+0x2d4>
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    15ea:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
    15ee:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
    15f2:	01 50       	subi	r16, 0x01	; 1
    15f4:	11 09       	sbc	r17, r1
    15f6:	61 50       	subi	r22, 0x01	; 1
    15f8:	71 09       	sbc	r23, r1
    15fa:	ee 24       	eor	r14, r14
    15fc:	e3 94       	inc	r14
    15fe:	f1 2c       	mov	r15, r1
    1600:	9e 01       	movw	r18, r28
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	86 e9       	ldi	r24, 0x96	; 150
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN12Adafruit_GFX8drawLineEiiiij>
    display.display();
    160e:	86 e9       	ldi	r24, 0x96	; 150
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=0; i<display.width(); i+=4) {
    1622:	24 96       	adiw	r28, 0x04	; 4
    1624:	db cf       	rjmp	.-74     	; 0x15dc <_Z12testdrawlinev+0x28a>
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
    1626:	60 ed       	ldi	r22, 0xD0	; 208
    1628:	77 e0       	ldi	r23, 0x07	; 7
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
    163e:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00001642 <_Z12testdrawrectv>:
}

void testdrawrect(void) {
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
  display.clearDisplay();
    164e:	86 e9       	ldi	r24, 0x96	; 150
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<display.height()/2; i+=2) {
    1656:	c0 e0       	ldi	r28, 0x00	; 0
    1658:	d0 e0       	ldi	r29, 0x00	; 0
    165a:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
    165e:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
    1662:	c8 01       	movw	r24, r16
    1664:	17 fd       	sbrc	r17, 7
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	95 95       	asr	r25
    166a:	87 95       	ror	r24
    166c:	c8 17       	cp	r28, r24
    166e:	d9 07       	cpc	r29, r25
    1670:	04 f5       	brge	.+64     	; 0x16b2 <_Z12testdrawrectv+0x70>
    1672:	ce 01       	movw	r24, r28
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    1678:	08 1b       	sub	r16, r24
    167a:	19 0b       	sbc	r17, r25
    167c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    1680:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    1684:	28 1b       	sub	r18, r24
    1686:	39 0b       	sbc	r19, r25
    1688:	ee 24       	eor	r14, r14
    168a:	e3 94       	inc	r14
    168c:	f1 2c       	mov	r15, r1
    168e:	ae 01       	movw	r20, r28
    1690:	be 01       	movw	r22, r28
    1692:	86 e9       	ldi	r24, 0x96	; 150
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 b7 13 	call	0x276e	; 0x276e <_ZN12Adafruit_GFX8drawRectEiiiij>
    display.display(); // Update screen with each newly-drawn rectangle
    169a:	86 e9       	ldi	r24, 0x96	; 150
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testdrawrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=2) {
    16ae:	22 96       	adiw	r28, 0x02	; 2
    16b0:	d4 cf       	rjmp	.-88     	; 0x165a <_Z12testdrawrectv+0x18>
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
    16b2:	60 ed       	ldi	r22, 0xD0	; 208
    16b4:	77 e0       	ldi	r23, 0x07	; 7
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
    16c6:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

000016ca <_Z12testfillrectv>:
}

void testfillrect(void) {
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
  display.clearDisplay();
    16d6:	86 e9       	ldi	r24, 0x96	; 150
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  for(int16_t i=0; i<display.height()/2; i+=3) {
    16de:	c0 e0       	ldi	r28, 0x00	; 0
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <__data_end+0xa>
    16e6:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <__data_end+0xb>
    16ea:	c8 01       	movw	r24, r16
    16ec:	17 fd       	sbrc	r17, 7
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	95 95       	asr	r25
    16f2:	87 95       	ror	r24
    16f4:	c8 17       	cp	r28, r24
    16f6:	d9 07       	cpc	r29, r25
    16f8:	04 f5       	brge	.+64     	; 0x173a <_Z12testfillrectv+0x70>
    16fa:	ce 01       	movw	r24, r28
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    1700:	08 1b       	sub	r16, r24
    1702:	19 0b       	sbc	r17, r25
    1704:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end+0x8>
    1708:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x9>
    170c:	28 1b       	sub	r18, r24
    170e:	39 0b       	sbc	r19, r25
    1710:	42 e0       	ldi	r20, 0x02	; 2
    1712:	e4 2e       	mov	r14, r20
    1714:	f1 2c       	mov	r15, r1
    1716:	ae 01       	movw	r20, r28
    1718:	be 01       	movw	r22, r28
    171a:	86 e9       	ldi	r24, 0x96	; 150
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN12Adafruit_GFX8fillRectEiiiij>
    display.display(); // Update screen with each newly-drawn rectangle
    1722:	86 e9       	ldi	r24, 0x96	; 150
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
    delay(1);
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
}

void testfillrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=3) {
    1736:	23 96       	adiw	r28, 0x03	; 3
    1738:	d4 cf       	rjmp	.-88     	; 0x16e2 <_Z12testfillrectv+0x18>
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
    173a:	60 ed       	ldi	r22, 0xD0	; 208
    173c:	77 e0       	ldi	r23, 0x07	; 7
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
}
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
    174e:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

00001752 <_Z12testdrawcharv>:
  }

  delay(2000);
}

void testdrawchar(void) {
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
  display.clearDisplay();
    1756:	86 e9       	ldi	r24, 0x96	; 150
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.setTextSize(1);      // Normal 1:1 pixel scale
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	86 e9       	ldi	r24, 0x96	; 150
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x13>
    1770:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end+0x12>
    1774:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x11>
    1778:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    177c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <__data_end+0xd>
    1780:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end+0xc>
    cursor_y = y;
    1784:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0xf>
    1788:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end+0xe>
            'true' to this function to use correct CP437 character values
            in your code.
    @param  x  true = enable (new behavior), false = disable (old behavior)
  */
  /**********************************************************************/
  void cp437(bool x = true) { _cp437 = x; }
    178c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end+0x18>
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    1790:	c0 e0       	ldi	r28, 0x00	; 0
    1792:	d0 e0       	ldi	r29, 0x00	; 0
    if(i == '\n') display.write(' ');
    1794:	ca 30       	cpi	r28, 0x0A	; 10
    1796:	d1 05       	cpc	r29, r1
    1798:	11 f4       	brne	.+4      	; 0x179e <_Z12testdrawcharv+0x4c>
    179a:	60 e2       	ldi	r22, 0x20	; 32
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <_Z12testdrawcharv+0x4e>
    else          display.write(i);
    179e:	6c 2f       	mov	r22, r28
    17a0:	86 e9       	ldi	r24, 0x96	; 150
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN12Adafruit_GFX5writeEh>
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    17a8:	21 96       	adiw	r28, 0x01	; 1
    17aa:	c1 15       	cp	r28, r1
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	d8 07       	cpc	r29, r24
    17b0:	89 f7       	brne	.-30     	; 0x1794 <_Z12testdrawcharv+0x42>
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
    17b2:	86 e9       	ldi	r24, 0x96	; 150
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
    17ba:	60 ed       	ldi	r22, 0xD0	; 208
    17bc:	77 e0       	ldi	r23, 0x07	; 7
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
    17c6:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <delay>

000017ca <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17ca:	26 e0       	ldi	r18, 0x06	; 6
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	55 e2       	ldi	r21, 0x25	; 37
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	86 ed       	ldi	r24, 0xD6	; 214
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN14HardwareSerial5beginEmh>

void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    17dc:	01 e0       	ldi	r16, 0x01	; 1
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	4c e3       	ldi	r20, 0x3C	; 60
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	86 e9       	ldi	r24, 0x96	; 150
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13065beginEhhbb>
    17ec:	81 11       	cpse	r24, r1
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <setup+0x34>
    Serial.println(F("SSD1306 allocation failed"));
    17f0:	6f e8       	ldi	r22, 0x8F	; 143
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	86 ed       	ldi	r24, 0xD6	; 214
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN5Print7printlnEPK19__FlashStringHelper>
    17fc:	ff cf       	rjmp	.-2      	; 0x17fc <setup+0x32>
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
    17fe:	86 e9       	ldi	r24, 0x96	; 150
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
    1806:	60 ed       	ldi	r22, 0xD0	; 208
    1808:	77 e0       	ldi	r23, 0x07	; 7
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  // Clear the buffer
  display.clearDisplay();
    1812:	86 e9       	ldi	r24, 0x96	; 150
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>

  // Draw a single pixel in white
  display.drawPixel(10, 10, SSD1306_WHITE);
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e0       	ldi	r20, 0x0A	; 10
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	6a e0       	ldi	r22, 0x0A	; 10
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	86 e9       	ldi	r24, 0x96	; 150
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_ZN16Adafruit_SSD13069drawPixelEiij>

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  display.display();
    182e:	86 e9       	ldi	r24, 0x96	; 150
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
    1836:	60 ed       	ldi	r22, 0xD0	; 208
    1838:	77 e0       	ldi	r23, 0x07	; 7
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...

  testdrawline();      // Draw many lines
    1842:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z12testdrawlinev>

  testdrawrect();      // Draw rectangles (outlines)
    1846:	0e 94 21 0b 	call	0x1642	; 0x1642 <_Z12testdrawrectv>

  testfillrect();      // Draw rectangles (filled)
    184a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_Z12testfillrectv>

  testdrawcircle();    // Draw circles (outlines)
    184e:	0e 94 aa 05 	call	0xb54	; 0xb54 <_Z14testdrawcirclev>

  testfillcircle();    // Draw circles (filled)
    1852:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z14testfillcirclev>

  testdrawroundrect(); // Draw rounded rectangles (outlines)
    1856:	0e 94 40 06 	call	0xc80	; 0xc80 <_Z17testdrawroundrectv>

  testfillroundrect(); // Draw rounded rectangles (filled)
    185a:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z17testfillroundrectv>

  testdrawtriangle();  // Draw triangles (outlines)
    185e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z16testdrawtrianglev>

  testfilltriangle();  // Draw triangles (filled)
    1862:	0e 94 48 07 	call	0xe90	; 0xe90 <_Z16testfilltrianglev>

  testdrawchar();      // Draw characters of the default font
    1866:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_Z12testdrawcharv>

  testdrawstyles();    // Draw 'stylized' characters
    186a:	0e 94 ac 07 	call	0xf58	; 0xf58 <_Z14testdrawstylesv>

  testscrolltext();    // Draw scrolling text
    186e:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z14testscrolltextv>

  testdrawbitmap();    // Draw a small bitmap image
    1872:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Z14testdrawbitmapv>

  // Invert and restore display, pausing in-between
  display.invertDisplay(true);
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	86 e9       	ldi	r24, 0x96	; 150
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <_ZN16Adafruit_SSD130613invertDisplayEb>
  delay(1000);
    1880:	68 ee       	ldi	r22, 0xE8	; 232
    1882:	73 e0       	ldi	r23, 0x03	; 3
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
  display.invertDisplay(false);
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	86 e9       	ldi	r24, 0x96	; 150
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 e6 20 	call	0x41cc	; 0x41cc <_ZN16Adafruit_SSD130613invertDisplayEb>
  delay(1000);
    1896:	68 ee       	ldi	r22, 0xE8	; 232
    1898:	73 e0       	ldi	r23, 0x03	; 3
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>

  testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
    18a2:	40 e1       	ldi	r20, 0x10	; 16
    18a4:	60 e1       	ldi	r22, 0x10	; 16
    18a6:	89 ea       	ldi	r24, 0xA9	; 169
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z11testanimatePKhhh>

000018ae <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    18ae:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    18b0:	91 8d       	ldd	r25, Z+25	; 0x19
    18b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    18b4:	89 2f       	mov	r24, r25
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	80 5c       	subi	r24, 0xC0	; 192
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	82 1b       	sub	r24, r18
    18be:	91 09       	sbc	r25, r1
}
    18c0:	8f 73       	andi	r24, 0x3F	; 63
    18c2:	99 27       	eor	r25, r25
    18c4:	08 95       	ret

000018c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18c6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18c8:	91 8d       	ldd	r25, Z+25	; 0x19
    18ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    18cc:	98 17       	cp	r25, r24
    18ce:	31 f0       	breq	.+12     	; 0x18dc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18d2:	e8 0f       	add	r30, r24
    18d4:	f1 1d       	adc	r31, r1
    18d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18e0:	08 95       	ret

000018e2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18e2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18e4:	91 8d       	ldd	r25, Z+25	; 0x19
    18e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18e8:	98 17       	cp	r25, r24
    18ea:	61 f0       	breq	.+24     	; 0x1904 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ee:	df 01       	movw	r26, r30
    18f0:	a8 0f       	add	r26, r24
    18f2:	b1 1d       	adc	r27, r1
    18f4:	5d 96       	adiw	r26, 0x1d	; 29
    18f6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	9f 73       	andi	r25, 0x3F	; 63
    18fe:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1908:	08 95       	ret

0000190a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    190a:	fc 01       	movw	r30, r24
    190c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    190e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1910:	25 2f       	mov	r18, r21
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	84 2f       	mov	r24, r20
    1916:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1918:	82 1b       	sub	r24, r18
    191a:	93 0b       	sbc	r25, r19
    191c:	54 17       	cp	r21, r20
    191e:	10 f0       	brcs	.+4      	; 0x1924 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1920:	cf 96       	adiw	r24, 0x3f	; 63
    1922:	08 95       	ret
  return tail - head - 1;
    1924:	01 97       	sbiw	r24, 0x01	; 1
}
    1926:	08 95       	ret

00001928 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1928:	8f ee       	ldi	r24, 0xEF	; 239
    192a:	9d e0       	ldi	r25, 0x0D	; 13
    192c:	89 2b       	or	r24, r25
    192e:	49 f0       	breq	.+18     	; 0x1942 <_Z14serialEventRunv+0x1a>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	89 2b       	or	r24, r25
    1936:	29 f0       	breq	.+10     	; 0x1942 <_Z14serialEventRunv+0x1a>
    1938:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_Z17Serial0_availablev>
    193c:	81 11       	cpse	r24, r1
    193e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1942:	08 95       	ret

00001944 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1944:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1946:	84 8d       	ldd	r24, Z+28	; 0x1c
    1948:	df 01       	movw	r26, r30
    194a:	a8 0f       	add	r26, r24
    194c:	b1 1d       	adc	r27, r1
    194e:	a3 5a       	subi	r26, 0xA3	; 163
    1950:	bf 4f       	sbci	r27, 0xFF	; 255
    1952:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1954:	84 8d       	ldd	r24, Z+28	; 0x1c
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	8f 73       	andi	r24, 0x3F	; 63
    195c:	99 27       	eor	r25, r25
    195e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1960:	a6 89       	ldd	r26, Z+22	; 0x16
    1962:	b7 89       	ldd	r27, Z+23	; 0x17
    1964:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1966:	a0 89       	ldd	r26, Z+16	; 0x10
    1968:	b1 89       	ldd	r27, Z+17	; 0x11
    196a:	8c 91       	ld	r24, X
    196c:	83 70       	andi	r24, 0x03	; 3
    196e:	80 64       	ori	r24, 0x40	; 64
    1970:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1972:	93 8d       	ldd	r25, Z+27	; 0x1b
    1974:	84 8d       	ldd	r24, Z+28	; 0x1c
    1976:	98 13       	cpse	r25, r24
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    197a:	02 88       	ldd	r0, Z+18	; 0x12
    197c:	f3 89       	ldd	r31, Z+19	; 0x13
    197e:	e0 2d       	mov	r30, r0
    1980:	80 81       	ld	r24, Z
    1982:	8f 7d       	andi	r24, 0xDF	; 223
    1984:	80 83       	st	Z, r24
    1986:	08 95       	ret

00001988 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	ec 01       	movw	r28, r24
  _written = true;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    199a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    199c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    199e:	98 13       	cpse	r25, r24
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <_ZN14HardwareSerial5writeEh+0x24>
    19a2:	e8 89       	ldd	r30, Y+16	; 0x10
    19a4:	f9 89       	ldd	r31, Y+17	; 0x11
    19a6:	80 81       	ld	r24, Z
    19a8:	85 fd       	sbrc	r24, 5
    19aa:	26 c0       	rjmp	.+76     	; 0x19f8 <_ZN14HardwareSerial5writeEh+0x70>
    19ac:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19b0:	10 e0       	ldi	r17, 0x00	; 0
    19b2:	0f 5f       	subi	r16, 0xFF	; 255
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	0f 73       	andi	r16, 0x3F	; 63
    19b8:	11 27       	eor	r17, r17
    19ba:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19be:	e8 12       	cpse	r14, r24
    19c0:	0c c0       	rjmp	.+24     	; 0x19da <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	07 fc       	sbrc	r0, 7
    19c6:	fa cf       	rjmp	.-12     	; 0x19bc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19c8:	e8 89       	ldd	r30, Y+16	; 0x10
    19ca:	f9 89       	ldd	r31, Y+17	; 0x11
    19cc:	80 81       	ld	r24, Z
    19ce:	85 ff       	sbrs	r24, 5
    19d0:	f5 cf       	rjmp	.-22     	; 0x19bc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    19d2:	ce 01       	movw	r24, r28
    19d4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19d8:	f1 cf       	rjmp	.-30     	; 0x19bc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    19da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19dc:	fe 01       	movw	r30, r28
    19de:	e8 0f       	add	r30, r24
    19e0:	f1 1d       	adc	r31, r1
    19e2:	e3 5a       	subi	r30, 0xA3	; 163
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19e8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19ea:	f8 94       	cli
    _tx_buffer_head = i;
    19ec:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    19ee:	ea 89       	ldd	r30, Y+18	; 0x12
    19f0:	fb 89       	ldd	r31, Y+19	; 0x13
    19f2:	80 81       	ld	r24, Z
    19f4:	80 62       	ori	r24, 0x20	; 32
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19f8:	9f b7       	in	r25, 0x3f	; 63
    19fa:	f8 94       	cli
      *_udr = c;
    19fc:	ee 89       	ldd	r30, Y+22	; 0x16
    19fe:	ff 89       	ldd	r31, Y+23	; 0x17
    1a00:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a02:	e8 89       	ldd	r30, Y+16	; 0x10
    1a04:	f9 89       	ldd	r31, Y+17	; 0x11
    1a06:	80 81       	ld	r24, Z
    1a08:	83 70       	andi	r24, 0x03	; 3
    1a0a:	80 64       	ori	r24, 0x40	; 64
    1a0c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a0e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	08 95       	ret

00001a22 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a28:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2a:	88 23       	and	r24, r24
    1a2c:	c9 f0       	breq	.+50     	; 0x1a60 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a2e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a30:	fb 89       	ldd	r31, Y+19	; 0x13
    1a32:	80 81       	ld	r24, Z
    1a34:	85 fd       	sbrc	r24, 5
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x20>
    1a38:	a8 89       	ldd	r26, Y+16	; 0x10
    1a3a:	b9 89       	ldd	r27, Y+17	; 0x11
    1a3c:	8c 91       	ld	r24, X
    1a3e:	86 fd       	sbrc	r24, 6
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	07 fc       	sbrc	r0, 7
    1a46:	f5 cf       	rjmp	.-22     	; 0x1a32 <_ZN14HardwareSerial5flushEv+0x10>
    1a48:	80 81       	ld	r24, Z
    1a4a:	85 ff       	sbrs	r24, 5
    1a4c:	f2 cf       	rjmp	.-28     	; 0x1a32 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a4e:	a8 89       	ldd	r26, Y+16	; 0x10
    1a50:	b9 89       	ldd	r27, Y+17	; 0x11
    1a52:	8c 91       	ld	r24, X
    1a54:	85 ff       	sbrs	r24, 5
    1a56:	ed cf       	rjmp	.-38     	; 0x1a32 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a5e:	e7 cf       	rjmp	.-50     	; 0x1a2e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
    1a76:	6a 01       	movw	r12, r20
    1a78:	7b 01       	movw	r14, r22
    1a7a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a7c:	60 e8       	ldi	r22, 0x80	; 128
    1a7e:	74 e8       	ldi	r23, 0x84	; 132
    1a80:	8e e1       	ldi	r24, 0x1E	; 30
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a7 01       	movw	r20, r14
    1a86:	96 01       	movw	r18, r12
    1a88:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__udivmodsi4>
    1a8c:	da 01       	movw	r26, r20
    1a8e:	c9 01       	movw	r24, r18
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	a1 09       	sbc	r26, r1
    1a94:	b1 09       	sbc	r27, r1
    1a96:	b6 95       	lsr	r27
    1a98:	a7 95       	ror	r26
    1a9a:	97 95       	ror	r25
    1a9c:	87 95       	ror	r24
    1a9e:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1aa0:	e8 89       	ldd	r30, Y+16	; 0x10
    1aa2:	f9 89       	ldd	r31, Y+17	; 0x11
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1aa8:	21 15       	cp	r18, r1
    1aaa:	80 e1       	ldi	r24, 0x10	; 16
    1aac:	38 07       	cpc	r19, r24
    1aae:	a8 f0       	brcs	.+42     	; 0x1ada <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1ab0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ab6:	60 e4       	ldi	r22, 0x40	; 64
    1ab8:	72 e4       	ldi	r23, 0x42	; 66
    1aba:	8f e0       	ldi	r24, 0x0F	; 15
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a7 01       	movw	r20, r14
    1ac0:	96 01       	movw	r18, r12
    1ac2:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__udivmodsi4>
    1ac6:	da 01       	movw	r26, r20
    1ac8:	c9 01       	movw	r24, r18
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	a1 09       	sbc	r26, r1
    1ace:	b1 09       	sbc	r27, r1
    1ad0:	b6 95       	lsr	r27
    1ad2:	a7 95       	ror	r26
    1ad4:	97 95       	ror	r25
    1ad6:	87 95       	ror	r24
    1ad8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ada:	ec 85       	ldd	r30, Y+12	; 0x0c
    1adc:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ade:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ae0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ae2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ae4:	20 83       	st	Z, r18

  _written = false;
    1ae6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1ae8:	ec 89       	ldd	r30, Y+20	; 0x14
    1aea:	fd 89       	ldd	r31, Y+21	; 0x15
    1aec:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1aee:	ea 89       	ldd	r30, Y+18	; 0x12
    1af0:	fb 89       	ldd	r31, Y+19	; 0x13
    1af2:	80 81       	ld	r24, Z
    1af4:	80 61       	ori	r24, 0x10	; 16
    1af6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1af8:	ea 89       	ldd	r30, Y+18	; 0x12
    1afa:	fb 89       	ldd	r31, Y+19	; 0x13
    1afc:	80 81       	ld	r24, Z
    1afe:	88 60       	ori	r24, 0x08	; 8
    1b00:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b02:	ea 89       	ldd	r30, Y+18	; 0x12
    1b04:	fb 89       	ldd	r31, Y+19	; 0x13
    1b06:	80 81       	ld	r24, Z
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b0c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b0e:	fb 89       	ldd	r31, Y+19	; 0x13
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7d       	andi	r24, 0xDF	; 223
    1b14:	80 83       	st	Z, r24
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	08 95       	ret

00001b26 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	08 95       	ret

00001b2c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1b2c:	08 95       	ret

00001b2e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	8f 93       	push	r24
    1b3c:	9f 93       	push	r25
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b42:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Serial+0x10>
    1b46:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <Serial+0x11>
    1b4a:	80 81       	ld	r24, Z
    1b4c:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <Serial+0x16>
    1b50:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <Serial+0x17>
    1b54:	82 fd       	sbrc	r24, 2
    1b56:	12 c0       	rjmp	.+36     	; 0x1b7c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b58:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b5a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Serial+0x19>
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b62:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <Serial+0x1a>
    1b66:	82 17       	cp	r24, r18
    1b68:	51 f0       	breq	.+20     	; 0x1b7e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b6a:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <Serial+0x19>
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	ea 52       	subi	r30, 0x2A	; 42
    1b72:	fe 4f       	sbci	r31, 0xFE	; 254
    1b74:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1b76:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Serial+0x19>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b7c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b7e:	ff 91       	pop	r31
    1b80:	ef 91       	pop	r30
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1bb4:	86 ed       	ldi	r24, 0xD6	; 214
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	0f 90       	pop	r0
    1bda:	1f 90       	pop	r1
    1bdc:	18 95       	reti

00001bde <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1bde:	86 ed       	ldi	r24, 0xD6	; 214
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN14HardwareSerial9availableEv>
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	89 2b       	or	r24, r25
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_Z17Serial0_availablev+0x10>
    1bec:	20 e0       	ldi	r18, 0x00	; 0
}
    1bee:	82 2f       	mov	r24, r18
    1bf0:	08 95       	ret

00001bf2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1bf2:	e6 ed       	ldi	r30, 0xD6	; 214
    1bf4:	f1 e0       	ldi	r31, 0x01	; 1
    1bf6:	13 82       	std	Z+3, r1	; 0x03
    1bf8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1bfa:	88 ee       	ldi	r24, 0xE8	; 232
    1bfc:	93 e0       	ldi	r25, 0x03	; 3
    1bfe:	a0 e0       	ldi	r26, 0x00	; 0
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	84 83       	std	Z+4, r24	; 0x04
    1c04:	95 83       	std	Z+5, r25	; 0x05
    1c06:	a6 83       	std	Z+6, r26	; 0x06
    1c08:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c0a:	8e e0       	ldi	r24, 0x0E	; 14
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
    1c12:	85 ec       	ldi	r24, 0xC5	; 197
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	95 87       	std	Z+13, r25	; 0x0d
    1c18:	84 87       	std	Z+12, r24	; 0x0c
    1c1a:	84 ec       	ldi	r24, 0xC4	; 196
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	97 87       	std	Z+15, r25	; 0x0f
    1c20:	86 87       	std	Z+14, r24	; 0x0e
    1c22:	80 ec       	ldi	r24, 0xC0	; 192
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 8b       	std	Z+17, r25	; 0x11
    1c28:	80 8b       	std	Z+16, r24	; 0x10
    1c2a:	81 ec       	ldi	r24, 0xC1	; 193
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	93 8b       	std	Z+19, r25	; 0x13
    1c30:	82 8b       	std	Z+18, r24	; 0x12
    1c32:	82 ec       	ldi	r24, 0xC2	; 194
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	95 8b       	std	Z+21, r25	; 0x15
    1c38:	84 8b       	std	Z+20, r24	; 0x14
    1c3a:	86 ec       	ldi	r24, 0xC6	; 198
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	97 8b       	std	Z+23, r25	; 0x17
    1c40:	86 8b       	std	Z+22, r24	; 0x16
    1c42:	11 8e       	std	Z+25, r1	; 0x19
    1c44:	12 8e       	std	Z+26, r1	; 0x1a
    1c46:	13 8e       	std	Z+27, r1	; 0x1b
    1c48:	14 8e       	std	Z+28, r1	; 0x1c
    1c4a:	08 95       	ret

00001c4c <initVariant>:
    1c4c:	08 95       	ret

00001c4e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c4e:	0e 94 1d 11 	call	0x223a	; 0x223a <init>

	initVariant();
    1c52:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c56:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c5a:	c4 e9       	ldi	r28, 0x94	; 148
    1c5c:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c5e:	0e 94 a9 05 	call	0xb52	; 0xb52 <loop>
		if (serialEventRun) serialEventRun();
    1c62:	20 97       	sbiw	r28, 0x00	; 0
    1c64:	e1 f3       	breq	.-8      	; 0x1c5e <main+0x10>
    1c66:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14serialEventRunv>
    1c6a:	f9 cf       	rjmp	.-14     	; 0x1c5e <main+0x10>

00001c6c <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	6c 01       	movw	r12, r24
    1c7e:	7a 01       	movw	r14, r20
    1c80:	8b 01       	movw	r16, r22
    1c82:	c0 e0       	ldi	r28, 0x00	; 0
    1c84:	d0 e0       	ldi	r29, 0x00	; 0
    1c86:	ce 15       	cp	r28, r14
    1c88:	df 05       	cpc	r29, r15
    1c8a:	81 f0       	breq	.+32     	; 0x1cac <_ZN5Print5writeEPKhj+0x40>
    1c8c:	d8 01       	movw	r26, r16
    1c8e:	6d 91       	ld	r22, X+
    1c90:	8d 01       	movw	r16, r26
    1c92:	d6 01       	movw	r26, r12
    1c94:	ed 91       	ld	r30, X+
    1c96:	fc 91       	ld	r31, X
    1c98:	01 90       	ld	r0, Z+
    1c9a:	f0 81       	ld	r31, Z
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	c6 01       	movw	r24, r12
    1ca0:	09 95       	icall
    1ca2:	89 2b       	or	r24, r25
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <_ZN5Print5writeEPKhj+0x3e>
    1ca6:	21 96       	adiw	r28, 0x01	; 1
    1ca8:	ee cf       	rjmp	.-36     	; 0x1c86 <_ZN5Print5writeEPKhj+0x1a>
    1caa:	7e 01       	movw	r14, r28
    1cac:	c7 01       	movw	r24, r14
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	08 95       	ret

00001cc0 <_ZN5Print5writeEPKc>:
    1cc0:	61 15       	cp	r22, r1
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	79 f0       	breq	.+30     	; 0x1ce4 <_ZN5Print5writeEPKc+0x24>
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	01 90       	ld	r0, Z+
    1cca:	00 20       	and	r0, r0
    1ccc:	e9 f7       	brne	.-6      	; 0x1cc8 <_ZN5Print5writeEPKc+0x8>
    1cce:	31 97       	sbiw	r30, 0x01	; 1
    1cd0:	af 01       	movw	r20, r30
    1cd2:	46 1b       	sub	r20, r22
    1cd4:	57 0b       	sbc	r21, r23
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    1cdc:	02 80       	ldd	r0, Z+2	; 0x02
    1cde:	f3 81       	ldd	r31, Z+3	; 0x03
    1ce0:	e0 2d       	mov	r30, r0
    1ce2:	09 94       	ijmp
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	08 95       	ret

00001cea <_ZN5Print5printEPK19__FlashStringHelper>:
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	7b 01       	movw	r14, r22
    1cfa:	c0 e0       	ldi	r28, 0x00	; 0
    1cfc:	d0 e0       	ldi	r29, 0x00	; 0
    1cfe:	f7 01       	movw	r30, r14
    1d00:	ec 0f       	add	r30, r28
    1d02:	fd 1f       	adc	r31, r29
    1d04:	64 91       	lpm	r22, Z
    1d06:	66 23       	and	r22, r22
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d0a:	d8 01       	movw	r26, r16
    1d0c:	ed 91       	ld	r30, X+
    1d0e:	fc 91       	ld	r31, X
    1d10:	01 90       	ld	r0, Z+
    1d12:	f0 81       	ld	r31, Z
    1d14:	e0 2d       	mov	r30, r0
    1d16:	c8 01       	movw	r24, r16
    1d18:	09 95       	icall
    1d1a:	89 2b       	or	r24, r25
    1d1c:	11 f0       	breq	.+4      	; 0x1d22 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d1e:	21 96       	adiw	r28, 0x01	; 1
    1d20:	ee cf       	rjmp	.-36     	; 0x1cfe <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1d22:	ce 01       	movw	r24, r28
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <_ZN5Print5printEc>:
    1d32:	dc 01       	movw	r26, r24
    1d34:	ed 91       	ld	r30, X+
    1d36:	fc 91       	ld	r31, X
    1d38:	01 90       	ld	r0, Z+
    1d3a:	f0 81       	ld	r31, Z
    1d3c:	e0 2d       	mov	r30, r0
    1d3e:	09 94       	ijmp

00001d40 <_ZN5Print7printlnEv>:
    1d40:	6c e1       	ldi	r22, 0x1C	; 28
    1d42:	71 e0       	ldi	r23, 0x01	; 1
    1d44:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <_ZN5Print5writeEPKc>

00001d48 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
    1d52:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEPK19__FlashStringHelper>
    1d56:	8c 01       	movw	r16, r24
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN5Print7printlnEv>
    1d5e:	80 0f       	add	r24, r16
    1d60:	91 1f       	adc	r25, r17
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	08 95       	ret

00001d6c <_ZN5Print11printNumberEmh>:
    1d6c:	8f 92       	push	r8
    1d6e:	9f 92       	push	r9
    1d70:	af 92       	push	r10
    1d72:	bf 92       	push	r11
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	a1 97       	sbiw	r28, 0x21	; 33
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	7c 01       	movw	r14, r24
    1d92:	fa 01       	movw	r30, r20
    1d94:	cb 01       	movw	r24, r22
    1d96:	19 a2       	std	Y+33, r1	; 0x21
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <_ZN5Print11printNumberEmh+0x32>
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	8e 01       	movw	r16, r28
    1da0:	0f 5d       	subi	r16, 0xDF	; 223
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	82 2e       	mov	r8, r18
    1da6:	91 2c       	mov	r9, r1
    1da8:	a1 2c       	mov	r10, r1
    1daa:	b1 2c       	mov	r11, r1
    1dac:	bf 01       	movw	r22, r30
    1dae:	a5 01       	movw	r20, r10
    1db0:	94 01       	movw	r18, r8
    1db2:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__udivmodsi4>
    1db6:	f9 01       	movw	r30, r18
    1db8:	ca 01       	movw	r24, r20
    1dba:	01 50       	subi	r16, 0x01	; 1
    1dbc:	11 09       	sbc	r17, r1
    1dbe:	6a 30       	cpi	r22, 0x0A	; 10
    1dc0:	10 f4       	brcc	.+4      	; 0x1dc6 <_ZN5Print11printNumberEmh+0x5a>
    1dc2:	60 5d       	subi	r22, 0xD0	; 208
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <_ZN5Print11printNumberEmh+0x5c>
    1dc6:	69 5c       	subi	r22, 0xC9	; 201
    1dc8:	d8 01       	movw	r26, r16
    1dca:	6c 93       	st	X, r22
    1dcc:	23 2b       	or	r18, r19
    1dce:	24 2b       	or	r18, r20
    1dd0:	25 2b       	or	r18, r21
    1dd2:	61 f7       	brne	.-40     	; 0x1dac <_ZN5Print11printNumberEmh+0x40>
    1dd4:	b8 01       	movw	r22, r16
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5writeEPKc>
    1ddc:	a1 96       	adiw	r28, 0x21	; 33
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	9f 90       	pop	r9
    1dfa:	8f 90       	pop	r8
    1dfc:	08 95       	ret

00001dfe <_ZN5Print5printEmi>:
    1dfe:	21 15       	cp	r18, r1
    1e00:	31 05       	cpc	r19, r1
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <_ZN5Print5printEmi+0x16>
    1e04:	dc 01       	movw	r26, r24
    1e06:	ed 91       	ld	r30, X+
    1e08:	fc 91       	ld	r31, X
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	f0 81       	ld	r31, Z
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	64 2f       	mov	r22, r20
    1e12:	09 94       	ijmp
    1e14:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <_ZN5Print11printNumberEmh>

00001e18 <_ZN5Print5printEji>:
    1e18:	9a 01       	movw	r18, r20
    1e1a:	ab 01       	movw	r20, r22
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_ZN5Print5printEmi>

00001e24 <_ZN5Print7printlnEmi>:
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	ec 01       	movw	r28, r24
    1e2e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN5Print5printEmi>
    1e32:	8c 01       	movw	r16, r24
    1e34:	ce 01       	movw	r24, r28
    1e36:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN5Print7printlnEv>
    1e3a:	80 0f       	add	r24, r16
    1e3c:	91 1f       	adc	r25, r17
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <_ZN5Print5printEli>:
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	21 15       	cp	r18, r1
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <_ZN5Print5printEli+0x36>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	01 90       	ld	r0, Z+
    1e66:	f0 81       	ld	r31, Z
    1e68:	e0 2d       	mov	r30, r0
    1e6a:	64 2f       	mov	r22, r20
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	09 94       	ijmp
    1e7e:	2a 30       	cpi	r18, 0x0A	; 10
    1e80:	31 05       	cpc	r19, r1
    1e82:	01 f5       	brne	.+64     	; 0x1ec4 <_ZN5Print5printEli+0x7c>
    1e84:	77 ff       	sbrs	r23, 7
    1e86:	1d c0       	rjmp	.+58     	; 0x1ec2 <_ZN5Print5printEli+0x7a>
    1e88:	6a 01       	movw	r12, r20
    1e8a:	7b 01       	movw	r14, r22
    1e8c:	ec 01       	movw	r28, r24
    1e8e:	6d e2       	ldi	r22, 0x2D	; 45
    1e90:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN5Print5printEc>
    1e94:	8c 01       	movw	r16, r24
    1e96:	44 27       	eor	r20, r20
    1e98:	55 27       	eor	r21, r21
    1e9a:	ba 01       	movw	r22, r20
    1e9c:	4c 19       	sub	r20, r12
    1e9e:	5d 09       	sbc	r21, r13
    1ea0:	6e 09       	sbc	r22, r14
    1ea2:	7f 09       	sbc	r23, r15
    1ea4:	2a e0       	ldi	r18, 0x0A	; 10
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN5Print11printNumberEmh>
    1eac:	80 0f       	add	r24, r16
    1eae:	91 1f       	adc	r25, r17
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	08 95       	ret
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	df 90       	pop	r13
    1ed2:	cf 90       	pop	r12
    1ed4:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <_ZN5Print11printNumberEmh>

00001ed8 <_ZN5Print5printEii>:
    1ed8:	9a 01       	movw	r18, r20
    1eda:	ab 01       	movw	r20, r22
    1edc:	77 0f       	add	r23, r23
    1ede:	66 0b       	sbc	r22, r22
    1ee0:	77 0b       	sbc	r23, r23
    1ee2:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <_ZN5Print5printEli>

00001ee6 <_ZN5Print7printlnEii>:
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	ec 01       	movw	r28, r24
    1ef0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print5printEii>
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN5Print7printlnEv>
    1efc:	80 0f       	add	r24, r16
    1efe:	91 1f       	adc	r25, r17
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <_ZN5Print10printFloatEdh>:
    1f0a:	7f 92       	push	r7
    1f0c:	8f 92       	push	r8
    1f0e:	9f 92       	push	r9
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	8c 01       	movw	r16, r24
    1f26:	6a 01       	movw	r12, r20
    1f28:	7b 01       	movw	r14, r22
    1f2a:	72 2e       	mov	r7, r18
    1f2c:	9a 01       	movw	r18, r20
    1f2e:	ab 01       	movw	r20, r22
    1f30:	c7 01       	movw	r24, r14
    1f32:	b6 01       	movw	r22, r12
    1f34:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__unordsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <_ZN5Print10printFloatEdh+0x38>
    1f3c:	6f e1       	ldi	r22, 0x1F	; 31
    1f3e:	71 e0       	ldi	r23, 0x01	; 1
    1f40:	27 c0       	rjmp	.+78     	; 0x1f90 <_ZN5Print10printFloatEdh+0x86>
    1f42:	46 01       	movw	r8, r12
    1f44:	57 01       	movw	r10, r14
    1f46:	e8 94       	clt
    1f48:	b7 f8       	bld	r11, 7
    1f4a:	2f ef       	ldi	r18, 0xFF	; 255
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	5f e7       	ldi	r21, 0x7F	; 127
    1f52:	c5 01       	movw	r24, r10
    1f54:	b4 01       	movw	r22, r8
    1f56:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__unordsf2>
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <_ZN5Print10printFloatEdh+0x6e>
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	5f e7       	ldi	r21, 0x7F	; 127
    1f66:	c5 01       	movw	r24, r10
    1f68:	b4 01       	movw	r22, r8
    1f6a:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__cmpsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	1c f4       	brge	.+6      	; 0x1f78 <_ZN5Print10printFloatEdh+0x6e>
    1f72:	63 e2       	ldi	r22, 0x23	; 35
    1f74:	71 e0       	ldi	r23, 0x01	; 1
    1f76:	0c c0       	rjmp	.+24     	; 0x1f90 <_ZN5Print10printFloatEdh+0x86>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	5f e4       	ldi	r21, 0x4F	; 79
    1f80:	c7 01       	movw	r24, r14
    1f82:	b6 01       	movw	r22, r12
    1f84:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <__gesf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	94 f4       	brge	.+36     	; 0x1fb0 <_ZN5Print10printFloatEdh+0xa6>
    1f8c:	67 e2       	ldi	r22, 0x27	; 39
    1f8e:	71 e0       	ldi	r23, 0x01	; 1
    1f90:	c8 01       	movw	r24, r16
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
    1faa:	7f 90       	pop	r7
    1fac:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <_ZN5Print5writeEPKc>
    1fb0:	2f ef       	ldi	r18, 0xFF	; 255
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	5f ec       	ldi	r21, 0xCF	; 207
    1fb8:	c7 01       	movw	r24, r14
    1fba:	b6 01       	movw	r22, r12
    1fbc:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__cmpsf2>
    1fc0:	87 fd       	sbrc	r24, 7
    1fc2:	e4 cf       	rjmp	.-56     	; 0x1f8c <_ZN5Print10printFloatEdh+0x82>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	a9 01       	movw	r20, r18
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 01       	movw	r22, r12
    1fce:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__cmpsf2>
    1fd2:	87 ff       	sbrs	r24, 7
    1fd4:	0a c0       	rjmp	.+20     	; 0x1fea <_ZN5Print10printFloatEdh+0xe0>
    1fd6:	6d e2       	ldi	r22, 0x2D	; 45
    1fd8:	c8 01       	movw	r24, r16
    1fda:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN5Print5printEc>
    1fde:	ec 01       	movw	r28, r24
    1fe0:	f7 fa       	bst	r15, 7
    1fe2:	f0 94       	com	r15
    1fe4:	f7 f8       	bld	r15, 7
    1fe6:	f0 94       	com	r15
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <_ZN5Print10printFloatEdh+0xe4>
    1fea:	c0 e0       	ldi	r28, 0x00	; 0
    1fec:	d0 e0       	ldi	r29, 0x00	; 0
    1fee:	b1 2c       	mov	r11, r1
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	9f e3       	ldi	r25, 0x3F	; 63
    1ff8:	7b 14       	cp	r7, r11
    1ffa:	41 f0       	breq	.+16     	; 0x200c <_ZN5Print10printFloatEdh+0x102>
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <__divsf3>
    2008:	b3 94       	inc	r11
    200a:	f6 cf       	rjmp	.-20     	; 0x1ff8 <_ZN5Print10printFloatEdh+0xee>
    200c:	a7 01       	movw	r20, r14
    200e:	96 01       	movw	r18, r12
    2010:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__addsf3>
    2014:	6b 01       	movw	r12, r22
    2016:	7c 01       	movw	r14, r24
    2018:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__fixunssfsi>
    201c:	4b 01       	movw	r8, r22
    201e:	5c 01       	movw	r10, r24
    2020:	2a e0       	ldi	r18, 0x0A	; 10
    2022:	ab 01       	movw	r20, r22
    2024:	bc 01       	movw	r22, r24
    2026:	c8 01       	movw	r24, r16
    2028:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN5Print11printNumberEmh>
    202c:	c8 0f       	add	r28, r24
    202e:	d9 1f       	adc	r29, r25
    2030:	77 20       	and	r7, r7
    2032:	b9 f1       	breq	.+110    	; 0x20a2 <_ZN5Print10printFloatEdh+0x198>
    2034:	c5 01       	movw	r24, r10
    2036:	b4 01       	movw	r22, r8
    2038:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__floatunsisf>
    203c:	9b 01       	movw	r18, r22
    203e:	ac 01       	movw	r20, r24
    2040:	c7 01       	movw	r24, r14
    2042:	b6 01       	movw	r22, r12
    2044:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__subsf3>
    2048:	6b 01       	movw	r12, r22
    204a:	7c 01       	movw	r14, r24
    204c:	6e e2       	ldi	r22, 0x2E	; 46
    204e:	c8 01       	movw	r24, r16
    2050:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN5Print5printEc>
    2054:	c8 0f       	add	r28, r24
    2056:	d9 1f       	adc	r29, r25
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	c7 01       	movw	r24, r14
    2062:	b6 01       	movw	r22, r12
    2064:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__mulsf3>
    2068:	4b 01       	movw	r8, r22
    206a:	5c 01       	movw	r10, r24
    206c:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__fixunssfsi>
    2070:	6b 01       	movw	r12, r22
    2072:	7c 01       	movw	r14, r24
    2074:	4a e0       	ldi	r20, 0x0A	; 10
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	c8 01       	movw	r24, r16
    207a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <_ZN5Print5printEji>
    207e:	c8 0f       	add	r28, r24
    2080:	d9 1f       	adc	r29, r25
    2082:	b6 01       	movw	r22, r12
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__floatunsisf>
    208c:	9b 01       	movw	r18, r22
    208e:	ac 01       	movw	r20, r24
    2090:	c5 01       	movw	r24, r10
    2092:	b4 01       	movw	r22, r8
    2094:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__subsf3>
    2098:	6b 01       	movw	r12, r22
    209a:	7c 01       	movw	r14, r24
    209c:	7a 94       	dec	r7
    209e:	71 10       	cpse	r7, r1
    20a0:	db cf       	rjmp	.-74     	; 0x2058 <_ZN5Print10printFloatEdh+0x14e>
    20a2:	ce 01       	movw	r24, r28
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	bf 90       	pop	r11
    20b6:	af 90       	pop	r10
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	7f 90       	pop	r7
    20be:	08 95       	ret

000020c0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    20ca:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN5Print10printFloatEdh>
    20ce:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    20d0:	ce 01       	movw	r24, r28
    20d2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN5Print7printlnEv>
  return n;
}
    20d6:	80 0f       	add	r24, r16
    20d8:	91 1f       	adc	r25, r17
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	08 95       	ret

000020e4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    20e4:	1f 92       	push	r1
    20e6:	0f 92       	push	r0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	0f 92       	push	r0
    20ec:	11 24       	eor	r1, r1
    20ee:	2f 93       	push	r18
    20f0:	3f 93       	push	r19
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <timer0_millis>
    20fe:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <timer0_millis+0x1>
    2102:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <timer0_millis+0x2>
    2106:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <timer0_millis+0x3>
    210a:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <timer0_fract>
    210e:	26 e0       	ldi	r18, 0x06	; 6
    2110:	23 0f       	add	r18, r19
    2112:	2d 37       	cpi	r18, 0x7D	; 125
    2114:	20 f4       	brcc	.+8      	; 0x211e <__vector_16+0x3a>
    2116:	02 96       	adiw	r24, 0x02	; 2
    2118:	a1 1d       	adc	r26, r1
    211a:	b1 1d       	adc	r27, r1
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <__vector_16+0x44>
    211e:	29 e8       	ldi	r18, 0x89	; 137
    2120:	23 0f       	add	r18, r19
    2122:	03 96       	adiw	r24, 0x03	; 3
    2124:	a1 1d       	adc	r26, r1
    2126:	b1 1d       	adc	r27, r1
    2128:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <timer0_fract>
    212c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <timer0_millis>
    2130:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <timer0_millis+0x1>
    2134:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <timer0_millis+0x2>
    2138:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <timer0_millis+0x3>
    213c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_overflow_count>
    2140:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_overflow_count+0x1>
    2144:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_overflow_count+0x2>
    2148:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_overflow_count+0x3>
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	a1 1d       	adc	r26, r1
    2150:	b1 1d       	adc	r27, r1
    2152:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <timer0_overflow_count>
    2156:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <timer0_overflow_count+0x1>
    215a:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <timer0_overflow_count+0x2>
    215e:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <timer0_overflow_count+0x3>
    2162:	bf 91       	pop	r27
    2164:	af 91       	pop	r26
    2166:	9f 91       	pop	r25
    2168:	8f 91       	pop	r24
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <micros>:
    2178:	3f b7       	in	r19, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_overflow_count>
    2180:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_overflow_count+0x1>
    2184:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_overflow_count+0x2>
    2188:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_overflow_count+0x3>
    218c:	26 b5       	in	r18, 0x26	; 38
    218e:	a8 9b       	sbis	0x15, 0	; 21
    2190:	05 c0       	rjmp	.+10     	; 0x219c <micros+0x24>
    2192:	2f 3f       	cpi	r18, 0xFF	; 255
    2194:	19 f0       	breq	.+6      	; 0x219c <micros+0x24>
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	a1 1d       	adc	r26, r1
    219a:	b1 1d       	adc	r27, r1
    219c:	3f bf       	out	0x3f, r19	; 63
    219e:	ba 2f       	mov	r27, r26
    21a0:	a9 2f       	mov	r26, r25
    21a2:	98 2f       	mov	r25, r24
    21a4:	88 27       	eor	r24, r24
    21a6:	82 0f       	add	r24, r18
    21a8:	91 1d       	adc	r25, r1
    21aa:	a1 1d       	adc	r26, r1
    21ac:	b1 1d       	adc	r27, r1
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	43 e0       	ldi	r20, 0x03	; 3
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	4a 95       	dec	r20
    21be:	d1 f7       	brne	.-12     	; 0x21b4 <micros+0x3c>
    21c0:	08 95       	ret

000021c2 <delay>:
    21c2:	8f 92       	push	r8
    21c4:	9f 92       	push	r9
    21c6:	af 92       	push	r10
    21c8:	bf 92       	push	r11
    21ca:	cf 92       	push	r12
    21cc:	df 92       	push	r13
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	6b 01       	movw	r12, r22
    21d4:	7c 01       	movw	r14, r24
    21d6:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    21da:	4b 01       	movw	r8, r22
    21dc:	5c 01       	movw	r10, r24
    21de:	c1 14       	cp	r12, r1
    21e0:	d1 04       	cpc	r13, r1
    21e2:	e1 04       	cpc	r14, r1
    21e4:	f1 04       	cpc	r15, r1
    21e6:	01 f1       	breq	.+64     	; 0x2228 <delay+0x66>
    21e8:	0e 94 62 29 	call	0x52c4	; 0x52c4 <yield>
    21ec:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	88 19       	sub	r24, r8
    21f6:	99 09       	sbc	r25, r9
    21f8:	aa 09       	sbc	r26, r10
    21fa:	bb 09       	sbc	r27, r11
    21fc:	88 3e       	cpi	r24, 0xE8	; 232
    21fe:	93 40       	sbci	r25, 0x03	; 3
    2200:	a1 05       	cpc	r26, r1
    2202:	b1 05       	cpc	r27, r1
    2204:	60 f3       	brcs	.-40     	; 0x21de <delay+0x1c>
    2206:	21 e0       	ldi	r18, 0x01	; 1
    2208:	c2 1a       	sub	r12, r18
    220a:	d1 08       	sbc	r13, r1
    220c:	e1 08       	sbc	r14, r1
    220e:	f1 08       	sbc	r15, r1
    2210:	88 ee       	ldi	r24, 0xE8	; 232
    2212:	88 0e       	add	r8, r24
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	98 1e       	adc	r9, r24
    2218:	a1 1c       	adc	r10, r1
    221a:	b1 1c       	adc	r11, r1
    221c:	c1 14       	cp	r12, r1
    221e:	d1 04       	cpc	r13, r1
    2220:	e1 04       	cpc	r14, r1
    2222:	f1 04       	cpc	r15, r1
    2224:	19 f7       	brne	.-58     	; 0x21ec <delay+0x2a>
    2226:	db cf       	rjmp	.-74     	; 0x21de <delay+0x1c>
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	08 95       	ret

0000223a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    223a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    223c:	84 b5       	in	r24, 0x24	; 36
    223e:	82 60       	ori	r24, 0x02	; 2
    2240:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2242:	84 b5       	in	r24, 0x24	; 36
    2244:	81 60       	ori	r24, 0x01	; 1
    2246:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2248:	85 b5       	in	r24, 0x25	; 37
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    224e:	85 b5       	in	r24, 0x25	; 37
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2254:	ee e6       	ldi	r30, 0x6E	; 110
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    225e:	e1 e8       	ldi	r30, 0x81	; 129
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2264:	80 81       	ld	r24, Z
    2266:	82 60       	ori	r24, 0x02	; 2
    2268:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    226a:	80 81       	ld	r24, Z
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2270:	e0 e8       	ldi	r30, 0x80	; 128
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    227a:	e1 eb       	ldi	r30, 0xB1	; 177
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	84 60       	ori	r24, 0x04	; 4
    2282:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2284:	e0 eb       	ldi	r30, 0xB0	; 176
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    228e:	ea e7       	ldi	r30, 0x7A	; 122
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	84 60       	ori	r24, 0x04	; 4
    2296:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2298:	80 81       	ld	r24, Z
    229a:	82 60       	ori	r24, 0x02	; 2
    229c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    229e:	80 81       	ld	r24, Z
    22a0:	8e 7f       	andi	r24, 0xFE	; 254
    22a2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22a4:	80 81       	ld	r24, Z
    22a6:	80 68       	ori	r24, 0x80	; 128
    22a8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22aa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    22ae:	08 95       	ret

000022b0 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    22b0:	cf 92       	push	r12
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
  if (howbig == 0) {
    22b8:	61 15       	cp	r22, r1
    22ba:	71 05       	cpc	r23, r1
    22bc:	81 05       	cpc	r24, r1
    22be:	91 05       	cpc	r25, r1
    22c0:	49 f0       	breq	.+18     	; 0x22d4 <_Z6randoml+0x24>
    22c2:	6b 01       	movw	r12, r22
    22c4:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    22c6:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <random>
    22ca:	a7 01       	movw	r20, r14
    22cc:	96 01       	movw	r18, r12
    22ce:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    22da:	ff 90       	pop	r15
    22dc:	ef 90       	pop	r14
    22de:	df 90       	pop	r13
    22e0:	cf 90       	pop	r12
    22e2:	08 95       	ret

000022e4 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
  if (howsmall >= howbig) {
    22f0:	62 17       	cp	r22, r18
    22f2:	73 07       	cpc	r23, r19
    22f4:	84 07       	cpc	r24, r20
    22f6:	95 07       	cpc	r25, r21
    22f8:	84 f4       	brge	.+32     	; 0x231a <_Z6randomll+0x36>
    22fa:	89 01       	movw	r16, r18
    22fc:	9a 01       	movw	r18, r20
    22fe:	6b 01       	movw	r12, r22
    2300:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2302:	c9 01       	movw	r24, r18
    2304:	b8 01       	movw	r22, r16
    2306:	6c 19       	sub	r22, r12
    2308:	7d 09       	sbc	r23, r13
    230a:	8e 09       	sbc	r24, r14
    230c:	9f 09       	sbc	r25, r15
    230e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_Z6randoml>
    2312:	6c 0d       	add	r22, r12
    2314:	7d 1d       	adc	r23, r13
    2316:	8e 1d       	adc	r24, r14
    2318:	9f 1d       	adc	r25, r15
}
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	08 95       	ret

00002328 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	2c 01       	movw	r4, r24
    2358:	7e 83       	std	Y+6, r23	; 0x06
    235a:	6d 83       	std	Y+5, r22	; 0x05
    235c:	6a 01       	movw	r12, r20
    235e:	59 01       	movw	r10, r18
    2360:	c8 01       	movw	r24, r16
    2362:	fc 82       	std	Y+4, r15	; 0x04
    2364:	eb 82       	std	Y+3, r14	; 0x03
    2366:	48 01       	movw	r8, r16
    2368:	84 1a       	sub	r8, r20
    236a:	95 0a       	sbc	r9, r21
    236c:	97 fe       	sbrs	r9, 7
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2370:	91 94       	neg	r9
    2372:	81 94       	neg	r8
    2374:	91 08       	sbc	r9, r1
    2376:	35 01       	movw	r6, r10
    2378:	2d 81       	ldd	r18, Y+5	; 0x05
    237a:	3e 81       	ldd	r19, Y+6	; 0x06
    237c:	62 1a       	sub	r6, r18
    237e:	73 0a       	sbc	r7, r19
    2380:	77 fe       	sbrs	r7, 7
    2382:	03 c0       	rjmp	.+6      	; 0x238a <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    2384:	71 94       	neg	r7
    2386:	61 94       	neg	r6
    2388:	71 08       	sbc	r7, r1
    238a:	68 14       	cp	r6, r8
    238c:	79 04       	cpc	r7, r9
    238e:	5c f4       	brge	.+22     	; 0x23a6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    2390:	3a 2d       	mov	r19, r10
    2392:	2b 2d       	mov	r18, r11
    2394:	5c 01       	movw	r10, r24
    2396:	83 2f       	mov	r24, r19
    2398:	92 2f       	mov	r25, r18
    239a:	3d 81       	ldd	r19, Y+5	; 0x05
    239c:	2e 81       	ldd	r18, Y+6	; 0x06
    239e:	de 82       	std	Y+6, r13	; 0x06
    23a0:	cd 82       	std	Y+5, r12	; 0x05
    23a2:	c3 2e       	mov	r12, r19
    23a4:	d2 2e       	mov	r13, r18
    23a6:	ad 81       	ldd	r26, Y+5	; 0x05
    23a8:	be 81       	ldd	r27, Y+6	; 0x06
    23aa:	aa 16       	cp	r10, r26
    23ac:	bb 06       	cpc	r11, r27
    23ae:	5c f4       	brge	.+22     	; 0x23c6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    23b0:	3c 2d       	mov	r19, r12
    23b2:	2d 2d       	mov	r18, r13
    23b4:	6c 01       	movw	r12, r24
    23b6:	83 2f       	mov	r24, r19
    23b8:	92 2f       	mov	r25, r18
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	2e 81       	ldd	r18, Y+6	; 0x06
    23be:	be 82       	std	Y+6, r11	; 0x06
    23c0:	ad 82       	std	Y+5, r10	; 0x05
    23c2:	a3 2e       	mov	r10, r19
    23c4:	b2 2e       	mov	r11, r18
    23c6:	85 01       	movw	r16, r10
    23c8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ca:	3e 81       	ldd	r19, Y+6	; 0x06
    23cc:	02 1b       	sub	r16, r18
    23ce:	13 0b       	sbc	r17, r19
    23d0:	1c 01       	movw	r2, r24
    23d2:	2c 18       	sub	r2, r12
    23d4:	3d 08       	sbc	r3, r13
    23d6:	37 fe       	sbrs	r3, 7
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    23da:	31 94       	neg	r3
    23dc:	21 94       	neg	r2
    23de:	31 08       	sbc	r3, r1
    23e0:	78 01       	movw	r14, r16
    23e2:	17 ff       	sbrs	r17, 7
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	e3 1a       	sub	r14, r19
    23ea:	f3 0a       	sbc	r15, r19
    23ec:	f5 94       	asr	r15
    23ee:	e7 94       	ror	r14
    23f0:	c8 16       	cp	r12, r24
    23f2:	d9 06       	cpc	r13, r25
    23f4:	2c f0       	brlt	.+10     	; 0x2400 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	9f ef       	ldi	r25, 0xFF	; 255
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    2400:	a1 e0       	ldi	r26, 0x01	; 1
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	ba 83       	std	Y+2, r27	; 0x02
    2406:	a9 83       	std	Y+1, r26	; 0x01
    2408:	2d 81       	ldd	r18, Y+5	; 0x05
    240a:	3e 81       	ldd	r19, Y+6	; 0x06
    240c:	a2 16       	cp	r10, r18
    240e:	b3 06       	cpc	r11, r19
    2410:	24 f1       	brlt	.+72     	; 0x245a <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    2412:	d2 01       	movw	r26, r4
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	04 84       	ldd	r0, Z+12	; 0x0c
    241a:	f5 85       	ldd	r31, Z+13	; 0x0d
    241c:	e0 2d       	mov	r30, r0
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	68 14       	cp	r6, r8
    2424:	79 04       	cpc	r7, r9
    2426:	24 f4       	brge	.+8      	; 0x2430 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    2428:	4d 81       	ldd	r20, Y+5	; 0x05
    242a:	5e 81       	ldd	r21, Y+6	; 0x06
    242c:	b6 01       	movw	r22, r12
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    2430:	a6 01       	movw	r20, r12
    2432:	6d 81       	ldd	r22, Y+5	; 0x05
    2434:	7e 81       	ldd	r23, Y+6	; 0x06
    2436:	c2 01       	movw	r24, r4
    2438:	09 95       	icall
    243a:	e2 18       	sub	r14, r2
    243c:	f3 08       	sbc	r15, r3
    243e:	f7 fe       	sbrs	r15, 7
    2440:	06 c0       	rjmp	.+12     	; 0x244e <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    2442:	29 81       	ldd	r18, Y+1	; 0x01
    2444:	3a 81       	ldd	r19, Y+2	; 0x02
    2446:	c2 0e       	add	r12, r18
    2448:	d3 1e       	adc	r13, r19
    244a:	e0 0e       	add	r14, r16
    244c:	f1 1e       	adc	r15, r17
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	d7 cf       	rjmp	.-82     	; 0x2408 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    245a:	26 96       	adiw	r28, 0x06	; 6
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	af 90       	pop	r10
    247a:	9f 90       	pop	r9
    247c:	8f 90       	pop	r8
    247e:	7f 90       	pop	r7
    2480:	6f 90       	pop	r6
    2482:	5f 90       	pop	r5
    2484:	4f 90       	pop	r4
    2486:	3f 90       	pop	r3
    2488:	2f 90       	pop	r2
    248a:	08 95       	ret

0000248c <_ZN12Adafruit_GFX10writePixelEiij>:
    248c:	dc 01       	movw	r26, r24
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	00 84       	ldd	r0, Z+8	; 0x08
    2494:	f1 85       	ldd	r31, Z+9	; 0x09
    2496:	e0 2d       	mov	r30, r0
    2498:	09 94       	ijmp

0000249a <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	dc 01       	movw	r26, r24
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	04 8c       	ldd	r0, Z+28	; 0x1c
    24a6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    24a8:	e0 2d       	mov	r30, r0
    24aa:	09 95       	icall
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	08 95       	ret

000024b2 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	dc 01       	movw	r26, r24
    24b8:	ed 91       	ld	r30, X+
    24ba:	fc 91       	ld	r31, X
    24bc:	06 8c       	ldd	r0, Z+30	; 0x1e
    24be:	f7 8d       	ldd	r31, Z+31	; 0x1f
    24c0:	e0 2d       	mov	r30, r0
    24c2:	09 95       	icall
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	dc 01       	movw	r26, r24
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	00 a0       	ldd	r0, Z+32	; 0x20
    24da:	f1 a1       	ldd	r31, Z+33	; 0x21
    24dc:	e0 2d       	mov	r30, r0
    24de:	09 95       	icall
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	08 95       	ret

000024ea <_ZN12Adafruit_GFX10startWriteEv>:
    24ea:	08 95       	ret

000024ec <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
    2506:	5b 01       	movw	r10, r22
    2508:	4a 01       	movw	r8, r20
    250a:	69 01       	movw	r12, r18
    250c:	78 01       	movw	r14, r16
    250e:	e8 81       	ld	r30, Y
    2510:	f9 81       	ldd	r31, Y+1	; 0x01
    2512:	02 84       	ldd	r0, Z+10	; 0x0a
    2514:	f3 85       	ldd	r31, Z+11	; 0x0b
    2516:	e0 2d       	mov	r30, r0
    2518:	09 95       	icall
    251a:	c8 0c       	add	r12, r8
    251c:	d9 1c       	adc	r13, r9
    251e:	86 01       	movw	r16, r12
    2520:	01 50       	subi	r16, 0x01	; 1
    2522:	11 09       	sbc	r17, r1
    2524:	e8 81       	ld	r30, Y
    2526:	f9 81       	ldd	r31, Y+1	; 0x01
    2528:	04 88       	ldd	r0, Z+20	; 0x14
    252a:	f5 89       	ldd	r31, Z+21	; 0x15
    252c:	e0 2d       	mov	r30, r0
    252e:	95 01       	movw	r18, r10
    2530:	a4 01       	movw	r20, r8
    2532:	b5 01       	movw	r22, r10
    2534:	ce 01       	movw	r24, r28
    2536:	09 95       	icall
    2538:	e8 81       	ld	r30, Y
    253a:	f9 81       	ldd	r31, Y+1	; 0x01
    253c:	06 88       	ldd	r0, Z+22	; 0x16
    253e:	f7 89       	ldd	r31, Z+23	; 0x17
    2540:	e0 2d       	mov	r30, r0
    2542:	ce 01       	movw	r24, r28
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	cf 90       	pop	r12
    2554:	bf 90       	pop	r11
    2556:	af 90       	pop	r10
    2558:	9f 90       	pop	r9
    255a:	8f 90       	pop	r8
    255c:	09 94       	ijmp

0000255e <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    255e:	8f 92       	push	r8
    2560:	9f 92       	push	r9
    2562:	af 92       	push	r10
    2564:	bf 92       	push	r11
    2566:	cf 92       	push	r12
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ec 01       	movw	r28, r24
    2578:	5b 01       	movw	r10, r22
    257a:	4a 01       	movw	r8, r20
    257c:	69 01       	movw	r12, r18
    257e:	e8 81       	ld	r30, Y
    2580:	f9 81       	ldd	r31, Y+1	; 0x01
    2582:	02 84       	ldd	r0, Z+10	; 0x0a
    2584:	f3 85       	ldd	r31, Z+11	; 0x0b
    2586:	e0 2d       	mov	r30, r0
    2588:	09 95       	icall
    258a:	95 01       	movw	r18, r10
    258c:	2c 0d       	add	r18, r12
    258e:	3d 1d       	adc	r19, r13
    2590:	21 50       	subi	r18, 0x01	; 1
    2592:	31 09       	sbc	r19, r1
    2594:	e8 81       	ld	r30, Y
    2596:	f9 81       	ldd	r31, Y+1	; 0x01
    2598:	04 88       	ldd	r0, Z+20	; 0x14
    259a:	f5 89       	ldd	r31, Z+21	; 0x15
    259c:	e0 2d       	mov	r30, r0
    259e:	78 01       	movw	r14, r16
    25a0:	84 01       	movw	r16, r8
    25a2:	a4 01       	movw	r20, r8
    25a4:	b5 01       	movw	r22, r10
    25a6:	ce 01       	movw	r24, r28
    25a8:	09 95       	icall
    25aa:	e8 81       	ld	r30, Y
    25ac:	f9 81       	ldd	r31, Y+1	; 0x01
    25ae:	06 88       	ldd	r0, Z+22	; 0x16
    25b0:	f7 89       	ldd	r31, Z+23	; 0x17
    25b2:	e0 2d       	mov	r30, r0
    25b4:	ce 01       	movw	r24, r28
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	ff 90       	pop	r15
    25c0:	ef 90       	pop	r14
    25c2:	df 90       	pop	r13
    25c4:	cf 90       	pop	r12
    25c6:	bf 90       	pop	r11
    25c8:	af 90       	pop	r10
    25ca:	9f 90       	pop	r9
    25cc:	8f 90       	pop	r8
    25ce:	09 94       	ijmp

000025d0 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    25d0:	4f 92       	push	r4
    25d2:	5f 92       	push	r5
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	6c 01       	movw	r12, r24
    25f2:	2b 01       	movw	r4, r22
    25f4:	5a 01       	movw	r10, r20
    25f6:	39 01       	movw	r6, r18
    25f8:	48 01       	movw	r8, r16
    25fa:	dc 01       	movw	r26, r24
    25fc:	ed 91       	ld	r30, X+
    25fe:	fc 91       	ld	r31, X
    2600:	02 84       	ldd	r0, Z+10	; 0x0a
    2602:	f3 85       	ldd	r31, Z+11	; 0x0b
    2604:	e0 2d       	mov	r30, r0
    2606:	09 95       	icall
    2608:	e2 01       	movw	r28, r4
    260a:	64 0c       	add	r6, r4
    260c:	75 1c       	adc	r7, r5
    260e:	d6 01       	movw	r26, r12
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	c6 15       	cp	r28, r6
    2616:	d7 05       	cpc	r29, r7
    2618:	5c f4       	brge	.+22     	; 0x2630 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    261a:	00 88       	ldd	r0, Z+16	; 0x10
    261c:	f1 89       	ldd	r31, Z+17	; 0x11
    261e:	e0 2d       	mov	r30, r0
    2620:	87 01       	movw	r16, r14
    2622:	94 01       	movw	r18, r8
    2624:	a5 01       	movw	r20, r10
    2626:	be 01       	movw	r22, r28
    2628:	c6 01       	movw	r24, r12
    262a:	09 95       	icall
    262c:	21 96       	adiw	r28, 0x01	; 1
    262e:	ef cf       	rjmp	.-34     	; 0x260e <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    2630:	06 88       	ldd	r0, Z+22	; 0x16
    2632:	f7 89       	ldd	r31, Z+23	; 0x17
    2634:	e0 2d       	mov	r30, r0
    2636:	c6 01       	movw	r24, r12
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
    2652:	6f 90       	pop	r6
    2654:	5f 90       	pop	r5
    2656:	4f 90       	pop	r4
    2658:	09 94       	ijmp

0000265a <_ZN12Adafruit_GFX10fillScreenEj>:
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	dc 01       	movw	r26, r24
    2664:	1a 96       	adiw	r26, 0x0a	; 10
    2666:	0d 91       	ld	r16, X+
    2668:	1c 91       	ld	r17, X
    266a:	1b 97       	sbiw	r26, 0x0b	; 11
    266c:	18 96       	adiw	r26, 0x08	; 8
    266e:	2d 91       	ld	r18, X+
    2670:	3c 91       	ld	r19, X
    2672:	19 97       	sbiw	r26, 0x09	; 9
    2674:	ed 91       	ld	r30, X+
    2676:	fc 91       	ld	r31, X
    2678:	00 a0       	ldd	r0, Z+32	; 0x20
    267a:	f1 a1       	ldd	r31, Z+33	; 0x21
    267c:	e0 2d       	mov	r30, r0
    267e:	7b 01       	movw	r14, r22
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	09 95       	icall
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	08 95       	ret

00002694 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2694:	8f 92       	push	r8
    2696:	9f 92       	push	r9
    2698:	af 92       	push	r10
    269a:	bf 92       	push	r11
    269c:	cf 92       	push	r12
    269e:	df 92       	push	r13
    26a0:	ef 92       	push	r14
    26a2:	ff 92       	push	r15
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	4c 01       	movw	r8, r24
    26ae:	6b 01       	movw	r12, r22
    26b0:	5a 01       	movw	r10, r20
    26b2:	e9 01       	movw	r28, r18
    26b4:	dc 01       	movw	r26, r24
    26b6:	ed 91       	ld	r30, X+
    26b8:	fc 91       	ld	r31, X
    26ba:	62 17       	cp	r22, r18
    26bc:	73 07       	cpc	r23, r19
    26be:	81 f4       	brne	.+32     	; 0x26e0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    26c0:	04 17       	cp	r16, r20
    26c2:	15 07       	cpc	r17, r21
    26c4:	24 f4       	brge	.+8      	; 0x26ce <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    26c6:	8b 2d       	mov	r24, r11
    26c8:	58 01       	movw	r10, r16
    26ca:	04 2f       	mov	r16, r20
    26cc:	18 2f       	mov	r17, r24
    26ce:	0a 19       	sub	r16, r10
    26d0:	1b 09       	sbc	r17, r11
    26d2:	98 01       	movw	r18, r16
    26d4:	2f 5f       	subi	r18, 0xFF	; 255
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	04 8c       	ldd	r0, Z+28	; 0x1c
    26da:	f5 8d       	ldd	r31, Z+29	; 0x1d
    26dc:	e0 2d       	mov	r30, r0
    26de:	12 c0       	rjmp	.+36     	; 0x2704 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    26e0:	40 17       	cp	r20, r16
    26e2:	51 07       	cpc	r21, r17
    26e4:	09 f5       	brne	.+66     	; 0x2728 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    26e6:	26 17       	cp	r18, r22
    26e8:	37 07       	cpc	r19, r23
    26ea:	24 f4       	brge	.+8      	; 0x26f4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    26ec:	8d 2d       	mov	r24, r13
    26ee:	69 01       	movw	r12, r18
    26f0:	c6 2f       	mov	r28, r22
    26f2:	d8 2f       	mov	r29, r24
    26f4:	9e 01       	movw	r18, r28
    26f6:	2c 19       	sub	r18, r12
    26f8:	3d 09       	sbc	r19, r13
    26fa:	2f 5f       	subi	r18, 0xFF	; 255
    26fc:	3f 4f       	sbci	r19, 0xFF	; 255
    26fe:	06 8c       	ldd	r0, Z+30	; 0x1e
    2700:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2702:	e0 2d       	mov	r30, r0
    2704:	87 01       	movw	r16, r14
    2706:	a5 01       	movw	r20, r10
    2708:	b6 01       	movw	r22, r12
    270a:	c4 01       	movw	r24, r8
    270c:	09 95       	icall
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	8f 90       	pop	r8
    2726:	08 95       	ret
    2728:	02 84       	ldd	r0, Z+10	; 0x0a
    272a:	f3 85       	ldd	r31, Z+11	; 0x0b
    272c:	e0 2d       	mov	r30, r0
    272e:	09 95       	icall
    2730:	d4 01       	movw	r26, r8
    2732:	ed 91       	ld	r30, X+
    2734:	fc 91       	ld	r31, X
    2736:	04 88       	ldd	r0, Z+20	; 0x14
    2738:	f5 89       	ldd	r31, Z+21	; 0x15
    273a:	e0 2d       	mov	r30, r0
    273c:	9e 01       	movw	r18, r28
    273e:	a5 01       	movw	r20, r10
    2740:	b6 01       	movw	r22, r12
    2742:	c4 01       	movw	r24, r8
    2744:	09 95       	icall
    2746:	d4 01       	movw	r26, r8
    2748:	ed 91       	ld	r30, X+
    274a:	fc 91       	ld	r31, X
    274c:	06 88       	ldd	r0, Z+22	; 0x16
    274e:	f7 89       	ldd	r31, Z+23	; 0x17
    2750:	e0 2d       	mov	r30, r0
    2752:	c4 01       	movw	r24, r8
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	df 90       	pop	r13
    2762:	cf 90       	pop	r12
    2764:	bf 90       	pop	r11
    2766:	af 90       	pop	r10
    2768:	9f 90       	pop	r9
    276a:	8f 90       	pop	r8
    276c:	09 94       	ijmp

0000276e <_ZN12Adafruit_GFX8drawRectEiiiij>:
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	ec 01       	movw	r28, r24
    278c:	4b 01       	movw	r8, r22
    278e:	5a 01       	movw	r10, r20
    2790:	69 01       	movw	r12, r18
    2792:	38 01       	movw	r6, r16
    2794:	e8 81       	ld	r30, Y
    2796:	f9 81       	ldd	r31, Y+1	; 0x01
    2798:	02 84       	ldd	r0, Z+10	; 0x0a
    279a:	f3 85       	ldd	r31, Z+11	; 0x0b
    279c:	e0 2d       	mov	r30, r0
    279e:	09 95       	icall
    27a0:	e8 81       	ld	r30, Y
    27a2:	f9 81       	ldd	r31, Y+1	; 0x01
    27a4:	02 88       	ldd	r0, Z+18	; 0x12
    27a6:	f3 89       	ldd	r31, Z+19	; 0x13
    27a8:	e0 2d       	mov	r30, r0
    27aa:	87 01       	movw	r16, r14
    27ac:	96 01       	movw	r18, r12
    27ae:	a5 01       	movw	r20, r10
    27b0:	b4 01       	movw	r22, r8
    27b2:	ce 01       	movw	r24, r28
    27b4:	09 95       	icall
    27b6:	a5 01       	movw	r20, r10
    27b8:	46 0d       	add	r20, r6
    27ba:	57 1d       	adc	r21, r7
    27bc:	41 50       	subi	r20, 0x01	; 1
    27be:	51 09       	sbc	r21, r1
    27c0:	e8 81       	ld	r30, Y
    27c2:	f9 81       	ldd	r31, Y+1	; 0x01
    27c4:	02 88       	ldd	r0, Z+18	; 0x12
    27c6:	f3 89       	ldd	r31, Z+19	; 0x13
    27c8:	e0 2d       	mov	r30, r0
    27ca:	96 01       	movw	r18, r12
    27cc:	b4 01       	movw	r22, r8
    27ce:	ce 01       	movw	r24, r28
    27d0:	09 95       	icall
    27d2:	e8 81       	ld	r30, Y
    27d4:	f9 81       	ldd	r31, Y+1	; 0x01
    27d6:	00 88       	ldd	r0, Z+16	; 0x10
    27d8:	f1 89       	ldd	r31, Z+17	; 0x11
    27da:	e0 2d       	mov	r30, r0
    27dc:	93 01       	movw	r18, r6
    27de:	a5 01       	movw	r20, r10
    27e0:	b4 01       	movw	r22, r8
    27e2:	ce 01       	movw	r24, r28
    27e4:	09 95       	icall
    27e6:	c8 0c       	add	r12, r8
    27e8:	d9 1c       	adc	r13, r9
    27ea:	b6 01       	movw	r22, r12
    27ec:	61 50       	subi	r22, 0x01	; 1
    27ee:	71 09       	sbc	r23, r1
    27f0:	e8 81       	ld	r30, Y
    27f2:	f9 81       	ldd	r31, Y+1	; 0x01
    27f4:	00 88       	ldd	r0, Z+16	; 0x10
    27f6:	f1 89       	ldd	r31, Z+17	; 0x11
    27f8:	e0 2d       	mov	r30, r0
    27fa:	93 01       	movw	r18, r6
    27fc:	a5 01       	movw	r20, r10
    27fe:	ce 01       	movw	r24, r28
    2800:	09 95       	icall
    2802:	e8 81       	ld	r30, Y
    2804:	f9 81       	ldd	r31, Y+1	; 0x01
    2806:	06 88       	ldd	r0, Z+22	; 0x16
    2808:	f7 89       	ldd	r31, Z+23	; 0x17
    280a:	e0 2d       	mov	r30, r0
    280c:	ce 01       	movw	r24, r28
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	df 90       	pop	r13
    281c:	cf 90       	pop	r12
    281e:	bf 90       	pop	r11
    2820:	af 90       	pop	r10
    2822:	9f 90       	pop	r9
    2824:	8f 90       	pop	r8
    2826:	7f 90       	pop	r7
    2828:	6f 90       	pop	r6
    282a:	09 94       	ijmp

0000282c <_ZN12Adafruit_GFX13invertDisplayEb>:
    282c:	08 95       	ret

0000282e <_ZN12Adafruit_GFX11setRotationEh>:
    282e:	fc 01       	movw	r30, r24
    2830:	63 70       	andi	r22, 0x03	; 3
    2832:	66 8b       	std	Z+22, r22	; 0x16
    2834:	84 81       	ldd	r24, Z+4	; 0x04
    2836:	95 81       	ldd	r25, Z+5	; 0x05
    2838:	26 81       	ldd	r18, Z+6	; 0x06
    283a:	37 81       	ldd	r19, Z+7	; 0x07
    283c:	61 30       	cpi	r22, 0x01	; 1
    283e:	39 f0       	breq	.+14     	; 0x284e <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2840:	63 30       	cpi	r22, 0x03	; 3
    2842:	29 f0       	breq	.+10     	; 0x284e <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2844:	91 87       	std	Z+9, r25	; 0x09
    2846:	80 87       	std	Z+8, r24	; 0x08
    2848:	33 87       	std	Z+11, r19	; 0x0b
    284a:	22 87       	std	Z+10, r18	; 0x0a
    284c:	08 95       	ret
    284e:	31 87       	std	Z+9, r19	; 0x09
    2850:	20 87       	std	Z+8, r18	; 0x08
    2852:	93 87       	std	Z+11, r25	; 0x0b
    2854:	82 87       	std	Z+10, r24	; 0x0a
    2856:	08 95       	ret

00002858 <_ZN12Adafruit_GFXC1Eii>:
    2858:	fc 01       	movw	r30, r24
    285a:	13 82       	std	Z+3, r1	; 0x03
    285c:	12 82       	std	Z+2, r1	; 0x02
    285e:	8f e2       	ldi	r24, 0x2F	; 47
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	75 83       	std	Z+5, r23	; 0x05
    2868:	64 83       	std	Z+4, r22	; 0x04
    286a:	57 83       	std	Z+7, r21	; 0x07
    286c:	46 83       	std	Z+6, r20	; 0x06
    286e:	71 87       	std	Z+9, r23	; 0x09
    2870:	60 87       	std	Z+8, r22	; 0x08
    2872:	53 87       	std	Z+11, r21	; 0x0b
    2874:	42 87       	std	Z+10, r20	; 0x0a
    2876:	16 8a       	std	Z+22, r1	; 0x16
    2878:	15 86       	std	Z+13, r1	; 0x0d
    287a:	14 86       	std	Z+12, r1	; 0x0c
    287c:	17 86       	std	Z+15, r1	; 0x0f
    287e:	16 86       	std	Z+14, r1	; 0x0e
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	85 8b       	std	Z+21, r24	; 0x15
    2884:	84 8b       	std	Z+20, r24	; 0x14
    2886:	2f ef       	ldi	r18, 0xFF	; 255
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	33 8b       	std	Z+19, r19	; 0x13
    288c:	22 8b       	std	Z+18, r18	; 0x12
    288e:	31 8b       	std	Z+17, r19	; 0x11
    2890:	20 8b       	std	Z+16, r18	; 0x10
    2892:	87 8b       	std	Z+23, r24	; 0x17
    2894:	10 8e       	std	Z+24, r1	; 0x18
    2896:	12 8e       	std	Z+26, r1	; 0x1a
    2898:	11 8e       	std	Z+25, r1	; 0x19
    289a:	08 95       	ret

0000289c <_ZN12Adafruit_GFX10drawCircleEiiij>:
    289c:	2f 92       	push	r2
    289e:	3f 92       	push	r3
    28a0:	4f 92       	push	r4
    28a2:	5f 92       	push	r5
    28a4:	6f 92       	push	r6
    28a6:	7f 92       	push	r7
    28a8:	8f 92       	push	r8
    28aa:	9f 92       	push	r9
    28ac:	af 92       	push	r10
    28ae:	bf 92       	push	r11
    28b0:	cf 92       	push	r12
    28b2:	df 92       	push	r13
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <_ZN12Adafruit_GFX10drawCircleEiiij+0x26>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <_ZN12Adafruit_GFX10drawCircleEiiij+0x28>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <_ZN12Adafruit_GFX10drawCircleEiiij+0x2a>
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	5b 01       	movw	r10, r22
    28d0:	6a 01       	movw	r12, r20
    28d2:	79 01       	movw	r14, r18
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	3c 01       	movw	r6, r24
    28da:	62 1a       	sub	r6, r18
    28dc:	73 0a       	sbc	r7, r19
    28de:	88 27       	eor	r24, r24
    28e0:	99 27       	eor	r25, r25
    28e2:	82 1b       	sub	r24, r18
    28e4:	93 0b       	sbc	r25, r19
    28e6:	9c 01       	movw	r18, r24
    28e8:	22 0f       	add	r18, r18
    28ea:	33 1f       	adc	r19, r19
    28ec:	3c 83       	std	Y+4, r19	; 0x04
    28ee:	2b 83       	std	Y+3, r18	; 0x03
    28f0:	ad 81       	ldd	r26, Y+5	; 0x05
    28f2:	be 81       	ldd	r27, Y+6	; 0x06
    28f4:	ed 91       	ld	r30, X+
    28f6:	fc 91       	ld	r31, X
    28f8:	11 97       	sbiw	r26, 0x01	; 1
    28fa:	02 84       	ldd	r0, Z+10	; 0x0a
    28fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    28fe:	e0 2d       	mov	r30, r0
    2900:	cd 01       	movw	r24, r26
    2902:	09 95       	icall
    2904:	a7 01       	movw	r20, r14
    2906:	4c 0d       	add	r20, r12
    2908:	5d 1d       	adc	r21, r13
    290a:	ad 81       	ldd	r26, Y+5	; 0x05
    290c:	be 81       	ldd	r27, Y+6	; 0x06
    290e:	ed 91       	ld	r30, X+
    2910:	fc 91       	ld	r31, X
    2912:	11 97       	sbiw	r26, 0x01	; 1
    2914:	04 84       	ldd	r0, Z+12	; 0x0c
    2916:	f5 85       	ldd	r31, Z+13	; 0x0d
    2918:	e0 2d       	mov	r30, r0
    291a:	98 01       	movw	r18, r16
    291c:	b5 01       	movw	r22, r10
    291e:	cd 01       	movw	r24, r26
    2920:	09 95       	icall
    2922:	a6 01       	movw	r20, r12
    2924:	4e 19       	sub	r20, r14
    2926:	5f 09       	sbc	r21, r15
    2928:	ad 81       	ldd	r26, Y+5	; 0x05
    292a:	be 81       	ldd	r27, Y+6	; 0x06
    292c:	ed 91       	ld	r30, X+
    292e:	fc 91       	ld	r31, X
    2930:	11 97       	sbiw	r26, 0x01	; 1
    2932:	04 84       	ldd	r0, Z+12	; 0x0c
    2934:	f5 85       	ldd	r31, Z+13	; 0x0d
    2936:	e0 2d       	mov	r30, r0
    2938:	98 01       	movw	r18, r16
    293a:	b5 01       	movw	r22, r10
    293c:	cd 01       	movw	r24, r26
    293e:	09 95       	icall
    2940:	b7 01       	movw	r22, r14
    2942:	6a 0d       	add	r22, r10
    2944:	7b 1d       	adc	r23, r11
    2946:	ad 81       	ldd	r26, Y+5	; 0x05
    2948:	be 81       	ldd	r27, Y+6	; 0x06
    294a:	ed 91       	ld	r30, X+
    294c:	fc 91       	ld	r31, X
    294e:	11 97       	sbiw	r26, 0x01	; 1
    2950:	04 84       	ldd	r0, Z+12	; 0x0c
    2952:	f5 85       	ldd	r31, Z+13	; 0x0d
    2954:	e0 2d       	mov	r30, r0
    2956:	98 01       	movw	r18, r16
    2958:	a6 01       	movw	r20, r12
    295a:	cd 01       	movw	r24, r26
    295c:	09 95       	icall
    295e:	b5 01       	movw	r22, r10
    2960:	6e 19       	sub	r22, r14
    2962:	7f 09       	sbc	r23, r15
    2964:	ad 81       	ldd	r26, Y+5	; 0x05
    2966:	be 81       	ldd	r27, Y+6	; 0x06
    2968:	ed 91       	ld	r30, X+
    296a:	fc 91       	ld	r31, X
    296c:	11 97       	sbiw	r26, 0x01	; 1
    296e:	04 84       	ldd	r0, Z+12	; 0x0c
    2970:	f5 85       	ldd	r31, Z+13	; 0x0d
    2972:	e0 2d       	mov	r30, r0
    2974:	98 01       	movw	r18, r16
    2976:	a6 01       	movw	r20, r12
    2978:	cd 01       	movw	r24, r26
    297a:	09 95       	icall
    297c:	81 2c       	mov	r8, r1
    297e:	91 2c       	mov	r9, r1
    2980:	ad 81       	ldd	r26, Y+5	; 0x05
    2982:	be 81       	ldd	r27, Y+6	; 0x06
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	8e 14       	cp	r8, r14
    298a:	9f 04       	cpc	r9, r15
    298c:	0c f0       	brlt	.+2      	; 0x2990 <_ZN12Adafruit_GFX10drawCircleEiiij+0xf4>
    298e:	99 c0       	rjmp	.+306    	; 0x2ac2 <_ZN12Adafruit_GFX10drawCircleEiiij+0x226>
    2990:	77 fc       	sbrc	r7, 7
    2992:	0b c0       	rjmp	.+22     	; 0x29aa <_ZN12Adafruit_GFX10drawCircleEiiij+0x10e>
    2994:	b1 e0       	ldi	r27, 0x01	; 1
    2996:	eb 1a       	sub	r14, r27
    2998:	f1 08       	sbc	r15, r1
    299a:	2b 81       	ldd	r18, Y+3	; 0x03
    299c:	3c 81       	ldd	r19, Y+4	; 0x04
    299e:	2e 5f       	subi	r18, 0xFE	; 254
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	3c 83       	std	Y+4, r19	; 0x04
    29a4:	2b 83       	std	Y+3, r18	; 0x03
    29a6:	62 0e       	add	r6, r18
    29a8:	73 1e       	adc	r7, r19
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	83 1a       	sub	r8, r19
    29ae:	93 0a       	sbc	r9, r19
    29b0:	c4 01       	movw	r24, r8
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	68 0e       	add	r6, r24
    29ba:	79 1e       	adc	r7, r25
    29bc:	14 01       	movw	r2, r8
    29be:	2a 0c       	add	r2, r10
    29c0:	3b 1c       	adc	r3, r11
    29c2:	04 84       	ldd	r0, Z+12	; 0x0c
    29c4:	f5 85       	ldd	r31, Z+13	; 0x0d
    29c6:	e0 2d       	mov	r30, r0
    29c8:	98 01       	movw	r18, r16
    29ca:	27 01       	movw	r4, r14
    29cc:	4c 0c       	add	r4, r12
    29ce:	5d 1c       	adc	r5, r13
    29d0:	a2 01       	movw	r20, r4
    29d2:	b1 01       	movw	r22, r2
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	09 95       	icall
    29da:	c5 01       	movw	r24, r10
    29dc:	88 19       	sub	r24, r8
    29de:	99 09       	sbc	r25, r9
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	ad 81       	ldd	r26, Y+5	; 0x05
    29e6:	be 81       	ldd	r27, Y+6	; 0x06
    29e8:	ed 91       	ld	r30, X+
    29ea:	fc 91       	ld	r31, X
    29ec:	11 97       	sbiw	r26, 0x01	; 1
    29ee:	04 84       	ldd	r0, Z+12	; 0x0c
    29f0:	f5 85       	ldd	r31, Z+13	; 0x0d
    29f2:	e0 2d       	mov	r30, r0
    29f4:	98 01       	movw	r18, r16
    29f6:	a2 01       	movw	r20, r4
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	09 95       	icall
    29fe:	ad 81       	ldd	r26, Y+5	; 0x05
    2a00:	be 81       	ldd	r27, Y+6	; 0x06
    2a02:	ed 91       	ld	r30, X+
    2a04:	fc 91       	ld	r31, X
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	04 84       	ldd	r0, Z+12	; 0x0c
    2a0a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a0c:	e0 2d       	mov	r30, r0
    2a0e:	98 01       	movw	r18, r16
    2a10:	26 01       	movw	r4, r12
    2a12:	4e 18       	sub	r4, r14
    2a14:	5f 08       	sbc	r5, r15
    2a16:	a2 01       	movw	r20, r4
    2a18:	b1 01       	movw	r22, r2
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	09 95       	icall
    2a1e:	ad 81       	ldd	r26, Y+5	; 0x05
    2a20:	be 81       	ldd	r27, Y+6	; 0x06
    2a22:	ed 91       	ld	r30, X+
    2a24:	fc 91       	ld	r31, X
    2a26:	11 97       	sbiw	r26, 0x01	; 1
    2a28:	04 84       	ldd	r0, Z+12	; 0x0c
    2a2a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	98 01       	movw	r18, r16
    2a30:	a2 01       	movw	r20, r4
    2a32:	69 81       	ldd	r22, Y+1	; 0x01
    2a34:	7a 81       	ldd	r23, Y+2	; 0x02
    2a36:	cd 01       	movw	r24, r26
    2a38:	09 95       	icall
    2a3a:	24 01       	movw	r4, r8
    2a3c:	4c 0c       	add	r4, r12
    2a3e:	5d 1c       	adc	r5, r13
    2a40:	ad 81       	ldd	r26, Y+5	; 0x05
    2a42:	be 81       	ldd	r27, Y+6	; 0x06
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	11 97       	sbiw	r26, 0x01	; 1
    2a4a:	04 84       	ldd	r0, Z+12	; 0x0c
    2a4c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a4e:	e0 2d       	mov	r30, r0
    2a50:	98 01       	movw	r18, r16
    2a52:	a2 01       	movw	r20, r4
    2a54:	17 01       	movw	r2, r14
    2a56:	2a 0c       	add	r2, r10
    2a58:	3b 1c       	adc	r3, r11
    2a5a:	b1 01       	movw	r22, r2
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	09 95       	icall
    2a60:	ad 81       	ldd	r26, Y+5	; 0x05
    2a62:	be 81       	ldd	r27, Y+6	; 0x06
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	11 97       	sbiw	r26, 0x01	; 1
    2a6a:	04 84       	ldd	r0, Z+12	; 0x0c
    2a6c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	98 01       	movw	r18, r16
    2a72:	a2 01       	movw	r20, r4
    2a74:	c5 01       	movw	r24, r10
    2a76:	8e 19       	sub	r24, r14
    2a78:	9f 09       	sbc	r25, r15
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	09 95       	icall
    2a84:	26 01       	movw	r4, r12
    2a86:	48 18       	sub	r4, r8
    2a88:	59 08       	sbc	r5, r9
    2a8a:	ad 81       	ldd	r26, Y+5	; 0x05
    2a8c:	be 81       	ldd	r27, Y+6	; 0x06
    2a8e:	ed 91       	ld	r30, X+
    2a90:	fc 91       	ld	r31, X
    2a92:	11 97       	sbiw	r26, 0x01	; 1
    2a94:	04 84       	ldd	r0, Z+12	; 0x0c
    2a96:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a98:	e0 2d       	mov	r30, r0
    2a9a:	98 01       	movw	r18, r16
    2a9c:	a2 01       	movw	r20, r4
    2a9e:	b1 01       	movw	r22, r2
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	09 95       	icall
    2aa4:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa6:	be 81       	ldd	r27, Y+6	; 0x06
    2aa8:	ed 91       	ld	r30, X+
    2aaa:	fc 91       	ld	r31, X
    2aac:	11 97       	sbiw	r26, 0x01	; 1
    2aae:	04 84       	ldd	r0, Z+12	; 0x0c
    2ab0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ab2:	e0 2d       	mov	r30, r0
    2ab4:	98 01       	movw	r18, r16
    2ab6:	a2 01       	movw	r20, r4
    2ab8:	69 81       	ldd	r22, Y+1	; 0x01
    2aba:	7a 81       	ldd	r23, Y+2	; 0x02
    2abc:	cd 01       	movw	r24, r26
    2abe:	09 95       	icall
    2ac0:	5f cf       	rjmp	.-322    	; 0x2980 <_ZN12Adafruit_GFX10drawCircleEiiij+0xe4>
    2ac2:	06 88       	ldd	r0, Z+22	; 0x16
    2ac4:	f7 89       	ldd	r31, Z+23	; 0x17
    2ac6:	e0 2d       	mov	r30, r0
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	26 96       	adiw	r28, 0x06	; 6
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    2ae8:	bf 90       	pop	r11
    2aea:	af 90       	pop	r10
    2aec:	9f 90       	pop	r9
    2aee:	8f 90       	pop	r8
    2af0:	7f 90       	pop	r7
    2af2:	6f 90       	pop	r6
    2af4:	5f 90       	pop	r5
    2af6:	4f 90       	pop	r4
    2af8:	3f 90       	pop	r3
    2afa:	2f 90       	pop	r2
    2afc:	09 94       	ijmp

00002afe <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>:
    2afe:	2f 92       	push	r2
    2b00:	3f 92       	push	r3
    2b02:	4f 92       	push	r4
    2b04:	5f 92       	push	r5
    2b06:	6f 92       	push	r6
    2b08:	7f 92       	push	r7
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x26>
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x28>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x2a>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	4b 01       	movw	r8, r22
    2b32:	3a 01       	movw	r6, r20
    2b34:	69 01       	movw	r12, r18
    2b36:	80 2f       	mov	r24, r16
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	29 01       	movw	r4, r18
    2b3e:	4c 18       	sub	r4, r12
    2b40:	5d 08       	sbc	r5, r13
    2b42:	22 24       	eor	r2, r2
    2b44:	33 24       	eor	r3, r3
    2b46:	2c 18       	sub	r2, r12
    2b48:	3d 08       	sbc	r3, r13
    2b4a:	22 0c       	add	r2, r2
    2b4c:	33 1c       	adc	r3, r3
    2b4e:	aa 24       	eor	r10, r10
    2b50:	a3 94       	inc	r10
    2b52:	b1 2c       	mov	r11, r1
    2b54:	01 e0       	ldi	r16, 0x01	; 1
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	98 2f       	mov	r25, r24
    2b5a:	94 70       	andi	r25, 0x04	; 4
    2b5c:	99 83       	std	Y+1, r25	; 0x01
    2b5e:	a8 2f       	mov	r26, r24
    2b60:	a2 70       	andi	r26, 0x02	; 2
    2b62:	aa 83       	std	Y+2, r26	; 0x02
    2b64:	b8 2f       	mov	r27, r24
    2b66:	b8 70       	andi	r27, 0x08	; 8
    2b68:	bb 83       	std	Y+3, r27	; 0x03
    2b6a:	81 70       	andi	r24, 0x01	; 1
    2b6c:	8c 83       	std	Y+4, r24	; 0x04
    2b6e:	c5 01       	movw	r24, r10
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	8c 15       	cp	r24, r12
    2b74:	9d 05       	cpc	r25, r13
    2b76:	0c f0       	brlt	.+2      	; 0x2b7a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x7c>
    2b78:	a7 c0       	rjmp	.+334    	; 0x2cc8 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x1ca>
    2b7a:	57 fc       	sbrc	r5, 7
    2b7c:	08 c0       	rjmp	.+16     	; 0x2b8e <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x90>
    2b7e:	91 e0       	ldi	r25, 0x01	; 1
    2b80:	c9 1a       	sub	r12, r25
    2b82:	d1 08       	sbc	r13, r1
    2b84:	a2 e0       	ldi	r26, 0x02	; 2
    2b86:	2a 0e       	add	r2, r26
    2b88:	31 1c       	adc	r3, r1
    2b8a:	42 0c       	add	r4, r2
    2b8c:	53 1c       	adc	r5, r3
    2b8e:	0e 5f       	subi	r16, 0xFE	; 254
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	40 0e       	add	r4, r16
    2b94:	51 1e       	adc	r5, r17
    2b96:	b9 81       	ldd	r27, Y+1	; 0x01
    2b98:	bb 23       	and	r27, r27
    2b9a:	11 f1       	breq	.+68     	; 0x2be0 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0xe2>
    2b9c:	ad 81       	ldd	r26, Y+5	; 0x05
    2b9e:	be 81       	ldd	r27, Y+6	; 0x06
    2ba0:	ed 91       	ld	r30, X+
    2ba2:	fc 91       	ld	r31, X
    2ba4:	11 97       	sbiw	r26, 0x01	; 1
    2ba6:	04 84       	ldd	r0, Z+12	; 0x0c
    2ba8:	f5 85       	ldd	r31, Z+13	; 0x0d
    2baa:	e0 2d       	mov	r30, r0
    2bac:	97 01       	movw	r18, r14
    2bae:	a6 01       	movw	r20, r12
    2bb0:	46 0d       	add	r20, r6
    2bb2:	57 1d       	adc	r21, r7
    2bb4:	b4 01       	movw	r22, r8
    2bb6:	6a 0d       	add	r22, r10
    2bb8:	7b 1d       	adc	r23, r11
    2bba:	cd 01       	movw	r24, r26
    2bbc:	09 95       	icall
    2bbe:	ad 81       	ldd	r26, Y+5	; 0x05
    2bc0:	be 81       	ldd	r27, Y+6	; 0x06
    2bc2:	ed 91       	ld	r30, X+
    2bc4:	fc 91       	ld	r31, X
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	04 84       	ldd	r0, Z+12	; 0x0c
    2bca:	f5 85       	ldd	r31, Z+13	; 0x0d
    2bcc:	e0 2d       	mov	r30, r0
    2bce:	97 01       	movw	r18, r14
    2bd0:	a3 01       	movw	r20, r6
    2bd2:	4a 0d       	add	r20, r10
    2bd4:	5b 1d       	adc	r21, r11
    2bd6:	b6 01       	movw	r22, r12
    2bd8:	68 0d       	add	r22, r8
    2bda:	79 1d       	adc	r23, r9
    2bdc:	cd 01       	movw	r24, r26
    2bde:	09 95       	icall
    2be0:	ba 81       	ldd	r27, Y+2	; 0x02
    2be2:	bb 23       	and	r27, r27
    2be4:	11 f1       	breq	.+68     	; 0x2c2a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x12c>
    2be6:	ad 81       	ldd	r26, Y+5	; 0x05
    2be8:	be 81       	ldd	r27, Y+6	; 0x06
    2bea:	ed 91       	ld	r30, X+
    2bec:	fc 91       	ld	r31, X
    2bee:	11 97       	sbiw	r26, 0x01	; 1
    2bf0:	04 84       	ldd	r0, Z+12	; 0x0c
    2bf2:	f5 85       	ldd	r31, Z+13	; 0x0d
    2bf4:	e0 2d       	mov	r30, r0
    2bf6:	97 01       	movw	r18, r14
    2bf8:	a3 01       	movw	r20, r6
    2bfa:	4c 19       	sub	r20, r12
    2bfc:	5d 09       	sbc	r21, r13
    2bfe:	b4 01       	movw	r22, r8
    2c00:	6a 0d       	add	r22, r10
    2c02:	7b 1d       	adc	r23, r11
    2c04:	cd 01       	movw	r24, r26
    2c06:	09 95       	icall
    2c08:	ad 81       	ldd	r26, Y+5	; 0x05
    2c0a:	be 81       	ldd	r27, Y+6	; 0x06
    2c0c:	ed 91       	ld	r30, X+
    2c0e:	fc 91       	ld	r31, X
    2c10:	11 97       	sbiw	r26, 0x01	; 1
    2c12:	04 84       	ldd	r0, Z+12	; 0x0c
    2c14:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c16:	e0 2d       	mov	r30, r0
    2c18:	97 01       	movw	r18, r14
    2c1a:	a3 01       	movw	r20, r6
    2c1c:	4a 19       	sub	r20, r10
    2c1e:	5b 09       	sbc	r21, r11
    2c20:	b6 01       	movw	r22, r12
    2c22:	68 0d       	add	r22, r8
    2c24:	79 1d       	adc	r23, r9
    2c26:	cd 01       	movw	r24, r26
    2c28:	09 95       	icall
    2c2a:	bb 81       	ldd	r27, Y+3	; 0x03
    2c2c:	bb 23       	and	r27, r27
    2c2e:	11 f1       	breq	.+68     	; 0x2c74 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x176>
    2c30:	ad 81       	ldd	r26, Y+5	; 0x05
    2c32:	be 81       	ldd	r27, Y+6	; 0x06
    2c34:	ed 91       	ld	r30, X+
    2c36:	fc 91       	ld	r31, X
    2c38:	11 97       	sbiw	r26, 0x01	; 1
    2c3a:	04 84       	ldd	r0, Z+12	; 0x0c
    2c3c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	97 01       	movw	r18, r14
    2c42:	a3 01       	movw	r20, r6
    2c44:	4a 0d       	add	r20, r10
    2c46:	5b 1d       	adc	r21, r11
    2c48:	b4 01       	movw	r22, r8
    2c4a:	6c 19       	sub	r22, r12
    2c4c:	7d 09       	sbc	r23, r13
    2c4e:	cd 01       	movw	r24, r26
    2c50:	09 95       	icall
    2c52:	ad 81       	ldd	r26, Y+5	; 0x05
    2c54:	be 81       	ldd	r27, Y+6	; 0x06
    2c56:	ed 91       	ld	r30, X+
    2c58:	fc 91       	ld	r31, X
    2c5a:	11 97       	sbiw	r26, 0x01	; 1
    2c5c:	04 84       	ldd	r0, Z+12	; 0x0c
    2c5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c60:	e0 2d       	mov	r30, r0
    2c62:	97 01       	movw	r18, r14
    2c64:	a6 01       	movw	r20, r12
    2c66:	46 0d       	add	r20, r6
    2c68:	57 1d       	adc	r21, r7
    2c6a:	b4 01       	movw	r22, r8
    2c6c:	6a 19       	sub	r22, r10
    2c6e:	7b 09       	sbc	r23, r11
    2c70:	cd 01       	movw	r24, r26
    2c72:	09 95       	icall
    2c74:	bc 81       	ldd	r27, Y+4	; 0x04
    2c76:	b1 11       	cpse	r27, r1
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x184>
    2c7a:	8f ef       	ldi	r24, 0xFF	; 255
    2c7c:	a8 1a       	sub	r10, r24
    2c7e:	b8 0a       	sbc	r11, r24
    2c80:	76 cf       	rjmp	.-276    	; 0x2b6e <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x70>
    2c82:	ad 81       	ldd	r26, Y+5	; 0x05
    2c84:	be 81       	ldd	r27, Y+6	; 0x06
    2c86:	ed 91       	ld	r30, X+
    2c88:	fc 91       	ld	r31, X
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    2c8c:	04 84       	ldd	r0, Z+12	; 0x0c
    2c8e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c90:	e0 2d       	mov	r30, r0
    2c92:	97 01       	movw	r18, r14
    2c94:	a3 01       	movw	r20, r6
    2c96:	4a 19       	sub	r20, r10
    2c98:	5b 09       	sbc	r21, r11
    2c9a:	b4 01       	movw	r22, r8
    2c9c:	6c 19       	sub	r22, r12
    2c9e:	7d 09       	sbc	r23, r13
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	09 95       	icall
    2ca4:	ad 81       	ldd	r26, Y+5	; 0x05
    2ca6:	be 81       	ldd	r27, Y+6	; 0x06
    2ca8:	ed 91       	ld	r30, X+
    2caa:	fc 91       	ld	r31, X
    2cac:	11 97       	sbiw	r26, 0x01	; 1
    2cae:	04 84       	ldd	r0, Z+12	; 0x0c
    2cb0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2cb2:	e0 2d       	mov	r30, r0
    2cb4:	97 01       	movw	r18, r14
    2cb6:	a3 01       	movw	r20, r6
    2cb8:	4c 19       	sub	r20, r12
    2cba:	5d 09       	sbc	r21, r13
    2cbc:	b4 01       	movw	r22, r8
    2cbe:	6a 19       	sub	r22, r10
    2cc0:	7b 09       	sbc	r23, r11
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	09 95       	icall
    2cc6:	d9 cf       	rjmp	.-78     	; 0x2c7a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x17c>
    2cc8:	26 96       	adiw	r28, 0x06	; 6
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
    2ce4:	bf 90       	pop	r11
    2ce6:	af 90       	pop	r10
    2ce8:	9f 90       	pop	r9
    2cea:	8f 90       	pop	r8
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
    2cf4:	3f 90       	pop	r3
    2cf6:	2f 90       	pop	r2
    2cf8:	08 95       	ret

00002cfa <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>:
    2cfa:	2f 92       	push	r2
    2cfc:	3f 92       	push	r3
    2cfe:	4f 92       	push	r4
    2d00:	5f 92       	push	r5
    2d02:	6f 92       	push	r6
    2d04:	7f 92       	push	r7
    2d06:	8f 92       	push	r8
    2d08:	9f 92       	push	r9
    2d0a:	af 92       	push	r10
    2d0c:	bf 92       	push	r11
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	2c 97       	sbiw	r28, 0x0c	; 12
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	5c 01       	movw	r10, r24
    2d30:	3b 01       	movw	r6, r22
    2d32:	58 87       	std	Y+8, r21	; 0x08
    2d34:	4f 83       	std	Y+7, r20	; 0x07
    2d36:	3c 87       	std	Y+12, r19	; 0x0c
    2d38:	2b 87       	std	Y+11, r18	; 0x0b
    2d3a:	26 01       	movw	r4, r12
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	6c 01       	movw	r12, r24
    2d42:	c2 1a       	sub	r12, r18
    2d44:	d3 0a       	sbc	r13, r19
    2d46:	c9 01       	movw	r24, r18
    2d48:	91 95       	neg	r25
    2d4a:	81 95       	neg	r24
    2d4c:	91 09       	sbc	r25, r1
    2d4e:	9c 01       	movw	r18, r24
    2d50:	22 0f       	add	r18, r18
    2d52:	33 1f       	adc	r19, r19
    2d54:	3c 83       	std	Y+4, r19	; 0x04
    2d56:	2b 83       	std	Y+3, r18	; 0x03
    2d58:	c7 01       	movw	r24, r14
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	1a 01       	movw	r2, r20
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	8b 84       	ldd	r8, Y+11	; 0x0b
    2d68:	9c 84       	ldd	r9, Y+12	; 0x0c
    2d6a:	ee 24       	eor	r14, r14
    2d6c:	e3 94       	inc	r14
    2d6e:	f1 2c       	mov	r15, r1
    2d70:	90 2f       	mov	r25, r16
    2d72:	91 70       	andi	r25, 0x01	; 1
    2d74:	99 87       	std	Y+9, r25	; 0x09
    2d76:	02 70       	andi	r16, 0x02	; 2
    2d78:	0a 87       	std	Y+10, r16	; 0x0a
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d80:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d82:	8a 17       	cp	r24, r26
    2d84:	9b 07       	cpc	r25, r27
    2d86:	0c f0       	brlt	.+2      	; 0x2d8a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x90>
    2d88:	8c c0       	rjmp	.+280    	; 0x2ea2 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x1a8>
    2d8a:	d7 fc       	sbrc	r13, 7
    2d8c:	0b c0       	rjmp	.+22     	; 0x2da4 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0xaa>
    2d8e:	11 97       	sbiw	r26, 0x01	; 1
    2d90:	bc 87       	std	Y+12, r27	; 0x0c
    2d92:	ab 87       	std	Y+11, r26	; 0x0b
    2d94:	2b 81       	ldd	r18, Y+3	; 0x03
    2d96:	3c 81       	ldd	r19, Y+4	; 0x04
    2d98:	2e 5f       	subi	r18, 0xFE	; 254
    2d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9c:	3c 83       	std	Y+4, r19	; 0x04
    2d9e:	2b 83       	std	Y+3, r18	; 0x03
    2da0:	c2 0e       	add	r12, r18
    2da2:	d3 1e       	adc	r13, r19
    2da4:	c7 01       	movw	r24, r14
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	c8 0e       	add	r12, r24
    2dae:	d9 1e       	adc	r13, r25
    2db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2db4:	8e 15       	cp	r24, r14
    2db6:	9f 05       	cpc	r25, r15
    2db8:	d4 f1       	brlt	.+116    	; 0x2e2e <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x134>
    2dba:	99 85       	ldd	r25, Y+9	; 0x09
    2dbc:	99 23       	and	r25, r25
    2dbe:	d1 f0       	breq	.+52     	; 0x2df4 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0xfa>
    2dc0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dc2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dc4:	22 0f       	add	r18, r18
    2dc6:	33 1f       	adc	r19, r19
    2dc8:	ad 81       	ldd	r26, Y+5	; 0x05
    2dca:	be 81       	ldd	r27, Y+6	; 0x06
    2dcc:	2a 0f       	add	r18, r26
    2dce:	3b 1f       	adc	r19, r27
    2dd0:	d5 01       	movw	r26, r10
    2dd2:	ed 91       	ld	r30, X+
    2dd4:	fc 91       	ld	r31, X
    2dd6:	00 88       	ldd	r0, Z+16	; 0x10
    2dd8:	f1 89       	ldd	r31, Z+17	; 0x11
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	82 01       	movw	r16, r4
    2dde:	4f 81       	ldd	r20, Y+7	; 0x07
    2de0:	58 85       	ldd	r21, Y+8	; 0x08
    2de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2de4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2de6:	48 1b       	sub	r20, r24
    2de8:	59 0b       	sbc	r21, r25
    2dea:	b3 01       	movw	r22, r6
    2dec:	6e 0d       	add	r22, r14
    2dee:	7f 1d       	adc	r23, r15
    2df0:	c5 01       	movw	r24, r10
    2df2:	09 95       	icall
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	99 23       	and	r25, r25
    2df8:	d1 f0       	breq	.+52     	; 0x2e2e <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x134>
    2dfa:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dfc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dfe:	22 0f       	add	r18, r18
    2e00:	33 1f       	adc	r19, r19
    2e02:	ad 81       	ldd	r26, Y+5	; 0x05
    2e04:	be 81       	ldd	r27, Y+6	; 0x06
    2e06:	2a 0f       	add	r18, r26
    2e08:	3b 1f       	adc	r19, r27
    2e0a:	d5 01       	movw	r26, r10
    2e0c:	ed 91       	ld	r30, X+
    2e0e:	fc 91       	ld	r31, X
    2e10:	00 88       	ldd	r0, Z+16	; 0x10
    2e12:	f1 89       	ldd	r31, Z+17	; 0x11
    2e14:	e0 2d       	mov	r30, r0
    2e16:	82 01       	movw	r16, r4
    2e18:	4f 81       	ldd	r20, Y+7	; 0x07
    2e1a:	58 85       	ldd	r21, Y+8	; 0x08
    2e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e20:	48 1b       	sub	r20, r24
    2e22:	59 0b       	sbc	r21, r25
    2e24:	b3 01       	movw	r22, r6
    2e26:	6e 19       	sub	r22, r14
    2e28:	7f 09       	sbc	r23, r15
    2e2a:	c5 01       	movw	r24, r10
    2e2c:	09 95       	icall
    2e2e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e30:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e32:	a8 15       	cp	r26, r8
    2e34:	b9 05       	cpc	r27, r9
    2e36:	69 f4       	brne	.+26     	; 0x2e52 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x158>
    2e38:	af ef       	ldi	r26, 0xFF	; 255
    2e3a:	ea 1a       	sub	r14, r26
    2e3c:	fa 0a       	sbc	r15, r26
    2e3e:	b1 e0       	ldi	r27, 0x01	; 1
    2e40:	2b 1a       	sub	r2, r27
    2e42:	31 08       	sbc	r3, r1
    2e44:	29 81       	ldd	r18, Y+1	; 0x01
    2e46:	3a 81       	ldd	r19, Y+2	; 0x02
    2e48:	2e 5f       	subi	r18, 0xFE	; 254
    2e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4c:	3a 83       	std	Y+2, r19	; 0x02
    2e4e:	29 83       	std	Y+1, r18	; 0x01
    2e50:	94 cf       	rjmp	.-216    	; 0x2d7a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x80>
    2e52:	b9 85       	ldd	r27, Y+9	; 0x09
    2e54:	bb 23       	and	r27, r27
    2e56:	79 f0       	breq	.+30     	; 0x2e76 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x17c>
    2e58:	d5 01       	movw	r26, r10
    2e5a:	ed 91       	ld	r30, X+
    2e5c:	fc 91       	ld	r31, X
    2e5e:	00 88       	ldd	r0, Z+16	; 0x10
    2e60:	f1 89       	ldd	r31, Z+17	; 0x11
    2e62:	e0 2d       	mov	r30, r0
    2e64:	82 01       	movw	r16, r4
    2e66:	29 81       	ldd	r18, Y+1	; 0x01
    2e68:	3a 81       	ldd	r19, Y+2	; 0x02
    2e6a:	a1 01       	movw	r20, r2
    2e6c:	b4 01       	movw	r22, r8
    2e6e:	66 0d       	add	r22, r6
    2e70:	77 1d       	adc	r23, r7
    2e72:	c5 01       	movw	r24, r10
    2e74:	09 95       	icall
    2e76:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e78:	b1 11       	cpse	r27, r1
    2e7a:	03 c0       	rjmp	.+6      	; 0x2e82 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x188>
    2e7c:	8b 84       	ldd	r8, Y+11	; 0x0b
    2e7e:	9c 84       	ldd	r9, Y+12	; 0x0c
    2e80:	db cf       	rjmp	.-74     	; 0x2e38 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x13e>
    2e82:	b3 01       	movw	r22, r6
    2e84:	68 19       	sub	r22, r8
    2e86:	79 09       	sbc	r23, r9
    2e88:	d5 01       	movw	r26, r10
    2e8a:	ed 91       	ld	r30, X+
    2e8c:	fc 91       	ld	r31, X
    2e8e:	00 88       	ldd	r0, Z+16	; 0x10
    2e90:	f1 89       	ldd	r31, Z+17	; 0x11
    2e92:	e0 2d       	mov	r30, r0
    2e94:	82 01       	movw	r16, r4
    2e96:	29 81       	ldd	r18, Y+1	; 0x01
    2e98:	3a 81       	ldd	r19, Y+2	; 0x02
    2e9a:	a1 01       	movw	r20, r2
    2e9c:	c5 01       	movw	r24, r10
    2e9e:	09 95       	icall
    2ea0:	ed cf       	rjmp	.-38     	; 0x2e7c <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x182>
    2ea2:	2c 96       	adiw	r28, 0x0c	; 12
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	df 90       	pop	r13
    2ebc:	cf 90       	pop	r12
    2ebe:	bf 90       	pop	r11
    2ec0:	af 90       	pop	r10
    2ec2:	9f 90       	pop	r9
    2ec4:	8f 90       	pop	r8
    2ec6:	7f 90       	pop	r7
    2ec8:	6f 90       	pop	r6
    2eca:	5f 90       	pop	r5
    2ecc:	4f 90       	pop	r4
    2ece:	3f 90       	pop	r3
    2ed0:	2f 90       	pop	r2
    2ed2:	08 95       	ret

00002ed4 <_ZN12Adafruit_GFX10fillCircleEiiij>:
    2ed4:	6f 92       	push	r6
    2ed6:	7f 92       	push	r7
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	ec 01       	movw	r28, r24
    2ef2:	4b 01       	movw	r8, r22
    2ef4:	3a 01       	movw	r6, r20
    2ef6:	59 01       	movw	r10, r18
    2ef8:	68 01       	movw	r12, r16
    2efa:	e8 81       	ld	r30, Y
    2efc:	f9 81       	ldd	r31, Y+1	; 0x01
    2efe:	02 84       	ldd	r0, Z+10	; 0x0a
    2f00:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f02:	e0 2d       	mov	r30, r0
    2f04:	09 95       	icall
    2f06:	95 01       	movw	r18, r10
    2f08:	22 0f       	add	r18, r18
    2f0a:	33 1f       	adc	r19, r19
    2f0c:	2f 5f       	subi	r18, 0xFF	; 255
    2f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f10:	a3 01       	movw	r20, r6
    2f12:	4a 19       	sub	r20, r10
    2f14:	5b 09       	sbc	r21, r11
    2f16:	e8 81       	ld	r30, Y
    2f18:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1a:	00 88       	ldd	r0, Z+16	; 0x10
    2f1c:	f1 89       	ldd	r31, Z+17	; 0x11
    2f1e:	e0 2d       	mov	r30, r0
    2f20:	b4 01       	movw	r22, r8
    2f22:	ce 01       	movw	r24, r28
    2f24:	09 95       	icall
    2f26:	e1 2c       	mov	r14, r1
    2f28:	f1 2c       	mov	r15, r1
    2f2a:	03 e0       	ldi	r16, 0x03	; 3
    2f2c:	95 01       	movw	r18, r10
    2f2e:	a3 01       	movw	r20, r6
    2f30:	b4 01       	movw	r22, r8
    2f32:	ce 01       	movw	r24, r28
    2f34:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
    2f38:	e8 81       	ld	r30, Y
    2f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f3c:	06 88       	ldd	r0, Z+22	; 0x16
    2f3e:	f7 89       	ldd	r31, Z+23	; 0x17
    2f40:	e0 2d       	mov	r30, r0
    2f42:	ce 01       	movw	r24, r28
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
    2f54:	bf 90       	pop	r11
    2f56:	af 90       	pop	r10
    2f58:	9f 90       	pop	r9
    2f5a:	8f 90       	pop	r8
    2f5c:	7f 90       	pop	r7
    2f5e:	6f 90       	pop	r6
    2f60:	09 94       	ijmp

00002f62 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>:
    2f62:	2f 92       	push	r2
    2f64:	3f 92       	push	r3
    2f66:	4f 92       	push	r4
    2f68:	5f 92       	push	r5
    2f6a:	6f 92       	push	r6
    2f6c:	7f 92       	push	r7
    2f6e:	8f 92       	push	r8
    2f70:	9f 92       	push	r9
    2f72:	af 92       	push	r10
    2f74:	bf 92       	push	r11
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	28 97       	sbiw	r28, 0x08	; 8
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	5c 01       	movw	r10, r24
    2f98:	7a 83       	std	Y+2, r23	; 0x02
    2f9a:	69 83       	std	Y+1, r22	; 0x01
    2f9c:	2a 01       	movw	r4, r20
    2f9e:	39 01       	movw	r6, r18
    2fa0:	48 01       	movw	r8, r16
    2fa2:	20 17       	cp	r18, r16
    2fa4:	31 07       	cpc	r19, r17
    2fa6:	34 f4       	brge	.+12     	; 0x2fb4 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x52>
    2fa8:	3c 83       	std	Y+4, r19	; 0x04
    2faa:	2b 83       	std	Y+3, r18	; 0x03
    2fac:	37 ff       	sbrs	r19, 7
    2fae:	0a c0       	rjmp	.+20     	; 0x2fc4 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    2fb0:	c9 01       	movw	r24, r18
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x5c>
    2fb4:	1c 83       	std	Y+4, r17	; 0x04
    2fb6:	0b 83       	std	Y+3, r16	; 0x03
    2fb8:	17 ff       	sbrs	r17, 7
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    2fbc:	c8 01       	movw	r24, r16
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	9c 83       	std	Y+4, r25	; 0x04
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
    2fc4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fc6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fc8:	b5 95       	asr	r27
    2fca:	a7 95       	ror	r26
    2fcc:	bc 83       	std	Y+4, r27	; 0x04
    2fce:	ab 83       	std	Y+3, r26	; 0x03
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	98 87       	std	Y+8, r25	; 0x08
    2fd6:	8f 83       	std	Y+7, r24	; 0x07
    2fd8:	e8 16       	cp	r14, r24
    2fda:	f9 06       	cpc	r15, r25
    2fdc:	14 f4       	brge	.+4      	; 0x2fe2 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x80>
    2fde:	f8 86       	std	Y+8, r15	; 0x08
    2fe0:	ef 82       	std	Y+7, r14	; 0x07
    2fe2:	d5 01       	movw	r26, r10
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	02 84       	ldd	r0, Z+10	; 0x0a
    2fea:	f3 85       	ldd	r31, Z+11	; 0x0b
    2fec:	e0 2d       	mov	r30, r0
    2fee:	c5 01       	movw	r24, r10
    2ff0:	09 95       	icall
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	98 85       	ldd	r25, Y+8	; 0x08
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    2ffe:	73 01       	movw	r14, r6
    3000:	e8 1a       	sub	r14, r24
    3002:	f9 0a       	sbc	r15, r25
    3004:	29 80       	ldd	r2, Y+1	; 0x01
    3006:	3a 80       	ldd	r3, Y+2	; 0x02
    3008:	af 81       	ldd	r26, Y+7	; 0x07
    300a:	b8 85       	ldd	r27, Y+8	; 0x08
    300c:	2a 0e       	add	r2, r26
    300e:	3b 1e       	adc	r3, r27
    3010:	d5 01       	movw	r26, r10
    3012:	ed 91       	ld	r30, X+
    3014:	fc 91       	ld	r31, X
    3016:	02 88       	ldd	r0, Z+18	; 0x12
    3018:	f3 89       	ldd	r31, Z+19	; 0x13
    301a:	e0 2d       	mov	r30, r0
    301c:	86 01       	movw	r16, r12
    301e:	97 01       	movw	r18, r14
    3020:	a2 01       	movw	r20, r4
    3022:	b1 01       	movw	r22, r2
    3024:	c5 01       	movw	r24, r10
    3026:	09 95       	icall
    3028:	c4 01       	movw	r24, r8
    302a:	84 0d       	add	r24, r4
    302c:	95 1d       	adc	r25, r5
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
    3032:	ac 01       	movw	r20, r24
    3034:	41 50       	subi	r20, 0x01	; 1
    3036:	51 09       	sbc	r21, r1
    3038:	d5 01       	movw	r26, r10
    303a:	ed 91       	ld	r30, X+
    303c:	fc 91       	ld	r31, X
    303e:	02 88       	ldd	r0, Z+18	; 0x12
    3040:	f3 89       	ldd	r31, Z+19	; 0x13
    3042:	e0 2d       	mov	r30, r0
    3044:	97 01       	movw	r18, r14
    3046:	b1 01       	movw	r22, r2
    3048:	c5 01       	movw	r24, r10
    304a:	09 95       	icall
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	88 1a       	sub	r8, r24
    3052:	99 0a       	sbc	r9, r25
    3054:	af 81       	ldd	r26, Y+7	; 0x07
    3056:	b8 85       	ldd	r27, Y+8	; 0x08
    3058:	4a 0e       	add	r4, r26
    305a:	5b 1e       	adc	r5, r27
    305c:	d5 01       	movw	r26, r10
    305e:	ed 91       	ld	r30, X+
    3060:	fc 91       	ld	r31, X
    3062:	00 88       	ldd	r0, Z+16	; 0x10
    3064:	f1 89       	ldd	r31, Z+17	; 0x11
    3066:	e0 2d       	mov	r30, r0
    3068:	94 01       	movw	r18, r8
    306a:	a2 01       	movw	r20, r4
    306c:	69 81       	ldd	r22, Y+1	; 0x01
    306e:	7a 81       	ldd	r23, Y+2	; 0x02
    3070:	c5 01       	movw	r24, r10
    3072:	09 95       	icall
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	68 0e       	add	r6, r24
    307a:	79 1e       	adc	r7, r25
    307c:	b3 01       	movw	r22, r6
    307e:	61 50       	subi	r22, 0x01	; 1
    3080:	71 09       	sbc	r23, r1
    3082:	d5 01       	movw	r26, r10
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	00 88       	ldd	r0, Z+16	; 0x10
    308a:	f1 89       	ldd	r31, Z+17	; 0x11
    308c:	e0 2d       	mov	r30, r0
    308e:	94 01       	movw	r18, r8
    3090:	a2 01       	movw	r20, r4
    3092:	c5 01       	movw	r24, r10
    3094:	09 95       	icall
    3096:	76 01       	movw	r14, r12
    3098:	01 e0       	ldi	r16, 0x01	; 1
    309a:	2f 81       	ldd	r18, Y+7	; 0x07
    309c:	38 85       	ldd	r19, Y+8	; 0x08
    309e:	a2 01       	movw	r20, r4
    30a0:	b1 01       	movw	r22, r2
    30a2:	c5 01       	movw	r24, r10
    30a4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    30a8:	8f 81       	ldd	r24, Y+7	; 0x07
    30aa:	98 85       	ldd	r25, Y+8	; 0x08
    30ac:	68 1a       	sub	r6, r24
    30ae:	79 0a       	sbc	r7, r25
    30b0:	91 e0       	ldi	r25, 0x01	; 1
    30b2:	69 1a       	sub	r6, r25
    30b4:	71 08       	sbc	r7, r1
    30b6:	02 e0       	ldi	r16, 0x02	; 2
    30b8:	2f 81       	ldd	r18, Y+7	; 0x07
    30ba:	38 85       	ldd	r19, Y+8	; 0x08
    30bc:	a2 01       	movw	r20, r4
    30be:	b3 01       	movw	r22, r6
    30c0:	c5 01       	movw	r24, r10
    30c2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    30c6:	8d 80       	ldd	r8, Y+5	; 0x05
    30c8:	9e 80       	ldd	r9, Y+6	; 0x06
    30ca:	af 81       	ldd	r26, Y+7	; 0x07
    30cc:	b8 85       	ldd	r27, Y+8	; 0x08
    30ce:	8a 1a       	sub	r8, r26
    30d0:	9b 0a       	sbc	r9, r27
    30d2:	b1 e0       	ldi	r27, 0x01	; 1
    30d4:	8b 1a       	sub	r8, r27
    30d6:	91 08       	sbc	r9, r1
    30d8:	04 e0       	ldi	r16, 0x04	; 4
    30da:	2f 81       	ldd	r18, Y+7	; 0x07
    30dc:	38 85       	ldd	r19, Y+8	; 0x08
    30de:	a4 01       	movw	r20, r8
    30e0:	b3 01       	movw	r22, r6
    30e2:	c5 01       	movw	r24, r10
    30e4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    30e8:	08 e0       	ldi	r16, 0x08	; 8
    30ea:	2f 81       	ldd	r18, Y+7	; 0x07
    30ec:	38 85       	ldd	r19, Y+8	; 0x08
    30ee:	a4 01       	movw	r20, r8
    30f0:	b1 01       	movw	r22, r2
    30f2:	c5 01       	movw	r24, r10
    30f4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    30f8:	d5 01       	movw	r26, r10
    30fa:	ed 91       	ld	r30, X+
    30fc:	fc 91       	ld	r31, X
    30fe:	06 88       	ldd	r0, Z+22	; 0x16
    3100:	f7 89       	ldd	r31, Z+23	; 0x17
    3102:	e0 2d       	mov	r30, r0
    3104:	c5 01       	movw	r24, r10
    3106:	28 96       	adiw	r28, 0x08	; 8
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	bf 90       	pop	r11
    3124:	af 90       	pop	r10
    3126:	9f 90       	pop	r9
    3128:	8f 90       	pop	r8
    312a:	7f 90       	pop	r7
    312c:	6f 90       	pop	r6
    312e:	5f 90       	pop	r5
    3130:	4f 90       	pop	r4
    3132:	3f 90       	pop	r3
    3134:	2f 90       	pop	r2
    3136:	09 94       	ijmp

00003138 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij>:
    3138:	2f 92       	push	r2
    313a:	3f 92       	push	r3
    313c:	4f 92       	push	r4
    313e:	5f 92       	push	r5
    3140:	6f 92       	push	r6
    3142:	7f 92       	push	r7
    3144:	8f 92       	push	r8
    3146:	9f 92       	push	r9
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	00 d0       	rcall	.+0      	; 0x315e <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x26>
    315e:	00 d0       	rcall	.+0      	; 0x3160 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x28>
    3160:	00 d0       	rcall	.+0      	; 0x3162 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x2a>
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	4c 01       	movw	r8, r24
    3168:	7c 83       	std	Y+4, r23	; 0x04
    316a:	6b 83       	std	Y+3, r22	; 0x03
    316c:	3a 01       	movw	r6, r20
    316e:	29 01       	movw	r4, r18
    3170:	58 01       	movw	r10, r16
    3172:	16 01       	movw	r2, r12
    3174:	20 17       	cp	r18, r16
    3176:	31 07       	cpc	r19, r17
    3178:	7c f4       	brge	.+30     	; 0x3198 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x60>
    317a:	3a 83       	std	Y+2, r19	; 0x02
    317c:	29 83       	std	Y+1, r18	; 0x01
    317e:	37 ff       	sbrs	r19, 7
    3180:	04 c0       	rjmp	.+8      	; 0x318a <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x52>
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	3a 83       	std	Y+2, r19	; 0x02
    3188:	29 83       	std	Y+1, r18	; 0x01
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	95 95       	asr	r25
    3190:	87 95       	ror	r24
    3192:	9a 83       	std	Y+2, r25	; 0x02
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	0e c0       	rjmp	.+28     	; 0x31b4 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x7c>
    3198:	1a 83       	std	Y+2, r17	; 0x02
    319a:	09 83       	std	Y+1, r16	; 0x01
    319c:	17 ff       	sbrs	r17, 7
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x70>
    31a0:	d8 01       	movw	r26, r16
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	ba 83       	std	Y+2, r27	; 0x02
    31a6:	a9 83       	std	Y+1, r26	; 0x01
    31a8:	29 81       	ldd	r18, Y+1	; 0x01
    31aa:	3a 81       	ldd	r19, Y+2	; 0x02
    31ac:	35 95       	asr	r19
    31ae:	27 95       	ror	r18
    31b0:	3a 83       	std	Y+2, r19	; 0x02
    31b2:	29 83       	std	Y+1, r18	; 0x01
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	e8 16       	cp	r14, r24
    31be:	f9 06       	cpc	r15, r25
    31c0:	14 f4       	brge	.+4      	; 0x31c6 <_ZN12Adafruit_GFX13fillRoundRectEiiiiij+0x8e>
    31c2:	fe 82       	std	Y+6, r15	; 0x06
    31c4:	ed 82       	std	Y+5, r14	; 0x05
    31c6:	d4 01       	movw	r26, r8
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	02 84       	ldd	r0, Z+10	; 0x0a
    31ce:	f3 85       	ldd	r31, Z+11	; 0x0b
    31d0:	e0 2d       	mov	r30, r0
    31d2:	c4 01       	movw	r24, r8
    31d4:	09 95       	icall
    31d6:	cd 80       	ldd	r12, Y+5	; 0x05
    31d8:	de 80       	ldd	r13, Y+6	; 0x06
    31da:	cc 0c       	add	r12, r12
    31dc:	dd 1c       	adc	r13, r13
    31de:	2b 81       	ldd	r18, Y+3	; 0x03
    31e0:	3c 81       	ldd	r19, Y+4	; 0x04
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	28 0f       	add	r18, r24
    31e8:	39 1f       	adc	r19, r25
    31ea:	3a 83       	std	Y+2, r19	; 0x02
    31ec:	29 83       	std	Y+1, r18	; 0x01
    31ee:	92 01       	movw	r18, r4
    31f0:	2c 19       	sub	r18, r12
    31f2:	3d 09       	sbc	r19, r13
    31f4:	d4 01       	movw	r26, r8
    31f6:	ed 91       	ld	r30, X+
    31f8:	fc 91       	ld	r31, X
    31fa:	06 84       	ldd	r0, Z+14	; 0x0e
    31fc:	f7 85       	ldd	r31, Z+15	; 0x0f
    31fe:	e0 2d       	mov	r30, r0
    3200:	71 01       	movw	r14, r2
    3202:	85 01       	movw	r16, r10
    3204:	a3 01       	movw	r20, r6
    3206:	69 81       	ldd	r22, Y+1	; 0x01
    3208:	7a 81       	ldd	r23, Y+2	; 0x02
    320a:	c4 01       	movw	r24, r8
    320c:	09 95       	icall
    320e:	ac 18       	sub	r10, r12
    3210:	bd 08       	sbc	r11, r13
    3212:	b1 e0       	ldi	r27, 0x01	; 1
    3214:	ab 1a       	sub	r10, r27
    3216:	b1 08       	sbc	r11, r1
    3218:	2d 81       	ldd	r18, Y+5	; 0x05
    321a:	3e 81       	ldd	r19, Y+6	; 0x06
    321c:	62 0e       	add	r6, r18
    321e:	73 1e       	adc	r7, r19
    3220:	6b 81       	ldd	r22, Y+3	; 0x03
    3222:	7c 81       	ldd	r23, Y+4	; 0x04
    3224:	64 0d       	add	r22, r4
    3226:	75 1d       	adc	r23, r5
    3228:	62 1b       	sub	r22, r18
    322a:	73 0b       	sbc	r23, r19
    322c:	61 50       	subi	r22, 0x01	; 1
    322e:	71 09       	sbc	r23, r1
    3230:	61 01       	movw	r12, r2
    3232:	75 01       	movw	r14, r10
    3234:	01 e0       	ldi	r16, 0x01	; 1
    3236:	a3 01       	movw	r20, r6
    3238:	c4 01       	movw	r24, r8
    323a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
    323e:	02 e0       	ldi	r16, 0x02	; 2
    3240:	2d 81       	ldd	r18, Y+5	; 0x05
    3242:	3e 81       	ldd	r19, Y+6	; 0x06
    3244:	a3 01       	movw	r20, r6
    3246:	69 81       	ldd	r22, Y+1	; 0x01
    3248:	7a 81       	ldd	r23, Y+2	; 0x02
    324a:	c4 01       	movw	r24, r8
    324c:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
    3250:	d4 01       	movw	r26, r8
    3252:	ed 91       	ld	r30, X+
    3254:	fc 91       	ld	r31, X
    3256:	06 88       	ldd	r0, Z+22	; 0x16
    3258:	f7 89       	ldd	r31, Z+23	; 0x17
    325a:	e0 2d       	mov	r30, r0
    325c:	c4 01       	movw	r24, r8
    325e:	26 96       	adiw	r28, 0x06	; 6
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ff 90       	pop	r15
    3274:	ef 90       	pop	r14
    3276:	df 90       	pop	r13
    3278:	cf 90       	pop	r12
    327a:	bf 90       	pop	r11
    327c:	af 90       	pop	r10
    327e:	9f 90       	pop	r9
    3280:	8f 90       	pop	r8
    3282:	7f 90       	pop	r7
    3284:	6f 90       	pop	r6
    3286:	5f 90       	pop	r5
    3288:	4f 90       	pop	r4
    328a:	3f 90       	pop	r3
    328c:	2f 90       	pop	r2
    328e:	09 94       	ijmp

00003290 <_ZN12Adafruit_GFX12drawTriangleEiiiiiij>:
    3290:	2f 92       	push	r2
    3292:	3f 92       	push	r3
    3294:	4f 92       	push	r4
    3296:	5f 92       	push	r5
    3298:	6f 92       	push	r6
    329a:	7f 92       	push	r7
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <_ZN12Adafruit_GFX12drawTriangleEiiiiiij+0x26>
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <_ZN12Adafruit_GFX12drawTriangleEiiiiiij+0x28>
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	9c 83       	std	Y+4, r25	; 0x04
    32be:	8b 83       	std	Y+3, r24	; 0x03
    32c0:	1b 01       	movw	r2, r22
    32c2:	2a 01       	movw	r4, r20
    32c4:	49 01       	movw	r8, r18
    32c6:	38 01       	movw	r6, r16
    32c8:	fa 82       	std	Y+2, r15	; 0x02
    32ca:	e9 82       	std	Y+1, r14	; 0x01
    32cc:	dc 01       	movw	r26, r24
    32ce:	ed 91       	ld	r30, X+
    32d0:	fc 91       	ld	r31, X
    32d2:	04 a0       	ldd	r0, Z+36	; 0x24
    32d4:	f5 a1       	ldd	r31, Z+37	; 0x25
    32d6:	e0 2d       	mov	r30, r0
    32d8:	75 01       	movw	r14, r10
    32da:	09 95       	icall
    32dc:	ab 81       	ldd	r26, Y+3	; 0x03
    32de:	bc 81       	ldd	r27, Y+4	; 0x04
    32e0:	ed 91       	ld	r30, X+
    32e2:	fc 91       	ld	r31, X
    32e4:	11 97       	sbiw	r26, 0x01	; 1
    32e6:	04 a0       	ldd	r0, Z+36	; 0x24
    32e8:	f5 a1       	ldd	r31, Z+37	; 0x25
    32ea:	e0 2d       	mov	r30, r0
    32ec:	86 01       	movw	r16, r12
    32ee:	29 81       	ldd	r18, Y+1	; 0x01
    32f0:	3a 81       	ldd	r19, Y+2	; 0x02
    32f2:	a3 01       	movw	r20, r6
    32f4:	b4 01       	movw	r22, r8
    32f6:	cd 01       	movw	r24, r26
    32f8:	09 95       	icall
    32fa:	ab 81       	ldd	r26, Y+3	; 0x03
    32fc:	bc 81       	ldd	r27, Y+4	; 0x04
    32fe:	ed 91       	ld	r30, X+
    3300:	fc 91       	ld	r31, X
    3302:	11 97       	sbiw	r26, 0x01	; 1
    3304:	04 a0       	ldd	r0, Z+36	; 0x24
    3306:	f5 a1       	ldd	r31, Z+37	; 0x25
    3308:	e0 2d       	mov	r30, r0
    330a:	82 01       	movw	r16, r4
    330c:	91 01       	movw	r18, r2
    330e:	a6 01       	movw	r20, r12
    3310:	69 81       	ldd	r22, Y+1	; 0x01
    3312:	7a 81       	ldd	r23, Y+2	; 0x02
    3314:	cd 01       	movw	r24, r26
    3316:	09 95       	icall
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	df 91       	pop	r29
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	ff 90       	pop	r15
    332a:	ef 90       	pop	r14
    332c:	df 90       	pop	r13
    332e:	cf 90       	pop	r12
    3330:	bf 90       	pop	r11
    3332:	af 90       	pop	r10
    3334:	9f 90       	pop	r9
    3336:	8f 90       	pop	r8
    3338:	7f 90       	pop	r7
    333a:	6f 90       	pop	r6
    333c:	5f 90       	pop	r5
    333e:	4f 90       	pop	r4
    3340:	3f 90       	pop	r3
    3342:	2f 90       	pop	r2
    3344:	08 95       	ret

00003346 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>:
    3346:	2f 92       	push	r2
    3348:	3f 92       	push	r3
    334a:	4f 92       	push	r4
    334c:	5f 92       	push	r5
    334e:	6f 92       	push	r6
    3350:	7f 92       	push	r7
    3352:	8f 92       	push	r8
    3354:	9f 92       	push	r9
    3356:	af 92       	push	r10
    3358:	bf 92       	push	r11
    335a:	cf 92       	push	r12
    335c:	df 92       	push	r13
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	aa 97       	sbiw	r28, 0x2a	; 42
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	7a a7       	std	Y+42, r23	; 0x2a
    3380:	69 a7       	std	Y+41, r22	; 0x29
    3382:	4a 01       	movw	r8, r20
    3384:	19 01       	movw	r2, r18
    3386:	38 01       	movw	r6, r16
    3388:	ba 8a       	std	Y+18, r11	; 0x12
    338a:	a9 8a       	std	Y+17, r10	; 0x11
    338c:	04 17       	cp	r16, r20
    338e:	15 07       	cpc	r17, r21
    3390:	54 f4       	brge	.+20     	; 0x33a6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x60>
    3392:	c4 16       	cp	r12, r20
    3394:	d5 06       	cpc	r13, r21
    3396:	a4 f4       	brge	.+40     	; 0x33c0 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x7a>
    3398:	5c 83       	std	Y+4, r21	; 0x04
    339a:	4b 83       	std	Y+3, r20	; 0x03
    339c:	48 01       	movw	r8, r16
    339e:	5b 01       	movw	r10, r22
    33a0:	3a a7       	std	Y+42, r19	; 0x2a
    33a2:	29 a7       	std	Y+41, r18	; 0x29
    33a4:	07 c0       	rjmp	.+14     	; 0x33b4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x6e>
    33a6:	c0 16       	cp	r12, r16
    33a8:	d1 06       	cpc	r13, r17
    33aa:	0c f0       	brlt	.+2      	; 0x33ae <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x68>
    33ac:	aa c1       	rjmp	.+852    	; 0x3702 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x3bc>
    33ae:	7c 82       	std	Y+4, r7	; 0x04
    33b0:	6b 82       	std	Y+3, r6	; 0x03
    33b2:	51 01       	movw	r10, r2
    33b4:	c8 14       	cp	r12, r8
    33b6:	d9 04       	cpc	r13, r9
    33b8:	84 f0       	brlt	.+32     	; 0x33da <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x94>
    33ba:	36 01       	movw	r6, r12
    33bc:	17 01       	movw	r2, r14
    33be:	13 c0       	rjmp	.+38     	; 0x33e6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    33c0:	dc 82       	std	Y+4, r13	; 0x04
    33c2:	cb 82       	std	Y+3, r12	; 0x03
    33c4:	57 01       	movw	r10, r14
    33c6:	87 2d       	mov	r24, r7
    33c8:	3a 01       	movw	r6, r20
    33ca:	80 2e       	mov	r8, r16
    33cc:	98 2e       	mov	r9, r24
    33ce:	83 2d       	mov	r24, r3
    33d0:	29 a4       	ldd	r2, Y+41	; 0x29
    33d2:	3a a4       	ldd	r3, Y+42	; 0x2a
    33d4:	29 a7       	std	Y+41, r18	; 0x29
    33d6:	8a a7       	std	Y+42, r24	; 0x2a
    33d8:	06 c0       	rjmp	.+12     	; 0x33e6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    33da:	34 01       	movw	r6, r8
    33dc:	29 a4       	ldd	r2, Y+41	; 0x29
    33de:	3a a4       	ldd	r3, Y+42	; 0x2a
    33e0:	46 01       	movw	r8, r12
    33e2:	e9 a6       	std	Y+41, r14	; 0x29
    33e4:	fa a6       	std	Y+42, r15	; 0x2a
    33e6:	a9 81       	ldd	r26, Y+1	; 0x01
    33e8:	ba 81       	ldd	r27, Y+2	; 0x02
    33ea:	ed 91       	ld	r30, X+
    33ec:	fc 91       	ld	r31, X
    33ee:	11 97       	sbiw	r26, 0x01	; 1
    33f0:	02 84       	ldd	r0, Z+10	; 0x0a
    33f2:	f3 85       	ldd	r31, Z+11	; 0x0b
    33f4:	e0 2d       	mov	r30, r0
    33f6:	cd 01       	movw	r24, r26
    33f8:	09 95       	icall
    33fa:	2b 81       	ldd	r18, Y+3	; 0x03
    33fc:	3c 81       	ldd	r19, Y+4	; 0x04
    33fe:	82 16       	cp	r8, r18
    3400:	93 06       	cpc	r9, r19
    3402:	81 f5       	brne	.+96     	; 0x3464 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x11e>
    3404:	49 a5       	ldd	r20, Y+41	; 0x29
    3406:	5a a5       	ldd	r21, Y+42	; 0x2a
    3408:	24 16       	cp	r2, r20
    340a:	35 06       	cpc	r3, r21
    340c:	5c f0       	brlt	.+22     	; 0x3424 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xde>
    340e:	99 a5       	ldd	r25, Y+41	; 0x29
    3410:	8a a5       	ldd	r24, Y+42	; 0x2a
    3412:	42 15       	cp	r20, r2
    3414:	53 05       	cpc	r21, r3
    3416:	14 f4       	brge	.+4      	; 0x341c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xd6>
    3418:	92 2d       	mov	r25, r2
    341a:	83 2d       	mov	r24, r3
    341c:	29 a4       	ldd	r2, Y+41	; 0x29
    341e:	3a a4       	ldd	r3, Y+42	; 0x2a
    3420:	99 a7       	std	Y+41, r25	; 0x29
    3422:	8a a7       	std	Y+42, r24	; 0x2a
    3424:	a2 14       	cp	r10, r2
    3426:	b3 04       	cpc	r11, r3
    3428:	44 f0       	brlt	.+16     	; 0x343a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf4>
    342a:	69 a5       	ldd	r22, Y+41	; 0x29
    342c:	7a a5       	ldd	r23, Y+42	; 0x2a
    342e:	6a 15       	cp	r22, r10
    3430:	7b 05       	cpc	r23, r11
    3432:	14 f4       	brge	.+4      	; 0x3438 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf2>
    3434:	ba a6       	std	Y+42, r11	; 0x2a
    3436:	a9 a6       	std	Y+41, r10	; 0x29
    3438:	51 01       	movw	r10, r2
    343a:	29 a5       	ldd	r18, Y+41	; 0x29
    343c:	3a a5       	ldd	r19, Y+42	; 0x2a
    343e:	2a 19       	sub	r18, r10
    3440:	3b 09       	sbc	r19, r11
    3442:	2f 5f       	subi	r18, 0xFF	; 255
    3444:	3f 4f       	sbci	r19, 0xFF	; 255
    3446:	a9 81       	ldd	r26, Y+1	; 0x01
    3448:	ba 81       	ldd	r27, Y+2	; 0x02
    344a:	ed 91       	ld	r30, X+
    344c:	fc 91       	ld	r31, X
    344e:	11 97       	sbiw	r26, 0x01	; 1
    3450:	02 88       	ldd	r0, Z+18	; 0x12
    3452:	f3 89       	ldd	r31, Z+19	; 0x13
    3454:	e0 2d       	mov	r30, r0
    3456:	09 89       	ldd	r16, Y+17	; 0x11
    3458:	1a 89       	ldd	r17, Y+18	; 0x12
    345a:	a4 01       	movw	r20, r8
    345c:	b5 01       	movw	r22, r10
    345e:	cd 01       	movw	r24, r26
    3460:	09 95       	icall
    3462:	2d c1       	rjmp	.+602    	; 0x36be <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    3464:	c1 01       	movw	r24, r2
    3466:	29 a5       	ldd	r18, Y+41	; 0x29
    3468:	3a a5       	ldd	r19, Y+42	; 0x2a
    346a:	82 1b       	sub	r24, r18
    346c:	93 0b       	sbc	r25, r19
    346e:	93 01       	movw	r18, r6
    3470:	28 19       	sub	r18, r8
    3472:	39 09       	sbc	r19, r9
    3474:	65 01       	movw	r12, r10
    3476:	49 a5       	ldd	r20, Y+41	; 0x29
    3478:	5a a5       	ldd	r21, Y+42	; 0x2a
    347a:	c4 1a       	sub	r12, r20
    347c:	d5 0a       	sbc	r13, r21
    347e:	6b 81       	ldd	r22, Y+3	; 0x03
    3480:	7c 81       	ldd	r23, Y+4	; 0x04
    3482:	68 19       	sub	r22, r8
    3484:	79 09       	sbc	r23, r9
    3486:	7a 87       	std	Y+10, r23	; 0x0a
    3488:	69 87       	std	Y+9, r22	; 0x09
    348a:	25 01       	movw	r4, r10
    348c:	42 18       	sub	r4, r2
    348e:	53 08       	sbc	r5, r3
    3490:	ab 81       	ldd	r26, Y+3	; 0x03
    3492:	bc 81       	ldd	r27, Y+4	; 0x04
    3494:	a6 19       	sub	r26, r6
    3496:	b7 09       	sbc	r27, r7
    3498:	bc 8b       	std	Y+20, r27	; 0x14
    349a:	ab 8b       	std	Y+19, r26	; 0x13
    349c:	4b 81       	ldd	r20, Y+3	; 0x03
    349e:	5c 81       	ldd	r21, Y+4	; 0x04
    34a0:	64 16       	cp	r6, r20
    34a2:	75 06       	cpc	r7, r21
    34a4:	31 f0       	breq	.+12     	; 0x34b2 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x16c>
    34a6:	b3 01       	movw	r22, r6
    34a8:	61 50       	subi	r22, 0x01	; 1
    34aa:	71 09       	sbc	r23, r1
    34ac:	78 8f       	std	Y+24, r23	; 0x18
    34ae:	6f 8b       	std	Y+23, r22	; 0x17
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x170>
    34b2:	78 8e       	std	Y+24, r7	; 0x18
    34b4:	6f 8a       	std	Y+23, r6	; 0x17
    34b6:	54 01       	movw	r10, r8
    34b8:	1d 86       	std	Y+13, r1	; 0x0d
    34ba:	1e 86       	std	Y+14, r1	; 0x0e
    34bc:	1f 86       	std	Y+15, r1	; 0x0f
    34be:	18 8a       	std	Y+16, r1	; 0x10
    34c0:	1d 82       	std	Y+5, r1	; 0x05
    34c2:	1e 82       	std	Y+6, r1	; 0x06
    34c4:	1f 82       	std	Y+7, r1	; 0x07
    34c6:	18 86       	std	Y+8, r1	; 0x08
    34c8:	a6 01       	movw	r20, r12
    34ca:	0d 2c       	mov	r0, r13
    34cc:	00 0c       	add	r0, r0
    34ce:	66 0b       	sbc	r22, r22
    34d0:	77 0b       	sbc	r23, r23
    34d2:	49 8f       	std	Y+25, r20	; 0x19
    34d4:	5a 8f       	std	Y+26, r21	; 0x1a
    34d6:	6b 8f       	std	Y+27, r22	; 0x1b
    34d8:	7c 8f       	std	Y+28, r23	; 0x1c
    34da:	a9 01       	movw	r20, r18
    34dc:	33 0f       	add	r19, r19
    34de:	66 0b       	sbc	r22, r22
    34e0:	77 0b       	sbc	r23, r23
    34e2:	4d 8f       	std	Y+29, r20	; 0x1d
    34e4:	5e 8f       	std	Y+30, r21	; 0x1e
    34e6:	6f 8f       	std	Y+31, r22	; 0x1f
    34e8:	78 a3       	std	Y+32, r23	; 0x20
    34ea:	29 85       	ldd	r18, Y+9	; 0x09
    34ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    34ee:	03 2e       	mov	r0, r19
    34f0:	00 0c       	add	r0, r0
    34f2:	44 0b       	sbc	r20, r20
    34f4:	55 0b       	sbc	r21, r21
    34f6:	29 a3       	std	Y+33, r18	; 0x21
    34f8:	3a a3       	std	Y+34, r19	; 0x22
    34fa:	4b a3       	std	Y+35, r20	; 0x23
    34fc:	5c a3       	std	Y+36, r21	; 0x24
    34fe:	ac 01       	movw	r20, r24
    3500:	99 0f       	add	r25, r25
    3502:	66 0b       	sbc	r22, r22
    3504:	77 0b       	sbc	r23, r23
    3506:	4d a3       	std	Y+37, r20	; 0x25
    3508:	5e a3       	std	Y+38, r21	; 0x26
    350a:	6f a3       	std	Y+39, r22	; 0x27
    350c:	78 a7       	std	Y+40, r23	; 0x28
    350e:	6f 89       	ldd	r22, Y+23	; 0x17
    3510:	78 8d       	ldd	r23, Y+24	; 0x18
    3512:	6a 15       	cp	r22, r10
    3514:	7b 05       	cpc	r23, r11
    3516:	0c f4       	brge	.+2      	; 0x351a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1d4>
    3518:	5a c0       	rjmp	.+180    	; 0x35ce <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x288>
    351a:	6d 81       	ldd	r22, Y+5	; 0x05
    351c:	7e 81       	ldd	r23, Y+6	; 0x06
    351e:	8f 81       	ldd	r24, Y+7	; 0x07
    3520:	98 85       	ldd	r25, Y+8	; 0x08
    3522:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3524:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3526:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3528:	58 a1       	ldd	r21, Y+32	; 0x20
    352a:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    352e:	e9 a4       	ldd	r14, Y+41	; 0x29
    3530:	fa a4       	ldd	r15, Y+42	; 0x2a
    3532:	e2 0e       	add	r14, r18
    3534:	f3 1e       	adc	r15, r19
    3536:	6d 85       	ldd	r22, Y+13	; 0x0d
    3538:	7e 85       	ldd	r23, Y+14	; 0x0e
    353a:	8f 85       	ldd	r24, Y+15	; 0x0f
    353c:	98 89       	ldd	r25, Y+16	; 0x10
    353e:	29 a1       	ldd	r18, Y+33	; 0x21
    3540:	3a a1       	ldd	r19, Y+34	; 0x22
    3542:	4b a1       	ldd	r20, Y+35	; 0x23
    3544:	5c a1       	ldd	r21, Y+36	; 0x24
    3546:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    354a:	89 a5       	ldd	r24, Y+41	; 0x29
    354c:	9a a5       	ldd	r25, Y+42	; 0x2a
    354e:	28 0f       	add	r18, r24
    3550:	39 1f       	adc	r19, r25
    3552:	4d 81       	ldd	r20, Y+5	; 0x05
    3554:	5e 81       	ldd	r21, Y+6	; 0x06
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	8d a1       	ldd	r24, Y+37	; 0x25
    355c:	9e a1       	ldd	r25, Y+38	; 0x26
    355e:	af a1       	ldd	r26, Y+39	; 0x27
    3560:	b8 a5       	ldd	r27, Y+40	; 0x28
    3562:	48 0f       	add	r20, r24
    3564:	59 1f       	adc	r21, r25
    3566:	6a 1f       	adc	r22, r26
    3568:	7b 1f       	adc	r23, r27
    356a:	4d 83       	std	Y+5, r20	; 0x05
    356c:	5e 83       	std	Y+6, r21	; 0x06
    356e:	6f 83       	std	Y+7, r22	; 0x07
    3570:	78 87       	std	Y+8, r23	; 0x08
    3572:	4d 85       	ldd	r20, Y+13	; 0x0d
    3574:	5e 85       	ldd	r21, Y+14	; 0x0e
    3576:	6f 85       	ldd	r22, Y+15	; 0x0f
    3578:	78 89       	ldd	r23, Y+16	; 0x10
    357a:	89 8d       	ldd	r24, Y+25	; 0x19
    357c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    357e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3580:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3582:	48 0f       	add	r20, r24
    3584:	59 1f       	adc	r21, r25
    3586:	6a 1f       	adc	r22, r26
    3588:	7b 1f       	adc	r23, r27
    358a:	4d 87       	std	Y+13, r20	; 0x0d
    358c:	5e 87       	std	Y+14, r21	; 0x0e
    358e:	6f 87       	std	Y+15, r22	; 0x0f
    3590:	78 8b       	std	Y+16, r23	; 0x10
    3592:	2e 15       	cp	r18, r14
    3594:	3f 05       	cpc	r19, r15
    3596:	2c f4       	brge	.+10     	; 0x35a2 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x25c>
    3598:	9e 2d       	mov	r25, r14
    359a:	8f 2d       	mov	r24, r15
    359c:	79 01       	movw	r14, r18
    359e:	29 2f       	mov	r18, r25
    35a0:	38 2f       	mov	r19, r24
    35a2:	2e 19       	sub	r18, r14
    35a4:	3f 09       	sbc	r19, r15
    35a6:	2f 5f       	subi	r18, 0xFF	; 255
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	a9 81       	ldd	r26, Y+1	; 0x01
    35ac:	ba 81       	ldd	r27, Y+2	; 0x02
    35ae:	ed 91       	ld	r30, X+
    35b0:	fc 91       	ld	r31, X
    35b2:	11 97       	sbiw	r26, 0x01	; 1
    35b4:	02 88       	ldd	r0, Z+18	; 0x12
    35b6:	f3 89       	ldd	r31, Z+19	; 0x13
    35b8:	e0 2d       	mov	r30, r0
    35ba:	09 89       	ldd	r16, Y+17	; 0x11
    35bc:	1a 89       	ldd	r17, Y+18	; 0x12
    35be:	a5 01       	movw	r20, r10
    35c0:	b7 01       	movw	r22, r14
    35c2:	cd 01       	movw	r24, r26
    35c4:	09 95       	icall
    35c6:	bf ef       	ldi	r27, 0xFF	; 255
    35c8:	ab 1a       	sub	r10, r27
    35ca:	bb 0a       	sbc	r11, r27
    35cc:	a0 cf       	rjmp	.-192    	; 0x350e <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1c8>
    35ce:	92 01       	movw	r18, r4
    35d0:	05 2c       	mov	r0, r5
    35d2:	00 0c       	add	r0, r0
    35d4:	44 0b       	sbc	r20, r20
    35d6:	55 0b       	sbc	r21, r21
    35d8:	2d 83       	std	Y+5, r18	; 0x05
    35da:	3e 83       	std	Y+6, r19	; 0x06
    35dc:	4f 83       	std	Y+7, r20	; 0x07
    35de:	58 87       	std	Y+8, r21	; 0x08
    35e0:	d5 01       	movw	r26, r10
    35e2:	a6 19       	sub	r26, r6
    35e4:	b7 09       	sbc	r27, r7
    35e6:	92 01       	movw	r18, r4
    35e8:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__mulhisi3>
    35ec:	2b 01       	movw	r4, r22
    35ee:	3c 01       	movw	r6, r24
    35f0:	d5 01       	movw	r26, r10
    35f2:	a8 19       	sub	r26, r8
    35f4:	b9 09       	sbc	r27, r9
    35f6:	96 01       	movw	r18, r12
    35f8:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__mulhisi3>
    35fc:	6b 01       	movw	r12, r22
    35fe:	7c 01       	movw	r14, r24
    3600:	4b 89       	ldd	r20, Y+19	; 0x13
    3602:	5c 89       	ldd	r21, Y+20	; 0x14
    3604:	05 2e       	mov	r0, r21
    3606:	00 0c       	add	r0, r0
    3608:	66 0b       	sbc	r22, r22
    360a:	77 0b       	sbc	r23, r23
    360c:	4b 8b       	std	Y+19, r20	; 0x13
    360e:	5c 8b       	std	Y+20, r21	; 0x14
    3610:	6d 8b       	std	Y+21, r22	; 0x15
    3612:	7e 8b       	std	Y+22, r23	; 0x16
    3614:	69 85       	ldd	r22, Y+9	; 0x09
    3616:	7a 85       	ldd	r23, Y+10	; 0x0a
    3618:	07 2e       	mov	r0, r23
    361a:	00 0c       	add	r0, r0
    361c:	88 0b       	sbc	r24, r24
    361e:	99 0b       	sbc	r25, r25
    3620:	69 87       	std	Y+9, r22	; 0x09
    3622:	7a 87       	std	Y+10, r23	; 0x0a
    3624:	8b 87       	std	Y+11, r24	; 0x0b
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	8a 15       	cp	r24, r10
    362e:	9b 05       	cpc	r25, r11
    3630:	0c f4       	brge	.+2      	; 0x3634 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2ee>
    3632:	45 c0       	rjmp	.+138    	; 0x36be <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    3634:	c3 01       	movw	r24, r6
    3636:	b2 01       	movw	r22, r4
    3638:	2b 89       	ldd	r18, Y+19	; 0x13
    363a:	3c 89       	ldd	r19, Y+20	; 0x14
    363c:	4d 89       	ldd	r20, Y+21	; 0x15
    363e:	5e 89       	ldd	r21, Y+22	; 0x16
    3640:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    3644:	41 01       	movw	r8, r2
    3646:	82 0e       	add	r8, r18
    3648:	93 1e       	adc	r9, r19
    364a:	c7 01       	movw	r24, r14
    364c:	b6 01       	movw	r22, r12
    364e:	29 85       	ldd	r18, Y+9	; 0x09
    3650:	3a 85       	ldd	r19, Y+10	; 0x0a
    3652:	4b 85       	ldd	r20, Y+11	; 0x0b
    3654:	5c 85       	ldd	r21, Y+12	; 0x0c
    3656:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    365a:	a9 a5       	ldd	r26, Y+41	; 0x29
    365c:	ba a5       	ldd	r27, Y+42	; 0x2a
    365e:	2a 0f       	add	r18, r26
    3660:	3b 1f       	adc	r19, r27
    3662:	4d 81       	ldd	r20, Y+5	; 0x05
    3664:	5e 81       	ldd	r21, Y+6	; 0x06
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	44 0e       	add	r4, r20
    366c:	55 1e       	adc	r5, r21
    366e:	66 1e       	adc	r6, r22
    3670:	77 1e       	adc	r7, r23
    3672:	69 8d       	ldd	r22, Y+25	; 0x19
    3674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    367a:	c6 0e       	add	r12, r22
    367c:	d7 1e       	adc	r13, r23
    367e:	e8 1e       	adc	r14, r24
    3680:	f9 1e       	adc	r15, r25
    3682:	28 15       	cp	r18, r8
    3684:	39 05       	cpc	r19, r9
    3686:	2c f4       	brge	.+10     	; 0x3692 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x34c>
    3688:	98 2d       	mov	r25, r8
    368a:	89 2d       	mov	r24, r9
    368c:	49 01       	movw	r8, r18
    368e:	29 2f       	mov	r18, r25
    3690:	38 2f       	mov	r19, r24
    3692:	28 19       	sub	r18, r8
    3694:	39 09       	sbc	r19, r9
    3696:	2f 5f       	subi	r18, 0xFF	; 255
    3698:	3f 4f       	sbci	r19, 0xFF	; 255
    369a:	a9 81       	ldd	r26, Y+1	; 0x01
    369c:	ba 81       	ldd	r27, Y+2	; 0x02
    369e:	ed 91       	ld	r30, X+
    36a0:	fc 91       	ld	r31, X
    36a2:	11 97       	sbiw	r26, 0x01	; 1
    36a4:	02 88       	ldd	r0, Z+18	; 0x12
    36a6:	f3 89       	ldd	r31, Z+19	; 0x13
    36a8:	e0 2d       	mov	r30, r0
    36aa:	09 89       	ldd	r16, Y+17	; 0x11
    36ac:	1a 89       	ldd	r17, Y+18	; 0x12
    36ae:	a5 01       	movw	r20, r10
    36b0:	b4 01       	movw	r22, r8
    36b2:	cd 01       	movw	r24, r26
    36b4:	09 95       	icall
    36b6:	bf ef       	ldi	r27, 0xFF	; 255
    36b8:	ab 1a       	sub	r10, r27
    36ba:	bb 0a       	sbc	r11, r27
    36bc:	b5 cf       	rjmp	.-150    	; 0x3628 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2e2>
    36be:	a9 81       	ldd	r26, Y+1	; 0x01
    36c0:	ba 81       	ldd	r27, Y+2	; 0x02
    36c2:	ed 91       	ld	r30, X+
    36c4:	fc 91       	ld	r31, X
    36c6:	11 97       	sbiw	r26, 0x01	; 1
    36c8:	06 88       	ldd	r0, Z+22	; 0x16
    36ca:	f7 89       	ldd	r31, Z+23	; 0x17
    36cc:	e0 2d       	mov	r30, r0
    36ce:	cd 01       	movw	r24, r26
    36d0:	aa 96       	adiw	r28, 0x2a	; 42
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	ff 90       	pop	r15
    36e6:	ef 90       	pop	r14
    36e8:	df 90       	pop	r13
    36ea:	cf 90       	pop	r12
    36ec:	bf 90       	pop	r11
    36ee:	af 90       	pop	r10
    36f0:	9f 90       	pop	r9
    36f2:	8f 90       	pop	r8
    36f4:	7f 90       	pop	r7
    36f6:	6f 90       	pop	r6
    36f8:	5f 90       	pop	r5
    36fa:	4f 90       	pop	r4
    36fc:	3f 90       	pop	r3
    36fe:	2f 90       	pop	r2
    3700:	09 94       	ijmp
    3702:	dc 82       	std	Y+4, r13	; 0x04
    3704:	cb 82       	std	Y+3, r12	; 0x03
    3706:	57 01       	movw	r10, r14
    3708:	6e ce       	rjmp	.-804    	; 0x33e6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>

0000370a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    370a:	3f 92       	push	r3
    370c:	4f 92       	push	r4
    370e:	5f 92       	push	r5
    3710:	6f 92       	push	r6
    3712:	7f 92       	push	r7
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	2a 97       	sbiw	r28, 0x0a	; 10
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	5c 01       	movw	r10, r24
    373e:	7e 83       	std	Y+6, r23	; 0x06
    3740:	6d 83       	std	Y+5, r22	; 0x05
    3742:	58 87       	std	Y+8, r21	; 0x08
    3744:	4f 83       	std	Y+7, r20	; 0x07
    3746:	29 01       	movw	r4, r18
    3748:	37 01       	movw	r6, r14
    374a:	dc 01       	movw	r26, r24
    374c:	ed 91       	ld	r30, X+
    374e:	fc 91       	ld	r31, X
    3750:	02 84       	ldd	r0, Z+10	; 0x0a
    3752:	f3 85       	ldd	r31, Z+11	; 0x0b
    3754:	e0 2d       	mov	r30, r0
    3756:	09 95       	icall
    3758:	c8 01       	movw	r24, r16
    375a:	07 96       	adiw	r24, 0x07	; 7
    375c:	97 fd       	sbrc	r25, 7
    375e:	07 96       	adiw	r24, 0x07	; 7
    3760:	9c 01       	movw	r18, r24
    3762:	93 e0       	ldi	r25, 0x03	; 3
    3764:	35 95       	asr	r19
    3766:	27 95       	ror	r18
    3768:	9a 95       	dec	r25
    376a:	e1 f7       	brne	.-8      	; 0x3764 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    376c:	3a 83       	std	Y+2, r19	; 0x02
    376e:	29 83       	std	Y+1, r18	; 0x01
    3770:	81 2c       	mov	r8, r1
    3772:	91 2c       	mov	r9, r1
    3774:	e1 2c       	mov	r14, r1
    3776:	f1 2c       	mov	r15, r1
    3778:	31 2c       	mov	r3, r1
    377a:	8f 81       	ldd	r24, Y+7	; 0x07
    377c:	98 85       	ldd	r25, Y+8	; 0x08
    377e:	8e 0d       	add	r24, r14
    3780:	9f 1d       	adc	r25, r15
    3782:	9c 83       	std	Y+4, r25	; 0x04
    3784:	8b 83       	std	Y+3, r24	; 0x03
    3786:	e6 14       	cp	r14, r6
    3788:	f7 04       	cpc	r15, r7
    378a:	0c f0       	brlt	.+2      	; 0x378e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    378c:	3d c0       	rjmp	.+122    	; 0x3808 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    378e:	1a 86       	std	Y+10, r1	; 0x0a
    3790:	19 86       	std	Y+9, r1	; 0x09
    3792:	a9 85       	ldd	r26, Y+9	; 0x09
    3794:	ba 85       	ldd	r27, Y+10	; 0x0a
    3796:	a0 17       	cp	r26, r16
    3798:	b1 07       	cpc	r27, r17
    379a:	74 f5       	brge	.+92     	; 0x37f8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    379c:	cd 01       	movw	r24, r26
    379e:	87 70       	andi	r24, 0x07	; 7
    37a0:	99 27       	eor	r25, r25
    37a2:	89 2b       	or	r24, r25
    37a4:	11 f0       	breq	.+4      	; 0x37aa <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    37a6:	33 0c       	add	r3, r3
    37a8:	0e c0       	rjmp	.+28     	; 0x37c6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    37aa:	e9 85       	ldd	r30, Y+9	; 0x09
    37ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    37ae:	f7 fd       	sbrc	r31, 7
    37b0:	37 96       	adiw	r30, 0x07	; 7
    37b2:	83 e0       	ldi	r24, 0x03	; 3
    37b4:	f5 95       	asr	r31
    37b6:	e7 95       	ror	r30
    37b8:	8a 95       	dec	r24
    37ba:	e1 f7       	brne	.-8      	; 0x37b4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    37bc:	e8 0d       	add	r30, r8
    37be:	f9 1d       	adc	r31, r9
    37c0:	e4 0d       	add	r30, r4
    37c2:	f5 1d       	adc	r31, r5
    37c4:	34 90       	lpm	r3, Z
    37c6:	37 fe       	sbrs	r3, 7
    37c8:	11 c0       	rjmp	.+34     	; 0x37ec <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    37ca:	d5 01       	movw	r26, r10
    37cc:	ed 91       	ld	r30, X+
    37ce:	fc 91       	ld	r31, X
    37d0:	04 84       	ldd	r0, Z+12	; 0x0c
    37d2:	f5 85       	ldd	r31, Z+13	; 0x0d
    37d4:	e0 2d       	mov	r30, r0
    37d6:	96 01       	movw	r18, r12
    37d8:	4b 81       	ldd	r20, Y+3	; 0x03
    37da:	5c 81       	ldd	r21, Y+4	; 0x04
    37dc:	6d 81       	ldd	r22, Y+5	; 0x05
    37de:	7e 81       	ldd	r23, Y+6	; 0x06
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	68 0f       	add	r22, r24
    37e6:	79 1f       	adc	r23, r25
    37e8:	c5 01       	movw	r24, r10
    37ea:	09 95       	icall
    37ec:	a9 85       	ldd	r26, Y+9	; 0x09
    37ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    37f0:	11 96       	adiw	r26, 0x01	; 1
    37f2:	ba 87       	std	Y+10, r27	; 0x0a
    37f4:	a9 87       	std	Y+9, r26	; 0x09
    37f6:	cd cf       	rjmp	.-102    	; 0x3792 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    37f8:	bf ef       	ldi	r27, 0xFF	; 255
    37fa:	eb 1a       	sub	r14, r27
    37fc:	fb 0a       	sbc	r15, r27
    37fe:	29 81       	ldd	r18, Y+1	; 0x01
    3800:	3a 81       	ldd	r19, Y+2	; 0x02
    3802:	82 0e       	add	r8, r18
    3804:	93 1e       	adc	r9, r19
    3806:	b9 cf       	rjmp	.-142    	; 0x377a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    3808:	d5 01       	movw	r26, r10
    380a:	ed 91       	ld	r30, X+
    380c:	fc 91       	ld	r31, X
    380e:	06 88       	ldd	r0, Z+22	; 0x16
    3810:	f7 89       	ldd	r31, Z+23	; 0x17
    3812:	e0 2d       	mov	r30, r0
    3814:	c5 01       	movw	r24, r10
    3816:	2a 96       	adiw	r28, 0x0a	; 10
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	1f 91       	pop	r17
    3828:	0f 91       	pop	r16
    382a:	ff 90       	pop	r15
    382c:	ef 90       	pop	r14
    382e:	df 90       	pop	r13
    3830:	cf 90       	pop	r12
    3832:	bf 90       	pop	r11
    3834:	af 90       	pop	r10
    3836:	9f 90       	pop	r9
    3838:	8f 90       	pop	r8
    383a:	7f 90       	pop	r7
    383c:	6f 90       	pop	r6
    383e:	5f 90       	pop	r5
    3840:	4f 90       	pop	r4
    3842:	3f 90       	pop	r3
    3844:	09 94       	ijmp

00003846 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    3846:	2f 92       	push	r2
    3848:	3f 92       	push	r3
    384a:	4f 92       	push	r4
    384c:	5f 92       	push	r5
    384e:	6f 92       	push	r6
    3850:	7f 92       	push	r7
    3852:	8f 92       	push	r8
    3854:	9f 92       	push	r9
    3856:	af 92       	push	r10
    3858:	bf 92       	push	r11
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	6b 97       	sbiw	r28, 0x1b	; 27
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	9b 8f       	std	Y+27, r25	; 0x1b
    387c:	8a 8f       	std	Y+26, r24	; 0x1a
    387e:	2b 01       	movw	r4, r22
    3880:	5a 83       	std	Y+2, r21	; 0x02
    3882:	49 83       	std	Y+1, r20	; 0x01
    3884:	d2 2e       	mov	r13, r18
    3886:	19 87       	std	Y+9, r17	; 0x09
    3888:	08 87       	std	Y+8, r16	; 0x08
    388a:	47 01       	movw	r8, r14
    388c:	ab 82       	std	Y+3, r10	; 0x03
    388e:	dc 01       	movw	r26, r24
    3890:	59 96       	adiw	r26, 0x19	; 25
    3892:	2d 91       	ld	r18, X+
    3894:	3c 91       	ld	r19, X
    3896:	5a 97       	sbiw	r26, 0x1a	; 26
    3898:	21 15       	cp	r18, r1
    389a:	31 05       	cpc	r19, r1
    389c:	09 f0       	breq	.+2      	; 0x38a0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    389e:	00 c1       	rjmp	.+512    	; 0x3aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    38a0:	18 96       	adiw	r26, 0x08	; 8
    38a2:	8d 91       	ld	r24, X+
    38a4:	9c 91       	ld	r25, X
    38a6:	19 97       	sbiw	r26, 0x09	; 9
    38a8:	68 17       	cp	r22, r24
    38aa:	79 07       	cpc	r23, r25
    38ac:	0c f0       	brlt	.+2      	; 0x38b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    38ae:	e7 c1       	rjmp	.+974    	; 0x3c7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    38b0:	1a 96       	adiw	r26, 0x0a	; 10
    38b2:	8d 91       	ld	r24, X+
    38b4:	9c 91       	ld	r25, X
    38b6:	1b 97       	sbiw	r26, 0x0b	; 11
    38b8:	48 17       	cp	r20, r24
    38ba:	59 07       	cpc	r21, r25
    38bc:	0c f0       	brlt	.+2      	; 0x38c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    38be:	df c1       	rjmp	.+958    	; 0x3c7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    38c0:	2c 2c       	mov	r2, r12
    38c2:	31 2c       	mov	r3, r1
    38c4:	fb 01       	movw	r30, r22
    38c6:	26 e0       	ldi	r18, 0x06	; 6
    38c8:	c2 9e       	mul	r12, r18
    38ca:	e0 0d       	add	r30, r0
    38cc:	f1 1d       	adc	r31, r1
    38ce:	11 24       	eor	r1, r1
    38d0:	fd 87       	std	Y+13, r31	; 0x0d
    38d2:	ec 87       	std	Y+12, r30	; 0x0c
    38d4:	1e 16       	cp	r1, r30
    38d6:	1f 06       	cpc	r1, r31
    38d8:	0c f0       	brlt	.+2      	; 0x38dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    38da:	d1 c1       	rjmp	.+930    	; 0x3c7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    38dc:	4a 2d       	mov	r20, r10
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	5b 87       	std	Y+11, r21	; 0x0b
    38e2:	4a 87       	std	Y+10, r20	; 0x0a
    38e4:	83 e0       	ldi	r24, 0x03	; 3
    38e6:	44 0f       	add	r20, r20
    38e8:	55 1f       	adc	r21, r21
    38ea:	8a 95       	dec	r24
    38ec:	e1 f7       	brne	.-8      	; 0x38e6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    38ee:	5f 87       	std	Y+15, r21	; 0x0f
    38f0:	4e 87       	std	Y+14, r20	; 0x0e
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	84 0f       	add	r24, r20
    38f8:	95 1f       	adc	r25, r21
    38fa:	18 16       	cp	r1, r24
    38fc:	19 06       	cpc	r1, r25
    38fe:	0c f0       	brlt	.+2      	; 0x3902 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    3900:	be c1       	rjmp	.+892    	; 0x3c7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    3902:	58 96       	adiw	r26, 0x18	; 24
    3904:	8c 91       	ld	r24, X
    3906:	81 11       	cpse	r24, r1
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    390a:	6f ea       	ldi	r22, 0xAF	; 175
    390c:	6d 15       	cp	r22, r13
    390e:	08 f4       	brcc	.+2      	; 0x3912 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    3910:	d3 94       	inc	r13
    3912:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3914:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3916:	ed 91       	ld	r30, X+
    3918:	fc 91       	ld	r31, X
    391a:	11 97       	sbiw	r26, 0x01	; 1
    391c:	02 84       	ldd	r0, Z+10	; 0x0a
    391e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3920:	e0 2d       	mov	r30, r0
    3922:	cd 01       	movw	r24, r26
    3924:	09 95       	icall
    3926:	b5 e0       	ldi	r27, 0x05	; 5
    3928:	db 9e       	mul	r13, r27
    392a:	c0 01       	movw	r24, r0
    392c:	11 24       	eor	r1, r1
    392e:	ec 2d       	mov	r30, r12
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	f9 8b       	std	Y+17, r31	; 0x11
    3934:	e8 8b       	std	Y+16, r30	; 0x10
    3936:	92 01       	movw	r18, r4
    3938:	2b 5f       	subi	r18, 0xFB	; 251
    393a:	3f 4f       	sbci	r19, 0xFF	; 255
    393c:	3b 8b       	std	Y+19, r19	; 0x13
    393e:	2a 8b       	std	Y+18, r18	; 0x12
    3940:	32 01       	movw	r6, r4
    3942:	5d 82       	std	Y+5, r5	; 0x05
    3944:	4c 82       	std	Y+4, r4	; 0x04
    3946:	ac 01       	movw	r20, r24
    3948:	44 19       	sub	r20, r4
    394a:	55 09       	sbc	r21, r5
    394c:	5d 8b       	std	Y+21, r21	; 0x15
    394e:	4c 8b       	std	Y+20, r20	; 0x14
    3950:	7b 81       	ldd	r23, Y+3	; 0x03
    3952:	67 2f       	mov	r22, r23
    3954:	70 e0       	ldi	r23, 0x00	; 0
    3956:	7f 8b       	std	Y+23, r23	; 0x17
    3958:	6e 8b       	std	Y+22, r22	; 0x16
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	9a 81       	ldd	r25, Y+2	; 0x02
    395e:	08 96       	adiw	r24, 0x08	; 8
    3960:	99 8f       	std	Y+25, r25	; 0x19
    3962:	88 8f       	std	Y+24, r24	; 0x18
    3964:	ec 89       	ldd	r30, Y+20	; 0x14
    3966:	fd 89       	ldd	r31, Y+21	; 0x15
    3968:	e6 0d       	add	r30, r6
    396a:	f7 1d       	adc	r31, r7
    396c:	e7 53       	subi	r30, 0x37	; 55
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	d4 90       	lpm	r13, Z
    3972:	a9 81       	ldd	r26, Y+1	; 0x01
    3974:	ba 81       	ldd	r27, Y+2	; 0x02
    3976:	bf 83       	std	Y+7, r27	; 0x07
    3978:	ae 83       	std	Y+6, r26	; 0x06
    397a:	5d 01       	movw	r10, r26
    397c:	d0 fe       	sbrs	r13, 0
    397e:	16 c0       	rjmp	.+44     	; 0x39ac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    3980:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3982:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3984:	ed 91       	ld	r30, X+
    3986:	fc 91       	ld	r31, X
    3988:	b1 e0       	ldi	r27, 0x01	; 1
    398a:	cb 12       	cpse	r12, r27
    398c:	09 c0       	rjmp	.+18     	; 0x39a0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    398e:	2b 81       	ldd	r18, Y+3	; 0x03
    3990:	21 30       	cpi	r18, 0x01	; 1
    3992:	31 f4       	brne	.+12     	; 0x39a0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    3994:	04 84       	ldd	r0, Z+12	; 0x0c
    3996:	f5 85       	ldd	r31, Z+13	; 0x0d
    3998:	e0 2d       	mov	r30, r0
    399a:	28 85       	ldd	r18, Y+8	; 0x08
    399c:	39 85       	ldd	r19, Y+9	; 0x09
    399e:	19 c0       	rjmp	.+50     	; 0x39d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    39a0:	06 84       	ldd	r0, Z+14	; 0x0e
    39a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    39a4:	e0 2d       	mov	r30, r0
    39a6:	e8 84       	ldd	r14, Y+8	; 0x08
    39a8:	f9 84       	ldd	r15, Y+9	; 0x09
    39aa:	1d c0       	rjmp	.+58     	; 0x39e6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    39ac:	48 85       	ldd	r20, Y+8	; 0x08
    39ae:	59 85       	ldd	r21, Y+9	; 0x09
    39b0:	48 15       	cp	r20, r8
    39b2:	59 05       	cpc	r21, r9
    39b4:	11 f1       	breq	.+68     	; 0x39fa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    39b6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    39b8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    39ba:	ed 91       	ld	r30, X+
    39bc:	fc 91       	ld	r31, X
    39be:	b1 e0       	ldi	r27, 0x01	; 1
    39c0:	cb 12       	cpse	r12, r27
    39c2:	0d c0       	rjmp	.+26     	; 0x39de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    39c4:	2b 81       	ldd	r18, Y+3	; 0x03
    39c6:	21 30       	cpi	r18, 0x01	; 1
    39c8:	51 f4       	brne	.+20     	; 0x39de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    39ca:	04 84       	ldd	r0, Z+12	; 0x0c
    39cc:	f5 85       	ldd	r31, Z+13	; 0x0d
    39ce:	e0 2d       	mov	r30, r0
    39d0:	94 01       	movw	r18, r8
    39d2:	a5 01       	movw	r20, r10
    39d4:	b3 01       	movw	r22, r6
    39d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    39da:	09 95       	icall
    39dc:	0e c0       	rjmp	.+28     	; 0x39fa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    39de:	06 84       	ldd	r0, Z+14	; 0x0e
    39e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    39e2:	e0 2d       	mov	r30, r0
    39e4:	74 01       	movw	r14, r8
    39e6:	0a 85       	ldd	r16, Y+10	; 0x0a
    39e8:	1b 85       	ldd	r17, Y+11	; 0x0b
    39ea:	91 01       	movw	r18, r2
    39ec:	4e 81       	ldd	r20, Y+6	; 0x06
    39ee:	5f 81       	ldd	r21, Y+7	; 0x07
    39f0:	6c 81       	ldd	r22, Y+4	; 0x04
    39f2:	7d 81       	ldd	r23, Y+5	; 0x05
    39f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    39f8:	09 95       	icall
    39fa:	d6 94       	lsr	r13
    39fc:	4e 81       	ldd	r20, Y+6	; 0x06
    39fe:	5f 81       	ldd	r21, Y+7	; 0x07
    3a00:	6e 89       	ldd	r22, Y+22	; 0x16
    3a02:	7f 89       	ldd	r23, Y+23	; 0x17
    3a04:	46 0f       	add	r20, r22
    3a06:	57 1f       	adc	r21, r23
    3a08:	5f 83       	std	Y+7, r21	; 0x07
    3a0a:	4e 83       	std	Y+6, r20	; 0x06
    3a0c:	7f ef       	ldi	r23, 0xFF	; 255
    3a0e:	a7 1a       	sub	r10, r23
    3a10:	b7 0a       	sbc	r11, r23
    3a12:	88 8d       	ldd	r24, Y+24	; 0x18
    3a14:	99 8d       	ldd	r25, Y+25	; 0x19
    3a16:	a8 16       	cp	r10, r24
    3a18:	b9 06       	cpc	r11, r25
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    3a1c:	af cf       	rjmp	.-162    	; 0x397c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    3a1e:	ac 81       	ldd	r26, Y+4	; 0x04
    3a20:	bd 81       	ldd	r27, Y+5	; 0x05
    3a22:	e8 89       	ldd	r30, Y+16	; 0x10
    3a24:	f9 89       	ldd	r31, Y+17	; 0x11
    3a26:	ae 0f       	add	r26, r30
    3a28:	bf 1f       	adc	r27, r31
    3a2a:	bd 83       	std	Y+5, r27	; 0x05
    3a2c:	ac 83       	std	Y+4, r26	; 0x04
    3a2e:	ff ef       	ldi	r31, 0xFF	; 255
    3a30:	6f 1a       	sub	r6, r31
    3a32:	7f 0a       	sbc	r7, r31
    3a34:	2a 89       	ldd	r18, Y+18	; 0x12
    3a36:	3b 89       	ldd	r19, Y+19	; 0x13
    3a38:	62 16       	cp	r6, r18
    3a3a:	73 06       	cpc	r7, r19
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    3a3e:	92 cf       	rjmp	.-220    	; 0x3964 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    3a40:	48 85       	ldd	r20, Y+8	; 0x08
    3a42:	59 85       	ldd	r21, Y+9	; 0x09
    3a44:	48 15       	cp	r20, r8
    3a46:	59 05       	cpc	r21, r9
    3a48:	09 f4       	brne	.+2      	; 0x3a4c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    3a4a:	f7 c0       	rjmp	.+494    	; 0x3c3a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3a4c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a4e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a50:	ed 91       	ld	r30, X+
    3a52:	fc 91       	ld	r31, X
    3a54:	b1 e0       	ldi	r27, 0x01	; 1
    3a56:	cb 12       	cpse	r12, r27
    3a58:	12 c0       	rjmp	.+36     	; 0x3a7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    3a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a5c:	21 30       	cpi	r18, 0x01	; 1
    3a5e:	79 f4       	brne	.+30     	; 0x3a7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    3a60:	b2 01       	movw	r22, r4
    3a62:	6b 5f       	subi	r22, 0xFB	; 251
    3a64:	7f 4f       	sbci	r23, 0xFF	; 255
    3a66:	00 88       	ldd	r0, Z+16	; 0x10
    3a68:	f1 89       	ldd	r31, Z+17	; 0x11
    3a6a:	e0 2d       	mov	r30, r0
    3a6c:	84 01       	movw	r16, r8
    3a6e:	28 e0       	ldi	r18, 0x08	; 8
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	49 81       	ldd	r20, Y+1	; 0x01
    3a74:	5a 81       	ldd	r21, Y+2	; 0x02
    3a76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a7a:	09 95       	icall
    3a7c:	de c0       	rjmp	.+444    	; 0x3c3a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3a7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a80:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a82:	62 19       	sub	r22, r2
    3a84:	73 09       	sbc	r23, r3
    3a86:	06 84       	ldd	r0, Z+14	; 0x0e
    3a88:	f7 85       	ldd	r31, Z+15	; 0x0f
    3a8a:	e0 2d       	mov	r30, r0
    3a8c:	74 01       	movw	r14, r8
    3a8e:	0e 85       	ldd	r16, Y+14	; 0x0e
    3a90:	1f 85       	ldd	r17, Y+15	; 0x0f
    3a92:	91 01       	movw	r18, r2
    3a94:	49 81       	ldd	r20, Y+1	; 0x01
    3a96:	5a 81       	ldd	r21, Y+2	; 0x02
    3a98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a9c:	09 95       	icall
    3a9e:	cd c0       	rjmp	.+410    	; 0x3c3a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3aa0:	f9 01       	movw	r30, r18
    3aa2:	34 96       	adiw	r30, 0x04	; 4
    3aa4:	e4 91       	lpm	r30, Z
    3aa6:	de 1a       	sub	r13, r30
    3aa8:	f9 01       	movw	r30, r18
    3aaa:	32 96       	adiw	r30, 0x02	; 2
    3aac:	85 91       	lpm	r24, Z+
    3aae:	94 91       	lpm	r25, Z
    3ab0:	b7 e0       	ldi	r27, 0x07	; 7
    3ab2:	db 9e       	mul	r13, r27
    3ab4:	80 0d       	add	r24, r0
    3ab6:	91 1d       	adc	r25, r1
    3ab8:	11 24       	eor	r1, r1
    3aba:	f9 01       	movw	r30, r18
    3abc:	25 91       	lpm	r18, Z+
    3abe:	34 91       	lpm	r19, Z
    3ac0:	39 8b       	std	Y+17, r19	; 0x11
    3ac2:	28 8b       	std	Y+16, r18	; 0x10
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	25 90       	lpm	r2, Z+
    3ac8:	34 90       	lpm	r3, Z
    3aca:	fc 01       	movw	r30, r24
    3acc:	32 96       	adiw	r30, 0x02	; 2
    3ace:	74 90       	lpm	r7, Z
    3ad0:	31 96       	adiw	r30, 0x01	; 1
    3ad2:	a4 90       	lpm	r10, Z
    3ad4:	32 96       	adiw	r30, 0x02	; 2
    3ad6:	94 90       	lpm	r9, Z
    3ad8:	31 96       	adiw	r30, 0x01	; 1
    3ada:	b4 90       	lpm	r11, Z
    3adc:	31 e0       	ldi	r19, 0x01	; 1
    3ade:	3c 15       	cp	r19, r12
    3ae0:	18 f0       	brcs	.+6      	; 0x3ae8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    3ae2:	4b 81       	ldd	r20, Y+3	; 0x03
    3ae4:	42 30       	cpi	r20, 0x02	; 2
    3ae6:	68 f0       	brcs	.+26     	; 0x3b02 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    3ae8:	69 2d       	mov	r22, r9
    3aea:	09 2c       	mov	r0, r9
    3aec:	00 0c       	add	r0, r0
    3aee:	77 0b       	sbc	r23, r23
    3af0:	7d 83       	std	Y+5, r23	; 0x05
    3af2:	6c 83       	std	Y+4, r22	; 0x04
    3af4:	8b 2d       	mov	r24, r11
    3af6:	0b 2c       	mov	r0, r11
    3af8:	00 0c       	add	r0, r0
    3afa:	99 0b       	sbc	r25, r25
    3afc:	9f 83       	std	Y+7, r25	; 0x07
    3afe:	8e 83       	std	Y+6, r24	; 0x06
    3b00:	04 c0       	rjmp	.+8      	; 0x3b0a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    3b02:	1f 82       	std	Y+7, r1	; 0x07
    3b04:	1e 82       	std	Y+6, r1	; 0x06
    3b06:	1d 82       	std	Y+5, r1	; 0x05
    3b08:	1c 82       	std	Y+4, r1	; 0x04
    3b0a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b0c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b0e:	ed 91       	ld	r30, X+
    3b10:	fc 91       	ld	r31, X
    3b12:	11 97       	sbiw	r26, 0x01	; 1
    3b14:	02 84       	ldd	r0, Z+10	; 0x0a
    3b16:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b18:	e0 2d       	mov	r30, r0
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	09 95       	icall
    3b1e:	61 2c       	mov	r6, r1
    3b20:	d1 2c       	mov	r13, r1
    3b22:	81 2c       	mov	r8, r1
    3b24:	fb 81       	ldd	r31, Y+3	; 0x03
    3b26:	ef 2f       	mov	r30, r31
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	fb 87       	std	Y+11, r31	; 0x0b
    3b2c:	ea 87       	std	Y+10, r30	; 0x0a
    3b2e:	2c 2d       	mov	r18, r12
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	3d 87       	std	Y+13, r19	; 0x0d
    3b34:	2c 87       	std	Y+12, r18	; 0x0c
    3b36:	49 81       	ldd	r20, Y+1	; 0x01
    3b38:	5a 81       	ldd	r21, Y+2	; 0x02
    3b3a:	4b 0d       	add	r20, r11
    3b3c:	51 1d       	adc	r21, r1
    3b3e:	b7 fc       	sbrc	r11, 7
    3b40:	5a 95       	dec	r21
    3b42:	5d 8b       	std	Y+21, r21	; 0x15
    3b44:	4c 8b       	std	Y+20, r20	; 0x14
    3b46:	b2 01       	movw	r22, r4
    3b48:	69 0d       	add	r22, r9
    3b4a:	71 1d       	adc	r23, r1
    3b4c:	97 fc       	sbrc	r9, 7
    3b4e:	7a 95       	dec	r23
    3b50:	7f 8b       	std	Y+23, r23	; 0x17
    3b52:	6e 8b       	std	Y+22, r22	; 0x16
    3b54:	8a 14       	cp	r8, r10
    3b56:	08 f0       	brcs	.+2      	; 0x3b5a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    3b58:	70 c0       	rjmp	.+224    	; 0x3c3a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    3b5a:	28 2d       	mov	r18, r8
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	4e 81       	ldd	r20, Y+6	; 0x06
    3b60:	5f 81       	ldd	r21, Y+7	; 0x07
    3b62:	42 0f       	add	r20, r18
    3b64:	53 1f       	adc	r21, r19
    3b66:	aa 85       	ldd	r26, Y+10	; 0x0a
    3b68:	bb 85       	ldd	r27, Y+11	; 0x0b
    3b6a:	a4 9f       	mul	r26, r20
    3b6c:	c0 01       	movw	r24, r0
    3b6e:	a5 9f       	mul	r26, r21
    3b70:	90 0d       	add	r25, r0
    3b72:	b4 9f       	mul	r27, r20
    3b74:	90 0d       	add	r25, r0
    3b76:	11 24       	eor	r1, r1
    3b78:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7c:	e8 0f       	add	r30, r24
    3b7e:	f9 1f       	adc	r31, r25
    3b80:	ff 87       	std	Y+15, r31	; 0x0f
    3b82:	ee 87       	std	Y+14, r30	; 0x0e
    3b84:	86 2d       	mov	r24, r6
    3b86:	91 2c       	mov	r9, r1
    3b88:	4c 89       	ldd	r20, Y+20	; 0x14
    3b8a:	5d 89       	ldd	r21, Y+21	; 0x15
    3b8c:	42 0f       	add	r20, r18
    3b8e:	53 1f       	adc	r21, r19
    3b90:	5b 8b       	std	Y+19, r21	; 0x13
    3b92:	4a 8b       	std	Y+18, r20	; 0x12
    3b94:	97 14       	cp	r9, r7
    3b96:	08 f0       	brcs	.+2      	; 0x3b9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    3b98:	4d c0       	rjmp	.+154    	; 0x3c34 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    3b9a:	bb 24       	eor	r11, r11
    3b9c:	b3 94       	inc	r11
    3b9e:	b8 0e       	add	r11, r24
    3ba0:	87 70       	andi	r24, 0x07	; 7
    3ba2:	41 f4       	brne	.+16     	; 0x3bb4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    3ba4:	c1 01       	movw	r24, r2
    3ba6:	01 96       	adiw	r24, 0x01	; 1
    3ba8:	e8 89       	ldd	r30, Y+16	; 0x10
    3baa:	f9 89       	ldd	r31, Y+17	; 0x11
    3bac:	e2 0d       	add	r30, r2
    3bae:	f3 1d       	adc	r31, r3
    3bb0:	d4 90       	lpm	r13, Z
    3bb2:	1c 01       	movw	r2, r24
    3bb4:	d7 fe       	sbrs	r13, 7
    3bb6:	3a c0       	rjmp	.+116    	; 0x3c2c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    3bb8:	51 e0       	ldi	r21, 0x01	; 1
    3bba:	c5 12       	cpse	r12, r21
    3bbc:	16 c0       	rjmp	.+44     	; 0x3bea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    3bbe:	6b 81       	ldd	r22, Y+3	; 0x03
    3bc0:	61 30       	cpi	r22, 0x01	; 1
    3bc2:	99 f4       	brne	.+38     	; 0x3bea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    3bc4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3bc6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3bc8:	ed 91       	ld	r30, X+
    3bca:	fc 91       	ld	r31, X
    3bcc:	11 97       	sbiw	r26, 0x01	; 1
    3bce:	04 84       	ldd	r0, Z+12	; 0x0c
    3bd0:	f5 85       	ldd	r31, Z+13	; 0x0d
    3bd2:	e0 2d       	mov	r30, r0
    3bd4:	28 85       	ldd	r18, Y+8	; 0x08
    3bd6:	39 85       	ldd	r19, Y+9	; 0x09
    3bd8:	4a 89       	ldd	r20, Y+18	; 0x12
    3bda:	5b 89       	ldd	r21, Y+19	; 0x13
    3bdc:	6e 89       	ldd	r22, Y+22	; 0x16
    3bde:	7f 89       	ldd	r23, Y+23	; 0x17
    3be0:	69 0d       	add	r22, r9
    3be2:	71 1d       	adc	r23, r1
    3be4:	cd 01       	movw	r24, r26
    3be6:	09 95       	icall
    3be8:	21 c0       	rjmp	.+66     	; 0x3c2c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    3bea:	8c 81       	ldd	r24, Y+4	; 0x04
    3bec:	9d 81       	ldd	r25, Y+5	; 0x05
    3bee:	89 0d       	add	r24, r9
    3bf0:	91 1d       	adc	r25, r1
    3bf2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3bf4:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bf6:	8e 9f       	mul	r24, r30
    3bf8:	b0 01       	movw	r22, r0
    3bfa:	8f 9f       	mul	r24, r31
    3bfc:	70 0d       	add	r23, r0
    3bfe:	9e 9f       	mul	r25, r30
    3c00:	70 0d       	add	r23, r0
    3c02:	11 24       	eor	r1, r1
    3c04:	64 0d       	add	r22, r4
    3c06:	75 1d       	adc	r23, r5
    3c08:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3c0a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3c0c:	ed 91       	ld	r30, X+
    3c0e:	fc 91       	ld	r31, X
    3c10:	11 97       	sbiw	r26, 0x01	; 1
    3c12:	06 84       	ldd	r0, Z+14	; 0x0e
    3c14:	f7 85       	ldd	r31, Z+15	; 0x0f
    3c16:	e0 2d       	mov	r30, r0
    3c18:	e8 84       	ldd	r14, Y+8	; 0x08
    3c1a:	f9 84       	ldd	r15, Y+9	; 0x09
    3c1c:	0a 85       	ldd	r16, Y+10	; 0x0a
    3c1e:	1b 85       	ldd	r17, Y+11	; 0x0b
    3c20:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c22:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c24:	4e 85       	ldd	r20, Y+14	; 0x0e
    3c26:	5f 85       	ldd	r21, Y+15	; 0x0f
    3c28:	cd 01       	movw	r24, r26
    3c2a:	09 95       	icall
    3c2c:	dd 0c       	add	r13, r13
    3c2e:	93 94       	inc	r9
    3c30:	8b 2d       	mov	r24, r11
    3c32:	b0 cf       	rjmp	.-160    	; 0x3b94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    3c34:	67 0c       	add	r6, r7
    3c36:	83 94       	inc	r8
    3c38:	8d cf       	rjmp	.-230    	; 0x3b54 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    3c3a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3c3c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3c3e:	ed 91       	ld	r30, X+
    3c40:	fc 91       	ld	r31, X
    3c42:	11 97       	sbiw	r26, 0x01	; 1
    3c44:	06 88       	ldd	r0, Z+22	; 0x16
    3c46:	f7 89       	ldd	r31, Z+23	; 0x17
    3c48:	e0 2d       	mov	r30, r0
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	6b 96       	adiw	r28, 0x1b	; 27
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	ff 90       	pop	r15
    3c62:	ef 90       	pop	r14
    3c64:	df 90       	pop	r13
    3c66:	cf 90       	pop	r12
    3c68:	bf 90       	pop	r11
    3c6a:	af 90       	pop	r10
    3c6c:	9f 90       	pop	r9
    3c6e:	8f 90       	pop	r8
    3c70:	7f 90       	pop	r7
    3c72:	6f 90       	pop	r6
    3c74:	5f 90       	pop	r5
    3c76:	4f 90       	pop	r4
    3c78:	3f 90       	pop	r3
    3c7a:	2f 90       	pop	r2
    3c7c:	09 94       	ijmp
    3c7e:	6b 96       	adiw	r28, 0x1b	; 27
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	7f 90       	pop	r7
    3ca4:	6f 90       	pop	r6
    3ca6:	5f 90       	pop	r5
    3ca8:	4f 90       	pop	r4
    3caa:	3f 90       	pop	r3
    3cac:	2f 90       	pop	r2
    3cae:	08 95       	ret

00003cb0 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    3cb0:	8f 92       	push	r8
    3cb2:	9f 92       	push	r9
    3cb4:	af 92       	push	r10
    3cb6:	cf 92       	push	r12
    3cb8:	ef 92       	push	r14
    3cba:	ff 92       	push	r15
    3cbc:	0f 93       	push	r16
    3cbe:	1f 93       	push	r17
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	ec 01       	movw	r28, r24
    3cc6:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    3cc8:	89 8d       	ldd	r24, Y+25	; 0x19
    3cca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <_ZN12Adafruit_GFX5writeEh+0x22>
    3cd0:	42 c0       	rjmp	.+132    	; 0x3d56 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    3cd2:	6a 30       	cpi	r22, 0x0A	; 10
    3cd4:	59 f4       	brne	.+22     	; 0x3cec <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    3cd6:	1d 86       	std	Y+13, r1	; 0x0d
    3cd8:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    3cda:	2d 89       	ldd	r18, Y+21	; 0x15
    3cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cde:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ce0:	38 e0       	ldi	r19, 0x08	; 8
    3ce2:	23 9f       	mul	r18, r19
    3ce4:	80 0d       	add	r24, r0
    3ce6:	91 1d       	adc	r25, r1
    3ce8:	11 24       	eor	r1, r1
    3cea:	43 c0       	rjmp	.+134    	; 0x3d72 <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    3cec:	6d 30       	cpi	r22, 0x0D	; 13
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <_ZN12Adafruit_GFX5writeEh+0x42>
    3cf0:	aa c0       	rjmp	.+340    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf4:	88 23       	and	r24, r24
    3cf6:	c9 f0       	breq	.+50     	; 0x3d2a <_ZN12Adafruit_GFX5writeEh+0x7a>
    3cf8:	3c 89       	ldd	r19, Y+20	; 0x14
    3cfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cfc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cfe:	46 e0       	ldi	r20, 0x06	; 6
    3d00:	34 9f       	mul	r19, r20
    3d02:	80 0d       	add	r24, r0
    3d04:	91 1d       	adc	r25, r1
    3d06:	11 24       	eor	r1, r1
    3d08:	48 85       	ldd	r20, Y+8	; 0x08
    3d0a:	59 85       	ldd	r21, Y+9	; 0x09
    3d0c:	48 17       	cp	r20, r24
    3d0e:	59 07       	cpc	r21, r25
    3d10:	64 f4       	brge	.+24     	; 0x3d2a <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    3d12:	1d 86       	std	Y+13, r1	; 0x0d
    3d14:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    3d16:	3d 89       	ldd	r19, Y+21	; 0x15
    3d18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d1c:	48 e0       	ldi	r20, 0x08	; 8
    3d1e:	34 9f       	mul	r19, r20
    3d20:	80 0d       	add	r24, r0
    3d22:	91 1d       	adc	r25, r1
    3d24:	11 24       	eor	r1, r1
    3d26:	9f 87       	std	Y+15, r25	; 0x0f
    3d28:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    3d2a:	ea 88       	ldd	r14, Y+18	; 0x12
    3d2c:	fb 88       	ldd	r15, Y+19	; 0x13
    3d2e:	08 89       	ldd	r16, Y+16	; 0x10
    3d30:	19 89       	ldd	r17, Y+17	; 0x11
    3d32:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d34:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d36:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d38:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d3a:	ad 88       	ldd	r10, Y+21	; 0x15
    3d3c:	cc 88       	ldd	r12, Y+20	; 0x14
    3d3e:	ce 01       	movw	r24, r28
    3d40:	0e 94 23 1c 	call	0x3846	; 0x3846 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    3d44:	2c 89       	ldd	r18, Y+20	; 0x14
    3d46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d48:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d4a:	36 e0       	ldi	r19, 0x06	; 6
    3d4c:	23 9f       	mul	r18, r19
    3d4e:	80 0d       	add	r24, r0
    3d50:	91 1d       	adc	r25, r1
    3d52:	11 24       	eor	r1, r1
    3d54:	3e c0       	rjmp	.+124    	; 0x3dd2 <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    3d56:	6a 30       	cpi	r22, 0x0A	; 10
    3d58:	79 f4       	brne	.+30     	; 0x3d78 <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    3d5a:	1d 86       	std	Y+13, r1	; 0x0d
    3d5c:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3d5e:	2d 89       	ldd	r18, Y+21	; 0x15
    3d60:	fc 01       	movw	r30, r24
    3d62:	38 96       	adiw	r30, 0x08	; 8
    3d64:	e4 91       	lpm	r30, Z
    3d66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d68:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d6a:	2e 9f       	mul	r18, r30
    3d6c:	80 0d       	add	r24, r0
    3d6e:	91 1d       	adc	r25, r1
    3d70:	11 24       	eor	r1, r1
    3d72:	9f 87       	std	Y+15, r25	; 0x0f
    3d74:	8e 87       	std	Y+14, r24	; 0x0e
    3d76:	67 c0       	rjmp	.+206    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    3d78:	6d 30       	cpi	r22, 0x0D	; 13
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <_ZN12Adafruit_GFX5writeEh+0xce>
    3d7c:	64 c0       	rjmp	.+200    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    3d7e:	fc 01       	movw	r30, r24
    3d80:	34 96       	adiw	r30, 0x04	; 4
    3d82:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    3d84:	63 17       	cp	r22, r19
    3d86:	08 f4       	brcc	.+2      	; 0x3d8a <_ZN12Adafruit_GFX5writeEh+0xda>
    3d88:	5e c0       	rjmp	.+188    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
    3d8a:	32 96       	adiw	r30, 0x02	; 2
    3d8c:	e4 91       	lpm	r30, Z
    3d8e:	e6 17       	cp	r30, r22
    3d90:	08 f4       	brcc	.+2      	; 0x3d94 <_ZN12Adafruit_GFX5writeEh+0xe4>
    3d92:	59 c0       	rjmp	.+178    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    3d94:	46 2f       	mov	r20, r22
    3d96:	43 1b       	sub	r20, r19
    3d98:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	32 96       	adiw	r30, 0x02	; 2
    3d9e:	85 90       	lpm	r8, Z+
    3da0:	94 90       	lpm	r9, Z
    3da2:	47 e0       	ldi	r20, 0x07	; 7
    3da4:	34 9f       	mul	r19, r20
    3da6:	80 0c       	add	r8, r0
    3da8:	91 1c       	adc	r9, r1
    3daa:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    3dac:	f4 01       	movw	r30, r8
    3dae:	32 96       	adiw	r30, 0x02	; 2
    3db0:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    3db2:	31 96       	adiw	r30, 0x01	; 1
    3db4:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3db6:	33 23       	and	r19, r19
    3db8:	11 f0       	breq	.+4      	; 0x3dbe <_ZN12Adafruit_GFX5writeEh+0x10e>
    3dba:	e1 11       	cpse	r30, r1
    3dbc:	0d c0       	rjmp	.+26     	; 0x3dd8 <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    3dbe:	f4 01       	movw	r30, r8
    3dc0:	34 96       	adiw	r30, 0x04	; 4
    3dc2:	e4 91       	lpm	r30, Z
    3dc4:	2c 89       	ldd	r18, Y+20	; 0x14
    3dc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dca:	e2 9f       	mul	r30, r18
    3dcc:	80 0d       	add	r24, r0
    3dce:	91 1d       	adc	r25, r1
    3dd0:	11 24       	eor	r1, r1
    3dd2:	9d 87       	std	Y+13, r25	; 0x0d
    3dd4:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    3dd6:	37 c0       	rjmp	.+110    	; 0x3e46 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    3dd8:	f4 01       	movw	r30, r8
    3dda:	35 96       	adiw	r30, 0x05	; 5
    3ddc:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    3dde:	5f 89       	ldd	r21, Y+23	; 0x17
    3de0:	55 23       	and	r21, r21
    3de2:	19 f1       	breq	.+70     	; 0x3e2a <_ZN12Adafruit_GFX5writeEh+0x17a>
    3de4:	5c 89       	ldd	r21, Y+20	; 0x14
    3de6:	e3 2f       	mov	r30, r19
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	e4 0f       	add	r30, r20
    3dec:	f1 1d       	adc	r31, r1
    3dee:	47 fd       	sbrc	r20, 7
    3df0:	fa 95       	dec	r31
    3df2:	5e 9f       	mul	r21, r30
    3df4:	b0 01       	movw	r22, r0
    3df6:	5f 9f       	mul	r21, r31
    3df8:	70 0d       	add	r23, r0
    3dfa:	11 24       	eor	r1, r1
    3dfc:	4c 85       	ldd	r20, Y+12	; 0x0c
    3dfe:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e00:	46 0f       	add	r20, r22
    3e02:	57 1f       	adc	r21, r23
    3e04:	68 85       	ldd	r22, Y+8	; 0x08
    3e06:	79 85       	ldd	r23, Y+9	; 0x09
    3e08:	64 17       	cp	r22, r20
    3e0a:	75 07       	cpc	r23, r21
    3e0c:	74 f4       	brge	.+28     	; 0x3e2a <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    3e0e:	1d 86       	std	Y+13, r1	; 0x0d
    3e10:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    3e12:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3e14:	fc 01       	movw	r30, r24
    3e16:	38 96       	adiw	r30, 0x08	; 8
    3e18:	e4 91       	lpm	r30, Z
    3e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e1e:	3e 9f       	mul	r19, r30
    3e20:	80 0d       	add	r24, r0
    3e22:	91 1d       	adc	r25, r1
    3e24:	11 24       	eor	r1, r1
    3e26:	9f 87       	std	Y+15, r25	; 0x0f
    3e28:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    3e2a:	ea 88       	ldd	r14, Y+18	; 0x12
    3e2c:	fb 88       	ldd	r15, Y+19	; 0x13
    3e2e:	08 89       	ldd	r16, Y+16	; 0x10
    3e30:	19 89       	ldd	r17, Y+17	; 0x11
    3e32:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e34:	5f 85       	ldd	r21, Y+15	; 0x0f
    3e36:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e38:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e3a:	ad 88       	ldd	r10, Y+21	; 0x15
    3e3c:	cc 88       	ldd	r12, Y+20	; 0x14
    3e3e:	ce 01       	movw	r24, r28
    3e40:	0e 94 23 1c 	call	0x3846	; 0x3846 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3e44:	bc cf       	rjmp	.-136    	; 0x3dbe <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	0f 91       	pop	r16
    3e52:	ff 90       	pop	r15
    3e54:	ef 90       	pop	r14
    3e56:	cf 90       	pop	r12
    3e58:	af 90       	pop	r10
    3e5a:	9f 90       	pop	r9
    3e5c:	8f 90       	pop	r8
    3e5e:	08 95       	ret

00003e60 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    3e60:	61 11       	cpse	r22, r1
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    3e64:	61 e0       	ldi	r22, 0x01	; 1
    3e66:	fc 01       	movw	r30, r24
    3e68:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    3e6a:	41 11       	cpse	r20, r1
    3e6c:	01 c0       	rjmp	.+2      	; 0x3e70 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    3e6e:	41 e0       	ldi	r20, 0x01	; 1
    3e70:	fc 01       	movw	r30, r24
    3e72:	45 8b       	std	Z+21, r20	; 0x15
    3e74:	08 95       	ret

00003e76 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    3e76:	46 2f       	mov	r20, r22
    3e78:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <_ZN12Adafruit_GFX11setTextSizeEhh>

00003e7c <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	77 fd       	sbrc	r23, 7
    3e80:	b9 c0       	rjmp	.+370    	; 0x3ff4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    3e82:	80 85       	ldd	r24, Z+8	; 0x08
    3e84:	91 85       	ldd	r25, Z+9	; 0x09
    3e86:	68 17       	cp	r22, r24
    3e88:	79 07       	cpc	r23, r25
    3e8a:	0c f0       	brlt	.+2      	; 0x3e8e <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    3e8c:	b3 c0       	rjmp	.+358    	; 0x3ff4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    3e8e:	57 fd       	sbrc	r21, 7
    3e90:	b1 c0       	rjmp	.+354    	; 0x3ff4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    3e92:	82 85       	ldd	r24, Z+10	; 0x0a
    3e94:	93 85       	ldd	r25, Z+11	; 0x0b
    3e96:	48 17       	cp	r20, r24
    3e98:	59 07       	cpc	r21, r25
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    3e9c:	08 95       	ret
    3e9e:	86 89       	ldd	r24, Z+22	; 0x16
    3ea0:	82 30       	cpi	r24, 0x02	; 2
    3ea2:	79 f4       	brne	.+30     	; 0x3ec2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    3ea4:	84 81       	ldd	r24, Z+4	; 0x04
    3ea6:	95 81       	ldd	r25, Z+5	; 0x05
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	a6 1b       	sub	r26, r22
    3eac:	b7 0b       	sbc	r27, r23
    3eae:	bd 01       	movw	r22, r26
    3eb0:	61 50       	subi	r22, 0x01	; 1
    3eb2:	71 09       	sbc	r23, r1
    3eb4:	86 81       	ldd	r24, Z+6	; 0x06
    3eb6:	97 81       	ldd	r25, Z+7	; 0x07
    3eb8:	dc 01       	movw	r26, r24
    3eba:	a4 1b       	sub	r26, r20
    3ebc:	b5 0b       	sbc	r27, r21
    3ebe:	ad 01       	movw	r20, r26
    3ec0:	0e c0       	rjmp	.+28     	; 0x3ede <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    3ec2:	83 30       	cpi	r24, 0x03	; 3
    3ec4:	09 f0       	breq	.+2      	; 0x3ec8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    3ec6:	84 c0       	rjmp	.+264    	; 0x3fd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    3ec8:	64 27       	eor	r22, r20
    3eca:	75 27       	eor	r23, r21
    3ecc:	ca 01       	movw	r24, r20
    3ece:	86 27       	eor	r24, r22
    3ed0:	97 27       	eor	r25, r23
    3ed2:	68 27       	eor	r22, r24
    3ed4:	79 27       	eor	r23, r25
    3ed6:	46 81       	ldd	r20, Z+6	; 0x06
    3ed8:	57 81       	ldd	r21, Z+7	; 0x07
    3eda:	48 1b       	sub	r20, r24
    3edc:	59 0b       	sbc	r21, r25
    3ede:	41 50       	subi	r20, 0x01	; 1
    3ee0:	51 09       	sbc	r21, r1
    3ee2:	21 30       	cpi	r18, 0x01	; 1
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	31 f0       	breq	.+12     	; 0x3ef4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    3ee8:	48 f1       	brcs	.+82     	; 0x3f3c <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    3eea:	22 30       	cpi	r18, 0x02	; 2
    3eec:	31 05       	cpc	r19, r1
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    3ef0:	4a c0       	rjmp	.+148    	; 0x3f86 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    3ef2:	08 95       	ret
    3ef4:	ca 01       	movw	r24, r20
    3ef6:	57 fd       	sbrc	r21, 7
    3ef8:	07 96       	adiw	r24, 0x07	; 7
    3efa:	9c 01       	movw	r18, r24
    3efc:	a3 e0       	ldi	r26, 0x03	; 3
    3efe:	35 95       	asr	r19
    3f00:	27 95       	ror	r18
    3f02:	aa 95       	dec	r26
    3f04:	e1 f7       	brne	.-8      	; 0x3efe <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    3f06:	a4 81       	ldd	r26, Z+4	; 0x04
    3f08:	b5 81       	ldd	r27, Z+5	; 0x05
    3f0a:	2a 9f       	mul	r18, r26
    3f0c:	c0 01       	movw	r24, r0
    3f0e:	2b 9f       	mul	r18, r27
    3f10:	90 0d       	add	r25, r0
    3f12:	3a 9f       	mul	r19, r26
    3f14:	90 0d       	add	r25, r0
    3f16:	11 24       	eor	r1, r1
    3f18:	68 0f       	add	r22, r24
    3f1a:	79 1f       	adc	r23, r25
    3f1c:	07 8c       	ldd	r0, Z+31	; 0x1f
    3f1e:	f0 a1       	ldd	r31, Z+32	; 0x20
    3f20:	e0 2d       	mov	r30, r0
    3f22:	e6 0f       	add	r30, r22
    3f24:	f7 1f       	adc	r31, r23
    3f26:	47 70       	andi	r20, 0x07	; 7
    3f28:	55 27       	eor	r21, r21
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	01 c0       	rjmp	.+2      	; 0x3f32 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    3f30:	88 0f       	add	r24, r24
    3f32:	4a 95       	dec	r20
    3f34:	ea f7       	brpl	.-6      	; 0x3f30 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    3f36:	90 81       	ld	r25, Z
    3f38:	89 2b       	or	r24, r25
    3f3a:	48 c0       	rjmp	.+144    	; 0x3fcc <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    3f3c:	ca 01       	movw	r24, r20
    3f3e:	57 fd       	sbrc	r21, 7
    3f40:	07 96       	adiw	r24, 0x07	; 7
    3f42:	9c 01       	movw	r18, r24
    3f44:	93 e0       	ldi	r25, 0x03	; 3
    3f46:	35 95       	asr	r19
    3f48:	27 95       	ror	r18
    3f4a:	9a 95       	dec	r25
    3f4c:	e1 f7       	brne	.-8      	; 0x3f46 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    3f4e:	a4 81       	ldd	r26, Z+4	; 0x04
    3f50:	b5 81       	ldd	r27, Z+5	; 0x05
    3f52:	2a 9f       	mul	r18, r26
    3f54:	c0 01       	movw	r24, r0
    3f56:	2b 9f       	mul	r18, r27
    3f58:	90 0d       	add	r25, r0
    3f5a:	3a 9f       	mul	r19, r26
    3f5c:	90 0d       	add	r25, r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	68 0f       	add	r22, r24
    3f62:	79 1f       	adc	r23, r25
    3f64:	07 8c       	ldd	r0, Z+31	; 0x1f
    3f66:	f0 a1       	ldd	r31, Z+32	; 0x20
    3f68:	e0 2d       	mov	r30, r0
    3f6a:	e6 0f       	add	r30, r22
    3f6c:	f7 1f       	adc	r31, r23
    3f6e:	47 70       	andi	r20, 0x07	; 7
    3f70:	55 27       	eor	r21, r21
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    3f78:	88 0f       	add	r24, r24
    3f7a:	4a 95       	dec	r20
    3f7c:	ea f7       	brpl	.-6      	; 0x3f78 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    3f7e:	80 95       	com	r24
    3f80:	90 81       	ld	r25, Z
    3f82:	89 23       	and	r24, r25
    3f84:	23 c0       	rjmp	.+70     	; 0x3fcc <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    3f86:	ca 01       	movw	r24, r20
    3f88:	57 fd       	sbrc	r21, 7
    3f8a:	07 96       	adiw	r24, 0x07	; 7
    3f8c:	9c 01       	movw	r18, r24
    3f8e:	83 e0       	ldi	r24, 0x03	; 3
    3f90:	35 95       	asr	r19
    3f92:	27 95       	ror	r18
    3f94:	8a 95       	dec	r24
    3f96:	e1 f7       	brne	.-8      	; 0x3f90 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    3f98:	a4 81       	ldd	r26, Z+4	; 0x04
    3f9a:	b5 81       	ldd	r27, Z+5	; 0x05
    3f9c:	2a 9f       	mul	r18, r26
    3f9e:	c0 01       	movw	r24, r0
    3fa0:	2b 9f       	mul	r18, r27
    3fa2:	90 0d       	add	r25, r0
    3fa4:	3a 9f       	mul	r19, r26
    3fa6:	90 0d       	add	r25, r0
    3fa8:	11 24       	eor	r1, r1
    3faa:	68 0f       	add	r22, r24
    3fac:	79 1f       	adc	r23, r25
    3fae:	07 8c       	ldd	r0, Z+31	; 0x1f
    3fb0:	f0 a1       	ldd	r31, Z+32	; 0x20
    3fb2:	e0 2d       	mov	r30, r0
    3fb4:	e6 0f       	add	r30, r22
    3fb6:	f7 1f       	adc	r31, r23
    3fb8:	47 70       	andi	r20, 0x07	; 7
    3fba:	55 27       	eor	r21, r21
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    3fc2:	88 0f       	add	r24, r24
    3fc4:	4a 95       	dec	r20
    3fc6:	ea f7       	brpl	.-6      	; 0x3fc2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    3fc8:	90 81       	ld	r25, Z
    3fca:	89 27       	eor	r24, r25
    3fcc:	80 83       	st	Z, r24
    3fce:	08 95       	ret
    3fd0:	81 30       	cpi	r24, 0x01	; 1
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    3fd4:	86 cf       	rjmp	.-244    	; 0x3ee2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    3fd6:	64 27       	eor	r22, r20
    3fd8:	75 27       	eor	r23, r21
    3fda:	46 27       	eor	r20, r22
    3fdc:	57 27       	eor	r21, r23
    3fde:	64 27       	eor	r22, r20
    3fe0:	75 27       	eor	r23, r21
    3fe2:	84 81       	ldd	r24, Z+4	; 0x04
    3fe4:	95 81       	ldd	r25, Z+5	; 0x05
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	a6 1b       	sub	r26, r22
    3fea:	b7 0b       	sbc	r27, r23
    3fec:	bd 01       	movw	r22, r26
    3fee:	61 50       	subi	r22, 0x01	; 1
    3ff0:	71 09       	sbc	r23, r1
    3ff2:	77 cf       	rjmp	.-274    	; 0x3ee2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    3ff4:	08 95       	ret

00003ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    3ff6:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <_ZN8SPIClass13interruptModeE>
    3ffa:	22 23       	and	r18, r18
    3ffc:	99 f0       	breq	.+38     	; 0x4024 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3ffe:	4f b7       	in	r20, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <_ZN8SPIClass13interruptModeE>
    4006:	21 30       	cpi	r18, 0x01	; 1
    4008:	59 f4       	brne	.+22     	; 0x4020 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    400a:	2d b3       	in	r18, 0x1d	; 29
    400c:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <_ZN8SPIClass13interruptSaveE>
    4010:	3d b3       	in	r19, 0x1d	; 29
    4012:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <_ZN8SPIClass13interruptMaskE>
    4016:	20 95       	com	r18
    4018:	23 23       	and	r18, r19
    401a:	2d bb       	out	0x1d, r18	; 29
    401c:	4f bf       	out	0x3f, r20	; 63
    401e:	02 c0       	rjmp	.+4      	; 0x4024 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4020:	40 93 7c 02 	sts	0x027C, r20	; 0x80027c <_ZN8SPIClass13interruptSaveE>
    4024:	8c bd       	out	0x2c, r24	; 44
    4026:	9d bd       	out	0x2d, r25	; 45
    4028:	08 95       	ret

0000402a <_ZN8SPIClass8transferEh>:
    402a:	8e bd       	out	0x2e, r24	; 46
    402c:	00 00       	nop
    402e:	0d b4       	in	r0, 0x2d	; 45
    4030:	07 fe       	sbrs	r0, 7
    4032:	fd cf       	rjmp	.-6      	; 0x402e <_ZN8SPIClass8transferEh+0x4>
    4034:	8e b5       	in	r24, 0x2e	; 46
    4036:	08 95       	ret

00004038 <_ZN8SPIClass14endTransactionEv>:
    4038:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <_ZN8SPIClass13interruptModeE>
    403c:	88 23       	and	r24, r24
    403e:	61 f0       	breq	.+24     	; 0x4058 <_ZN8SPIClass14endTransactionEv+0x20>
    4040:	9f b7       	in	r25, 0x3f	; 63
    4042:	f8 94       	cli
    4044:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <_ZN8SPIClass13interruptModeE>
    4048:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZN8SPIClass13interruptSaveE>
    404c:	21 30       	cpi	r18, 0x01	; 1
    404e:	19 f4       	brne	.+6      	; 0x4056 <_ZN8SPIClass14endTransactionEv+0x1e>
    4050:	8d bb       	out	0x1d, r24	; 29
    4052:	9f bf       	out	0x3f, r25	; 63
    4054:	08 95       	ret
    4056:	8f bf       	out	0x3f, r24	; 63
    4058:	08 95       	ret

0000405a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    405a:	4f 92       	push	r4
    405c:	5f 92       	push	r5
    405e:	6f 92       	push	r6
    4060:	7f 92       	push	r7
    4062:	8f 92       	push	r8
    4064:	9f 92       	push	r9
    4066:	af 92       	push	r10
    4068:	bf 92       	push	r11
    406a:	cf 92       	push	r12
    406c:	df 92       	push	r13
    406e:	ef 92       	push	r14
    4070:	ff 92       	push	r15
    4072:	0f 93       	push	r16
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	cd b7       	in	r28, 0x3d	; 61
    407a:	de b7       	in	r29, 0x3e	; 62
    407c:	3c 01       	movw	r6, r24
    407e:	29 01       	movw	r4, r18
    4080:	50 e0       	ldi	r21, 0x00	; 0
    4082:	70 e0       	ldi	r23, 0x00	; 0
    4084:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN12Adafruit_GFXC1Eii>
    4088:	8b e5       	ldi	r24, 0x5B	; 91
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	f3 01       	movw	r30, r6
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
    4092:	14 8e       	std	Z+28, r1	; 0x1c
    4094:	13 8e       	std	Z+27, r1	; 0x1b
    4096:	41 14       	cp	r4, r1
    4098:	51 04       	cpc	r5, r1
    409a:	11 f0       	breq	.+4      	; 0x40a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x46>
    409c:	c2 01       	movw	r24, r4
    409e:	02 c0       	rjmp	.+4      	; 0x40a4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x4a>
    40a0:	80 e8       	ldi	r24, 0x80	; 128
    40a2:	92 e0       	ldi	r25, 0x02	; 2
    40a4:	f3 01       	movw	r30, r6
    40a6:	96 8f       	std	Z+30, r25	; 0x1e
    40a8:	85 8f       	std	Z+29, r24	; 0x1d
    40aa:	10 a2       	std	Z+32, r1	; 0x20
    40ac:	17 8e       	std	Z+31, r1	; 0x1f
    40ae:	8f ef       	ldi	r24, 0xFF	; 255
    40b0:	84 a3       	std	Z+36, r24	; 0x24
    40b2:	85 a3       	std	Z+37, r24	; 0x25
    40b4:	86 a3       	std	Z+38, r24	; 0x26
    40b6:	87 a3       	std	Z+39, r24	; 0x27
    40b8:	00 a7       	std	Z+40, r16	; 0x28
    40ba:	c5 aa       	std	Z+53, r12	; 0x35
    40bc:	d6 aa       	std	Z+54, r13	; 0x36
    40be:	e7 aa       	std	Z+55, r14	; 0x37
    40c0:	f0 ae       	std	Z+56, r15	; 0x38
    40c2:	81 ae       	std	Z+57, r8	; 0x39
    40c4:	92 ae       	std	Z+58, r9	; 0x3a
    40c6:	a3 ae       	std	Z+59, r10	; 0x3b
    40c8:	b4 ae       	std	Z+60, r11	; 0x3c
    40ca:	80 e5       	ldi	r24, 0x50	; 80
    40cc:	86 af       	std	Z+62, r24	; 0x3e
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	87 af       	std	Z+63, r24	; 0x3f
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	bf 90       	pop	r11
    40e2:	af 90       	pop	r10
    40e4:	9f 90       	pop	r9
    40e6:	8f 90       	pop	r8
    40e8:	7f 90       	pop	r7
    40ea:	6f 90       	pop	r6
    40ec:	5f 90       	pop	r5
    40ee:	4f 90       	pop	r4
    40f0:	08 95       	ret

000040f2 <_ZN16Adafruit_SSD1306D1Ev>:
    40f2:	2b e5       	ldi	r18, 0x5B	; 91
    40f4:	31 e0       	ldi	r19, 0x01	; 1
    40f6:	fc 01       	movw	r30, r24
    40f8:	31 83       	std	Z+1, r19	; 0x01
    40fa:	20 83       	st	Z, r18
    40fc:	87 8d       	ldd	r24, Z+31	; 0x1f
    40fe:	90 a1       	ldd	r25, Z+32	; 0x20
    4100:	00 97       	sbiw	r24, 0x00	; 0
    4102:	11 f0       	breq	.+4      	; 0x4108 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    4104:	0c 94 1d 30 	jmp	0x603a	; 0x603a <free>
    4108:	08 95       	ret

0000410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	fc 01       	movw	r30, r24
    4112:	85 8d       	ldd	r24, Z+29	; 0x1d
    4114:	96 8d       	ldd	r25, Z+30	; 0x1e
    4116:	00 97       	sbiw	r24, 0x00	; 0
    4118:	19 f1       	breq	.+70     	; 0x4160 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    411a:	16 2f       	mov	r17, r22
    411c:	ef 01       	movw	r28, r30
    411e:	61 a1       	ldd	r22, Z+33	; 0x21
    4120:	06 2e       	mov	r0, r22
    4122:	00 0c       	add	r0, r0
    4124:	77 0b       	sbc	r23, r23
    4126:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN7TwoWire17beginTransmissionEi>
    412a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    412c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    412e:	dc 01       	movw	r26, r24
    4130:	ed 91       	ld	r30, X+
    4132:	fc 91       	ld	r31, X
    4134:	01 90       	ld	r0, Z+
    4136:	f0 81       	ld	r31, Z
    4138:	e0 2d       	mov	r30, r0
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	09 95       	icall
    413e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4140:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4142:	dc 01       	movw	r26, r24
    4144:	ed 91       	ld	r30, X+
    4146:	fc 91       	ld	r31, X
    4148:	01 90       	ld	r0, Z+
    414a:	f0 81       	ld	r31, Z
    414c:	e0 2d       	mov	r30, r0
    414e:	61 2f       	mov	r22, r17
    4150:	09 95       	icall
    4152:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4154:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	1f 91       	pop	r17
    415c:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <_ZN7TwoWire15endTransmissionEv>
    4160:	a5 a5       	ldd	r26, Z+45	; 0x2d
    4162:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4164:	9c 91       	ld	r25, X
    4166:	83 a9       	ldd	r24, Z+51	; 0x33
    4168:	80 95       	com	r24
    416a:	89 23       	and	r24, r25
    416c:	8c 93       	st	X, r24
    416e:	83 8d       	ldd	r24, Z+27	; 0x1b
    4170:	94 8d       	ldd	r25, Z+28	; 0x1c
    4172:	89 2b       	or	r24, r25
    4174:	31 f0       	breq	.+12     	; 0x4182 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    4176:	86 2f       	mov	r24, r22
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	1f 91       	pop	r17
    417e:	0c 94 15 20 	jmp	0x402a	; 0x402a <_ZN8SPIClass8transferEh>
    4182:	28 e0       	ldi	r18, 0x08	; 8
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	80 e8       	ldi	r24, 0x80	; 128
    4188:	a1 a5       	ldd	r26, Z+41	; 0x29
    418a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    418c:	91 a9       	ldd	r25, Z+49	; 0x31
    418e:	46 2f       	mov	r20, r22
    4190:	48 23       	and	r20, r24
    4192:	19 f0       	breq	.+6      	; 0x419a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    4194:	4c 91       	ld	r20, X
    4196:	94 2b       	or	r25, r20
    4198:	03 c0       	rjmp	.+6      	; 0x41a0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    419a:	4c 91       	ld	r20, X
    419c:	90 95       	com	r25
    419e:	94 23       	and	r25, r20
    41a0:	9c 93       	st	X, r25
    41a2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    41a4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    41a6:	4c 91       	ld	r20, X
    41a8:	92 a9       	ldd	r25, Z+50	; 0x32
    41aa:	94 2b       	or	r25, r20
    41ac:	9c 93       	st	X, r25
    41ae:	a3 a5       	ldd	r26, Z+43	; 0x2b
    41b0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    41b2:	4c 91       	ld	r20, X
    41b4:	92 a9       	ldd	r25, Z+50	; 0x32
    41b6:	90 95       	com	r25
    41b8:	94 23       	and	r25, r20
    41ba:	9c 93       	st	X, r25
    41bc:	86 95       	lsr	r24
    41be:	21 50       	subi	r18, 0x01	; 1
    41c0:	31 09       	sbc	r19, r1
    41c2:	11 f7       	brne	.-60     	; 0x4188 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	1f 91       	pop	r17
    41ca:	08 95       	ret

000041cc <_ZN16Adafruit_SSD130613invertDisplayEb>:
    41cc:	1f 93       	push	r17
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	ec 01       	movw	r28, r24
    41d4:	16 2f       	mov	r17, r22
    41d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	39 f0       	breq	.+14     	; 0x41ec <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    41de:	4d a9       	ldd	r20, Y+53	; 0x35
    41e0:	5e a9       	ldd	r21, Y+54	; 0x36
    41e2:	6f a9       	ldd	r22, Y+55	; 0x37
    41e4:	78 ad       	ldd	r23, Y+56	; 0x38
    41e6:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    41ea:	0f c0       	rjmp	.+30     	; 0x420a <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    41ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f0:	89 2b       	or	r24, r25
    41f2:	21 f0       	breq	.+8      	; 0x41fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    41f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    41f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    41f8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    41fc:	ef a5       	ldd	r30, Y+47	; 0x2f
    41fe:	f8 a9       	ldd	r31, Y+48	; 0x30
    4200:	90 81       	ld	r25, Z
    4202:	8c a9       	ldd	r24, Y+52	; 0x34
    4204:	80 95       	com	r24
    4206:	89 23       	and	r24, r25
    4208:	80 83       	st	Z, r24
    420a:	11 11       	cpse	r17, r1
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    420e:	66 ea       	ldi	r22, 0xA6	; 166
    4210:	01 c0       	rjmp	.+2      	; 0x4214 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    4212:	67 ea       	ldi	r22, 0xA7	; 167
    4214:	ce 01       	movw	r24, r28
    4216:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    421a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    421c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	49 f0       	breq	.+18     	; 0x4234 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    4222:	49 ad       	ldd	r20, Y+57	; 0x39
    4224:	5a ad       	ldd	r21, Y+58	; 0x3a
    4226:	6b ad       	ldd	r22, Y+59	; 0x3b
    4228:	7c ad       	ldd	r23, Y+60	; 0x3c
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	1f 91       	pop	r17
    4230:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4234:	ef a5       	ldd	r30, Y+47	; 0x2f
    4236:	f8 a9       	ldd	r31, Y+48	; 0x30
    4238:	90 81       	ld	r25, Z
    423a:	8c a9       	ldd	r24, Y+52	; 0x34
    423c:	89 2b       	or	r24, r25
    423e:	80 83       	st	Z, r24
    4240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4244:	89 2b       	or	r24, r25
    4246:	29 f0       	breq	.+10     	; 0x4252 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	1f 91       	pop	r17
    424e:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	08 95       	ret

0000425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    425a:	bf 92       	push	r11
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	ec 01       	movw	r28, r24
    426e:	b6 2e       	mov	r11, r22
    4270:	07 2f       	mov	r16, r23
    4272:	14 2f       	mov	r17, r20
    4274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4276:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	09 f4       	brne	.+2      	; 0x427e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    427c:	52 c0       	rjmp	.+164    	; 0x4322 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    427e:	69 a1       	ldd	r22, Y+33	; 0x21
    4280:	06 2e       	mov	r0, r22
    4282:	00 0c       	add	r0, r0
    4284:	77 0b       	sbc	r23, r23
    4286:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN7TwoWire17beginTransmissionEi>
    428a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    428c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    428e:	dc 01       	movw	r26, r24
    4290:	ed 91       	ld	r30, X+
    4292:	fc 91       	ld	r31, X
    4294:	01 90       	ld	r0, Z+
    4296:	f0 81       	ld	r31, Z
    4298:	e0 2d       	mov	r30, r0
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	09 95       	icall
    429e:	cb 2c       	mov	r12, r11
    42a0:	d0 2e       	mov	r13, r16
    42a2:	ee 24       	eor	r14, r14
    42a4:	e3 94       	inc	r14
    42a6:	f1 2c       	mov	r15, r1
    42a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42ac:	11 23       	and	r17, r17
    42ae:	71 f1       	breq	.+92     	; 0x430c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    42b0:	b0 e2       	ldi	r27, 0x20	; 32
    42b2:	eb 16       	cp	r14, r27
    42b4:	f1 04       	cpc	r15, r1
    42b6:	b8 f0       	brcs	.+46     	; 0x42e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    42b8:	0e 94 59 29 	call	0x52b2	; 0x52b2 <_ZN7TwoWire15endTransmissionEv>
    42bc:	69 a1       	ldd	r22, Y+33	; 0x21
    42be:	06 2e       	mov	r0, r22
    42c0:	00 0c       	add	r0, r0
    42c2:	77 0b       	sbc	r23, r23
    42c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42c8:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN7TwoWire17beginTransmissionEi>
    42cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42d0:	dc 01       	movw	r26, r24
    42d2:	ed 91       	ld	r30, X+
    42d4:	fc 91       	ld	r31, X
    42d6:	01 90       	ld	r0, Z+
    42d8:	f0 81       	ld	r31, Z
    42da:	e0 2d       	mov	r30, r0
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	09 95       	icall
    42e0:	ee 24       	eor	r14, r14
    42e2:	e3 94       	inc	r14
    42e4:	f1 2c       	mov	r15, r1
    42e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42ea:	f6 01       	movw	r30, r12
    42ec:	64 91       	lpm	r22, Z
    42ee:	dc 01       	movw	r26, r24
    42f0:	ed 91       	ld	r30, X+
    42f2:	fc 91       	ld	r31, X
    42f4:	01 90       	ld	r0, Z+
    42f6:	f0 81       	ld	r31, Z
    42f8:	e0 2d       	mov	r30, r0
    42fa:	09 95       	icall
    42fc:	bf ef       	ldi	r27, 0xFF	; 255
    42fe:	eb 1a       	sub	r14, r27
    4300:	fb 0a       	sbc	r15, r27
    4302:	11 50       	subi	r17, 0x01	; 1
    4304:	f6 01       	movw	r30, r12
    4306:	31 96       	adiw	r30, 0x01	; 1
    4308:	6f 01       	movw	r12, r30
    430a:	ce cf       	rjmp	.-100    	; 0x42a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	ff 90       	pop	r15
    4316:	ef 90       	pop	r14
    4318:	df 90       	pop	r13
    431a:	cf 90       	pop	r12
    431c:	bf 90       	pop	r11
    431e:	0c 94 59 29 	jmp	0x52b2	; 0x52b2 <_ZN7TwoWire15endTransmissionEv>
    4322:	ed a5       	ldd	r30, Y+45	; 0x2d
    4324:	fe a5       	ldd	r31, Y+46	; 0x2e
    4326:	90 81       	ld	r25, Z
    4328:	8b a9       	ldd	r24, Y+51	; 0x33
    432a:	80 95       	com	r24
    432c:	89 23       	and	r24, r25
    432e:	80 83       	st	Z, r24
    4330:	e6 2e       	mov	r14, r22
    4332:	f7 2e       	mov	r15, r23
    4334:	11 23       	and	r17, r17
    4336:	79 f1       	breq	.+94     	; 0x4396 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    4338:	f7 01       	movw	r30, r14
    433a:	84 91       	lpm	r24, Z
    433c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    433e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4340:	23 2b       	or	r18, r19
    4342:	39 f0       	breq	.+14     	; 0x4352 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    4344:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN8SPIClass8transferEh>
    4348:	11 50       	subi	r17, 0x01	; 1
    434a:	c7 01       	movw	r24, r14
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	7c 01       	movw	r14, r24
    4350:	f1 cf       	rjmp	.-30     	; 0x4334 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    4352:	28 e0       	ldi	r18, 0x08	; 8
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e8       	ldi	r20, 0x80	; 128
    4358:	e9 a5       	ldd	r30, Y+41	; 0x29
    435a:	fa a5       	ldd	r31, Y+42	; 0x2a
    435c:	99 a9       	ldd	r25, Y+49	; 0x31
    435e:	58 2f       	mov	r21, r24
    4360:	54 23       	and	r21, r20
    4362:	19 f0       	breq	.+6      	; 0x436a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    4364:	50 81       	ld	r21, Z
    4366:	95 2b       	or	r25, r21
    4368:	03 c0       	rjmp	.+6      	; 0x4370 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    436a:	50 81       	ld	r21, Z
    436c:	90 95       	com	r25
    436e:	95 23       	and	r25, r21
    4370:	90 83       	st	Z, r25
    4372:	eb a5       	ldd	r30, Y+43	; 0x2b
    4374:	fc a5       	ldd	r31, Y+44	; 0x2c
    4376:	50 81       	ld	r21, Z
    4378:	9a a9       	ldd	r25, Y+50	; 0x32
    437a:	95 2b       	or	r25, r21
    437c:	90 83       	st	Z, r25
    437e:	eb a5       	ldd	r30, Y+43	; 0x2b
    4380:	fc a5       	ldd	r31, Y+44	; 0x2c
    4382:	50 81       	ld	r21, Z
    4384:	9a a9       	ldd	r25, Y+50	; 0x32
    4386:	90 95       	com	r25
    4388:	95 23       	and	r25, r21
    438a:	90 83       	st	Z, r25
    438c:	46 95       	lsr	r20
    438e:	21 50       	subi	r18, 0x01	; 1
    4390:	31 09       	sbc	r19, r1
    4392:	11 f7       	brne	.-60     	; 0x4358 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    4394:	d9 cf       	rjmp	.-78     	; 0x4348 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	ff 90       	pop	r15
    43a0:	ef 90       	pop	r14
    43a2:	df 90       	pop	r13
    43a4:	cf 90       	pop	r12
    43a6:	bf 90       	pop	r11
    43a8:	08 95       	ret

000043aa <_ZN16Adafruit_SSD130612clearDisplayEv>:
    43aa:	fc 01       	movw	r30, r24
    43ac:	86 81       	ldd	r24, Z+6	; 0x06
    43ae:	97 81       	ldd	r25, Z+7	; 0x07
    43b0:	9c 01       	movw	r18, r24
    43b2:	29 5f       	subi	r18, 0xF9	; 249
    43b4:	3f 4f       	sbci	r19, 0xFF	; 255
    43b6:	37 ff       	sbrs	r19, 7
    43b8:	02 c0       	rjmp	.+4      	; 0x43be <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    43ba:	29 5f       	subi	r18, 0xF9	; 249
    43bc:	3f 4f       	sbci	r19, 0xFF	; 255
    43be:	83 e0       	ldi	r24, 0x03	; 3
    43c0:	35 95       	asr	r19
    43c2:	27 95       	ror	r18
    43c4:	8a 95       	dec	r24
    43c6:	e1 f7       	brne	.-8      	; 0x43c0 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    43c8:	84 81       	ldd	r24, Z+4	; 0x04
    43ca:	95 81       	ldd	r25, Z+5	; 0x05
    43cc:	28 9f       	mul	r18, r24
    43ce:	a0 01       	movw	r20, r0
    43d0:	29 9f       	mul	r18, r25
    43d2:	50 0d       	add	r21, r0
    43d4:	38 9f       	mul	r19, r24
    43d6:	50 0d       	add	r21, r0
    43d8:	11 24       	eor	r1, r1
    43da:	60 e0       	ldi	r22, 0x00	; 0
    43dc:	70 e0       	ldi	r23, 0x00	; 0
    43de:	87 8d       	ldd	r24, Z+31	; 0x1f
    43e0:	90 a1       	ldd	r25, Z+32	; 0x20
    43e2:	0c 94 4d 31 	jmp	0x629a	; 0x629a <memset>

000043e6 <_ZN16Adafruit_SSD13065beginEhhbb>:
    43e6:	8f 92       	push	r8
    43e8:	9f 92       	push	r9
    43ea:	af 92       	push	r10
    43ec:	bf 92       	push	r11
    43ee:	cf 92       	push	r12
    43f0:	df 92       	push	r13
    43f2:	ef 92       	push	r14
    43f4:	ff 92       	push	r15
    43f6:	0f 93       	push	r16
    43f8:	1f 93       	push	r17
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	ec 01       	movw	r28, r24
    4400:	86 2e       	mov	r8, r22
    4402:	b4 2e       	mov	r11, r20
    4404:	a2 2e       	mov	r10, r18
    4406:	90 2e       	mov	r9, r16
    4408:	8f 8d       	ldd	r24, Y+31	; 0x1f
    440a:	98 a1       	ldd	r25, Y+32	; 0x20
    440c:	89 2b       	or	r24, r25
    440e:	e9 f4       	brne	.+58     	; 0x444a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    4410:	2e 81       	ldd	r18, Y+6	; 0x06
    4412:	3f 81       	ldd	r19, Y+7	; 0x07
    4414:	c9 01       	movw	r24, r18
    4416:	07 96       	adiw	r24, 0x07	; 7
    4418:	97 fd       	sbrc	r25, 7
    441a:	07 96       	adiw	r24, 0x07	; 7
    441c:	23 e0       	ldi	r18, 0x03	; 3
    441e:	95 95       	asr	r25
    4420:	87 95       	ror	r24
    4422:	2a 95       	dec	r18
    4424:	e1 f7       	brne	.-8      	; 0x441e <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    4426:	2c 81       	ldd	r18, Y+4	; 0x04
    4428:	3d 81       	ldd	r19, Y+5	; 0x05
    442a:	ac 01       	movw	r20, r24
    442c:	42 9f       	mul	r20, r18
    442e:	c0 01       	movw	r24, r0
    4430:	43 9f       	mul	r20, r19
    4432:	90 0d       	add	r25, r0
    4434:	52 9f       	mul	r21, r18
    4436:	90 0d       	add	r25, r0
    4438:	11 24       	eor	r1, r1
    443a:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <malloc>
    443e:	98 a3       	std	Y+32, r25	; 0x20
    4440:	8f 8f       	std	Y+31, r24	; 0x1f
    4442:	89 2b       	or	r24, r25
    4444:	11 f4       	brne	.+4      	; 0x444a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	92 c1       	rjmp	.+804    	; 0x476e <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    444a:	ce 01       	movw	r24, r28
    444c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN16Adafruit_SSD130612clearDisplayEv>
    4450:	8e 81       	ldd	r24, Y+6	; 0x06
    4452:	9f 81       	ldd	r25, Y+7	; 0x07
    4454:	6c 81       	ldd	r22, Y+4	; 0x04
    4456:	7d 81       	ldd	r23, Y+5	; 0x05
    4458:	81 32       	cpi	r24, 0x21	; 33
    445a:	91 05       	cpc	r25, r1
    445c:	e4 f0       	brlt	.+56     	; 0x4496 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    445e:	ac 01       	movw	r20, r24
    4460:	40 54       	subi	r20, 0x40	; 64
    4462:	51 09       	sbc	r21, r1
    4464:	57 ff       	sbrs	r21, 7
    4466:	02 c0       	rjmp	.+4      	; 0x446c <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    4468:	4f 5f       	subi	r20, 0xFF	; 255
    446a:	5f 4f       	sbci	r21, 0xFF	; 255
    446c:	55 95       	asr	r21
    446e:	47 95       	ror	r20
    4470:	62 55       	subi	r22, 0x52	; 82
    4472:	71 09       	sbc	r23, r1
    4474:	77 ff       	sbrs	r23, 7
    4476:	02 c0       	rjmp	.+4      	; 0x447c <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    4478:	6f 5f       	subi	r22, 0xFF	; 255
    447a:	7f 4f       	sbci	r23, 0xFF	; 255
    447c:	75 95       	asr	r23
    447e:	67 95       	ror	r22
    4480:	cc 24       	eor	r12, r12
    4482:	c3 94       	inc	r12
    4484:	d1 2c       	mov	r13, r1
    4486:	80 e4       	ldi	r24, 0x40	; 64
    4488:	e8 2e       	mov	r14, r24
    448a:	f1 2c       	mov	r15, r1
    448c:	02 e5       	ldi	r16, 0x52	; 82
    448e:	10 e0       	ldi	r17, 0x00	; 0
    4490:	26 ee       	ldi	r18, 0xE6	; 230
    4492:	37 e0       	ldi	r19, 0x07	; 7
    4494:	1b c0       	rjmp	.+54     	; 0x44cc <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    4496:	ac 01       	movw	r20, r24
    4498:	40 52       	subi	r20, 0x20	; 32
    449a:	51 09       	sbc	r21, r1
    449c:	57 ff       	sbrs	r21, 7
    449e:	02 c0       	rjmp	.+4      	; 0x44a4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    44a0:	4f 5f       	subi	r20, 0xFF	; 255
    44a2:	5f 4f       	sbci	r21, 0xFF	; 255
    44a4:	55 95       	asr	r21
    44a6:	47 95       	ror	r20
    44a8:	63 57       	subi	r22, 0x73	; 115
    44aa:	71 09       	sbc	r23, r1
    44ac:	77 ff       	sbrs	r23, 7
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    44b0:	6f 5f       	subi	r22, 0xFF	; 255
    44b2:	7f 4f       	sbci	r23, 0xFF	; 255
    44b4:	75 95       	asr	r23
    44b6:	67 95       	ror	r22
    44b8:	cc 24       	eor	r12, r12
    44ba:	c3 94       	inc	r12
    44bc:	d1 2c       	mov	r13, r1
    44be:	a0 e2       	ldi	r26, 0x20	; 32
    44c0:	ea 2e       	mov	r14, r26
    44c2:	f1 2c       	mov	r15, r1
    44c4:	03 e7       	ldi	r16, 0x73	; 115
    44c6:	10 e0       	ldi	r17, 0x00	; 0
    44c8:	26 e0       	ldi	r18, 0x06	; 6
    44ca:	36 e0       	ldi	r19, 0x06	; 6
    44cc:	ce 01       	movw	r24, r28
    44ce:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    44d2:	8a a2       	std	Y+34, r8	; 0x22
    44d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44d8:	00 97       	sbiw	r24, 0x00	; 0
    44da:	99 f0       	breq	.+38     	; 0x4502 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    44dc:	b1 10       	cpse	r11, r1
    44de:	07 c0       	rjmp	.+14     	; 0x44ee <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    44e0:	2e 81       	ldd	r18, Y+6	; 0x06
    44e2:	3f 81       	ldd	r19, Y+7	; 0x07
    44e4:	20 32       	cpi	r18, 0x20	; 32
    44e6:	31 05       	cpc	r19, r1
    44e8:	21 f4       	brne	.+8      	; 0x44f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    44ea:	2c e3       	ldi	r18, 0x3C	; 60
    44ec:	03 c0       	rjmp	.+6      	; 0x44f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    44ee:	2b 2d       	mov	r18, r11
    44f0:	01 c0       	rjmp	.+2      	; 0x44f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    44f2:	2d e3       	ldi	r18, 0x3D	; 61
    44f4:	29 a3       	std	Y+33, r18	; 0x21
    44f6:	99 20       	and	r9, r9
    44f8:	09 f4       	brne	.+2      	; 0x44fc <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    44fa:	36 c1       	rjmp	.+620    	; 0x4768 <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    44fc:	0e 94 24 29 	call	0x5248	; 0x5248 <_ZN7TwoWire5beginEv>
    4500:	79 c0       	rjmp	.+242    	; 0x45f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4502:	61 e0       	ldi	r22, 0x01	; 1
    4504:	8e a1       	ldd	r24, Y+38	; 0x26
    4506:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    450a:	61 e0       	ldi	r22, 0x01	; 1
    450c:	8f a1       	ldd	r24, Y+39	; 0x27
    450e:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    4512:	8e a1       	ldd	r24, Y+38	; 0x26
    4514:	08 2e       	mov	r0, r24
    4516:	00 0c       	add	r0, r0
    4518:	99 0b       	sbc	r25, r25
    451a:	fc 01       	movw	r30, r24
    451c:	e2 53       	subi	r30, 0x32	; 50
    451e:	f5 4f       	sbci	r31, 0xF5	; 245
    4520:	e4 91       	lpm	r30, Z
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	ee 0f       	add	r30, r30
    4526:	ff 1f       	adc	r31, r31
    4528:	ee 51       	subi	r30, 0x1E	; 30
    452a:	f5 4f       	sbci	r31, 0xF5	; 245
    452c:	25 91       	lpm	r18, Z+
    452e:	34 91       	lpm	r19, Z
    4530:	3e a7       	std	Y+46, r19	; 0x2e
    4532:	2d a7       	std	Y+45, r18	; 0x2d
    4534:	fc 01       	movw	r30, r24
    4536:	e6 54       	subi	r30, 0x46	; 70
    4538:	f5 4f       	sbci	r31, 0xF5	; 245
    453a:	e4 91       	lpm	r30, Z
    453c:	eb ab       	std	Y+51, r30	; 0x33
    453e:	8f a1       	ldd	r24, Y+39	; 0x27
    4540:	08 2e       	mov	r0, r24
    4542:	00 0c       	add	r0, r0
    4544:	99 0b       	sbc	r25, r25
    4546:	fc 01       	movw	r30, r24
    4548:	e2 53       	subi	r30, 0x32	; 50
    454a:	f5 4f       	sbci	r31, 0xF5	; 245
    454c:	e4 91       	lpm	r30, Z
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	ee 0f       	add	r30, r30
    4552:	ff 1f       	adc	r31, r31
    4554:	ee 51       	subi	r30, 0x1E	; 30
    4556:	f5 4f       	sbci	r31, 0xF5	; 245
    4558:	a5 91       	lpm	r26, Z+
    455a:	b4 91       	lpm	r27, Z
    455c:	b8 ab       	std	Y+48, r27	; 0x30
    455e:	af a7       	std	Y+47, r26	; 0x2f
    4560:	fc 01       	movw	r30, r24
    4562:	e6 54       	subi	r30, 0x46	; 70
    4564:	f5 4f       	sbci	r31, 0xF5	; 245
    4566:	e4 91       	lpm	r30, Z
    4568:	ec ab       	std	Y+52, r30	; 0x34
    456a:	8c 91       	ld	r24, X
    456c:	e8 2b       	or	r30, r24
    456e:	ec 93       	st	X, r30
    4570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4574:	89 2b       	or	r24, r25
    4576:	31 f0       	breq	.+12     	; 0x4584 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    4578:	99 20       	and	r9, r9
    457a:	09 f4       	brne	.+2      	; 0x457e <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    457c:	3b c0       	rjmp	.+118    	; 0x45f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    457e:	0e 94 20 28 	call	0x5040	; 0x5040 <_ZN8SPIClass5beginEv>
    4582:	38 c0       	rjmp	.+112    	; 0x45f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4584:	61 e0       	ldi	r22, 0x01	; 1
    4586:	8c a1       	ldd	r24, Y+36	; 0x24
    4588:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    458c:	61 e0       	ldi	r22, 0x01	; 1
    458e:	8d a1       	ldd	r24, Y+37	; 0x25
    4590:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    4594:	8c a1       	ldd	r24, Y+36	; 0x24
    4596:	08 2e       	mov	r0, r24
    4598:	00 0c       	add	r0, r0
    459a:	99 0b       	sbc	r25, r25
    459c:	fc 01       	movw	r30, r24
    459e:	e2 53       	subi	r30, 0x32	; 50
    45a0:	f5 4f       	sbci	r31, 0xF5	; 245
    45a2:	e4 91       	lpm	r30, Z
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	ee 0f       	add	r30, r30
    45a8:	ff 1f       	adc	r31, r31
    45aa:	ee 51       	subi	r30, 0x1E	; 30
    45ac:	f5 4f       	sbci	r31, 0xF5	; 245
    45ae:	25 91       	lpm	r18, Z+
    45b0:	34 91       	lpm	r19, Z
    45b2:	3a a7       	std	Y+42, r19	; 0x2a
    45b4:	29 a7       	std	Y+41, r18	; 0x29
    45b6:	fc 01       	movw	r30, r24
    45b8:	e6 54       	subi	r30, 0x46	; 70
    45ba:	f5 4f       	sbci	r31, 0xF5	; 245
    45bc:	e4 91       	lpm	r30, Z
    45be:	e9 ab       	std	Y+49, r30	; 0x31
    45c0:	8d a1       	ldd	r24, Y+37	; 0x25
    45c2:	08 2e       	mov	r0, r24
    45c4:	00 0c       	add	r0, r0
    45c6:	99 0b       	sbc	r25, r25
    45c8:	fc 01       	movw	r30, r24
    45ca:	e2 53       	subi	r30, 0x32	; 50
    45cc:	f5 4f       	sbci	r31, 0xF5	; 245
    45ce:	e4 91       	lpm	r30, Z
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	ee 0f       	add	r30, r30
    45d4:	ff 1f       	adc	r31, r31
    45d6:	ee 51       	subi	r30, 0x1E	; 30
    45d8:	f5 4f       	sbci	r31, 0xF5	; 245
    45da:	a5 91       	lpm	r26, Z+
    45dc:	b4 91       	lpm	r27, Z
    45de:	bc a7       	std	Y+44, r27	; 0x2c
    45e0:	ab a7       	std	Y+43, r26	; 0x2b
    45e2:	fc 01       	movw	r30, r24
    45e4:	e6 54       	subi	r30, 0x46	; 70
    45e6:	f5 4f       	sbci	r31, 0xF5	; 245
    45e8:	e4 91       	lpm	r30, Z
    45ea:	ea ab       	std	Y+50, r30	; 0x32
    45ec:	8c 91       	ld	r24, X
    45ee:	e0 95       	com	r30
    45f0:	e8 23       	and	r30, r24
    45f2:	ec 93       	st	X, r30
    45f4:	aa 20       	and	r10, r10
    45f6:	f1 f0       	breq	.+60     	; 0x4634 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    45f8:	88 a5       	ldd	r24, Y+40	; 0x28
    45fa:	87 fd       	sbrc	r24, 7
    45fc:	1b c0       	rjmp	.+54     	; 0x4634 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    45fe:	61 e0       	ldi	r22, 0x01	; 1
    4600:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    4604:	61 e0       	ldi	r22, 0x01	; 1
    4606:	88 a5       	ldd	r24, Y+40	; 0x28
    4608:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
    4618:	60 e0       	ldi	r22, 0x00	; 0
    461a:	88 a5       	ldd	r24, Y+40	; 0x28
    461c:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    4620:	6a e0       	ldi	r22, 0x0A	; 10
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <delay>
    462c:	61 e0       	ldi	r22, 0x01	; 1
    462e:	88 a5       	ldd	r24, Y+40	; 0x28
    4630:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    4634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4636:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	39 f0       	breq	.+14     	; 0x464a <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    463c:	4d a9       	ldd	r20, Y+53	; 0x35
    463e:	5e a9       	ldd	r21, Y+54	; 0x36
    4640:	6f a9       	ldd	r22, Y+55	; 0x37
    4642:	78 ad       	ldd	r23, Y+56	; 0x38
    4644:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    464a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    464c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    464e:	89 2b       	or	r24, r25
    4650:	21 f0       	breq	.+8      	; 0x465a <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    4652:	8e ad       	ldd	r24, Y+62	; 0x3e
    4654:	9f ad       	ldd	r25, Y+63	; 0x3f
    4656:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    465a:	ef a5       	ldd	r30, Y+47	; 0x2f
    465c:	f8 a9       	ldd	r31, Y+48	; 0x30
    465e:	90 81       	ld	r25, Z
    4660:	8c a9       	ldd	r24, Y+52	; 0x34
    4662:	80 95       	com	r24
    4664:	89 23       	and	r24, r25
    4666:	80 83       	st	Z, r24
    4668:	44 e0       	ldi	r20, 0x04	; 4
    466a:	62 e0       	ldi	r22, 0x02	; 2
    466c:	76 e0       	ldi	r23, 0x06	; 6
    466e:	ce 01       	movw	r24, r28
    4670:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4674:	6e 81       	ldd	r22, Y+6	; 0x06
    4676:	61 50       	subi	r22, 0x01	; 1
    4678:	ce 01       	movw	r24, r28
    467a:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    467e:	44 e0       	ldi	r20, 0x04	; 4
    4680:	6e ef       	ldi	r22, 0xFE	; 254
    4682:	75 e0       	ldi	r23, 0x05	; 5
    4684:	ce 01       	movw	r24, r28
    4686:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    468a:	8a a1       	ldd	r24, Y+34	; 0x22
    468c:	81 30       	cpi	r24, 0x01	; 1
    468e:	11 f4       	brne	.+4      	; 0x4694 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    4690:	60 e1       	ldi	r22, 0x10	; 16
    4692:	01 c0       	rjmp	.+2      	; 0x4696 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    4694:	64 e1       	ldi	r22, 0x14	; 20
    4696:	ce 01       	movw	r24, r28
    4698:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    469c:	44 e0       	ldi	r20, 0x04	; 4
    469e:	6a ef       	ldi	r22, 0xFA	; 250
    46a0:	75 e0       	ldi	r23, 0x05	; 5
    46a2:	ce 01       	movw	r24, r28
    46a4:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    46a8:	8f e8       	ldi	r24, 0x8F	; 143
    46aa:	8d af       	std	Y+61, r24	; 0x3d
    46ac:	8c 81       	ldd	r24, Y+4	; 0x04
    46ae:	9d 81       	ldd	r25, Y+5	; 0x05
    46b0:	80 38       	cpi	r24, 0x80	; 128
    46b2:	91 05       	cpc	r25, r1
    46b4:	71 f4       	brne	.+28     	; 0x46d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    46b6:	8e 81       	ldd	r24, Y+6	; 0x06
    46b8:	9f 81       	ldd	r25, Y+7	; 0x07
    46ba:	80 34       	cpi	r24, 0x40	; 64
    46bc:	91 05       	cpc	r25, r1
    46be:	b9 f4       	brne	.+46     	; 0x46ee <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    46c0:	8a a1       	ldd	r24, Y+34	; 0x22
    46c2:	81 30       	cpi	r24, 0x01	; 1
    46c4:	11 f4       	brne	.+4      	; 0x46ca <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    46c6:	8f e9       	ldi	r24, 0x9F	; 159
    46c8:	01 c0       	rjmp	.+2      	; 0x46cc <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    46ca:	8f ec       	ldi	r24, 0xCF	; 207
    46cc:	8d af       	std	Y+61, r24	; 0x3d
    46ce:	12 e1       	ldi	r17, 0x12	; 18
    46d0:	0f c0       	rjmp	.+30     	; 0x46f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    46d2:	80 36       	cpi	r24, 0x60	; 96
    46d4:	91 05       	cpc	r25, r1
    46d6:	59 f4       	brne	.+22     	; 0x46ee <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    46d8:	8e 81       	ldd	r24, Y+6	; 0x06
    46da:	9f 81       	ldd	r25, Y+7	; 0x07
    46dc:	40 97       	sbiw	r24, 0x10	; 16
    46de:	39 f4       	brne	.+14     	; 0x46ee <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    46e0:	8a a1       	ldd	r24, Y+34	; 0x22
    46e2:	81 30       	cpi	r24, 0x01	; 1
    46e4:	11 f4       	brne	.+4      	; 0x46ea <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    46e6:	80 e1       	ldi	r24, 0x10	; 16
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    46ea:	8f ea       	ldi	r24, 0xAF	; 175
    46ec:	8d af       	std	Y+61, r24	; 0x3d
    46ee:	12 e0       	ldi	r17, 0x02	; 2
    46f0:	6a ed       	ldi	r22, 0xDA	; 218
    46f2:	ce 01       	movw	r24, r28
    46f4:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    46f8:	61 2f       	mov	r22, r17
    46fa:	ce 01       	movw	r24, r28
    46fc:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4700:	61 e8       	ldi	r22, 0x81	; 129
    4702:	ce 01       	movw	r24, r28
    4704:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4708:	6d ad       	ldd	r22, Y+61	; 0x3d
    470a:	ce 01       	movw	r24, r28
    470c:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4710:	69 ed       	ldi	r22, 0xD9	; 217
    4712:	ce 01       	movw	r24, r28
    4714:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4718:	8a a1       	ldd	r24, Y+34	; 0x22
    471a:	81 30       	cpi	r24, 0x01	; 1
    471c:	11 f4       	brne	.+4      	; 0x4722 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    471e:	62 e2       	ldi	r22, 0x22	; 34
    4720:	01 c0       	rjmp	.+2      	; 0x4724 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    4722:	61 ef       	ldi	r22, 0xF1	; 241
    4724:	ce 01       	movw	r24, r28
    4726:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    472a:	46 e0       	ldi	r20, 0x06	; 6
    472c:	64 ef       	ldi	r22, 0xF4	; 244
    472e:	75 e0       	ldi	r23, 0x05	; 5
    4730:	ce 01       	movw	r24, r28
    4732:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4738:	9e 8d       	ldd	r25, Y+30	; 0x1e
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	39 f0       	breq	.+14     	; 0x474c <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    473e:	49 ad       	ldd	r20, Y+57	; 0x39
    4740:	5a ad       	ldd	r21, Y+58	; 0x3a
    4742:	6b ad       	ldd	r22, Y+59	; 0x3b
    4744:	7c ad       	ldd	r23, Y+60	; 0x3c
    4746:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    474a:	0c c0       	rjmp	.+24     	; 0x4764 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    474c:	ef a5       	ldd	r30, Y+47	; 0x2f
    474e:	f8 a9       	ldd	r31, Y+48	; 0x30
    4750:	90 81       	ld	r25, Z
    4752:	8c a9       	ldd	r24, Y+52	; 0x34
    4754:	89 2b       	or	r24, r25
    4756:	80 83       	st	Z, r24
    4758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    475a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    475c:	89 2b       	or	r24, r25
    475e:	11 f0       	breq	.+4      	; 0x4764 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    4760:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	03 c0       	rjmp	.+6      	; 0x476e <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    4768:	a1 10       	cpse	r10, r1
    476a:	46 cf       	rjmp	.-372    	; 0x45f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    476c:	67 cf       	rjmp	.-306    	; 0x463c <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	1f 91       	pop	r17
    4774:	0f 91       	pop	r16
    4776:	ff 90       	pop	r15
    4778:	ef 90       	pop	r14
    477a:	df 90       	pop	r13
    477c:	cf 90       	pop	r12
    477e:	bf 90       	pop	r11
    4780:	af 90       	pop	r10
    4782:	9f 90       	pop	r9
    4784:	8f 90       	pop	r8
    4786:	08 95       	ret

00004788 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    4788:	0f 93       	push	r16
    478a:	1f 93       	push	r17
    478c:	cf 93       	push	r28
    478e:	df 93       	push	r29
    4790:	dc 01       	movw	r26, r24
    4792:	57 fd       	sbrc	r21, 7
    4794:	64 c0       	rjmp	.+200    	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4796:	16 96       	adiw	r26, 0x06	; 6
    4798:	8d 91       	ld	r24, X+
    479a:	9c 91       	ld	r25, X
    479c:	17 97       	sbiw	r26, 0x07	; 7
    479e:	48 17       	cp	r20, r24
    47a0:	59 07       	cpc	r21, r25
    47a2:	0c f0       	brlt	.+2      	; 0x47a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    47a4:	5c c0       	rjmp	.+184    	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    47a6:	77 ff       	sbrs	r23, 7
    47a8:	04 c0       	rjmp	.+8      	; 0x47b2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    47aa:	26 0f       	add	r18, r22
    47ac:	37 1f       	adc	r19, r23
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	14 96       	adiw	r26, 0x04	; 4
    47b4:	cd 91       	ld	r28, X+
    47b6:	dc 91       	ld	r29, X
    47b8:	15 97       	sbiw	r26, 0x05	; 5
    47ba:	cb 01       	movw	r24, r22
    47bc:	82 0f       	add	r24, r18
    47be:	93 1f       	adc	r25, r19
    47c0:	c8 17       	cp	r28, r24
    47c2:	d9 07       	cpc	r29, r25
    47c4:	1c f4       	brge	.+6      	; 0x47cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    47c6:	9e 01       	movw	r18, r28
    47c8:	26 1b       	sub	r18, r22
    47ca:	37 0b       	sbc	r19, r23
    47cc:	12 16       	cp	r1, r18
    47ce:	13 06       	cpc	r1, r19
    47d0:	0c f0       	brlt	.+2      	; 0x47d4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    47d2:	45 c0       	rjmp	.+138    	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    47d4:	fa 01       	movw	r30, r20
    47d6:	57 fd       	sbrc	r21, 7
    47d8:	37 96       	adiw	r30, 0x07	; 7
    47da:	cf 01       	movw	r24, r30
    47dc:	e3 e0       	ldi	r30, 0x03	; 3
    47de:	95 95       	asr	r25
    47e0:	87 95       	ror	r24
    47e2:	ea 95       	dec	r30
    47e4:	e1 f7       	brne	.-8      	; 0x47de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    47e6:	8c 9f       	mul	r24, r28
    47e8:	f0 01       	movw	r30, r0
    47ea:	8d 9f       	mul	r24, r29
    47ec:	f0 0d       	add	r31, r0
    47ee:	9c 9f       	mul	r25, r28
    47f0:	f0 0d       	add	r31, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	6e 0f       	add	r22, r30
    47f6:	7f 1f       	adc	r23, r31
    47f8:	5f 96       	adiw	r26, 0x1f	; 31
    47fa:	ed 91       	ld	r30, X+
    47fc:	fc 91       	ld	r31, X
    47fe:	90 97       	sbiw	r26, 0x20	; 32
    4800:	e6 0f       	add	r30, r22
    4802:	f7 1f       	adc	r31, r23
    4804:	47 70       	andi	r20, 0x07	; 7
    4806:	55 27       	eor	r21, r21
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    480e:	88 0f       	add	r24, r24
    4810:	4a 95       	dec	r20
    4812:	ea f7       	brpl	.-6      	; 0x480e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    4814:	48 2f       	mov	r20, r24
    4816:	01 30       	cpi	r16, 0x01	; 1
    4818:	11 05       	cpc	r17, r1
    481a:	39 f0       	breq	.+14     	; 0x482a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    481c:	78 f0       	brcs	.+30     	; 0x483c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    481e:	02 30       	cpi	r16, 0x02	; 2
    4820:	11 05       	cpc	r17, r1
    4822:	e9 f4       	brne	.+58     	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4824:	2e 0f       	add	r18, r30
    4826:	3f 1f       	adc	r19, r31
    4828:	13 c0       	rjmp	.+38     	; 0x4850 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    482a:	2e 0f       	add	r18, r30
    482c:	3f 1f       	adc	r19, r31
    482e:	e2 17       	cp	r30, r18
    4830:	f3 07       	cpc	r31, r19
    4832:	a9 f0       	breq	.+42     	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4834:	80 81       	ld	r24, Z
    4836:	84 2b       	or	r24, r20
    4838:	81 93       	st	Z+, r24
    483a:	f9 cf       	rjmp	.-14     	; 0x482e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    483c:	80 95       	com	r24
    483e:	2e 0f       	add	r18, r30
    4840:	3f 1f       	adc	r19, r31
    4842:	e2 17       	cp	r30, r18
    4844:	f3 07       	cpc	r31, r19
    4846:	59 f0       	breq	.+22     	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4848:	90 81       	ld	r25, Z
    484a:	98 23       	and	r25, r24
    484c:	91 93       	st	Z+, r25
    484e:	f9 cf       	rjmp	.-14     	; 0x4842 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    4850:	e2 17       	cp	r30, r18
    4852:	f3 07       	cpc	r31, r19
    4854:	21 f0       	breq	.+8      	; 0x485e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4856:	80 81       	ld	r24, Z
    4858:	84 27       	eor	r24, r20
    485a:	81 93       	st	Z+, r24
    485c:	f9 cf       	rjmp	.-14     	; 0x4850 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	0f 91       	pop	r16
    4866:	08 95       	ret

00004868 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    4868:	ef 92       	push	r14
    486a:	ff 92       	push	r15
    486c:	0f 93       	push	r16
    486e:	1f 93       	push	r17
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	ec 01       	movw	r28, r24
    4876:	77 fd       	sbrc	r23, 7
    4878:	a5 c0       	rjmp	.+330    	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    487a:	ec 80       	ldd	r14, Y+4	; 0x04
    487c:	fd 80       	ldd	r15, Y+5	; 0x05
    487e:	6e 15       	cp	r22, r14
    4880:	7f 05       	cpc	r23, r15
    4882:	0c f0       	brlt	.+2      	; 0x4886 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    4884:	9f c0       	rjmp	.+318    	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4886:	57 ff       	sbrs	r21, 7
    4888:	04 c0       	rjmp	.+8      	; 0x4892 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    488a:	24 0f       	add	r18, r20
    488c:	35 1f       	adc	r19, r21
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	50 e0       	ldi	r21, 0x00	; 0
    4892:	8e 81       	ldd	r24, Y+6	; 0x06
    4894:	9f 81       	ldd	r25, Y+7	; 0x07
    4896:	fa 01       	movw	r30, r20
    4898:	e2 0f       	add	r30, r18
    489a:	f3 1f       	adc	r31, r19
    489c:	8e 17       	cp	r24, r30
    489e:	9f 07       	cpc	r25, r31
    48a0:	1c f4       	brge	.+6      	; 0x48a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    48a2:	9c 01       	movw	r18, r24
    48a4:	24 1b       	sub	r18, r20
    48a6:	35 0b       	sbc	r19, r21
    48a8:	12 16       	cp	r1, r18
    48aa:	13 06       	cpc	r1, r19
    48ac:	0c f0       	brlt	.+2      	; 0x48b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    48ae:	8a c0       	rjmp	.+276    	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    48b0:	92 2f       	mov	r25, r18
    48b2:	84 2f       	mov	r24, r20
    48b4:	86 95       	lsr	r24
    48b6:	86 95       	lsr	r24
    48b8:	86 95       	lsr	r24
    48ba:	8e 9d       	mul	r24, r14
    48bc:	d0 01       	movw	r26, r0
    48be:	8f 9d       	mul	r24, r15
    48c0:	b0 0d       	add	r27, r0
    48c2:	11 24       	eor	r1, r1
    48c4:	6a 0f       	add	r22, r26
    48c6:	7b 1f       	adc	r23, r27
    48c8:	af 8d       	ldd	r26, Y+31	; 0x1f
    48ca:	b8 a1       	ldd	r27, Y+32	; 0x20
    48cc:	a6 0f       	add	r26, r22
    48ce:	b7 1f       	adc	r27, r23
    48d0:	47 70       	andi	r20, 0x07	; 7
    48d2:	b1 f1       	breq	.+108    	; 0x4940 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    48d4:	88 e0       	ldi	r24, 0x08	; 8
    48d6:	84 1b       	sub	r24, r20
    48d8:	48 2f       	mov	r20, r24
    48da:	68 2f       	mov	r22, r24
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	fb 01       	movw	r30, r22
    48e0:	e4 51       	subi	r30, 0x14	; 20
    48e2:	fa 4f       	sbci	r31, 0xFA	; 250
    48e4:	e4 91       	lpm	r30, Z
    48e6:	28 17       	cp	r18, r24
    48e8:	98 f4       	brcc	.+38     	; 0x4910 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    48ea:	62 1b       	sub	r22, r18
    48ec:	71 09       	sbc	r23, r1
    48ee:	2f ef       	ldi	r18, 0xFF	; 255
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	02 c0       	rjmp	.+4      	; 0x48f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    48f4:	35 95       	asr	r19
    48f6:	27 95       	ror	r18
    48f8:	6a 95       	dec	r22
    48fa:	e2 f7       	brpl	.-8      	; 0x48f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    48fc:	e2 23       	and	r30, r18
    48fe:	01 30       	cpi	r16, 0x01	; 1
    4900:	11 05       	cpc	r17, r1
    4902:	49 f0       	breq	.+18     	; 0x4916 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    4904:	78 f0       	brcs	.+30     	; 0x4924 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4906:	02 30       	cpi	r16, 0x02	; 2
    4908:	11 05       	cpc	r17, r1
    490a:	09 f0       	breq	.+2      	; 0x490e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    490c:	5b c0       	rjmp	.+182    	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    490e:	0e c0       	rjmp	.+28     	; 0x492c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    4910:	01 30       	cpi	r16, 0x01	; 1
    4912:	11 05       	cpc	r17, r1
    4914:	19 f4       	brne	.+6      	; 0x491c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    4916:	8c 91       	ld	r24, X
    4918:	e8 2b       	or	r30, r24
    491a:	0a c0       	rjmp	.+20     	; 0x4930 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    491c:	01 30       	cpi	r16, 0x01	; 1
    491e:	11 05       	cpc	r17, r1
    4920:	08 f0       	brcs	.+2      	; 0x4924 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4922:	49 c0       	rjmp	.+146    	; 0x49b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    4924:	e0 95       	com	r30
    4926:	8c 91       	ld	r24, X
    4928:	e8 23       	and	r30, r24
    492a:	02 c0       	rjmp	.+4      	; 0x4930 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    492c:	8c 91       	ld	r24, X
    492e:	e8 27       	eor	r30, r24
    4930:	ec 93       	st	X, r30
    4932:	94 17       	cp	r25, r20
    4934:	08 f4       	brcc	.+2      	; 0x4938 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    4936:	46 c0       	rjmp	.+140    	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4938:	2c 81       	ldd	r18, Y+4	; 0x04
    493a:	3d 81       	ldd	r19, Y+5	; 0x05
    493c:	a2 0f       	add	r26, r18
    493e:	b3 1f       	adc	r27, r19
    4940:	e9 2f       	mov	r30, r25
    4942:	e4 1b       	sub	r30, r20
    4944:	e8 30       	cpi	r30, 0x08	; 8
    4946:	f8 f0       	brcs	.+62     	; 0x4986 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    4948:	02 30       	cpi	r16, 0x02	; 2
    494a:	11 05       	cpc	r17, r1
    494c:	61 f4       	brne	.+24     	; 0x4966 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    494e:	8e 2f       	mov	r24, r30
    4950:	9c 91       	ld	r25, X
    4952:	90 95       	com	r25
    4954:	9c 93       	st	X, r25
    4956:	2c 81       	ldd	r18, Y+4	; 0x04
    4958:	3d 81       	ldd	r19, Y+5	; 0x05
    495a:	a2 0f       	add	r26, r18
    495c:	b3 1f       	adc	r27, r19
    495e:	88 50       	subi	r24, 0x08	; 8
    4960:	88 30       	cpi	r24, 0x08	; 8
    4962:	b0 f7       	brcc	.-20     	; 0x4950 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    4964:	0f c0       	rjmp	.+30     	; 0x4984 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	01 15       	cp	r16, r1
    496a:	11 05       	cpc	r17, r1
    496c:	09 f4       	brne	.+2      	; 0x4970 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	81 95       	neg	r24
    4972:	9e 2f       	mov	r25, r30
    4974:	8c 93       	st	X, r24
    4976:	2c 81       	ldd	r18, Y+4	; 0x04
    4978:	3d 81       	ldd	r19, Y+5	; 0x05
    497a:	a2 0f       	add	r26, r18
    497c:	b3 1f       	adc	r27, r19
    497e:	98 50       	subi	r25, 0x08	; 8
    4980:	98 30       	cpi	r25, 0x08	; 8
    4982:	c0 f7       	brcc	.-16     	; 0x4974 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    4984:	e7 70       	andi	r30, 0x07	; 7
    4986:	ee 23       	and	r30, r30
    4988:	e9 f0       	breq	.+58     	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    498a:	f0 e0       	ldi	r31, 0x00	; 0
    498c:	ec 51       	subi	r30, 0x1C	; 28
    498e:	fa 4f       	sbci	r31, 0xFA	; 250
    4990:	e4 91       	lpm	r30, Z
    4992:	01 30       	cpi	r16, 0x01	; 1
    4994:	11 05       	cpc	r17, r1
    4996:	39 f0       	breq	.+14     	; 0x49a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    4998:	48 f0       	brcs	.+18     	; 0x49ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    499a:	02 30       	cpi	r16, 0x02	; 2
    499c:	11 05       	cpc	r17, r1
    499e:	91 f4       	brne	.+36     	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    49a0:	8c 91       	ld	r24, X
    49a2:	e8 27       	eor	r30, r24
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    49a6:	8c 91       	ld	r24, X
    49a8:	e8 2b       	or	r30, r24
    49aa:	03 c0       	rjmp	.+6      	; 0x49b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    49ac:	e0 95       	com	r30
    49ae:	8c 91       	ld	r24, X
    49b0:	e8 23       	and	r30, r24
    49b2:	ec 93       	st	X, r30
    49b4:	07 c0       	rjmp	.+14     	; 0x49c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    49b6:	02 30       	cpi	r16, 0x02	; 2
    49b8:	11 05       	cpc	r17, r1
    49ba:	09 f4       	brne	.+2      	; 0x49be <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    49bc:	b7 cf       	rjmp	.-146    	; 0x492c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    49be:	ae 0d       	add	r26, r14
    49c0:	bf 1d       	adc	r27, r15
    49c2:	be cf       	rjmp	.-132    	; 0x4940 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	1f 91       	pop	r17
    49ca:	0f 91       	pop	r16
    49cc:	ff 90       	pop	r15
    49ce:	ef 90       	pop	r14
    49d0:	08 95       	ret

000049d2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    49d2:	0f 93       	push	r16
    49d4:	1f 93       	push	r17
    49d6:	dc 01       	movw	r26, r24
    49d8:	56 96       	adiw	r26, 0x16	; 22
    49da:	ec 91       	ld	r30, X
    49dc:	56 97       	sbiw	r26, 0x16	; 22
    49de:	e2 30       	cpi	r30, 0x02	; 2
    49e0:	61 f0       	breq	.+24     	; 0x49fa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    49e2:	e3 30       	cpi	r30, 0x03	; 3
    49e4:	09 f1       	breq	.+66     	; 0x4a28 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    49e6:	e1 30       	cpi	r30, 0x01	; 1
    49e8:	81 f5       	brne	.+96     	; 0x4a4a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    49ea:	14 96       	adiw	r26, 0x04	; 4
    49ec:	ed 91       	ld	r30, X+
    49ee:	fc 91       	ld	r31, X
    49f0:	15 97       	sbiw	r26, 0x05	; 5
    49f2:	e4 1b       	sub	r30, r20
    49f4:	f5 0b       	sbc	r31, r21
    49f6:	31 97       	sbiw	r30, 0x01	; 1
    49f8:	23 c0       	rjmp	.+70     	; 0x4a40 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    49fa:	dc 01       	movw	r26, r24
    49fc:	14 96       	adiw	r26, 0x04	; 4
    49fe:	ed 91       	ld	r30, X+
    4a00:	fc 91       	ld	r31, X
    4a02:	15 97       	sbiw	r26, 0x05	; 5
    4a04:	df 01       	movw	r26, r30
    4a06:	a6 1b       	sub	r26, r22
    4a08:	b7 0b       	sbc	r27, r23
    4a0a:	bd 01       	movw	r22, r26
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	16 96       	adiw	r26, 0x06	; 6
    4a10:	ed 91       	ld	r30, X+
    4a12:	fc 91       	ld	r31, X
    4a14:	17 97       	sbiw	r26, 0x07	; 7
    4a16:	df 01       	movw	r26, r30
    4a18:	a4 1b       	sub	r26, r20
    4a1a:	b5 0b       	sbc	r27, r21
    4a1c:	ad 01       	movw	r20, r26
    4a1e:	41 50       	subi	r20, 0x01	; 1
    4a20:	51 09       	sbc	r21, r1
    4a22:	62 1b       	sub	r22, r18
    4a24:	73 0b       	sbc	r23, r19
    4a26:	11 c0       	rjmp	.+34     	; 0x4a4a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    4a28:	fa 01       	movw	r30, r20
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	16 96       	adiw	r26, 0x06	; 6
    4a2e:	4d 91       	ld	r20, X+
    4a30:	5c 91       	ld	r21, X
    4a32:	17 97       	sbiw	r26, 0x07	; 7
    4a34:	da 01       	movw	r26, r20
    4a36:	a6 1b       	sub	r26, r22
    4a38:	b7 0b       	sbc	r27, r23
    4a3a:	bd 01       	movw	r22, r26
    4a3c:	62 1b       	sub	r22, r18
    4a3e:	73 0b       	sbc	r23, r19
    4a40:	ab 01       	movw	r20, r22
    4a42:	bf 01       	movw	r22, r30
    4a44:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    4a4a:	0e 94 c4 23 	call	0x4788	; 0x4788 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    4a4e:	1f 91       	pop	r17
    4a50:	0f 91       	pop	r16
    4a52:	08 95       	ret

00004a54 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    4a54:	0f 93       	push	r16
    4a56:	1f 93       	push	r17
    4a58:	dc 01       	movw	r26, r24
    4a5a:	56 96       	adiw	r26, 0x16	; 22
    4a5c:	ec 91       	ld	r30, X
    4a5e:	56 97       	sbiw	r26, 0x16	; 22
    4a60:	e2 30       	cpi	r30, 0x02	; 2
    4a62:	69 f0       	breq	.+26     	; 0x4a7e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    4a64:	e3 30       	cpi	r30, 0x03	; 3
    4a66:	11 f1       	breq	.+68     	; 0x4aac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    4a68:	e1 30       	cpi	r30, 0x01	; 1
    4a6a:	89 f5       	brne	.+98     	; 0x4ace <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    4a6c:	14 96       	adiw	r26, 0x04	; 4
    4a6e:	ed 91       	ld	r30, X+
    4a70:	fc 91       	ld	r31, X
    4a72:	15 97       	sbiw	r26, 0x05	; 5
    4a74:	e4 1b       	sub	r30, r20
    4a76:	f5 0b       	sbc	r31, r21
    4a78:	e2 1b       	sub	r30, r18
    4a7a:	f3 0b       	sbc	r31, r19
    4a7c:	23 c0       	rjmp	.+70     	; 0x4ac4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	14 96       	adiw	r26, 0x04	; 4
    4a82:	ed 91       	ld	r30, X+
    4a84:	fc 91       	ld	r31, X
    4a86:	15 97       	sbiw	r26, 0x05	; 5
    4a88:	df 01       	movw	r26, r30
    4a8a:	a6 1b       	sub	r26, r22
    4a8c:	b7 0b       	sbc	r27, r23
    4a8e:	bd 01       	movw	r22, r26
    4a90:	61 50       	subi	r22, 0x01	; 1
    4a92:	71 09       	sbc	r23, r1
    4a94:	dc 01       	movw	r26, r24
    4a96:	16 96       	adiw	r26, 0x06	; 6
    4a98:	ed 91       	ld	r30, X+
    4a9a:	fc 91       	ld	r31, X
    4a9c:	17 97       	sbiw	r26, 0x07	; 7
    4a9e:	df 01       	movw	r26, r30
    4aa0:	a4 1b       	sub	r26, r20
    4aa2:	b5 0b       	sbc	r27, r21
    4aa4:	ad 01       	movw	r20, r26
    4aa6:	42 1b       	sub	r20, r18
    4aa8:	53 0b       	sbc	r21, r19
    4aaa:	11 c0       	rjmp	.+34     	; 0x4ace <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    4aac:	fa 01       	movw	r30, r20
    4aae:	dc 01       	movw	r26, r24
    4ab0:	16 96       	adiw	r26, 0x06	; 6
    4ab2:	4d 91       	ld	r20, X+
    4ab4:	5c 91       	ld	r21, X
    4ab6:	17 97       	sbiw	r26, 0x07	; 7
    4ab8:	da 01       	movw	r26, r20
    4aba:	a6 1b       	sub	r26, r22
    4abc:	b7 0b       	sbc	r27, r23
    4abe:	bd 01       	movw	r22, r26
    4ac0:	61 50       	subi	r22, 0x01	; 1
    4ac2:	71 09       	sbc	r23, r1
    4ac4:	ab 01       	movw	r20, r22
    4ac6:	bf 01       	movw	r22, r30
    4ac8:	0e 94 c4 23 	call	0x4788	; 0x4788 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    4acc:	02 c0       	rjmp	.+4      	; 0x4ad2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    4ace:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    4ad2:	1f 91       	pop	r17
    4ad4:	0f 91       	pop	r16
    4ad6:	08 95       	ret

00004ad8 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    4ad8:	cf 92       	push	r12
    4ada:	df 92       	push	r13
    4adc:	ef 92       	push	r14
    4ade:	ff 92       	push	r15
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	ec 01       	movw	r28, r24
  TRANSACTION_START
    4aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	39 f0       	breq	.+14     	; 0x4b00 <_ZN16Adafruit_SSD13067displayEv+0x28>
    4af2:	4d a9       	ldd	r20, Y+53	; 0x35
    4af4:	5e a9       	ldd	r21, Y+54	; 0x36
    4af6:	6f a9       	ldd	r22, Y+55	; 0x37
    4af8:	78 ad       	ldd	r23, Y+56	; 0x38
    4afa:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4afe:	0f c0       	rjmp	.+30     	; 0x4b1e <_ZN16Adafruit_SSD13067displayEv+0x46>
    4b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b04:	89 2b       	or	r24, r25
    4b06:	21 f0       	breq	.+8      	; 0x4b10 <_ZN16Adafruit_SSD13067displayEv+0x38>
    4b08:	8e ad       	ldd	r24, Y+62	; 0x3e
    4b0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b0c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4b10:	ef a5       	ldd	r30, Y+47	; 0x2f
    4b12:	f8 a9       	ldd	r31, Y+48	; 0x30
    4b14:	90 81       	ld	r25, Z
    4b16:	8c a9       	ldd	r24, Y+52	; 0x34
    4b18:	80 95       	com	r24
    4b1a:	89 23       	and	r24, r25
    4b1c:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    4b1e:	45 e0       	ldi	r20, 0x05	; 5
    4b20:	6f ed       	ldi	r22, 0xDF	; 223
    4b22:	75 e0       	ldi	r23, 0x05	; 5
    4b24:	ce 01       	movw	r24, r28
    4b26:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    4b2a:	6c 81       	ldd	r22, Y+4	; 0x04
    4b2c:	61 50       	subi	r22, 0x01	; 1
    4b2e:	ce 01       	movw	r24, r28
    4b30:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    4b34:	2e 81       	ldd	r18, Y+6	; 0x06
    4b36:	3f 81       	ldd	r19, Y+7	; 0x07
    4b38:	c9 01       	movw	r24, r18
    4b3a:	07 96       	adiw	r24, 0x07	; 7
    4b3c:	97 fd       	sbrc	r25, 7
    4b3e:	07 96       	adiw	r24, 0x07	; 7
    4b40:	23 e0       	ldi	r18, 0x03	; 3
    4b42:	95 95       	asr	r25
    4b44:	87 95       	ror	r24
    4b46:	2a 95       	dec	r18
    4b48:	e1 f7       	brne	.-8      	; 0x4b42 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    4b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b4e:	82 9f       	mul	r24, r18
    4b50:	70 01       	movw	r14, r0
    4b52:	83 9f       	mul	r24, r19
    4b54:	f0 0c       	add	r15, r0
    4b56:	92 9f       	mul	r25, r18
    4b58:	f0 0c       	add	r15, r0
    4b5a:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    4b5c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    4b5e:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    4b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b64:	e0 0e       	add	r14, r16
    4b66:	f1 1e       	adc	r15, r17
    4b68:	00 97       	sbiw	r24, 0x00	; 0
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <_ZN16Adafruit_SSD13067displayEv+0x96>
    4b6c:	43 c0       	rjmp	.+134    	; 0x4bf4 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    4b6e:	69 a1       	ldd	r22, Y+33	; 0x21
    4b70:	06 2e       	mov	r0, r22
    4b72:	00 0c       	add	r0, r0
    4b74:	77 0b       	sbc	r23, r23
    4b76:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    4b7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b7e:	dc 01       	movw	r26, r24
    4b80:	ed 91       	ld	r30, X+
    4b82:	fc 91       	ld	r31, X
    4b84:	01 90       	ld	r0, Z+
    4b86:	f0 81       	ld	r31, Z
    4b88:	e0 2d       	mov	r30, r0
    4b8a:	60 e4       	ldi	r22, 0x40	; 64
    4b8c:	09 95       	icall
    4b8e:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    4b90:	01 e0       	ldi	r16, 0x01	; 1
    4b92:	10 e0       	ldi	r17, 0x00	; 0
    4b94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    4b98:	ec 14       	cp	r14, r12
    4b9a:	fd 04       	cpc	r15, r13
    4b9c:	41 f1       	breq	.+80     	; 0x4bee <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    4b9e:	00 32       	cpi	r16, 0x20	; 32
    4ba0:	11 05       	cpc	r17, r1
    4ba2:	b0 f0       	brcs	.+44     	; 0x4bd0 <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    4ba4:	0e 94 59 29 	call	0x52b2	; 0x52b2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    4ba8:	69 a1       	ldd	r22, Y+33	; 0x21
    4baa:	06 2e       	mov	r0, r22
    4bac:	00 0c       	add	r0, r0
    4bae:	77 0b       	sbc	r23, r23
    4bb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bb4:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    4bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	ed 91       	ld	r30, X+
    4bc0:	fc 91       	ld	r31, X
    4bc2:	01 90       	ld	r0, Z+
    4bc4:	f0 81       	ld	r31, Z
    4bc6:	e0 2d       	mov	r30, r0
    4bc8:	60 e4       	ldi	r22, 0x40	; 64
    4bca:	09 95       	icall
        bytesOut = 1;
    4bcc:	01 e0       	ldi	r16, 0x01	; 1
    4bce:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    4bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bd4:	f6 01       	movw	r30, r12
    4bd6:	61 91       	ld	r22, Z+
    4bd8:	6f 01       	movw	r12, r30
    4bda:	dc 01       	movw	r26, r24
    4bdc:	ed 91       	ld	r30, X+
    4bde:	fc 91       	ld	r31, X
    4be0:	01 90       	ld	r0, Z+
    4be2:	f0 81       	ld	r31, Z
    4be4:	e0 2d       	mov	r30, r0
    4be6:	09 95       	icall
      bytesOut++;
    4be8:	0f 5f       	subi	r16, 0xFF	; 255
    4bea:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    4bec:	d3 cf       	rjmp	.-90     	; 0x4b94 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    4bee:	0e 94 59 29 	call	0x52b2	; 0x52b2 <_ZN7TwoWire15endTransmissionEv>
    4bf2:	35 c0       	rjmp	.+106    	; 0x4c5e <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    4bf4:	ed a5       	ldd	r30, Y+45	; 0x2d
    4bf6:	fe a5       	ldd	r31, Y+46	; 0x2e
    4bf8:	90 81       	ld	r25, Z
    4bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    4bfc:	89 2b       	or	r24, r25
    4bfe:	80 83       	st	Z, r24
    while (count--)
    4c00:	0e 15       	cp	r16, r14
    4c02:	1f 05       	cpc	r17, r15
    4c04:	61 f1       	breq	.+88     	; 0x4c5e <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    4c06:	f8 01       	movw	r30, r16
    4c08:	81 91       	ld	r24, Z+
    4c0a:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    4c0c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4c0e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4c10:	23 2b       	or	r18, r19
    4c12:	19 f0       	breq	.+6      	; 0x4c1a <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    4c14:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN8SPIClass8transferEh>
    4c18:	f3 cf       	rjmp	.-26     	; 0x4c00 <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    4c1a:	28 e0       	ldi	r18, 0x08	; 8
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	40 e8       	ldi	r20, 0x80	; 128
    4c20:	e9 a5       	ldd	r30, Y+41	; 0x29
    4c22:	fa a5       	ldd	r31, Y+42	; 0x2a
    4c24:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    4c26:	58 2f       	mov	r21, r24
    4c28:	54 23       	and	r21, r20
    4c2a:	19 f0       	breq	.+6      	; 0x4c32 <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    4c2c:	50 81       	ld	r21, Z
    4c2e:	95 2b       	or	r25, r21
    4c30:	03 c0       	rjmp	.+6      	; 0x4c38 <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    4c32:	50 81       	ld	r21, Z
    4c34:	90 95       	com	r25
    4c36:	95 23       	and	r25, r21
    4c38:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    4c3a:	eb a5       	ldd	r30, Y+43	; 0x2b
    4c3c:	fc a5       	ldd	r31, Y+44	; 0x2c
    4c3e:	50 81       	ld	r21, Z
    4c40:	9a a9       	ldd	r25, Y+50	; 0x32
    4c42:	95 2b       	or	r25, r21
    4c44:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    4c46:	eb a5       	ldd	r30, Y+43	; 0x2b
    4c48:	fc a5       	ldd	r31, Y+44	; 0x2c
    4c4a:	50 81       	ld	r21, Z
    4c4c:	9a a9       	ldd	r25, Y+50	; 0x32
    4c4e:	90 95       	com	r25
    4c50:	95 23       	and	r25, r21
    4c52:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4c54:	46 95       	lsr	r20
    4c56:	21 50       	subi	r18, 0x01	; 1
    4c58:	31 09       	sbc	r19, r1
    4c5a:	11 f7       	brne	.-60     	; 0x4c20 <_ZN16Adafruit_SSD13067displayEv+0x148>
    4c5c:	d1 cf       	rjmp	.-94     	; 0x4c00 <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    4c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c62:	00 97       	sbiw	r24, 0x00	; 0
    4c64:	71 f0       	breq	.+28     	; 0x4c82 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    4c66:	49 ad       	ldd	r20, Y+57	; 0x39
    4c68:	5a ad       	ldd	r21, Y+58	; 0x3a
    4c6a:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c6c:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	1f 91       	pop	r17
    4c74:	0f 91       	pop	r16
    4c76:	ff 90       	pop	r15
    4c78:	ef 90       	pop	r14
    4c7a:	df 90       	pop	r13
    4c7c:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    4c7e:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4c82:	ef a5       	ldd	r30, Y+47	; 0x2f
    4c84:	f8 a9       	ldd	r31, Y+48	; 0x30
    4c86:	90 81       	ld	r25, Z
    4c88:	8c a9       	ldd	r24, Y+52	; 0x34
    4c8a:	89 2b       	or	r24, r25
    4c8c:	80 83       	st	Z, r24
    4c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c92:	89 2b       	or	r24, r25
    4c94:	51 f0       	breq	.+20     	; 0x4caa <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	1f 91       	pop	r17
    4c9c:	0f 91       	pop	r16
    4c9e:	ff 90       	pop	r15
    4ca0:	ef 90       	pop	r14
    4ca2:	df 90       	pop	r13
    4ca4:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    4ca6:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    4caa:	df 91       	pop	r29
    4cac:	cf 91       	pop	r28
    4cae:	1f 91       	pop	r17
    4cb0:	0f 91       	pop	r16
    4cb2:	ff 90       	pop	r15
    4cb4:	ef 90       	pop	r14
    4cb6:	df 90       	pop	r13
    4cb8:	cf 90       	pop	r12
    4cba:	08 95       	ret

00004cbc <_ZN16Adafruit_SSD130616startscrollrightEhh>:
    @param  stop
            Last row.
    @return None (void).
*/
// To scroll the whole display, run: display.startscrollright(0x00, 0x0F)
void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop) {
    4cbc:	0f 93       	push	r16
    4cbe:	1f 93       	push	r17
    4cc0:	cf 93       	push	r28
    4cc2:	df 93       	push	r29
    4cc4:	ec 01       	movw	r28, r24
    4cc6:	06 2f       	mov	r16, r22
    4cc8:	14 2f       	mov	r17, r20
  TRANSACTION_START
    4cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cce:	00 97       	sbiw	r24, 0x00	; 0
    4cd0:	39 f0       	breq	.+14     	; 0x4ce0 <_ZN16Adafruit_SSD130616startscrollrightEhh+0x24>
    4cd2:	4d a9       	ldd	r20, Y+53	; 0x35
    4cd4:	5e a9       	ldd	r21, Y+54	; 0x36
    4cd6:	6f a9       	ldd	r22, Y+55	; 0x37
    4cd8:	78 ad       	ldd	r23, Y+56	; 0x38
    4cda:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4cde:	0f c0       	rjmp	.+30     	; 0x4cfe <_ZN16Adafruit_SSD130616startscrollrightEhh+0x42>
    4ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ce4:	89 2b       	or	r24, r25
    4ce6:	21 f0       	breq	.+8      	; 0x4cf0 <_ZN16Adafruit_SSD130616startscrollrightEhh+0x34>
    4ce8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cec:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4cf0:	ef a5       	ldd	r30, Y+47	; 0x2f
    4cf2:	f8 a9       	ldd	r31, Y+48	; 0x30
    4cf4:	90 81       	ld	r25, Z
    4cf6:	8c a9       	ldd	r24, Y+52	; 0x34
    4cf8:	80 95       	com	r24
    4cfa:	89 23       	and	r24, r25
    4cfc:	80 83       	st	Z, r24
  static const uint8_t PROGMEM scrollList1a[] = {
      SSD1306_RIGHT_HORIZONTAL_SCROLL, 0X00};
  ssd1306_commandList(scrollList1a, sizeof(scrollList1a));
    4cfe:	42 e0       	ldi	r20, 0x02	; 2
    4d00:	6d ed       	ldi	r22, 0xDD	; 221
    4d02:	75 e0       	ldi	r23, 0x05	; 5
    4d04:	ce 01       	movw	r24, r28
    4d06:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(start);
    4d0a:	60 2f       	mov	r22, r16
    4d0c:	ce 01       	movw	r24, r28
    4d0e:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(0X00);
    4d12:	60 e0       	ldi	r22, 0x00	; 0
    4d14:	ce 01       	movw	r24, r28
    4d16:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(stop);
    4d1a:	61 2f       	mov	r22, r17
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList1b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList1b, sizeof(scrollList1b));
    4d22:	43 e0       	ldi	r20, 0x03	; 3
    4d24:	6a ed       	ldi	r22, 0xDA	; 218
    4d26:	75 e0       	ldi	r23, 0x05	; 5
    4d28:	ce 01       	movw	r24, r28
    4d2a:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
    4d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d32:	00 97       	sbiw	r24, 0x00	; 0
    4d34:	51 f0       	breq	.+20     	; 0x4d4a <_ZN16Adafruit_SSD130616startscrollrightEhh+0x8e>
    4d36:	49 ad       	ldd	r20, Y+57	; 0x39
    4d38:	5a ad       	ldd	r21, Y+58	; 0x3a
    4d3a:	6b ad       	ldd	r22, Y+59	; 0x3b
    4d3c:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList1b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList1b, sizeof(scrollList1b));
  TRANSACTION_END
    4d46:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4d4a:	ef a5       	ldd	r30, Y+47	; 0x2f
    4d4c:	f8 a9       	ldd	r31, Y+48	; 0x30
    4d4e:	90 81       	ld	r25, Z
    4d50:	8c a9       	ldd	r24, Y+52	; 0x34
    4d52:	89 2b       	or	r24, r25
    4d54:	80 83       	st	Z, r24
    4d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d5a:	89 2b       	or	r24, r25
    4d5c:	31 f0       	breq	.+12     	; 0x4d6a <_ZN16Adafruit_SSD130616startscrollrightEhh+0xae>
}
    4d5e:	df 91       	pop	r29
    4d60:	cf 91       	pop	r28
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList1b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList1b, sizeof(scrollList1b));
  TRANSACTION_END
    4d66:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
}
    4d6a:	df 91       	pop	r29
    4d6c:	cf 91       	pop	r28
    4d6e:	1f 91       	pop	r17
    4d70:	0f 91       	pop	r16
    4d72:	08 95       	ret

00004d74 <_ZN16Adafruit_SSD130615startscrollleftEhh>:
    @param  stop
            Last row.
    @return None (void).
*/
// To scroll the whole display, run: display.startscrollleft(0x00, 0x0F)
void Adafruit_SSD1306::startscrollleft(uint8_t start, uint8_t stop) {
    4d74:	0f 93       	push	r16
    4d76:	1f 93       	push	r17
    4d78:	cf 93       	push	r28
    4d7a:	df 93       	push	r29
    4d7c:	ec 01       	movw	r28, r24
    4d7e:	06 2f       	mov	r16, r22
    4d80:	14 2f       	mov	r17, r20
  TRANSACTION_START
    4d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	39 f0       	breq	.+14     	; 0x4d98 <_ZN16Adafruit_SSD130615startscrollleftEhh+0x24>
    4d8a:	4d a9       	ldd	r20, Y+53	; 0x35
    4d8c:	5e a9       	ldd	r21, Y+54	; 0x36
    4d8e:	6f a9       	ldd	r22, Y+55	; 0x37
    4d90:	78 ad       	ldd	r23, Y+56	; 0x38
    4d92:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <_ZN16Adafruit_SSD130615startscrollleftEhh+0x42>
    4d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d9c:	89 2b       	or	r24, r25
    4d9e:	21 f0       	breq	.+8      	; 0x4da8 <_ZN16Adafruit_SSD130615startscrollleftEhh+0x34>
    4da0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4da2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4da4:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4da8:	ef a5       	ldd	r30, Y+47	; 0x2f
    4daa:	f8 a9       	ldd	r31, Y+48	; 0x30
    4dac:	90 81       	ld	r25, Z
    4dae:	8c a9       	ldd	r24, Y+52	; 0x34
    4db0:	80 95       	com	r24
    4db2:	89 23       	and	r24, r25
    4db4:	80 83       	st	Z, r24
  static const uint8_t PROGMEM scrollList2a[] = {SSD1306_LEFT_HORIZONTAL_SCROLL,
                                                 0X00};
  ssd1306_commandList(scrollList2a, sizeof(scrollList2a));
    4db6:	42 e0       	ldi	r20, 0x02	; 2
    4db8:	68 ed       	ldi	r22, 0xD8	; 216
    4dba:	75 e0       	ldi	r23, 0x05	; 5
    4dbc:	ce 01       	movw	r24, r28
    4dbe:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(start);
    4dc2:	60 2f       	mov	r22, r16
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(0X00);
    4dca:	60 e0       	ldi	r22, 0x00	; 0
    4dcc:	ce 01       	movw	r24, r28
    4dce:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(stop);
    4dd2:	61 2f       	mov	r22, r17
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList2b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList2b, sizeof(scrollList2b));
    4dda:	43 e0       	ldi	r20, 0x03	; 3
    4ddc:	65 ed       	ldi	r22, 0xD5	; 213
    4dde:	75 e0       	ldi	r23, 0x05	; 5
    4de0:	ce 01       	movw	r24, r28
    4de2:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
    4de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	51 f0       	breq	.+20     	; 0x4e02 <_ZN16Adafruit_SSD130615startscrollleftEhh+0x8e>
    4dee:	49 ad       	ldd	r20, Y+57	; 0x39
    4df0:	5a ad       	ldd	r21, Y+58	; 0x3a
    4df2:	6b ad       	ldd	r22, Y+59	; 0x3b
    4df4:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList2b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList2b, sizeof(scrollList2b));
  TRANSACTION_END
    4dfe:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4e02:	ef a5       	ldd	r30, Y+47	; 0x2f
    4e04:	f8 a9       	ldd	r31, Y+48	; 0x30
    4e06:	90 81       	ld	r25, Z
    4e08:	8c a9       	ldd	r24, Y+52	; 0x34
    4e0a:	89 2b       	or	r24, r25
    4e0c:	80 83       	st	Z, r24
    4e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e12:	89 2b       	or	r24, r25
    4e14:	31 f0       	breq	.+12     	; 0x4e22 <_ZN16Adafruit_SSD130615startscrollleftEhh+0xae>
}
    4e16:	df 91       	pop	r29
    4e18:	cf 91       	pop	r28
    4e1a:	1f 91       	pop	r17
    4e1c:	0f 91       	pop	r16
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList2b[] = {0X00, 0XFF,
                                                 SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList2b, sizeof(scrollList2b));
  TRANSACTION_END
    4e1e:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
}
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	08 95       	ret

00004e2c <_ZN16Adafruit_SSD130620startscrolldiagrightEhh>:
    @param  stop
            Last row.
    @return None (void).
*/
// display.startscrolldiagright(0x00, 0x0F)
void Adafruit_SSD1306::startscrolldiagright(uint8_t start, uint8_t stop) {
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	ec 01       	movw	r28, r24
    4e36:	06 2f       	mov	r16, r22
    4e38:	14 2f       	mov	r17, r20
  TRANSACTION_START
    4e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e3e:	00 97       	sbiw	r24, 0x00	; 0
    4e40:	39 f0       	breq	.+14     	; 0x4e50 <_ZN16Adafruit_SSD130620startscrolldiagrightEhh+0x24>
    4e42:	4d a9       	ldd	r20, Y+53	; 0x35
    4e44:	5e a9       	ldd	r21, Y+54	; 0x36
    4e46:	6f a9       	ldd	r22, Y+55	; 0x37
    4e48:	78 ad       	ldd	r23, Y+56	; 0x38
    4e4a:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4e4e:	0f c0       	rjmp	.+30     	; 0x4e6e <_ZN16Adafruit_SSD130620startscrolldiagrightEhh+0x42>
    4e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e54:	89 2b       	or	r24, r25
    4e56:	21 f0       	breq	.+8      	; 0x4e60 <_ZN16Adafruit_SSD130620startscrolldiagrightEhh+0x34>
    4e58:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e5c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4e60:	ef a5       	ldd	r30, Y+47	; 0x2f
    4e62:	f8 a9       	ldd	r31, Y+48	; 0x30
    4e64:	90 81       	ld	r25, Z
    4e66:	8c a9       	ldd	r24, Y+52	; 0x34
    4e68:	80 95       	com	r24
    4e6a:	89 23       	and	r24, r25
    4e6c:	80 83       	st	Z, r24
  static const uint8_t PROGMEM scrollList3a[] = {
      SSD1306_SET_VERTICAL_SCROLL_AREA, 0X00};
  ssd1306_commandList(scrollList3a, sizeof(scrollList3a));
    4e6e:	42 e0       	ldi	r20, 0x02	; 2
    4e70:	63 ed       	ldi	r22, 0xD3	; 211
    4e72:	75 e0       	ldi	r23, 0x05	; 5
    4e74:	ce 01       	movw	r24, r28
    4e76:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT);
    4e7a:	6e 81       	ldd	r22, Y+6	; 0x06
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList3b[] = {
      SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL, 0X00};
  ssd1306_commandList(scrollList3b, sizeof(scrollList3b));
    4e82:	42 e0       	ldi	r20, 0x02	; 2
    4e84:	61 ed       	ldi	r22, 0xD1	; 209
    4e86:	75 e0       	ldi	r23, 0x05	; 5
    4e88:	ce 01       	movw	r24, r28
    4e8a:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(start);
    4e8e:	60 2f       	mov	r22, r16
    4e90:	ce 01       	movw	r24, r28
    4e92:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(0X00);
    4e96:	60 e0       	ldi	r22, 0x00	; 0
    4e98:	ce 01       	movw	r24, r28
    4e9a:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(stop);
    4e9e:	61 2f       	mov	r22, r17
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList3c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList3c, sizeof(scrollList3c));
    4ea6:	42 e0       	ldi	r20, 0x02	; 2
    4ea8:	6f ec       	ldi	r22, 0xCF	; 207
    4eaa:	75 e0       	ldi	r23, 0x05	; 5
    4eac:	ce 01       	movw	r24, r28
    4eae:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
    4eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4eb6:	00 97       	sbiw	r24, 0x00	; 0
    4eb8:	51 f0       	breq	.+20     	; 0x4ece <_ZN16Adafruit_SSD130620startscrolldiagrightEhh+0xa2>
    4eba:	49 ad       	ldd	r20, Y+57	; 0x39
    4ebc:	5a ad       	ldd	r21, Y+58	; 0x3a
    4ebe:	6b ad       	ldd	r22, Y+59	; 0x3b
    4ec0:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
  ssd1306_command1(start);
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList3c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList3c, sizeof(scrollList3c));
  TRANSACTION_END
    4eca:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4ece:	ef a5       	ldd	r30, Y+47	; 0x2f
    4ed0:	f8 a9       	ldd	r31, Y+48	; 0x30
    4ed2:	90 81       	ld	r25, Z
    4ed4:	8c a9       	ldd	r24, Y+52	; 0x34
    4ed6:	89 2b       	or	r24, r25
    4ed8:	80 83       	st	Z, r24
    4eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ede:	89 2b       	or	r24, r25
    4ee0:	31 f0       	breq	.+12     	; 0x4eee <_ZN16Adafruit_SSD130620startscrolldiagrightEhh+0xc2>
}
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	1f 91       	pop	r17
    4ee8:	0f 91       	pop	r16
  ssd1306_command1(start);
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList3c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList3c, sizeof(scrollList3c));
  TRANSACTION_END
    4eea:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
}
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	08 95       	ret

00004ef8 <_ZN16Adafruit_SSD130619startscrolldiagleftEhh>:
    @param  stop
            Last row.
    @return None (void).
*/
// To scroll the whole display, run: display.startscrolldiagleft(0x00, 0x0F)
void Adafruit_SSD1306::startscrolldiagleft(uint8_t start, uint8_t stop) {
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	ec 01       	movw	r28, r24
    4f02:	06 2f       	mov	r16, r22
    4f04:	14 2f       	mov	r17, r20
  TRANSACTION_START
    4f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f0a:	00 97       	sbiw	r24, 0x00	; 0
    4f0c:	39 f0       	breq	.+14     	; 0x4f1c <_ZN16Adafruit_SSD130619startscrolldiagleftEhh+0x24>
    4f0e:	4d a9       	ldd	r20, Y+53	; 0x35
    4f10:	5e a9       	ldd	r21, Y+54	; 0x36
    4f12:	6f a9       	ldd	r22, Y+55	; 0x37
    4f14:	78 ad       	ldd	r23, Y+56	; 0x38
    4f16:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4f1a:	0f c0       	rjmp	.+30     	; 0x4f3a <_ZN16Adafruit_SSD130619startscrolldiagleftEhh+0x42>
    4f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f20:	89 2b       	or	r24, r25
    4f22:	21 f0       	breq	.+8      	; 0x4f2c <_ZN16Adafruit_SSD130619startscrolldiagleftEhh+0x34>
    4f24:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f26:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f28:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4f2c:	ef a5       	ldd	r30, Y+47	; 0x2f
    4f2e:	f8 a9       	ldd	r31, Y+48	; 0x30
    4f30:	90 81       	ld	r25, Z
    4f32:	8c a9       	ldd	r24, Y+52	; 0x34
    4f34:	80 95       	com	r24
    4f36:	89 23       	and	r24, r25
    4f38:	80 83       	st	Z, r24
  static const uint8_t PROGMEM scrollList4a[] = {
      SSD1306_SET_VERTICAL_SCROLL_AREA, 0X00};
  ssd1306_commandList(scrollList4a, sizeof(scrollList4a));
    4f3a:	42 e0       	ldi	r20, 0x02	; 2
    4f3c:	6d ec       	ldi	r22, 0xCD	; 205
    4f3e:	75 e0       	ldi	r23, 0x05	; 5
    4f40:	ce 01       	movw	r24, r28
    4f42:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT);
    4f46:	6e 81       	ldd	r22, Y+6	; 0x06
    4f48:	ce 01       	movw	r24, r28
    4f4a:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList4b[] = {
      SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL, 0X00};
  ssd1306_commandList(scrollList4b, sizeof(scrollList4b));
    4f4e:	42 e0       	ldi	r20, 0x02	; 2
    4f50:	6b ec       	ldi	r22, 0xCB	; 203
    4f52:	75 e0       	ldi	r23, 0x05	; 5
    4f54:	ce 01       	movw	r24, r28
    4f56:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(start);
    4f5a:	60 2f       	mov	r22, r16
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(0X00);
    4f62:	60 e0       	ldi	r22, 0x00	; 0
    4f64:	ce 01       	movw	r24, r28
    4f66:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(stop);
    4f6a:	61 2f       	mov	r22, r17
    4f6c:	ce 01       	movw	r24, r28
    4f6e:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
    4f72:	42 e0       	ldi	r20, 0x02	; 2
    4f74:	69 ec       	ldi	r22, 0xC9	; 201
    4f76:	75 e0       	ldi	r23, 0x05	; 5
    4f78:	ce 01       	movw	r24, r28
    4f7a:	0e 94 2d 21 	call	0x425a	; 0x425a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
    4f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f82:	00 97       	sbiw	r24, 0x00	; 0
    4f84:	51 f0       	breq	.+20     	; 0x4f9a <_ZN16Adafruit_SSD130619startscrolldiagleftEhh+0xa2>
    4f86:	49 ad       	ldd	r20, Y+57	; 0x39
    4f88:	5a ad       	ldd	r21, Y+58	; 0x3a
    4f8a:	6b ad       	ldd	r22, Y+59	; 0x3b
    4f8c:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    4f8e:	df 91       	pop	r29
    4f90:	cf 91       	pop	r28
    4f92:	1f 91       	pop	r17
    4f94:	0f 91       	pop	r16
  ssd1306_command1(start);
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
    4f96:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4f9a:	ef a5       	ldd	r30, Y+47	; 0x2f
    4f9c:	f8 a9       	ldd	r31, Y+48	; 0x30
    4f9e:	90 81       	ld	r25, Z
    4fa0:	8c a9       	ldd	r24, Y+52	; 0x34
    4fa2:	89 2b       	or	r24, r25
    4fa4:	80 83       	st	Z, r24
    4fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4faa:	89 2b       	or	r24, r25
    4fac:	31 f0       	breq	.+12     	; 0x4fba <_ZN16Adafruit_SSD130619startscrolldiagleftEhh+0xc2>
}
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	1f 91       	pop	r17
    4fb4:	0f 91       	pop	r16
  ssd1306_command1(start);
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
    4fb6:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
}
    4fba:	df 91       	pop	r29
    4fbc:	cf 91       	pop	r28
    4fbe:	1f 91       	pop	r17
    4fc0:	0f 91       	pop	r16
    4fc2:	08 95       	ret

00004fc4 <_ZN16Adafruit_SSD130610stopscrollEv>:

/*!
    @brief  Cease a previously-begun scrolling action.
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	ec 01       	movw	r28, r24
  TRANSACTION_START
    4fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fce:	00 97       	sbiw	r24, 0x00	; 0
    4fd0:	39 f0       	breq	.+14     	; 0x4fe0 <_ZN16Adafruit_SSD130610stopscrollEv+0x1c>
    4fd2:	4d a9       	ldd	r20, Y+53	; 0x35
    4fd4:	5e a9       	ldd	r21, Y+54	; 0x36
    4fd6:	6f a9       	ldd	r22, Y+55	; 0x37
    4fd8:	78 ad       	ldd	r23, Y+56	; 0x38
    4fda:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    4fde:	0f c0       	rjmp	.+30     	; 0x4ffe <_ZN16Adafruit_SSD130610stopscrollEv+0x3a>
    4fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe4:	89 2b       	or	r24, r25
    4fe6:	21 f0       	breq	.+8      	; 0x4ff0 <_ZN16Adafruit_SSD130610stopscrollEv+0x2c>
    4fe8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fec:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4ff0:	ef a5       	ldd	r30, Y+47	; 0x2f
    4ff2:	f8 a9       	ldd	r31, Y+48	; 0x30
    4ff4:	90 81       	ld	r25, Z
    4ff6:	8c a9       	ldd	r24, Y+52	; 0x34
    4ff8:	80 95       	com	r24
    4ffa:	89 23       	and	r24, r25
    4ffc:	80 83       	st	Z, r24
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
    4ffe:	6e e2       	ldi	r22, 0x2E	; 46
    5000:	ce 01       	movw	r24, r28
    5002:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
    5006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	41 f0       	breq	.+16     	; 0x501e <_ZN16Adafruit_SSD130610stopscrollEv+0x5a>
    500e:	49 ad       	ldd	r20, Y+57	; 0x39
    5010:	5a ad       	ldd	r21, Y+58	; 0x3a
    5012:	6b ad       	ldd	r22, Y+59	; 0x3b
    5014:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    5016:	df 91       	pop	r29
    5018:	cf 91       	pop	r28
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
    501a:	0c 94 36 29 	jmp	0x526c	; 0x526c <_ZN7TwoWire8setClockEm>
    501e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5020:	f8 a9       	ldd	r31, Y+48	; 0x30
    5022:	90 81       	ld	r25, Z
    5024:	8c a9       	ldd	r24, Y+52	; 0x34
    5026:	89 2b       	or	r24, r25
    5028:	80 83       	st	Z, r24
    502a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    502c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    502e:	89 2b       	or	r24, r25
    5030:	21 f0       	breq	.+8      	; 0x503a <_ZN16Adafruit_SSD130610stopscrollEv+0x76>
}
    5032:	df 91       	pop	r29
    5034:	cf 91       	pop	r28
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
    5036:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <_ZN8SPIClass14endTransactionEv>
}
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	08 95       	ret

00005040 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5040:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5042:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5044:	f8 94       	cli
  if (!initialized) {
    5046:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <_ZN8SPIClass11initializedE>
    504a:	81 11       	cpse	r24, r1
    504c:	27 c0       	rjmp	.+78     	; 0x509c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    504e:	e8 ed       	ldi	r30, 0xD8	; 216
    5050:	fa e0       	ldi	r31, 0x0A	; 10
    5052:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5054:	e4 ec       	ldi	r30, 0xC4	; 196
    5056:	fa e0       	ldi	r31, 0x0A	; 10
    5058:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    505a:	e8 2f       	mov	r30, r24
    505c:	f0 e0       	ldi	r31, 0x00	; 0
    505e:	ee 0f       	add	r30, r30
    5060:	ff 1f       	adc	r31, r31
    5062:	e4 51       	subi	r30, 0x14	; 20
    5064:	f5 4f       	sbci	r31, 0xF5	; 245
    5066:	a5 91       	lpm	r26, Z+
    5068:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    506a:	ec 91       	ld	r30, X
    506c:	e9 23       	and	r30, r25
    506e:	21 f4       	brne	.+8      	; 0x5078 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5070:	61 e0       	ldi	r22, 0x01	; 1
    5072:	8a e0       	ldi	r24, 0x0A	; 10
    5074:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5078:	61 e0       	ldi	r22, 0x01	; 1
    507a:	8a e0       	ldi	r24, 0x0A	; 10
    507c:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5080:	8c b5       	in	r24, 0x2c	; 44
    5082:	80 61       	ori	r24, 0x10	; 16
    5084:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5086:	8c b5       	in	r24, 0x2c	; 44
    5088:	80 64       	ori	r24, 0x40	; 64
    508a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    508c:	61 e0       	ldi	r22, 0x01	; 1
    508e:	8d e0       	ldi	r24, 0x0D	; 13
    5090:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
    pinMode(MOSI, OUTPUT);
    5094:	61 e0       	ldi	r22, 0x01	; 1
    5096:	8b e0       	ldi	r24, 0x0B	; 11
    5098:	0e 94 8c 29 	call	0x5318	; 0x5318 <pinMode>
  }
  initialized++; // reference count
    509c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <_ZN8SPIClass11initializedE>
    50a0:	8f 5f       	subi	r24, 0xFF	; 255
    50a2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <_ZN8SPIClass11initializedE>
  SREG = sreg;
    50a6:	cf bf       	out	0x3f, r28	; 63
}
    50a8:	cf 91       	pop	r28
    50aa:	08 95       	ret

000050ac <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    50ac:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    50b6:	82 1b       	sub	r24, r18
    50b8:	91 09       	sbc	r25, r1
    50ba:	08 95       	ret

000050bc <_ZN7TwoWire4readEv>:
    50bc:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    50c0:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    50c4:	98 17       	cp	r25, r24
    50c6:	50 f4       	brcc	.+20     	; 0x50dc <_ZN7TwoWire4readEv+0x20>
    50c8:	e9 2f       	mov	r30, r25
    50ca:	f0 e0       	ldi	r31, 0x00	; 0
    50cc:	ea 54       	subi	r30, 0x4A	; 74
    50ce:	fd 4f       	sbci	r31, 0xFD	; 253
    50d0:	20 81       	ld	r18, Z
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	9f 5f       	subi	r25, 0xFF	; 255
    50d6:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <_ZN7TwoWire4readEv+0x24>
    50dc:	2f ef       	ldi	r18, 0xFF	; 255
    50de:	3f ef       	ldi	r19, 0xFF	; 255
    50e0:	c9 01       	movw	r24, r18
    50e2:	08 95       	ret

000050e4 <_ZN7TwoWire4peekEv>:
    50e4:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    50e8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    50ec:	e8 17       	cp	r30, r24
    50ee:	30 f4       	brcc	.+12     	; 0x50fc <_ZN7TwoWire4peekEv+0x18>
    50f0:	f0 e0       	ldi	r31, 0x00	; 0
    50f2:	ea 54       	subi	r30, 0x4A	; 74
    50f4:	fd 4f       	sbci	r31, 0xFD	; 253
    50f6:	80 81       	ld	r24, Z
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	08 95       	ret
    50fc:	8f ef       	ldi	r24, 0xFF	; 255
    50fe:	9f ef       	ldi	r25, 0xFF	; 255
    5100:	08 95       	ret

00005102 <_ZN7TwoWire5flushEv>:
    5102:	08 95       	ret

00005104 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	ec 01       	movw	r28, r24
    510a:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <_ZN7TwoWire14user_onReceiveE>
    510e:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE+0x1>
    5112:	30 97       	sbiw	r30, 0x00	; 0
    5114:	f1 f0       	breq	.+60     	; 0x5152 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5116:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    511a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    511e:	98 17       	cp	r25, r24
    5120:	c0 f0       	brcs	.+48     	; 0x5152 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	29 2f       	mov	r18, r25
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	26 17       	cp	r18, r22
    512a:	37 07       	cpc	r19, r23
    512c:	54 f4       	brge	.+20     	; 0x5142 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    512e:	de 01       	movw	r26, r28
    5130:	a2 0f       	add	r26, r18
    5132:	b3 1f       	adc	r27, r19
    5134:	4c 91       	ld	r20, X
    5136:	d9 01       	movw	r26, r18
    5138:	aa 54       	subi	r26, 0x4A	; 74
    513a:	bd 4f       	sbci	r27, 0xFD	; 253
    513c:	4c 93       	st	X, r20
    513e:	9f 5f       	subi	r25, 0xFF	; 255
    5140:	f1 cf       	rjmp	.-30     	; 0x5124 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5142:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    5146:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    514a:	cb 01       	movw	r24, r22
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	09 94       	ijmp
    5152:	df 91       	pop	r29
    5154:	cf 91       	pop	r28
    5156:	08 95       	ret

00005158 <_ZN7TwoWire16onRequestServiceEv>:
    5158:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <_ZN7TwoWire14user_onRequestE>
    515c:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <_ZN7TwoWire14user_onRequestE+0x1>
    5160:	30 97       	sbiw	r30, 0x00	; 0
    5162:	29 f0       	breq	.+10     	; 0x516e <_ZN7TwoWire16onRequestServiceEv+0x16>
    5164:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    5168:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    516c:	09 94       	ijmp
    516e:	08 95       	ret

00005170 <_ZN7TwoWire5writeEPKhj>:
    5170:	cf 92       	push	r12
    5172:	df 92       	push	r13
    5174:	ef 92       	push	r14
    5176:	ff 92       	push	r15
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	7c 01       	movw	r14, r24
    5182:	cb 01       	movw	r24, r22
    5184:	8a 01       	movw	r16, r20
    5186:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <_ZN7TwoWire12transmittingE>
    518a:	22 23       	and	r18, r18
    518c:	89 f0       	breq	.+34     	; 0x51b0 <_ZN7TwoWire5writeEPKhj+0x40>
    518e:	eb 01       	movw	r28, r22
    5190:	6b 01       	movw	r12, r22
    5192:	c4 0e       	add	r12, r20
    5194:	d5 1e       	adc	r13, r21
    5196:	cc 15       	cp	r28, r12
    5198:	dd 05       	cpc	r29, r13
    519a:	69 f0       	breq	.+26     	; 0x51b6 <_ZN7TwoWire5writeEPKhj+0x46>
    519c:	69 91       	ld	r22, Y+
    519e:	d7 01       	movw	r26, r14
    51a0:	ed 91       	ld	r30, X+
    51a2:	fc 91       	ld	r31, X
    51a4:	01 90       	ld	r0, Z+
    51a6:	f0 81       	ld	r31, Z
    51a8:	e0 2d       	mov	r30, r0
    51aa:	c7 01       	movw	r24, r14
    51ac:	09 95       	icall
    51ae:	f3 cf       	rjmp	.-26     	; 0x5196 <_ZN7TwoWire5writeEPKhj+0x26>
    51b0:	64 2f       	mov	r22, r20
    51b2:	0e 94 36 2a 	call	0x546c	; 0x546c <twi_transmit>
    51b6:	c8 01       	movw	r24, r16
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	0f 91       	pop	r16
    51c0:	ff 90       	pop	r15
    51c2:	ef 90       	pop	r14
    51c4:	df 90       	pop	r13
    51c6:	cf 90       	pop	r12
    51c8:	08 95       	ret

000051ca <_ZN7TwoWire5writeEh>:
    51ca:	cf 93       	push	r28
    51cc:	df 93       	push	r29
    51ce:	1f 92       	push	r1
    51d0:	cd b7       	in	r28, 0x3d	; 61
    51d2:	de b7       	in	r29, 0x3e	; 62
    51d4:	69 83       	std	Y+1, r22	; 0x01
    51d6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <_ZN7TwoWire12transmittingE>
    51da:	22 23       	and	r18, r18
    51dc:	d1 f0       	breq	.+52     	; 0x5212 <_ZN7TwoWire5writeEh+0x48>
    51de:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    51e2:	20 32       	cpi	r18, 0x20	; 32
    51e4:	40 f0       	brcs	.+16     	; 0x51f6 <_ZN7TwoWire5writeEh+0x2c>
    51e6:	21 e0       	ldi	r18, 0x01	; 1
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	fc 01       	movw	r30, r24
    51ec:	33 83       	std	Z+3, r19	; 0x03
    51ee:	22 83       	std	Z+2, r18	; 0x02
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	15 c0       	rjmp	.+42     	; 0x5220 <_ZN7TwoWire5writeEh+0x56>
    51f6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    51fa:	e8 2f       	mov	r30, r24
    51fc:	f0 e0       	ldi	r31, 0x00	; 0
    51fe:	ed 56       	subi	r30, 0x6D	; 109
    5200:	fd 4f       	sbci	r31, 0xFD	; 253
    5202:	99 81       	ldd	r25, Y+1	; 0x01
    5204:	90 83       	st	Z, r25
    5206:	8f 5f       	subi	r24, 0xFF	; 255
    5208:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    520c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    5210:	05 c0       	rjmp	.+10     	; 0x521c <_ZN7TwoWire5writeEh+0x52>
    5212:	61 e0       	ldi	r22, 0x01	; 1
    5214:	ce 01       	movw	r24, r28
    5216:	01 96       	adiw	r24, 0x01	; 1
    5218:	0e 94 36 2a 	call	0x546c	; 0x546c <twi_transmit>
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	0f 90       	pop	r0
    5222:	df 91       	pop	r29
    5224:	cf 91       	pop	r28
    5226:	08 95       	ret

00005228 <_ZN7TwoWireC1Ev>:
    5228:	fc 01       	movw	r30, r24
    522a:	13 82       	std	Z+3, r1	; 0x03
    522c:	12 82       	std	Z+2, r1	; 0x02
    522e:	88 ee       	ldi	r24, 0xE8	; 232
    5230:	93 e0       	ldi	r25, 0x03	; 3
    5232:	a0 e0       	ldi	r26, 0x00	; 0
    5234:	b0 e0       	ldi	r27, 0x00	; 0
    5236:	84 83       	std	Z+4, r24	; 0x04
    5238:	95 83       	std	Z+5, r25	; 0x05
    523a:	a6 83       	std	Z+6, r26	; 0x06
    523c:	b7 83       	std	Z+7, r27	; 0x07
    523e:	87 e8       	ldi	r24, 0x87	; 135
    5240:	91 e0       	ldi	r25, 0x01	; 1
    5242:	91 83       	std	Z+1, r25	; 0x01
    5244:	80 83       	st	Z, r24
    5246:	08 95       	ret

00005248 <_ZN7TwoWire5beginEv>:
    5248:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZN7TwoWire13rxBufferIndexE>
    524c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN7TwoWire14rxBufferLengthE>
    5250:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    5254:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    5258:	0e 94 f7 29 	call	0x53ee	; 0x53ee <twi_init>
    525c:	8c ea       	ldi	r24, 0xAC	; 172
    525e:	98 e2       	ldi	r25, 0x28	; 40
    5260:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <twi_attachSlaveTxEvent>
    5264:	82 e8       	ldi	r24, 0x82	; 130
    5266:	98 e2       	ldi	r25, 0x28	; 40
    5268:	0c 94 5e 2a 	jmp	0x54bc	; 0x54bc <twi_attachSlaveRxEvent>

0000526c <_ZN7TwoWire8setClockEm>:
    526c:	cb 01       	movw	r24, r22
    526e:	ba 01       	movw	r22, r20
    5270:	0c 94 22 2a 	jmp	0x5444	; 0x5444 <twi_setFrequency>

00005274 <_ZN7TwoWire17beginTransmissionEh>:
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_ZN7TwoWire12transmittingE>
    527a:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <_ZN7TwoWire9txAddressE>
    527e:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    5282:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    5286:	08 95       	ret

00005288 <_ZN7TwoWire17beginTransmissionEi>:
    5288:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <_ZN7TwoWire17beginTransmissionEh>

0000528c <_ZN7TwoWire15endTransmissionEh>:
    528c:	0f 93       	push	r16
    528e:	06 2f       	mov	r16, r22
    5290:	21 e0       	ldi	r18, 0x01	; 1
    5292:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    5296:	63 e9       	ldi	r22, 0x93	; 147
    5298:	72 e0       	ldi	r23, 0x02	; 2
    529a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN7TwoWire9txAddressE>
    529e:	0e 94 84 2a 	call	0x5508	; 0x5508 <twi_writeTo>
    52a2:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN7TwoWire13txBufferIndexE>
    52a6:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
    52aa:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire12transmittingE>
    52ae:	0f 91       	pop	r16
    52b0:	08 95       	ret

000052b2 <_ZN7TwoWire15endTransmissionEv>:
    52b2:	61 e0       	ldi	r22, 0x01	; 1
    52b4:	0c 94 46 29 	jmp	0x528c	; 0x528c <_ZN7TwoWire15endTransmissionEh>

000052b8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    52b8:	80 e8       	ldi	r24, 0x80	; 128
    52ba:	92 e0       	ldi	r25, 0x02	; 2
    52bc:	0c 94 14 29 	jmp	0x5228	; 0x5228 <_ZN7TwoWireC1Ev>

000052c0 <__cxa_pure_virtual>:
    52c0:	0e 94 48 31 	call	0x6290	; 0x6290 <abort>

000052c4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    52c4:	08 95       	ret

000052c6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    52c6:	83 30       	cpi	r24, 0x03	; 3
    52c8:	81 f0       	breq	.+32     	; 0x52ea <turnOffPWM+0x24>
    52ca:	28 f4       	brcc	.+10     	; 0x52d6 <turnOffPWM+0x10>
    52cc:	81 30       	cpi	r24, 0x01	; 1
    52ce:	99 f0       	breq	.+38     	; 0x52f6 <turnOffPWM+0x30>
    52d0:	82 30       	cpi	r24, 0x02	; 2
    52d2:	a1 f0       	breq	.+40     	; 0x52fc <turnOffPWM+0x36>
    52d4:	08 95       	ret
    52d6:	87 30       	cpi	r24, 0x07	; 7
    52d8:	a9 f0       	breq	.+42     	; 0x5304 <turnOffPWM+0x3e>
    52da:	88 30       	cpi	r24, 0x08	; 8
    52dc:	b9 f0       	breq	.+46     	; 0x530c <turnOffPWM+0x46>
    52de:	84 30       	cpi	r24, 0x04	; 4
    52e0:	d1 f4       	brne	.+52     	; 0x5316 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    52e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    52e6:	8f 7d       	andi	r24, 0xDF	; 223
    52e8:	03 c0       	rjmp	.+6      	; 0x52f0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    52ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    52ee:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    52f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    52f4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    52f6:	84 b5       	in	r24, 0x24	; 36
    52f8:	8f 77       	andi	r24, 0x7F	; 127
    52fa:	02 c0       	rjmp	.+4      	; 0x5300 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    52fc:	84 b5       	in	r24, 0x24	; 36
    52fe:	8f 7d       	andi	r24, 0xDF	; 223
    5300:	84 bd       	out	0x24, r24	; 36
    5302:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5304:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    5308:	8f 77       	andi	r24, 0x7F	; 127
    530a:	03 c0       	rjmp	.+6      	; 0x5312 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    530c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    5310:	8f 7d       	andi	r24, 0xDF	; 223
    5312:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    5316:	08 95       	ret

00005318 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	fc 01       	movw	r30, r24
    5320:	e6 54       	subi	r30, 0x46	; 70
    5322:	f5 4f       	sbci	r31, 0xF5	; 245
    5324:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5326:	fc 01       	movw	r30, r24
    5328:	e2 53       	subi	r30, 0x32	; 50
    532a:	f5 4f       	sbci	r31, 0xF5	; 245
    532c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    532e:	88 23       	and	r24, r24
    5330:	61 f1       	breq	.+88     	; 0x538a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	88 0f       	add	r24, r24
    5336:	99 1f       	adc	r25, r25
    5338:	fc 01       	movw	r30, r24
    533a:	e4 51       	subi	r30, 0x14	; 20
    533c:	f5 4f       	sbci	r31, 0xF5	; 245
    533e:	c5 91       	lpm	r28, Z+
    5340:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5342:	fc 01       	movw	r30, r24
    5344:	ee 51       	subi	r30, 0x1E	; 30
    5346:	f5 4f       	sbci	r31, 0xF5	; 245
    5348:	a5 91       	lpm	r26, Z+
    534a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    534c:	61 11       	cpse	r22, r1
    534e:	09 c0       	rjmp	.+18     	; 0x5362 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5350:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5352:	f8 94       	cli
		*reg &= ~bit;
    5354:	88 81       	ld	r24, Y
    5356:	20 95       	com	r18
    5358:	82 23       	and	r24, r18
    535a:	88 83       	st	Y, r24
		*out &= ~bit;
    535c:	ec 91       	ld	r30, X
    535e:	2e 23       	and	r18, r30
    5360:	0b c0       	rjmp	.+22     	; 0x5378 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5362:	62 30       	cpi	r22, 0x02	; 2
    5364:	61 f4       	brne	.+24     	; 0x537e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5366:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5368:	f8 94       	cli
		*reg &= ~bit;
    536a:	88 81       	ld	r24, Y
    536c:	32 2f       	mov	r19, r18
    536e:	30 95       	com	r19
    5370:	83 23       	and	r24, r19
    5372:	88 83       	st	Y, r24
		*out |= bit;
    5374:	ec 91       	ld	r30, X
    5376:	2e 2b       	or	r18, r30
    5378:	2c 93       	st	X, r18
		SREG = oldSREG;
    537a:	9f bf       	out	0x3f, r25	; 63
    537c:	06 c0       	rjmp	.+12     	; 0x538a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    537e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5380:	f8 94       	cli
		*reg |= bit;
    5382:	e8 81       	ld	r30, Y
    5384:	2e 2b       	or	r18, r30
    5386:	28 83       	st	Y, r18
		SREG = oldSREG;
    5388:	8f bf       	out	0x3f, r24	; 63
	}
}
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	08 95       	ret

00005390 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5390:	1f 93       	push	r17
    5392:	cf 93       	push	r28
    5394:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5396:	28 2f       	mov	r18, r24
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	f9 01       	movw	r30, r18
    539c:	ea 55       	subi	r30, 0x5A	; 90
    539e:	f5 4f       	sbci	r31, 0xF5	; 245
    53a0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    53a2:	f9 01       	movw	r30, r18
    53a4:	e6 54       	subi	r30, 0x46	; 70
    53a6:	f5 4f       	sbci	r31, 0xF5	; 245
    53a8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    53aa:	f9 01       	movw	r30, r18
    53ac:	e2 53       	subi	r30, 0x32	; 50
    53ae:	f5 4f       	sbci	r31, 0xF5	; 245
    53b0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    53b2:	cc 23       	and	r28, r28
    53b4:	c1 f0       	breq	.+48     	; 0x53e6 <digitalWrite+0x56>
    53b6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    53b8:	81 11       	cpse	r24, r1
    53ba:	0e 94 63 29 	call	0x52c6	; 0x52c6 <turnOffPWM>

	out = portOutputRegister(port);
    53be:	ec 2f       	mov	r30, r28
    53c0:	f0 e0       	ldi	r31, 0x00	; 0
    53c2:	ee 0f       	add	r30, r30
    53c4:	ff 1f       	adc	r31, r31
    53c6:	ee 51       	subi	r30, 0x1E	; 30
    53c8:	f5 4f       	sbci	r31, 0xF5	; 245
    53ca:	a5 91       	lpm	r26, Z+
    53cc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    53ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    53d0:	f8 94       	cli

	if (val == LOW) {
    53d2:	11 11       	cpse	r17, r1
    53d4:	04 c0       	rjmp	.+8      	; 0x53de <digitalWrite+0x4e>
		*out &= ~bit;
    53d6:	8c 91       	ld	r24, X
    53d8:	d0 95       	com	r29
    53da:	d8 23       	and	r29, r24
    53dc:	02 c0       	rjmp	.+4      	; 0x53e2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    53de:	ec 91       	ld	r30, X
    53e0:	de 2b       	or	r29, r30
    53e2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    53e4:	9f bf       	out	0x3f, r25	; 63
}
    53e6:	df 91       	pop	r29
    53e8:	cf 91       	pop	r28
    53ea:	1f 91       	pop	r17
    53ec:	08 95       	ret

000053ee <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    53ee:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_state>
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <twi_sendStop>
    53f8:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_inRepStart>
    53fc:	61 e0       	ldi	r22, 0x01	; 1
    53fe:	82 e1       	ldi	r24, 0x12	; 18
    5400:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    5404:	61 e0       	ldi	r22, 0x01	; 1
    5406:	83 e1       	ldi	r24, 0x13	; 19
    5408:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    540c:	e9 eb       	ldi	r30, 0xB9	; 185
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	80 81       	ld	r24, Z
    5412:	8e 7f       	andi	r24, 0xFE	; 254
    5414:	80 83       	st	Z, r24
    5416:	80 81       	ld	r24, Z
    5418:	8d 7f       	andi	r24, 0xFD	; 253
    541a:	80 83       	st	Z, r24
    541c:	80 e2       	ldi	r24, 0x20	; 32
    541e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5422:	85 e4       	ldi	r24, 0x45	; 69
    5424:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5428:	08 95       	ret

0000542a <twi_disable>:
    542a:	ec eb       	ldi	r30, 0xBC	; 188
    542c:	f0 e0       	ldi	r31, 0x00	; 0
    542e:	80 81       	ld	r24, Z
    5430:	8a 7b       	andi	r24, 0xBA	; 186
    5432:	80 83       	st	Z, r24
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	82 e1       	ldi	r24, 0x12	; 18
    5438:	0e 94 c8 29 	call	0x5390	; 0x5390 <digitalWrite>
    543c:	60 e0       	ldi	r22, 0x00	; 0
    543e:	83 e1       	ldi	r24, 0x13	; 19
    5440:	0c 94 c8 29 	jmp	0x5390	; 0x5390 <digitalWrite>

00005444 <twi_setFrequency>:
    5444:	9b 01       	movw	r18, r22
    5446:	ac 01       	movw	r20, r24
    5448:	60 e0       	ldi	r22, 0x00	; 0
    544a:	72 e1       	ldi	r23, 0x12	; 18
    544c:	8a e7       	ldi	r24, 0x7A	; 122
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__udivmodsi4>
    5454:	da 01       	movw	r26, r20
    5456:	c9 01       	movw	r24, r18
    5458:	40 97       	sbiw	r24, 0x10	; 16
    545a:	a1 09       	sbc	r26, r1
    545c:	b1 09       	sbc	r27, r1
    545e:	b6 95       	lsr	r27
    5460:	a7 95       	ror	r26
    5462:	97 95       	ror	r25
    5464:	87 95       	ror	r24
    5466:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    546a:	08 95       	ret

0000546c <twi_transmit>:
    546c:	40 91 f8 02 	lds	r20, 0x02F8	; 0x8002f8 <twi_txBufferLength>
    5470:	26 2f       	mov	r18, r22
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	24 0f       	add	r18, r20
    5476:	31 1d       	adc	r19, r1
    5478:	21 32       	cpi	r18, 0x21	; 33
    547a:	31 05       	cpc	r19, r1
    547c:	dc f4       	brge	.+54     	; 0x54b4 <twi_transmit+0x48>
    547e:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <twi_state>
    5482:	24 30       	cpi	r18, 0x04	; 4
    5484:	c9 f4       	brne	.+50     	; 0x54b8 <twi_transmit+0x4c>
    5486:	fc 01       	movw	r30, r24
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	86 17       	cp	r24, r22
    548e:	58 f4       	brcc	.+22     	; 0x54a6 <twi_transmit+0x3a>
    5490:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <twi_txBufferLength>
    5494:	21 91       	ld	r18, Z+
    5496:	dc 01       	movw	r26, r24
    5498:	a6 50       	subi	r26, 0x06	; 6
    549a:	bd 4f       	sbci	r27, 0xFD	; 253
    549c:	a3 0f       	add	r26, r19
    549e:	b1 1d       	adc	r27, r1
    54a0:	2c 93       	st	X, r18
    54a2:	01 96       	adiw	r24, 0x01	; 1
    54a4:	f3 cf       	rjmp	.-26     	; 0x548c <twi_transmit+0x20>
    54a6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_txBufferLength>
    54aa:	68 0f       	add	r22, r24
    54ac:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <twi_txBufferLength>
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	08 95       	ret
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	08 95       	ret
    54b8:	82 e0       	ldi	r24, 0x02	; 2
    54ba:	08 95       	ret

000054bc <twi_attachSlaveRxEvent>:
    54bc:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <twi_onSlaveReceive+0x1>
    54c0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_onSlaveReceive>
    54c4:	08 95       	ret

000054c6 <twi_attachSlaveTxEvent>:
    54c6:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveTransmit+0x1>
    54ca:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveTransmit>
    54ce:	08 95       	ret

000054d0 <twi_releaseBus>:
    54d0:	85 ec       	ldi	r24, 0xC5	; 197
    54d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    54d6:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_state>
    54da:	08 95       	ret

000054dc <twi_handleTimeout>:
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	91 e0       	ldi	r25, 0x01	; 1
    54e2:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_timed_out_flag>
    54e6:	88 23       	and	r24, r24
    54e8:	61 f0       	breq	.+24     	; 0x5502 <twi_handleTimeout+0x26>
    54ea:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    54ee:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    54f2:	0e 94 15 2a 	call	0x542a	; 0x542a <twi_disable>
    54f6:	0e 94 f7 29 	call	0x53ee	; 0x53ee <twi_init>
    54fa:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    54fe:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	08 95       	ret

00005508 <twi_writeTo>:
    5508:	4f 92       	push	r4
    550a:	5f 92       	push	r5
    550c:	6f 92       	push	r6
    550e:	7f 92       	push	r7
    5510:	8f 92       	push	r8
    5512:	9f 92       	push	r9
    5514:	af 92       	push	r10
    5516:	bf 92       	push	r11
    5518:	cf 92       	push	r12
    551a:	df 92       	push	r13
    551c:	ef 92       	push	r14
    551e:	ff 92       	push	r15
    5520:	0f 93       	push	r16
    5522:	1f 93       	push	r17
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	41 32       	cpi	r20, 0x21	; 33
    552a:	08 f0       	brcs	.+2      	; 0x552e <twi_writeTo+0x26>
    552c:	c6 c0       	rjmp	.+396    	; 0x56ba <twi_writeTo+0x1b2>
    552e:	12 2f       	mov	r17, r18
    5530:	f4 2e       	mov	r15, r20
    5532:	d7 2e       	mov	r13, r23
    5534:	e6 2e       	mov	r14, r22
    5536:	d8 2f       	mov	r29, r24
    5538:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    553c:	4b 01       	movw	r8, r22
    553e:	5c 01       	movw	r10, r24
    5540:	c0 91 49 03 	lds	r28, 0x0349	; 0x800349 <twi_state>
    5544:	cc 23       	and	r28, r28
    5546:	11 f1       	breq	.+68     	; 0x558c <twi_writeTo+0x84>
    5548:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_timeout_us>
    554c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    5550:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    5554:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    5558:	89 2b       	or	r24, r25
    555a:	8a 2b       	or	r24, r26
    555c:	8b 2b       	or	r24, r27
    555e:	81 f3       	breq	.-32     	; 0x5540 <twi_writeTo+0x38>
    5560:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    5564:	40 90 42 03 	lds	r4, 0x0342	; 0x800342 <twi_timeout_us>
    5568:	50 90 43 03 	lds	r5, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    556c:	60 90 44 03 	lds	r6, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    5570:	70 90 45 03 	lds	r7, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	88 19       	sub	r24, r8
    557a:	99 09       	sbc	r25, r9
    557c:	aa 09       	sbc	r26, r10
    557e:	bb 09       	sbc	r27, r11
    5580:	48 16       	cp	r4, r24
    5582:	59 06       	cpc	r5, r25
    5584:	6a 06       	cpc	r6, r26
    5586:	7b 06       	cpc	r7, r27
    5588:	d8 f6       	brcc	.-74     	; 0x5540 <twi_writeTo+0x38>
    558a:	83 c0       	rjmp	.+262    	; 0x5692 <twi_writeTo+0x18a>
    558c:	82 e0       	ldi	r24, 0x02	; 2
    558e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_state>
    5592:	00 93 47 03 	sts	0x0347, r16	; 0x800347 <twi_sendStop>
    5596:	8f ef       	ldi	r24, 0xFF	; 255
    5598:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_error>
    559c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <twi_masterBufferIndex>
    55a0:	f0 92 1a 03 	sts	0x031A, r15	; 0x80031a <twi_masterBufferLength>
    55a4:	9e 2d       	mov	r25, r14
    55a6:	ac e1       	ldi	r26, 0x1C	; 28
    55a8:	b3 e0       	ldi	r27, 0x03	; 3
    55aa:	ee 2d       	mov	r30, r14
    55ac:	fd 2d       	mov	r31, r13
    55ae:	8e 2f       	mov	r24, r30
    55b0:	89 1b       	sub	r24, r25
    55b2:	8f 15       	cp	r24, r15
    55b4:	18 f4       	brcc	.+6      	; 0x55bc <twi_writeTo+0xb4>
    55b6:	81 91       	ld	r24, Z+
    55b8:	8d 93       	st	X+, r24
    55ba:	f9 cf       	rjmp	.-14     	; 0x55ae <twi_writeTo+0xa6>
    55bc:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <twi_slarw>
    55c0:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <twi_slarw>
    55c4:	dd 0f       	add	r29, r29
    55c6:	d9 2b       	or	r29, r25
    55c8:	d0 93 48 03 	sts	0x0348, r29	; 0x800348 <twi_slarw>
    55cc:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_inRepStart>
    55d0:	81 30       	cpi	r24, 0x01	; 1
    55d2:	89 f5       	brne	.+98     	; 0x5636 <twi_writeTo+0x12e>
    55d4:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_inRepStart>
    55d8:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    55dc:	6b 01       	movw	r12, r22
    55de:	7c 01       	movw	r14, r24
    55e0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_slarw>
    55e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    55e8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_timeout_us>
    55ec:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    55f0:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    55f4:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    55f8:	89 2b       	or	r24, r25
    55fa:	8a 2b       	or	r24, r26
    55fc:	8b 2b       	or	r24, r27
    55fe:	a9 f0       	breq	.+42     	; 0x562a <twi_writeTo+0x122>
    5600:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    5604:	80 90 42 03 	lds	r8, 0x0342	; 0x800342 <twi_timeout_us>
    5608:	90 90 43 03 	lds	r9, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    560c:	a0 90 44 03 	lds	r10, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    5610:	b0 90 45 03 	lds	r11, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    5614:	dc 01       	movw	r26, r24
    5616:	cb 01       	movw	r24, r22
    5618:	8c 19       	sub	r24, r12
    561a:	9d 09       	sbc	r25, r13
    561c:	ae 09       	sbc	r26, r14
    561e:	bf 09       	sbc	r27, r15
    5620:	88 16       	cp	r8, r24
    5622:	99 06       	cpc	r9, r25
    5624:	aa 06       	cpc	r10, r26
    5626:	bb 06       	cpc	r11, r27
    5628:	a0 f1       	brcs	.+104    	; 0x5692 <twi_writeTo+0x18a>
    562a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    562e:	83 fd       	sbrc	r24, 3
    5630:	d7 cf       	rjmp	.-82     	; 0x55e0 <twi_writeTo+0xd8>
    5632:	85 ec       	ldi	r24, 0xC5	; 197
    5634:	01 c0       	rjmp	.+2      	; 0x5638 <twi_writeTo+0x130>
    5636:	85 ee       	ldi	r24, 0xE5	; 229
    5638:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    563c:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    5640:	6b 01       	movw	r12, r22
    5642:	7c 01       	movw	r14, r24
    5644:	11 23       	and	r17, r17
    5646:	59 f1       	breq	.+86     	; 0x569e <twi_writeTo+0x196>
    5648:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_state>
    564c:	82 30       	cpi	r24, 0x02	; 2
    564e:	39 f5       	brne	.+78     	; 0x569e <twi_writeTo+0x196>
    5650:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_timeout_us>
    5654:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    5658:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    565c:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    5660:	89 2b       	or	r24, r25
    5662:	8a 2b       	or	r24, r26
    5664:	8b 2b       	or	r24, r27
    5666:	71 f3       	breq	.-36     	; 0x5644 <twi_writeTo+0x13c>
    5668:	0e 94 bc 10 	call	0x2178	; 0x2178 <micros>
    566c:	80 90 42 03 	lds	r8, 0x0342	; 0x800342 <twi_timeout_us>
    5670:	90 90 43 03 	lds	r9, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    5674:	a0 90 44 03 	lds	r10, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    5678:	b0 90 45 03 	lds	r11, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    567c:	dc 01       	movw	r26, r24
    567e:	cb 01       	movw	r24, r22
    5680:	8c 19       	sub	r24, r12
    5682:	9d 09       	sbc	r25, r13
    5684:	ae 09       	sbc	r26, r14
    5686:	bf 09       	sbc	r27, r15
    5688:	88 16       	cp	r8, r24
    568a:	99 06       	cpc	r9, r25
    568c:	aa 06       	cpc	r10, r26
    568e:	bb 06       	cpc	r11, r27
    5690:	c8 f6       	brcc	.-78     	; 0x5644 <twi_writeTo+0x13c>
    5692:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_do_reset_on_timeout>
    5696:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <twi_handleTimeout>
    569a:	c5 e0       	ldi	r28, 0x05	; 5
    569c:	13 c0       	rjmp	.+38     	; 0x56c4 <twi_writeTo+0x1bc>
    569e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_error>
    56a2:	8f 3f       	cpi	r24, 0xFF	; 255
    56a4:	79 f0       	breq	.+30     	; 0x56c4 <twi_writeTo+0x1bc>
    56a6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_error>
    56aa:	80 32       	cpi	r24, 0x20	; 32
    56ac:	41 f0       	breq	.+16     	; 0x56be <twi_writeTo+0x1b6>
    56ae:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_error>
    56b2:	80 33       	cpi	r24, 0x30	; 48
    56b4:	31 f0       	breq	.+12     	; 0x56c2 <twi_writeTo+0x1ba>
    56b6:	c4 e0       	ldi	r28, 0x04	; 4
    56b8:	05 c0       	rjmp	.+10     	; 0x56c4 <twi_writeTo+0x1bc>
    56ba:	c1 e0       	ldi	r28, 0x01	; 1
    56bc:	03 c0       	rjmp	.+6      	; 0x56c4 <twi_writeTo+0x1bc>
    56be:	c2 e0       	ldi	r28, 0x02	; 2
    56c0:	01 c0       	rjmp	.+2      	; 0x56c4 <twi_writeTo+0x1bc>
    56c2:	c3 e0       	ldi	r28, 0x03	; 3
    56c4:	8c 2f       	mov	r24, r28
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	df 90       	pop	r13
    56d4:	cf 90       	pop	r12
    56d6:	bf 90       	pop	r11
    56d8:	af 90       	pop	r10
    56da:	9f 90       	pop	r9
    56dc:	8f 90       	pop	r8
    56de:	7f 90       	pop	r7
    56e0:	6f 90       	pop	r6
    56e2:	5f 90       	pop	r5
    56e4:	4f 90       	pop	r4
    56e6:	08 95       	ret

000056e8 <twi_stop>:
    56e8:	85 ed       	ldi	r24, 0xD5	; 213
    56ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    56ee:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_timeout_us>
    56f2:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    56f6:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    56fa:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    56fe:	07 96       	adiw	r24, 0x07	; 7
    5700:	a1 1d       	adc	r26, r1
    5702:	b1 1d       	adc	r27, r1
    5704:	23 e0       	ldi	r18, 0x03	; 3
    5706:	b6 95       	lsr	r27
    5708:	a7 95       	ror	r26
    570a:	97 95       	ror	r25
    570c:	87 95       	ror	r24
    570e:	2a 95       	dec	r18
    5710:	d1 f7       	brne	.-12     	; 0x5706 <twi_stop+0x1e>
    5712:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5716:	24 ff       	sbrs	r18, 4
    5718:	1c c0       	rjmp	.+56     	; 0x5752 <twi_stop+0x6a>
    571a:	40 91 42 03 	lds	r20, 0x0342	; 0x800342 <twi_timeout_us>
    571e:	50 91 43 03 	lds	r21, 0x0343	; 0x800343 <twi_timeout_us+0x1>
    5722:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <twi_timeout_us+0x2>
    5726:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <twi_timeout_us+0x3>
    572a:	45 2b       	or	r20, r21
    572c:	46 2b       	or	r20, r22
    572e:	47 2b       	or	r20, r23
    5730:	81 f3       	breq	.-32     	; 0x5712 <twi_stop+0x2a>
    5732:	00 97       	sbiw	r24, 0x00	; 0
    5734:	a1 05       	cpc	r26, r1
    5736:	b1 05       	cpc	r27, r1
    5738:	41 f0       	breq	.+16     	; 0x574a <twi_stop+0x62>
    573a:	2a e1       	ldi	r18, 0x1A	; 26
    573c:	2a 95       	dec	r18
    573e:	f1 f7       	brne	.-4      	; 0x573c <twi_stop+0x54>
    5740:	00 c0       	rjmp	.+0      	; 0x5742 <twi_stop+0x5a>
    5742:	01 97       	sbiw	r24, 0x01	; 1
    5744:	a1 09       	sbc	r26, r1
    5746:	b1 09       	sbc	r27, r1
    5748:	e4 cf       	rjmp	.-56     	; 0x5712 <twi_stop+0x2a>
    574a:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_do_reset_on_timeout>
    574e:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <twi_handleTimeout>
    5752:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_state>
    5756:	08 95       	ret

00005758 <__vector_24>:

ISR(TWI_vect)
{
    5758:	1f 92       	push	r1
    575a:	0f 92       	push	r0
    575c:	0f b6       	in	r0, 0x3f	; 63
    575e:	0f 92       	push	r0
    5760:	11 24       	eor	r1, r1
    5762:	2f 93       	push	r18
    5764:	3f 93       	push	r19
    5766:	4f 93       	push	r20
    5768:	5f 93       	push	r21
    576a:	6f 93       	push	r22
    576c:	7f 93       	push	r23
    576e:	8f 93       	push	r24
    5770:	9f 93       	push	r25
    5772:	af 93       	push	r26
    5774:	bf 93       	push	r27
    5776:	ef 93       	push	r30
    5778:	ff 93       	push	r31
  switch(TW_STATUS){
    577a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    577e:	88 7f       	andi	r24, 0xF8	; 248
    5780:	80 36       	cpi	r24, 0x60	; 96
    5782:	09 f4       	brne	.+2      	; 0x5786 <__vector_24+0x2e>
    5784:	9e c0       	rjmp	.+316    	; 0x58c2 <__vector_24+0x16a>
    5786:	78 f5       	brcc	.+94     	; 0x57e6 <__vector_24+0x8e>
    5788:	88 32       	cpi	r24, 0x28	; 40
    578a:	09 f4       	brne	.+2      	; 0x578e <__vector_24+0x36>
    578c:	5d c0       	rjmp	.+186    	; 0x5848 <__vector_24+0xf0>
    578e:	90 f4       	brcc	.+36     	; 0x57b4 <__vector_24+0x5c>
    5790:	80 31       	cpi	r24, 0x10	; 16
    5792:	09 f4       	brne	.+2      	; 0x5796 <__vector_24+0x3e>
    5794:	56 c0       	rjmp	.+172    	; 0x5842 <__vector_24+0xea>
    5796:	38 f4       	brcc	.+14     	; 0x57a6 <__vector_24+0x4e>
    5798:	88 23       	and	r24, r24
    579a:	09 f4       	brne	.+2      	; 0x579e <__vector_24+0x46>
    579c:	f5 c0       	rjmp	.+490    	; 0x5988 <__vector_24+0x230>
    579e:	88 30       	cpi	r24, 0x08	; 8
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <__vector_24+0x4c>
    57a2:	4f c0       	rjmp	.+158    	; 0x5842 <__vector_24+0xea>
    57a4:	f5 c0       	rjmp	.+490    	; 0x5990 <__vector_24+0x238>
    57a6:	88 31       	cpi	r24, 0x18	; 24
    57a8:	09 f4       	brne	.+2      	; 0x57ac <__vector_24+0x54>
    57aa:	4e c0       	rjmp	.+156    	; 0x5848 <__vector_24+0xf0>
    57ac:	80 32       	cpi	r24, 0x20	; 32
    57ae:	09 f4       	brne	.+2      	; 0x57b2 <__vector_24+0x5a>
    57b0:	5f c0       	rjmp	.+190    	; 0x5870 <__vector_24+0x118>
    57b2:	ee c0       	rjmp	.+476    	; 0x5990 <__vector_24+0x238>
    57b4:	80 34       	cpi	r24, 0x40	; 64
    57b6:	09 f4       	brne	.+2      	; 0x57ba <__vector_24+0x62>
    57b8:	6a c0       	rjmp	.+212    	; 0x588e <__vector_24+0x136>
    57ba:	58 f4       	brcc	.+22     	; 0x57d2 <__vector_24+0x7a>
    57bc:	80 33       	cpi	r24, 0x30	; 48
    57be:	09 f4       	brne	.+2      	; 0x57c2 <__vector_24+0x6a>
    57c0:	57 c0       	rjmp	.+174    	; 0x5870 <__vector_24+0x118>
    57c2:	88 33       	cpi	r24, 0x38	; 56
    57c4:	09 f0       	breq	.+2      	; 0x57c8 <__vector_24+0x70>
    57c6:	e4 c0       	rjmp	.+456    	; 0x5990 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    57c8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_error>
      twi_releaseBus();
    57cc:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <twi_releaseBus>
      break;
    57d0:	df c0       	rjmp	.+446    	; 0x5990 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    57d2:	80 35       	cpi	r24, 0x50	; 80
    57d4:	09 f4       	brne	.+2      	; 0x57d8 <__vector_24+0x80>
    57d6:	4f c0       	rjmp	.+158    	; 0x5876 <__vector_24+0x11e>
    57d8:	88 35       	cpi	r24, 0x58	; 88
    57da:	09 f4       	brne	.+2      	; 0x57de <__vector_24+0x86>
    57dc:	5d c0       	rjmp	.+186    	; 0x5898 <__vector_24+0x140>
    57de:	88 34       	cpi	r24, 0x48	; 72
    57e0:	09 f0       	breq	.+2      	; 0x57e4 <__vector_24+0x8c>
    57e2:	d6 c0       	rjmp	.+428    	; 0x5990 <__vector_24+0x238>
    57e4:	d3 c0       	rjmp	.+422    	; 0x598c <__vector_24+0x234>
    57e6:	88 39       	cpi	r24, 0x98	; 152
    57e8:	09 f4       	brne	.+2      	; 0x57ec <__vector_24+0x94>
    57ea:	c4 c0       	rjmp	.+392    	; 0x5974 <__vector_24+0x21c>
    57ec:	a8 f4       	brcc	.+42     	; 0x5818 <__vector_24+0xc0>
    57ee:	88 37       	cpi	r24, 0x78	; 120
    57f0:	09 f4       	brne	.+2      	; 0x57f4 <__vector_24+0x9c>
    57f2:	67 c0       	rjmp	.+206    	; 0x58c2 <__vector_24+0x16a>
    57f4:	38 f4       	brcc	.+14     	; 0x5804 <__vector_24+0xac>
    57f6:	88 36       	cpi	r24, 0x68	; 104
    57f8:	09 f4       	brne	.+2      	; 0x57fc <__vector_24+0xa4>
    57fa:	63 c0       	rjmp	.+198    	; 0x58c2 <__vector_24+0x16a>
    57fc:	80 37       	cpi	r24, 0x70	; 112
    57fe:	09 f4       	brne	.+2      	; 0x5802 <__vector_24+0xaa>
    5800:	60 c0       	rjmp	.+192    	; 0x58c2 <__vector_24+0x16a>
    5802:	c6 c0       	rjmp	.+396    	; 0x5990 <__vector_24+0x238>
    5804:	88 38       	cpi	r24, 0x88	; 136
    5806:	09 f4       	brne	.+2      	; 0x580a <__vector_24+0xb2>
    5808:	b5 c0       	rjmp	.+362    	; 0x5974 <__vector_24+0x21c>
    580a:	80 39       	cpi	r24, 0x90	; 144
    580c:	09 f4       	brne	.+2      	; 0x5810 <__vector_24+0xb8>
    580e:	5f c0       	rjmp	.+190    	; 0x58ce <__vector_24+0x176>
    5810:	80 38       	cpi	r24, 0x80	; 128
    5812:	09 f0       	breq	.+2      	; 0x5816 <__vector_24+0xbe>
    5814:	bd c0       	rjmp	.+378    	; 0x5990 <__vector_24+0x238>
    5816:	5b c0       	rjmp	.+182    	; 0x58ce <__vector_24+0x176>
    5818:	80 3b       	cpi	r24, 0xB0	; 176
    581a:	09 f4       	brne	.+2      	; 0x581e <__vector_24+0xc6>
    581c:	83 c0       	rjmp	.+262    	; 0x5924 <__vector_24+0x1cc>
    581e:	38 f4       	brcc	.+14     	; 0x582e <__vector_24+0xd6>
    5820:	80 3a       	cpi	r24, 0xA0	; 160
    5822:	09 f4       	brne	.+2      	; 0x5826 <__vector_24+0xce>
    5824:	66 c0       	rjmp	.+204    	; 0x58f2 <__vector_24+0x19a>
    5826:	88 3a       	cpi	r24, 0xA8	; 168
    5828:	09 f4       	brne	.+2      	; 0x582c <__vector_24+0xd4>
    582a:	7c c0       	rjmp	.+248    	; 0x5924 <__vector_24+0x1cc>
    582c:	b1 c0       	rjmp	.+354    	; 0x5990 <__vector_24+0x238>
    582e:	80 3c       	cpi	r24, 0xC0	; 192
    5830:	09 f4       	brne	.+2      	; 0x5834 <__vector_24+0xdc>
    5832:	a4 c0       	rjmp	.+328    	; 0x597c <__vector_24+0x224>
    5834:	88 3c       	cpi	r24, 0xC8	; 200
    5836:	09 f4       	brne	.+2      	; 0x583a <__vector_24+0xe2>
    5838:	a1 c0       	rjmp	.+322    	; 0x597c <__vector_24+0x224>
    583a:	88 3b       	cpi	r24, 0xB8	; 184
    583c:	09 f4       	brne	.+2      	; 0x5840 <__vector_24+0xe8>
    583e:	87 c0       	rjmp	.+270    	; 0x594e <__vector_24+0x1f6>
    5840:	a7 c0       	rjmp	.+334    	; 0x5990 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5842:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <twi_slarw>
    5846:	10 c0       	rjmp	.+32     	; 0x5868 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5848:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <twi_masterBufferIndex>
    584c:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <twi_masterBufferLength>
    5850:	98 17       	cp	r25, r24
    5852:	70 f5       	brcc	.+92     	; 0x58b0 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5854:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_masterBufferIndex>
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	8e 0f       	add	r24, r30
    585c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_masterBufferIndex>
    5860:	f0 e0       	ldi	r31, 0x00	; 0
    5862:	e4 5e       	subi	r30, 0xE4	; 228
    5864:	fc 4f       	sbci	r31, 0xFC	; 252
    5866:	80 81       	ld	r24, Z
    5868:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    586c:	85 ec       	ldi	r24, 0xC5	; 197
    586e:	83 c0       	rjmp	.+262    	; 0x5976 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5870:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_error>
    5874:	8b c0       	rjmp	.+278    	; 0x598c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5876:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_masterBufferIndex>
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	8e 0f       	add	r24, r30
    587e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_masterBufferIndex>
    5882:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	e4 5e       	subi	r30, 0xE4	; 228
    588a:	fc 4f       	sbci	r31, 0xFC	; 252
    588c:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    588e:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <twi_masterBufferIndex>
    5892:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <twi_masterBufferLength>
    5896:	6b c0       	rjmp	.+214    	; 0x596e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5898:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_masterBufferIndex>
    589c:	81 e0       	ldi	r24, 0x01	; 1
    589e:	8e 0f       	add	r24, r30
    58a0:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_masterBufferIndex>
    58a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    58a8:	f0 e0       	ldi	r31, 0x00	; 0
    58aa:	e4 5e       	subi	r30, 0xE4	; 228
    58ac:	fc 4f       	sbci	r31, 0xFC	; 252
    58ae:	80 83       	st	Z, r24
      if (twi_sendStop){
    58b0:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <twi_sendStop>
    58b4:	81 11       	cpse	r24, r1
    58b6:	6a c0       	rjmp	.+212    	; 0x598c <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    58be:	84 ea       	ldi	r24, 0xA4	; 164
    58c0:	5e c0       	rjmp	.+188    	; 0x597e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    58c2:	83 e0       	ldi	r24, 0x03	; 3
    58c4:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    58c8:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_rxBufferIndex>
    58cc:	cf cf       	rjmp	.-98     	; 0x586c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    58ce:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_rxBufferIndex>
    58d2:	80 32       	cpi	r24, 0x20	; 32
    58d4:	08 f0       	brcs	.+2      	; 0x58d8 <__vector_24+0x180>
    58d6:	4e c0       	rjmp	.+156    	; 0x5974 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    58d8:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_rxBufferIndex>
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	8e 0f       	add	r24, r30
    58e0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_rxBufferIndex>
    58e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	e8 52       	subi	r30, 0x28	; 40
    58ec:	fd 4f       	sbci	r31, 0xFD	; 253
    58ee:	80 83       	st	Z, r24
    58f0:	bd cf       	rjmp	.-134    	; 0x586c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    58f2:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    58f6:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_rxBufferIndex>
    58fa:	80 32       	cpi	r24, 0x20	; 32
    58fc:	30 f4       	brcc	.+12     	; 0x590a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    58fe:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_rxBufferIndex>
    5902:	f0 e0       	ldi	r31, 0x00	; 0
    5904:	e8 52       	subi	r30, 0x28	; 40
    5906:	fd 4f       	sbci	r31, 0xFD	; 253
    5908:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    590a:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <twi_rxBufferIndex>
    590e:	70 e0       	ldi	r23, 0x00	; 0
    5910:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <twi_onSlaveReceive>
    5914:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <twi_onSlaveReceive+0x1>
    5918:	88 ed       	ldi	r24, 0xD8	; 216
    591a:	92 e0       	ldi	r25, 0x02	; 2
    591c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    591e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_rxBufferIndex>
      break;
    5922:	36 c0       	rjmp	.+108    	; 0x5990 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5924:	84 e0       	ldi	r24, 0x04	; 4
    5926:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    592a:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    592e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5932:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveTransmit>
    5936:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveTransmit+0x1>
    593a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    593c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_txBufferLength>
    5940:	81 11       	cpse	r24, r1
    5942:	05 c0       	rjmp	.+10     	; 0x594e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5944:	81 e0       	ldi	r24, 0x01	; 1
    5946:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    594a:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    594e:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <twi_txBufferIndex>
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	8e 0f       	add	r24, r30
    5956:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <twi_txBufferIndex>
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	e6 50       	subi	r30, 0x06	; 6
    595e:	fd 4f       	sbci	r31, 0xFD	; 253
    5960:	80 81       	ld	r24, Z
    5962:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5966:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <twi_txBufferIndex>
    596a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_txBufferLength>
    596e:	98 17       	cp	r25, r24
    5970:	08 f4       	brcc	.+2      	; 0x5974 <__vector_24+0x21c>
    5972:	7c cf       	rjmp	.-264    	; 0x586c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5974:	85 e8       	ldi	r24, 0x85	; 133
    5976:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    597a:	0a c0       	rjmp	.+20     	; 0x5990 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    597c:	85 ec       	ldi	r24, 0xC5	; 197
    597e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5982:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_state>
      break;
    5986:	04 c0       	rjmp	.+8      	; 0x5990 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5988:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_error>
      twi_stop();
    598c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <twi_stop>
      break;
  }
}
    5990:	ff 91       	pop	r31
    5992:	ef 91       	pop	r30
    5994:	bf 91       	pop	r27
    5996:	af 91       	pop	r26
    5998:	9f 91       	pop	r25
    599a:	8f 91       	pop	r24
    599c:	7f 91       	pop	r23
    599e:	6f 91       	pop	r22
    59a0:	5f 91       	pop	r21
    59a2:	4f 91       	pop	r20
    59a4:	3f 91       	pop	r19
    59a6:	2f 91       	pop	r18
    59a8:	0f 90       	pop	r0
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	0f 90       	pop	r0
    59ae:	1f 90       	pop	r1
    59b0:	18 95       	reti

000059b2 <__subsf3>:
    59b2:	50 58       	subi	r21, 0x80	; 128

000059b4 <__addsf3>:
    59b4:	bb 27       	eor	r27, r27
    59b6:	aa 27       	eor	r26, r26
    59b8:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__addsf3x>
    59bc:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__fp_round>
    59c0:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__fp_pscA>
    59c4:	38 f0       	brcs	.+14     	; 0x59d4 <__addsf3+0x20>
    59c6:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <__fp_pscB>
    59ca:	20 f0       	brcs	.+8      	; 0x59d4 <__addsf3+0x20>
    59cc:	39 f4       	brne	.+14     	; 0x59dc <__addsf3+0x28>
    59ce:	9f 3f       	cpi	r25, 0xFF	; 255
    59d0:	19 f4       	brne	.+6      	; 0x59d8 <__addsf3+0x24>
    59d2:	26 f4       	brtc	.+8      	; 0x59dc <__addsf3+0x28>
    59d4:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__fp_nan>
    59d8:	0e f4       	brtc	.+2      	; 0x59dc <__addsf3+0x28>
    59da:	e0 95       	com	r30
    59dc:	e7 fb       	bst	r30, 7
    59de:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__fp_inf>

000059e2 <__addsf3x>:
    59e2:	e9 2f       	mov	r30, r25
    59e4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fp_split3>
    59e8:	58 f3       	brcs	.-42     	; 0x59c0 <__addsf3+0xc>
    59ea:	ba 17       	cp	r27, r26
    59ec:	62 07       	cpc	r22, r18
    59ee:	73 07       	cpc	r23, r19
    59f0:	84 07       	cpc	r24, r20
    59f2:	95 07       	cpc	r25, r21
    59f4:	20 f0       	brcs	.+8      	; 0x59fe <__addsf3x+0x1c>
    59f6:	79 f4       	brne	.+30     	; 0x5a16 <__addsf3x+0x34>
    59f8:	a6 f5       	brtc	.+104    	; 0x5a62 <__addsf3x+0x80>
    59fa:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <__fp_zero>
    59fe:	0e f4       	brtc	.+2      	; 0x5a02 <__addsf3x+0x20>
    5a00:	e0 95       	com	r30
    5a02:	0b 2e       	mov	r0, r27
    5a04:	ba 2f       	mov	r27, r26
    5a06:	a0 2d       	mov	r26, r0
    5a08:	0b 01       	movw	r0, r22
    5a0a:	b9 01       	movw	r22, r18
    5a0c:	90 01       	movw	r18, r0
    5a0e:	0c 01       	movw	r0, r24
    5a10:	ca 01       	movw	r24, r20
    5a12:	a0 01       	movw	r20, r0
    5a14:	11 24       	eor	r1, r1
    5a16:	ff 27       	eor	r31, r31
    5a18:	59 1b       	sub	r21, r25
    5a1a:	99 f0       	breq	.+38     	; 0x5a42 <__addsf3x+0x60>
    5a1c:	59 3f       	cpi	r21, 0xF9	; 249
    5a1e:	50 f4       	brcc	.+20     	; 0x5a34 <__addsf3x+0x52>
    5a20:	50 3e       	cpi	r21, 0xE0	; 224
    5a22:	68 f1       	brcs	.+90     	; 0x5a7e <__addsf3x+0x9c>
    5a24:	1a 16       	cp	r1, r26
    5a26:	f0 40       	sbci	r31, 0x00	; 0
    5a28:	a2 2f       	mov	r26, r18
    5a2a:	23 2f       	mov	r18, r19
    5a2c:	34 2f       	mov	r19, r20
    5a2e:	44 27       	eor	r20, r20
    5a30:	58 5f       	subi	r21, 0xF8	; 248
    5a32:	f3 cf       	rjmp	.-26     	; 0x5a1a <__addsf3x+0x38>
    5a34:	46 95       	lsr	r20
    5a36:	37 95       	ror	r19
    5a38:	27 95       	ror	r18
    5a3a:	a7 95       	ror	r26
    5a3c:	f0 40       	sbci	r31, 0x00	; 0
    5a3e:	53 95       	inc	r21
    5a40:	c9 f7       	brne	.-14     	; 0x5a34 <__addsf3x+0x52>
    5a42:	7e f4       	brtc	.+30     	; 0x5a62 <__addsf3x+0x80>
    5a44:	1f 16       	cp	r1, r31
    5a46:	ba 0b       	sbc	r27, r26
    5a48:	62 0b       	sbc	r22, r18
    5a4a:	73 0b       	sbc	r23, r19
    5a4c:	84 0b       	sbc	r24, r20
    5a4e:	ba f0       	brmi	.+46     	; 0x5a7e <__addsf3x+0x9c>
    5a50:	91 50       	subi	r25, 0x01	; 1
    5a52:	a1 f0       	breq	.+40     	; 0x5a7c <__addsf3x+0x9a>
    5a54:	ff 0f       	add	r31, r31
    5a56:	bb 1f       	adc	r27, r27
    5a58:	66 1f       	adc	r22, r22
    5a5a:	77 1f       	adc	r23, r23
    5a5c:	88 1f       	adc	r24, r24
    5a5e:	c2 f7       	brpl	.-16     	; 0x5a50 <__addsf3x+0x6e>
    5a60:	0e c0       	rjmp	.+28     	; 0x5a7e <__addsf3x+0x9c>
    5a62:	ba 0f       	add	r27, r26
    5a64:	62 1f       	adc	r22, r18
    5a66:	73 1f       	adc	r23, r19
    5a68:	84 1f       	adc	r24, r20
    5a6a:	48 f4       	brcc	.+18     	; 0x5a7e <__addsf3x+0x9c>
    5a6c:	87 95       	ror	r24
    5a6e:	77 95       	ror	r23
    5a70:	67 95       	ror	r22
    5a72:	b7 95       	ror	r27
    5a74:	f7 95       	ror	r31
    5a76:	9e 3f       	cpi	r25, 0xFE	; 254
    5a78:	08 f0       	brcs	.+2      	; 0x5a7c <__addsf3x+0x9a>
    5a7a:	b0 cf       	rjmp	.-160    	; 0x59dc <__addsf3+0x28>
    5a7c:	93 95       	inc	r25
    5a7e:	88 0f       	add	r24, r24
    5a80:	08 f0       	brcs	.+2      	; 0x5a84 <__addsf3x+0xa2>
    5a82:	99 27       	eor	r25, r25
    5a84:	ee 0f       	add	r30, r30
    5a86:	97 95       	ror	r25
    5a88:	87 95       	ror	r24
    5a8a:	08 95       	ret

00005a8c <__cmpsf2>:
    5a8c:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__fp_cmp>
    5a90:	08 f4       	brcc	.+2      	; 0x5a94 <__cmpsf2+0x8>
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	08 95       	ret

00005a96 <__divsf3>:
    5a96:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <__divsf3x>
    5a9a:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__fp_round>
    5a9e:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <__fp_pscB>
    5aa2:	58 f0       	brcs	.+22     	; 0x5aba <__divsf3+0x24>
    5aa4:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__fp_pscA>
    5aa8:	40 f0       	brcs	.+16     	; 0x5aba <__divsf3+0x24>
    5aaa:	29 f4       	brne	.+10     	; 0x5ab6 <__divsf3+0x20>
    5aac:	5f 3f       	cpi	r21, 0xFF	; 255
    5aae:	29 f0       	breq	.+10     	; 0x5aba <__divsf3+0x24>
    5ab0:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__fp_inf>
    5ab4:	51 11       	cpse	r21, r1
    5ab6:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__fp_szero>
    5aba:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__fp_nan>

00005abe <__divsf3x>:
    5abe:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fp_split3>
    5ac2:	68 f3       	brcs	.-38     	; 0x5a9e <__divsf3+0x8>

00005ac4 <__divsf3_pse>:
    5ac4:	99 23       	and	r25, r25
    5ac6:	b1 f3       	breq	.-20     	; 0x5ab4 <__divsf3+0x1e>
    5ac8:	55 23       	and	r21, r21
    5aca:	91 f3       	breq	.-28     	; 0x5ab0 <__divsf3+0x1a>
    5acc:	95 1b       	sub	r25, r21
    5ace:	55 0b       	sbc	r21, r21
    5ad0:	bb 27       	eor	r27, r27
    5ad2:	aa 27       	eor	r26, r26
    5ad4:	62 17       	cp	r22, r18
    5ad6:	73 07       	cpc	r23, r19
    5ad8:	84 07       	cpc	r24, r20
    5ada:	38 f0       	brcs	.+14     	; 0x5aea <__divsf3_pse+0x26>
    5adc:	9f 5f       	subi	r25, 0xFF	; 255
    5ade:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae0:	22 0f       	add	r18, r18
    5ae2:	33 1f       	adc	r19, r19
    5ae4:	44 1f       	adc	r20, r20
    5ae6:	aa 1f       	adc	r26, r26
    5ae8:	a9 f3       	breq	.-22     	; 0x5ad4 <__divsf3_pse+0x10>
    5aea:	35 d0       	rcall	.+106    	; 0x5b56 <__divsf3_pse+0x92>
    5aec:	0e 2e       	mov	r0, r30
    5aee:	3a f0       	brmi	.+14     	; 0x5afe <__divsf3_pse+0x3a>
    5af0:	e0 e8       	ldi	r30, 0x80	; 128
    5af2:	32 d0       	rcall	.+100    	; 0x5b58 <__divsf3_pse+0x94>
    5af4:	91 50       	subi	r25, 0x01	; 1
    5af6:	50 40       	sbci	r21, 0x00	; 0
    5af8:	e6 95       	lsr	r30
    5afa:	00 1c       	adc	r0, r0
    5afc:	ca f7       	brpl	.-14     	; 0x5af0 <__divsf3_pse+0x2c>
    5afe:	2b d0       	rcall	.+86     	; 0x5b56 <__divsf3_pse+0x92>
    5b00:	fe 2f       	mov	r31, r30
    5b02:	29 d0       	rcall	.+82     	; 0x5b56 <__divsf3_pse+0x92>
    5b04:	66 0f       	add	r22, r22
    5b06:	77 1f       	adc	r23, r23
    5b08:	88 1f       	adc	r24, r24
    5b0a:	bb 1f       	adc	r27, r27
    5b0c:	26 17       	cp	r18, r22
    5b0e:	37 07       	cpc	r19, r23
    5b10:	48 07       	cpc	r20, r24
    5b12:	ab 07       	cpc	r26, r27
    5b14:	b0 e8       	ldi	r27, 0x80	; 128
    5b16:	09 f0       	breq	.+2      	; 0x5b1a <__divsf3_pse+0x56>
    5b18:	bb 0b       	sbc	r27, r27
    5b1a:	80 2d       	mov	r24, r0
    5b1c:	bf 01       	movw	r22, r30
    5b1e:	ff 27       	eor	r31, r31
    5b20:	93 58       	subi	r25, 0x83	; 131
    5b22:	5f 4f       	sbci	r21, 0xFF	; 255
    5b24:	3a f0       	brmi	.+14     	; 0x5b34 <__divsf3_pse+0x70>
    5b26:	9e 3f       	cpi	r25, 0xFE	; 254
    5b28:	51 05       	cpc	r21, r1
    5b2a:	78 f0       	brcs	.+30     	; 0x5b4a <__divsf3_pse+0x86>
    5b2c:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__fp_inf>
    5b30:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__fp_szero>
    5b34:	5f 3f       	cpi	r21, 0xFF	; 255
    5b36:	e4 f3       	brlt	.-8      	; 0x5b30 <__divsf3_pse+0x6c>
    5b38:	98 3e       	cpi	r25, 0xE8	; 232
    5b3a:	d4 f3       	brlt	.-12     	; 0x5b30 <__divsf3_pse+0x6c>
    5b3c:	86 95       	lsr	r24
    5b3e:	77 95       	ror	r23
    5b40:	67 95       	ror	r22
    5b42:	b7 95       	ror	r27
    5b44:	f7 95       	ror	r31
    5b46:	9f 5f       	subi	r25, 0xFF	; 255
    5b48:	c9 f7       	brne	.-14     	; 0x5b3c <__divsf3_pse+0x78>
    5b4a:	88 0f       	add	r24, r24
    5b4c:	91 1d       	adc	r25, r1
    5b4e:	96 95       	lsr	r25
    5b50:	87 95       	ror	r24
    5b52:	97 f9       	bld	r25, 7
    5b54:	08 95       	ret
    5b56:	e1 e0       	ldi	r30, 0x01	; 1
    5b58:	66 0f       	add	r22, r22
    5b5a:	77 1f       	adc	r23, r23
    5b5c:	88 1f       	adc	r24, r24
    5b5e:	bb 1f       	adc	r27, r27
    5b60:	62 17       	cp	r22, r18
    5b62:	73 07       	cpc	r23, r19
    5b64:	84 07       	cpc	r24, r20
    5b66:	ba 07       	cpc	r27, r26
    5b68:	20 f0       	brcs	.+8      	; 0x5b72 <__divsf3_pse+0xae>
    5b6a:	62 1b       	sub	r22, r18
    5b6c:	73 0b       	sbc	r23, r19
    5b6e:	84 0b       	sbc	r24, r20
    5b70:	ba 0b       	sbc	r27, r26
    5b72:	ee 1f       	adc	r30, r30
    5b74:	88 f7       	brcc	.-30     	; 0x5b58 <__divsf3_pse+0x94>
    5b76:	e0 95       	com	r30
    5b78:	08 95       	ret

00005b7a <__fixunssfsi>:
    5b7a:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <__fp_splitA>
    5b7e:	88 f0       	brcs	.+34     	; 0x5ba2 <__fixunssfsi+0x28>
    5b80:	9f 57       	subi	r25, 0x7F	; 127
    5b82:	98 f0       	brcs	.+38     	; 0x5baa <__fixunssfsi+0x30>
    5b84:	b9 2f       	mov	r27, r25
    5b86:	99 27       	eor	r25, r25
    5b88:	b7 51       	subi	r27, 0x17	; 23
    5b8a:	b0 f0       	brcs	.+44     	; 0x5bb8 <__fixunssfsi+0x3e>
    5b8c:	e1 f0       	breq	.+56     	; 0x5bc6 <__fixunssfsi+0x4c>
    5b8e:	66 0f       	add	r22, r22
    5b90:	77 1f       	adc	r23, r23
    5b92:	88 1f       	adc	r24, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	1a f0       	brmi	.+6      	; 0x5b9e <__fixunssfsi+0x24>
    5b98:	ba 95       	dec	r27
    5b9a:	c9 f7       	brne	.-14     	; 0x5b8e <__fixunssfsi+0x14>
    5b9c:	14 c0       	rjmp	.+40     	; 0x5bc6 <__fixunssfsi+0x4c>
    5b9e:	b1 30       	cpi	r27, 0x01	; 1
    5ba0:	91 f0       	breq	.+36     	; 0x5bc6 <__fixunssfsi+0x4c>
    5ba2:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__fp_zero>
    5ba6:	b1 e0       	ldi	r27, 0x01	; 1
    5ba8:	08 95       	ret
    5baa:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <__fp_zero>
    5bae:	67 2f       	mov	r22, r23
    5bb0:	78 2f       	mov	r23, r24
    5bb2:	88 27       	eor	r24, r24
    5bb4:	b8 5f       	subi	r27, 0xF8	; 248
    5bb6:	39 f0       	breq	.+14     	; 0x5bc6 <__fixunssfsi+0x4c>
    5bb8:	b9 3f       	cpi	r27, 0xF9	; 249
    5bba:	cc f3       	brlt	.-14     	; 0x5bae <__fixunssfsi+0x34>
    5bbc:	86 95       	lsr	r24
    5bbe:	77 95       	ror	r23
    5bc0:	67 95       	ror	r22
    5bc2:	b3 95       	inc	r27
    5bc4:	d9 f7       	brne	.-10     	; 0x5bbc <__fixunssfsi+0x42>
    5bc6:	3e f4       	brtc	.+14     	; 0x5bd6 <__fixunssfsi+0x5c>
    5bc8:	90 95       	com	r25
    5bca:	80 95       	com	r24
    5bcc:	70 95       	com	r23
    5bce:	61 95       	neg	r22
    5bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd6:	08 95       	ret

00005bd8 <__floatunsisf>:
    5bd8:	e8 94       	clt
    5bda:	09 c0       	rjmp	.+18     	; 0x5bee <__floatsisf+0x12>

00005bdc <__floatsisf>:
    5bdc:	97 fb       	bst	r25, 7
    5bde:	3e f4       	brtc	.+14     	; 0x5bee <__floatsisf+0x12>
    5be0:	90 95       	com	r25
    5be2:	80 95       	com	r24
    5be4:	70 95       	com	r23
    5be6:	61 95       	neg	r22
    5be8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bea:	8f 4f       	sbci	r24, 0xFF	; 255
    5bec:	9f 4f       	sbci	r25, 0xFF	; 255
    5bee:	99 23       	and	r25, r25
    5bf0:	a9 f0       	breq	.+42     	; 0x5c1c <__floatsisf+0x40>
    5bf2:	f9 2f       	mov	r31, r25
    5bf4:	96 e9       	ldi	r25, 0x96	; 150
    5bf6:	bb 27       	eor	r27, r27
    5bf8:	93 95       	inc	r25
    5bfa:	f6 95       	lsr	r31
    5bfc:	87 95       	ror	r24
    5bfe:	77 95       	ror	r23
    5c00:	67 95       	ror	r22
    5c02:	b7 95       	ror	r27
    5c04:	f1 11       	cpse	r31, r1
    5c06:	f8 cf       	rjmp	.-16     	; 0x5bf8 <__floatsisf+0x1c>
    5c08:	fa f4       	brpl	.+62     	; 0x5c48 <__floatsisf+0x6c>
    5c0a:	bb 0f       	add	r27, r27
    5c0c:	11 f4       	brne	.+4      	; 0x5c12 <__floatsisf+0x36>
    5c0e:	60 ff       	sbrs	r22, 0
    5c10:	1b c0       	rjmp	.+54     	; 0x5c48 <__floatsisf+0x6c>
    5c12:	6f 5f       	subi	r22, 0xFF	; 255
    5c14:	7f 4f       	sbci	r23, 0xFF	; 255
    5c16:	8f 4f       	sbci	r24, 0xFF	; 255
    5c18:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1a:	16 c0       	rjmp	.+44     	; 0x5c48 <__floatsisf+0x6c>
    5c1c:	88 23       	and	r24, r24
    5c1e:	11 f0       	breq	.+4      	; 0x5c24 <__floatsisf+0x48>
    5c20:	96 e9       	ldi	r25, 0x96	; 150
    5c22:	11 c0       	rjmp	.+34     	; 0x5c46 <__floatsisf+0x6a>
    5c24:	77 23       	and	r23, r23
    5c26:	21 f0       	breq	.+8      	; 0x5c30 <__floatsisf+0x54>
    5c28:	9e e8       	ldi	r25, 0x8E	; 142
    5c2a:	87 2f       	mov	r24, r23
    5c2c:	76 2f       	mov	r23, r22
    5c2e:	05 c0       	rjmp	.+10     	; 0x5c3a <__floatsisf+0x5e>
    5c30:	66 23       	and	r22, r22
    5c32:	71 f0       	breq	.+28     	; 0x5c50 <__floatsisf+0x74>
    5c34:	96 e8       	ldi	r25, 0x86	; 134
    5c36:	86 2f       	mov	r24, r22
    5c38:	70 e0       	ldi	r23, 0x00	; 0
    5c3a:	60 e0       	ldi	r22, 0x00	; 0
    5c3c:	2a f0       	brmi	.+10     	; 0x5c48 <__floatsisf+0x6c>
    5c3e:	9a 95       	dec	r25
    5c40:	66 0f       	add	r22, r22
    5c42:	77 1f       	adc	r23, r23
    5c44:	88 1f       	adc	r24, r24
    5c46:	da f7       	brpl	.-10     	; 0x5c3e <__floatsisf+0x62>
    5c48:	88 0f       	add	r24, r24
    5c4a:	96 95       	lsr	r25
    5c4c:	87 95       	ror	r24
    5c4e:	97 f9       	bld	r25, 7
    5c50:	08 95       	ret

00005c52 <__fp_cmp>:
    5c52:	99 0f       	add	r25, r25
    5c54:	00 08       	sbc	r0, r0
    5c56:	55 0f       	add	r21, r21
    5c58:	aa 0b       	sbc	r26, r26
    5c5a:	e0 e8       	ldi	r30, 0x80	; 128
    5c5c:	fe ef       	ldi	r31, 0xFE	; 254
    5c5e:	16 16       	cp	r1, r22
    5c60:	17 06       	cpc	r1, r23
    5c62:	e8 07       	cpc	r30, r24
    5c64:	f9 07       	cpc	r31, r25
    5c66:	c0 f0       	brcs	.+48     	; 0x5c98 <__fp_cmp+0x46>
    5c68:	12 16       	cp	r1, r18
    5c6a:	13 06       	cpc	r1, r19
    5c6c:	e4 07       	cpc	r30, r20
    5c6e:	f5 07       	cpc	r31, r21
    5c70:	98 f0       	brcs	.+38     	; 0x5c98 <__fp_cmp+0x46>
    5c72:	62 1b       	sub	r22, r18
    5c74:	73 0b       	sbc	r23, r19
    5c76:	84 0b       	sbc	r24, r20
    5c78:	95 0b       	sbc	r25, r21
    5c7a:	39 f4       	brne	.+14     	; 0x5c8a <__fp_cmp+0x38>
    5c7c:	0a 26       	eor	r0, r26
    5c7e:	61 f0       	breq	.+24     	; 0x5c98 <__fp_cmp+0x46>
    5c80:	23 2b       	or	r18, r19
    5c82:	24 2b       	or	r18, r20
    5c84:	25 2b       	or	r18, r21
    5c86:	21 f4       	brne	.+8      	; 0x5c90 <__fp_cmp+0x3e>
    5c88:	08 95       	ret
    5c8a:	0a 26       	eor	r0, r26
    5c8c:	09 f4       	brne	.+2      	; 0x5c90 <__fp_cmp+0x3e>
    5c8e:	a1 40       	sbci	r26, 0x01	; 1
    5c90:	a6 95       	lsr	r26
    5c92:	8f ef       	ldi	r24, 0xFF	; 255
    5c94:	81 1d       	adc	r24, r1
    5c96:	81 1d       	adc	r24, r1
    5c98:	08 95       	ret

00005c9a <__fp_inf>:
    5c9a:	97 f9       	bld	r25, 7
    5c9c:	9f 67       	ori	r25, 0x7F	; 127
    5c9e:	80 e8       	ldi	r24, 0x80	; 128
    5ca0:	70 e0       	ldi	r23, 0x00	; 0
    5ca2:	60 e0       	ldi	r22, 0x00	; 0
    5ca4:	08 95       	ret

00005ca6 <__fp_nan>:
    5ca6:	9f ef       	ldi	r25, 0xFF	; 255
    5ca8:	80 ec       	ldi	r24, 0xC0	; 192
    5caa:	08 95       	ret

00005cac <__fp_pscA>:
    5cac:	00 24       	eor	r0, r0
    5cae:	0a 94       	dec	r0
    5cb0:	16 16       	cp	r1, r22
    5cb2:	17 06       	cpc	r1, r23
    5cb4:	18 06       	cpc	r1, r24
    5cb6:	09 06       	cpc	r0, r25
    5cb8:	08 95       	ret

00005cba <__fp_pscB>:
    5cba:	00 24       	eor	r0, r0
    5cbc:	0a 94       	dec	r0
    5cbe:	12 16       	cp	r1, r18
    5cc0:	13 06       	cpc	r1, r19
    5cc2:	14 06       	cpc	r1, r20
    5cc4:	05 06       	cpc	r0, r21
    5cc6:	08 95       	ret

00005cc8 <__fp_round>:
    5cc8:	09 2e       	mov	r0, r25
    5cca:	03 94       	inc	r0
    5ccc:	00 0c       	add	r0, r0
    5cce:	11 f4       	brne	.+4      	; 0x5cd4 <__fp_round+0xc>
    5cd0:	88 23       	and	r24, r24
    5cd2:	52 f0       	brmi	.+20     	; 0x5ce8 <__fp_round+0x20>
    5cd4:	bb 0f       	add	r27, r27
    5cd6:	40 f4       	brcc	.+16     	; 0x5ce8 <__fp_round+0x20>
    5cd8:	bf 2b       	or	r27, r31
    5cda:	11 f4       	brne	.+4      	; 0x5ce0 <__fp_round+0x18>
    5cdc:	60 ff       	sbrs	r22, 0
    5cde:	04 c0       	rjmp	.+8      	; 0x5ce8 <__fp_round+0x20>
    5ce0:	6f 5f       	subi	r22, 0xFF	; 255
    5ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce8:	08 95       	ret

00005cea <__fp_split3>:
    5cea:	57 fd       	sbrc	r21, 7
    5cec:	90 58       	subi	r25, 0x80	; 128
    5cee:	44 0f       	add	r20, r20
    5cf0:	55 1f       	adc	r21, r21
    5cf2:	59 f0       	breq	.+22     	; 0x5d0a <__fp_splitA+0x10>
    5cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cf6:	71 f0       	breq	.+28     	; 0x5d14 <__fp_splitA+0x1a>
    5cf8:	47 95       	ror	r20

00005cfa <__fp_splitA>:
    5cfa:	88 0f       	add	r24, r24
    5cfc:	97 fb       	bst	r25, 7
    5cfe:	99 1f       	adc	r25, r25
    5d00:	61 f0       	breq	.+24     	; 0x5d1a <__fp_splitA+0x20>
    5d02:	9f 3f       	cpi	r25, 0xFF	; 255
    5d04:	79 f0       	breq	.+30     	; 0x5d24 <__fp_splitA+0x2a>
    5d06:	87 95       	ror	r24
    5d08:	08 95       	ret
    5d0a:	12 16       	cp	r1, r18
    5d0c:	13 06       	cpc	r1, r19
    5d0e:	14 06       	cpc	r1, r20
    5d10:	55 1f       	adc	r21, r21
    5d12:	f2 cf       	rjmp	.-28     	; 0x5cf8 <__fp_split3+0xe>
    5d14:	46 95       	lsr	r20
    5d16:	f1 df       	rcall	.-30     	; 0x5cfa <__fp_splitA>
    5d18:	08 c0       	rjmp	.+16     	; 0x5d2a <__fp_splitA+0x30>
    5d1a:	16 16       	cp	r1, r22
    5d1c:	17 06       	cpc	r1, r23
    5d1e:	18 06       	cpc	r1, r24
    5d20:	99 1f       	adc	r25, r25
    5d22:	f1 cf       	rjmp	.-30     	; 0x5d06 <__fp_splitA+0xc>
    5d24:	86 95       	lsr	r24
    5d26:	71 05       	cpc	r23, r1
    5d28:	61 05       	cpc	r22, r1
    5d2a:	08 94       	sec
    5d2c:	08 95       	ret

00005d2e <__fp_zero>:
    5d2e:	e8 94       	clt

00005d30 <__fp_szero>:
    5d30:	bb 27       	eor	r27, r27
    5d32:	66 27       	eor	r22, r22
    5d34:	77 27       	eor	r23, r23
    5d36:	cb 01       	movw	r24, r22
    5d38:	97 f9       	bld	r25, 7
    5d3a:	08 95       	ret

00005d3c <__gesf2>:
    5d3c:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__fp_cmp>
    5d40:	08 f4       	brcc	.+2      	; 0x5d44 <__gesf2+0x8>
    5d42:	8f ef       	ldi	r24, 0xFF	; 255
    5d44:	08 95       	ret

00005d46 <__mulsf3>:
    5d46:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <__mulsf3x>
    5d4a:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__fp_round>
    5d4e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__fp_pscA>
    5d52:	38 f0       	brcs	.+14     	; 0x5d62 <__mulsf3+0x1c>
    5d54:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <__fp_pscB>
    5d58:	20 f0       	brcs	.+8      	; 0x5d62 <__mulsf3+0x1c>
    5d5a:	95 23       	and	r25, r21
    5d5c:	11 f0       	breq	.+4      	; 0x5d62 <__mulsf3+0x1c>
    5d5e:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__fp_inf>
    5d62:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__fp_nan>
    5d66:	11 24       	eor	r1, r1
    5d68:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__fp_szero>

00005d6c <__mulsf3x>:
    5d6c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fp_split3>
    5d70:	70 f3       	brcs	.-36     	; 0x5d4e <__mulsf3+0x8>

00005d72 <__mulsf3_pse>:
    5d72:	95 9f       	mul	r25, r21
    5d74:	c1 f3       	breq	.-16     	; 0x5d66 <__mulsf3+0x20>
    5d76:	95 0f       	add	r25, r21
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	55 1f       	adc	r21, r21
    5d7c:	62 9f       	mul	r22, r18
    5d7e:	f0 01       	movw	r30, r0
    5d80:	72 9f       	mul	r23, r18
    5d82:	bb 27       	eor	r27, r27
    5d84:	f0 0d       	add	r31, r0
    5d86:	b1 1d       	adc	r27, r1
    5d88:	63 9f       	mul	r22, r19
    5d8a:	aa 27       	eor	r26, r26
    5d8c:	f0 0d       	add	r31, r0
    5d8e:	b1 1d       	adc	r27, r1
    5d90:	aa 1f       	adc	r26, r26
    5d92:	64 9f       	mul	r22, r20
    5d94:	66 27       	eor	r22, r22
    5d96:	b0 0d       	add	r27, r0
    5d98:	a1 1d       	adc	r26, r1
    5d9a:	66 1f       	adc	r22, r22
    5d9c:	82 9f       	mul	r24, r18
    5d9e:	22 27       	eor	r18, r18
    5da0:	b0 0d       	add	r27, r0
    5da2:	a1 1d       	adc	r26, r1
    5da4:	62 1f       	adc	r22, r18
    5da6:	73 9f       	mul	r23, r19
    5da8:	b0 0d       	add	r27, r0
    5daa:	a1 1d       	adc	r26, r1
    5dac:	62 1f       	adc	r22, r18
    5dae:	83 9f       	mul	r24, r19
    5db0:	a0 0d       	add	r26, r0
    5db2:	61 1d       	adc	r22, r1
    5db4:	22 1f       	adc	r18, r18
    5db6:	74 9f       	mul	r23, r20
    5db8:	33 27       	eor	r19, r19
    5dba:	a0 0d       	add	r26, r0
    5dbc:	61 1d       	adc	r22, r1
    5dbe:	23 1f       	adc	r18, r19
    5dc0:	84 9f       	mul	r24, r20
    5dc2:	60 0d       	add	r22, r0
    5dc4:	21 1d       	adc	r18, r1
    5dc6:	82 2f       	mov	r24, r18
    5dc8:	76 2f       	mov	r23, r22
    5dca:	6a 2f       	mov	r22, r26
    5dcc:	11 24       	eor	r1, r1
    5dce:	9f 57       	subi	r25, 0x7F	; 127
    5dd0:	50 40       	sbci	r21, 0x00	; 0
    5dd2:	9a f0       	brmi	.+38     	; 0x5dfa <__mulsf3_pse+0x88>
    5dd4:	f1 f0       	breq	.+60     	; 0x5e12 <__mulsf3_pse+0xa0>
    5dd6:	88 23       	and	r24, r24
    5dd8:	4a f0       	brmi	.+18     	; 0x5dec <__mulsf3_pse+0x7a>
    5dda:	ee 0f       	add	r30, r30
    5ddc:	ff 1f       	adc	r31, r31
    5dde:	bb 1f       	adc	r27, r27
    5de0:	66 1f       	adc	r22, r22
    5de2:	77 1f       	adc	r23, r23
    5de4:	88 1f       	adc	r24, r24
    5de6:	91 50       	subi	r25, 0x01	; 1
    5de8:	50 40       	sbci	r21, 0x00	; 0
    5dea:	a9 f7       	brne	.-22     	; 0x5dd6 <__mulsf3_pse+0x64>
    5dec:	9e 3f       	cpi	r25, 0xFE	; 254
    5dee:	51 05       	cpc	r21, r1
    5df0:	80 f0       	brcs	.+32     	; 0x5e12 <__mulsf3_pse+0xa0>
    5df2:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__fp_inf>
    5df6:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__fp_szero>
    5dfa:	5f 3f       	cpi	r21, 0xFF	; 255
    5dfc:	e4 f3       	brlt	.-8      	; 0x5df6 <__mulsf3_pse+0x84>
    5dfe:	98 3e       	cpi	r25, 0xE8	; 232
    5e00:	d4 f3       	brlt	.-12     	; 0x5df6 <__mulsf3_pse+0x84>
    5e02:	86 95       	lsr	r24
    5e04:	77 95       	ror	r23
    5e06:	67 95       	ror	r22
    5e08:	b7 95       	ror	r27
    5e0a:	f7 95       	ror	r31
    5e0c:	e7 95       	ror	r30
    5e0e:	9f 5f       	subi	r25, 0xFF	; 255
    5e10:	c1 f7       	brne	.-16     	; 0x5e02 <__mulsf3_pse+0x90>
    5e12:	fe 2b       	or	r31, r30
    5e14:	88 0f       	add	r24, r24
    5e16:	91 1d       	adc	r25, r1
    5e18:	96 95       	lsr	r25
    5e1a:	87 95       	ror	r24
    5e1c:	97 f9       	bld	r25, 7
    5e1e:	08 95       	ret

00005e20 <__unordsf2>:
    5e20:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__fp_cmp>
    5e24:	88 0b       	sbc	r24, r24
    5e26:	99 0b       	sbc	r25, r25
    5e28:	08 95       	ret

00005e2a <__udivmodsi4>:
    5e2a:	a1 e2       	ldi	r26, 0x21	; 33
    5e2c:	1a 2e       	mov	r1, r26
    5e2e:	aa 1b       	sub	r26, r26
    5e30:	bb 1b       	sub	r27, r27
    5e32:	fd 01       	movw	r30, r26
    5e34:	0d c0       	rjmp	.+26     	; 0x5e50 <__udivmodsi4_ep>

00005e36 <__udivmodsi4_loop>:
    5e36:	aa 1f       	adc	r26, r26
    5e38:	bb 1f       	adc	r27, r27
    5e3a:	ee 1f       	adc	r30, r30
    5e3c:	ff 1f       	adc	r31, r31
    5e3e:	a2 17       	cp	r26, r18
    5e40:	b3 07       	cpc	r27, r19
    5e42:	e4 07       	cpc	r30, r20
    5e44:	f5 07       	cpc	r31, r21
    5e46:	20 f0       	brcs	.+8      	; 0x5e50 <__udivmodsi4_ep>
    5e48:	a2 1b       	sub	r26, r18
    5e4a:	b3 0b       	sbc	r27, r19
    5e4c:	e4 0b       	sbc	r30, r20
    5e4e:	f5 0b       	sbc	r31, r21

00005e50 <__udivmodsi4_ep>:
    5e50:	66 1f       	adc	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	88 1f       	adc	r24, r24
    5e56:	99 1f       	adc	r25, r25
    5e58:	1a 94       	dec	r1
    5e5a:	69 f7       	brne	.-38     	; 0x5e36 <__udivmodsi4_loop>
    5e5c:	60 95       	com	r22
    5e5e:	70 95       	com	r23
    5e60:	80 95       	com	r24
    5e62:	90 95       	com	r25
    5e64:	9b 01       	movw	r18, r22
    5e66:	ac 01       	movw	r20, r24
    5e68:	bd 01       	movw	r22, r26
    5e6a:	cf 01       	movw	r24, r30
    5e6c:	08 95       	ret

00005e6e <__divmodsi4>:
    5e6e:	05 2e       	mov	r0, r21
    5e70:	97 fb       	bst	r25, 7
    5e72:	1e f4       	brtc	.+6      	; 0x5e7a <__divmodsi4+0xc>
    5e74:	00 94       	com	r0
    5e76:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <__negsi2>
    5e7a:	57 fd       	sbrc	r21, 7
    5e7c:	07 d0       	rcall	.+14     	; 0x5e8c <__divmodsi4_neg2>
    5e7e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__udivmodsi4>
    5e82:	07 fc       	sbrc	r0, 7
    5e84:	03 d0       	rcall	.+6      	; 0x5e8c <__divmodsi4_neg2>
    5e86:	4e f4       	brtc	.+18     	; 0x5e9a <__divmodsi4_exit>
    5e88:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__negsi2>

00005e8c <__divmodsi4_neg2>:
    5e8c:	50 95       	com	r21
    5e8e:	40 95       	com	r20
    5e90:	30 95       	com	r19
    5e92:	21 95       	neg	r18
    5e94:	3f 4f       	sbci	r19, 0xFF	; 255
    5e96:	4f 4f       	sbci	r20, 0xFF	; 255
    5e98:	5f 4f       	sbci	r21, 0xFF	; 255

00005e9a <__divmodsi4_exit>:
    5e9a:	08 95       	ret

00005e9c <__negsi2>:
    5e9c:	90 95       	com	r25
    5e9e:	80 95       	com	r24
    5ea0:	70 95       	com	r23
    5ea2:	61 95       	neg	r22
    5ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eaa:	08 95       	ret

00005eac <__mulhisi3>:
    5eac:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__umulhisi3>
    5eb0:	33 23       	and	r19, r19
    5eb2:	12 f4       	brpl	.+4      	; 0x5eb8 <__mulhisi3+0xc>
    5eb4:	8a 1b       	sub	r24, r26
    5eb6:	9b 0b       	sbc	r25, r27
    5eb8:	0c 94 6f 2f 	jmp	0x5ede	; 0x5ede <__usmulhisi3_tail>

00005ebc <__umulhisi3>:
    5ebc:	a2 9f       	mul	r26, r18
    5ebe:	b0 01       	movw	r22, r0
    5ec0:	b3 9f       	mul	r27, r19
    5ec2:	c0 01       	movw	r24, r0
    5ec4:	a3 9f       	mul	r26, r19
    5ec6:	70 0d       	add	r23, r0
    5ec8:	81 1d       	adc	r24, r1
    5eca:	11 24       	eor	r1, r1
    5ecc:	91 1d       	adc	r25, r1
    5ece:	b2 9f       	mul	r27, r18
    5ed0:	70 0d       	add	r23, r0
    5ed2:	81 1d       	adc	r24, r1
    5ed4:	11 24       	eor	r1, r1
    5ed6:	91 1d       	adc	r25, r1
    5ed8:	08 95       	ret

00005eda <__usmulhisi3>:
    5eda:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__umulhisi3>

00005ede <__usmulhisi3_tail>:
    5ede:	b7 ff       	sbrs	r27, 7
    5ee0:	08 95       	ret
    5ee2:	82 1b       	sub	r24, r18
    5ee4:	93 0b       	sbc	r25, r19
    5ee6:	08 95       	ret

00005ee8 <__muluhisi3>:
    5ee8:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__umulhisi3>
    5eec:	a5 9f       	mul	r26, r21
    5eee:	90 0d       	add	r25, r0
    5ef0:	b4 9f       	mul	r27, r20
    5ef2:	90 0d       	add	r25, r0
    5ef4:	a4 9f       	mul	r26, r20
    5ef6:	80 0d       	add	r24, r0
    5ef8:	91 1d       	adc	r25, r1
    5efa:	11 24       	eor	r1, r1
    5efc:	08 95       	ret

00005efe <__tablejump2__>:
    5efe:	ee 0f       	add	r30, r30
    5f00:	ff 1f       	adc	r31, r31
    5f02:	05 90       	lpm	r0, Z+
    5f04:	f4 91       	lpm	r31, Z
    5f06:	e0 2d       	mov	r30, r0
    5f08:	09 94       	ijmp

00005f0a <malloc>:
    5f0a:	0f 93       	push	r16
    5f0c:	1f 93       	push	r17
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	82 30       	cpi	r24, 0x02	; 2
    5f14:	91 05       	cpc	r25, r1
    5f16:	10 f4       	brcc	.+4      	; 0x5f1c <malloc+0x12>
    5f18:	82 e0       	ldi	r24, 0x02	; 2
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <__flp>
    5f20:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <__flp+0x1>
    5f24:	20 e0       	ldi	r18, 0x00	; 0
    5f26:	30 e0       	ldi	r19, 0x00	; 0
    5f28:	a0 e0       	ldi	r26, 0x00	; 0
    5f2a:	b0 e0       	ldi	r27, 0x00	; 0
    5f2c:	30 97       	sbiw	r30, 0x00	; 0
    5f2e:	19 f1       	breq	.+70     	; 0x5f76 <malloc+0x6c>
    5f30:	40 81       	ld	r20, Z
    5f32:	51 81       	ldd	r21, Z+1	; 0x01
    5f34:	02 81       	ldd	r16, Z+2	; 0x02
    5f36:	13 81       	ldd	r17, Z+3	; 0x03
    5f38:	48 17       	cp	r20, r24
    5f3a:	59 07       	cpc	r21, r25
    5f3c:	c8 f0       	brcs	.+50     	; 0x5f70 <malloc+0x66>
    5f3e:	84 17       	cp	r24, r20
    5f40:	95 07       	cpc	r25, r21
    5f42:	69 f4       	brne	.+26     	; 0x5f5e <malloc+0x54>
    5f44:	10 97       	sbiw	r26, 0x00	; 0
    5f46:	31 f0       	breq	.+12     	; 0x5f54 <malloc+0x4a>
    5f48:	12 96       	adiw	r26, 0x02	; 2
    5f4a:	0c 93       	st	X, r16
    5f4c:	12 97       	sbiw	r26, 0x02	; 2
    5f4e:	13 96       	adiw	r26, 0x03	; 3
    5f50:	1c 93       	st	X, r17
    5f52:	27 c0       	rjmp	.+78     	; 0x5fa2 <malloc+0x98>
    5f54:	00 93 4c 03 	sts	0x034C, r16	; 0x80034c <__flp>
    5f58:	10 93 4d 03 	sts	0x034D, r17	; 0x80034d <__flp+0x1>
    5f5c:	22 c0       	rjmp	.+68     	; 0x5fa2 <malloc+0x98>
    5f5e:	21 15       	cp	r18, r1
    5f60:	31 05       	cpc	r19, r1
    5f62:	19 f0       	breq	.+6      	; 0x5f6a <malloc+0x60>
    5f64:	42 17       	cp	r20, r18
    5f66:	53 07       	cpc	r21, r19
    5f68:	18 f4       	brcc	.+6      	; 0x5f70 <malloc+0x66>
    5f6a:	9a 01       	movw	r18, r20
    5f6c:	bd 01       	movw	r22, r26
    5f6e:	ef 01       	movw	r28, r30
    5f70:	df 01       	movw	r26, r30
    5f72:	f8 01       	movw	r30, r16
    5f74:	db cf       	rjmp	.-74     	; 0x5f2c <malloc+0x22>
    5f76:	21 15       	cp	r18, r1
    5f78:	31 05       	cpc	r19, r1
    5f7a:	f9 f0       	breq	.+62     	; 0x5fba <malloc+0xb0>
    5f7c:	28 1b       	sub	r18, r24
    5f7e:	39 0b       	sbc	r19, r25
    5f80:	24 30       	cpi	r18, 0x04	; 4
    5f82:	31 05       	cpc	r19, r1
    5f84:	80 f4       	brcc	.+32     	; 0x5fa6 <malloc+0x9c>
    5f86:	8a 81       	ldd	r24, Y+2	; 0x02
    5f88:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8a:	61 15       	cp	r22, r1
    5f8c:	71 05       	cpc	r23, r1
    5f8e:	21 f0       	breq	.+8      	; 0x5f98 <malloc+0x8e>
    5f90:	fb 01       	movw	r30, r22
    5f92:	93 83       	std	Z+3, r25	; 0x03
    5f94:	82 83       	std	Z+2, r24	; 0x02
    5f96:	04 c0       	rjmp	.+8      	; 0x5fa0 <malloc+0x96>
    5f98:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__flp+0x1>
    5f9c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__flp>
    5fa0:	fe 01       	movw	r30, r28
    5fa2:	32 96       	adiw	r30, 0x02	; 2
    5fa4:	44 c0       	rjmp	.+136    	; 0x602e <malloc+0x124>
    5fa6:	fe 01       	movw	r30, r28
    5fa8:	e2 0f       	add	r30, r18
    5faa:	f3 1f       	adc	r31, r19
    5fac:	81 93       	st	Z+, r24
    5fae:	91 93       	st	Z+, r25
    5fb0:	22 50       	subi	r18, 0x02	; 2
    5fb2:	31 09       	sbc	r19, r1
    5fb4:	39 83       	std	Y+1, r19	; 0x01
    5fb6:	28 83       	st	Y, r18
    5fb8:	3a c0       	rjmp	.+116    	; 0x602e <malloc+0x124>
    5fba:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    5fbe:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    5fc2:	23 2b       	or	r18, r19
    5fc4:	41 f4       	brne	.+16     	; 0x5fd6 <malloc+0xcc>
    5fc6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5fca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5fce:	30 93 4b 03 	sts	0x034B, r19	; 0x80034b <__brkval+0x1>
    5fd2:	20 93 4a 03 	sts	0x034A, r18	; 0x80034a <__brkval>
    5fd6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5fda:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5fde:	21 15       	cp	r18, r1
    5fe0:	31 05       	cpc	r19, r1
    5fe2:	41 f4       	brne	.+16     	; 0x5ff4 <malloc+0xea>
    5fe4:	2d b7       	in	r18, 0x3d	; 61
    5fe6:	3e b7       	in	r19, 0x3e	; 62
    5fe8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5fec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5ff0:	24 1b       	sub	r18, r20
    5ff2:	35 0b       	sbc	r19, r21
    5ff4:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <__brkval>
    5ff8:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <__brkval+0x1>
    5ffc:	e2 17       	cp	r30, r18
    5ffe:	f3 07       	cpc	r31, r19
    6000:	a0 f4       	brcc	.+40     	; 0x602a <malloc+0x120>
    6002:	2e 1b       	sub	r18, r30
    6004:	3f 0b       	sbc	r19, r31
    6006:	28 17       	cp	r18, r24
    6008:	39 07       	cpc	r19, r25
    600a:	78 f0       	brcs	.+30     	; 0x602a <malloc+0x120>
    600c:	ac 01       	movw	r20, r24
    600e:	4e 5f       	subi	r20, 0xFE	; 254
    6010:	5f 4f       	sbci	r21, 0xFF	; 255
    6012:	24 17       	cp	r18, r20
    6014:	35 07       	cpc	r19, r21
    6016:	48 f0       	brcs	.+18     	; 0x602a <malloc+0x120>
    6018:	4e 0f       	add	r20, r30
    601a:	5f 1f       	adc	r21, r31
    601c:	50 93 4b 03 	sts	0x034B, r21	; 0x80034b <__brkval+0x1>
    6020:	40 93 4a 03 	sts	0x034A, r20	; 0x80034a <__brkval>
    6024:	81 93       	st	Z+, r24
    6026:	91 93       	st	Z+, r25
    6028:	02 c0       	rjmp	.+4      	; 0x602e <malloc+0x124>
    602a:	e0 e0       	ldi	r30, 0x00	; 0
    602c:	f0 e0       	ldi	r31, 0x00	; 0
    602e:	cf 01       	movw	r24, r30
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	08 95       	ret

0000603a <free>:
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	00 97       	sbiw	r24, 0x00	; 0
    6040:	09 f4       	brne	.+2      	; 0x6044 <free+0xa>
    6042:	81 c0       	rjmp	.+258    	; 0x6146 <free+0x10c>
    6044:	fc 01       	movw	r30, r24
    6046:	32 97       	sbiw	r30, 0x02	; 2
    6048:	13 82       	std	Z+3, r1	; 0x03
    604a:	12 82       	std	Z+2, r1	; 0x02
    604c:	a0 91 4c 03 	lds	r26, 0x034C	; 0x80034c <__flp>
    6050:	b0 91 4d 03 	lds	r27, 0x034D	; 0x80034d <__flp+0x1>
    6054:	10 97       	sbiw	r26, 0x00	; 0
    6056:	81 f4       	brne	.+32     	; 0x6078 <free+0x3e>
    6058:	20 81       	ld	r18, Z
    605a:	31 81       	ldd	r19, Z+1	; 0x01
    605c:	82 0f       	add	r24, r18
    605e:	93 1f       	adc	r25, r19
    6060:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    6064:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    6068:	28 17       	cp	r18, r24
    606a:	39 07       	cpc	r19, r25
    606c:	51 f5       	brne	.+84     	; 0x60c2 <free+0x88>
    606e:	f0 93 4b 03 	sts	0x034B, r31	; 0x80034b <__brkval+0x1>
    6072:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <__brkval>
    6076:	67 c0       	rjmp	.+206    	; 0x6146 <free+0x10c>
    6078:	ed 01       	movw	r28, r26
    607a:	20 e0       	ldi	r18, 0x00	; 0
    607c:	30 e0       	ldi	r19, 0x00	; 0
    607e:	ce 17       	cp	r28, r30
    6080:	df 07       	cpc	r29, r31
    6082:	40 f4       	brcc	.+16     	; 0x6094 <free+0x5a>
    6084:	4a 81       	ldd	r20, Y+2	; 0x02
    6086:	5b 81       	ldd	r21, Y+3	; 0x03
    6088:	9e 01       	movw	r18, r28
    608a:	41 15       	cp	r20, r1
    608c:	51 05       	cpc	r21, r1
    608e:	f1 f0       	breq	.+60     	; 0x60cc <free+0x92>
    6090:	ea 01       	movw	r28, r20
    6092:	f5 cf       	rjmp	.-22     	; 0x607e <free+0x44>
    6094:	d3 83       	std	Z+3, r29	; 0x03
    6096:	c2 83       	std	Z+2, r28	; 0x02
    6098:	40 81       	ld	r20, Z
    609a:	51 81       	ldd	r21, Z+1	; 0x01
    609c:	84 0f       	add	r24, r20
    609e:	95 1f       	adc	r25, r21
    60a0:	c8 17       	cp	r28, r24
    60a2:	d9 07       	cpc	r29, r25
    60a4:	59 f4       	brne	.+22     	; 0x60bc <free+0x82>
    60a6:	88 81       	ld	r24, Y
    60a8:	99 81       	ldd	r25, Y+1	; 0x01
    60aa:	84 0f       	add	r24, r20
    60ac:	95 1f       	adc	r25, r21
    60ae:	02 96       	adiw	r24, 0x02	; 2
    60b0:	91 83       	std	Z+1, r25	; 0x01
    60b2:	80 83       	st	Z, r24
    60b4:	8a 81       	ldd	r24, Y+2	; 0x02
    60b6:	9b 81       	ldd	r25, Y+3	; 0x03
    60b8:	93 83       	std	Z+3, r25	; 0x03
    60ba:	82 83       	std	Z+2, r24	; 0x02
    60bc:	21 15       	cp	r18, r1
    60be:	31 05       	cpc	r19, r1
    60c0:	29 f4       	brne	.+10     	; 0x60cc <free+0x92>
    60c2:	f0 93 4d 03 	sts	0x034D, r31	; 0x80034d <__flp+0x1>
    60c6:	e0 93 4c 03 	sts	0x034C, r30	; 0x80034c <__flp>
    60ca:	3d c0       	rjmp	.+122    	; 0x6146 <free+0x10c>
    60cc:	e9 01       	movw	r28, r18
    60ce:	fb 83       	std	Y+3, r31	; 0x03
    60d0:	ea 83       	std	Y+2, r30	; 0x02
    60d2:	49 91       	ld	r20, Y+
    60d4:	59 91       	ld	r21, Y+
    60d6:	c4 0f       	add	r28, r20
    60d8:	d5 1f       	adc	r29, r21
    60da:	ec 17       	cp	r30, r28
    60dc:	fd 07       	cpc	r31, r29
    60de:	61 f4       	brne	.+24     	; 0x60f8 <free+0xbe>
    60e0:	80 81       	ld	r24, Z
    60e2:	91 81       	ldd	r25, Z+1	; 0x01
    60e4:	84 0f       	add	r24, r20
    60e6:	95 1f       	adc	r25, r21
    60e8:	02 96       	adiw	r24, 0x02	; 2
    60ea:	e9 01       	movw	r28, r18
    60ec:	99 83       	std	Y+1, r25	; 0x01
    60ee:	88 83       	st	Y, r24
    60f0:	82 81       	ldd	r24, Z+2	; 0x02
    60f2:	93 81       	ldd	r25, Z+3	; 0x03
    60f4:	9b 83       	std	Y+3, r25	; 0x03
    60f6:	8a 83       	std	Y+2, r24	; 0x02
    60f8:	e0 e0       	ldi	r30, 0x00	; 0
    60fa:	f0 e0       	ldi	r31, 0x00	; 0
    60fc:	12 96       	adiw	r26, 0x02	; 2
    60fe:	8d 91       	ld	r24, X+
    6100:	9c 91       	ld	r25, X
    6102:	13 97       	sbiw	r26, 0x03	; 3
    6104:	00 97       	sbiw	r24, 0x00	; 0
    6106:	19 f0       	breq	.+6      	; 0x610e <free+0xd4>
    6108:	fd 01       	movw	r30, r26
    610a:	dc 01       	movw	r26, r24
    610c:	f7 cf       	rjmp	.-18     	; 0x60fc <free+0xc2>
    610e:	8d 91       	ld	r24, X+
    6110:	9c 91       	ld	r25, X
    6112:	11 97       	sbiw	r26, 0x01	; 1
    6114:	9d 01       	movw	r18, r26
    6116:	2e 5f       	subi	r18, 0xFE	; 254
    6118:	3f 4f       	sbci	r19, 0xFF	; 255
    611a:	82 0f       	add	r24, r18
    611c:	93 1f       	adc	r25, r19
    611e:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__brkval>
    6122:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <__brkval+0x1>
    6126:	28 17       	cp	r18, r24
    6128:	39 07       	cpc	r19, r25
    612a:	69 f4       	brne	.+26     	; 0x6146 <free+0x10c>
    612c:	30 97       	sbiw	r30, 0x00	; 0
    612e:	29 f4       	brne	.+10     	; 0x613a <free+0x100>
    6130:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__flp+0x1>
    6134:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__flp>
    6138:	02 c0       	rjmp	.+4      	; 0x613e <free+0x104>
    613a:	13 82       	std	Z+3, r1	; 0x03
    613c:	12 82       	std	Z+2, r1	; 0x02
    613e:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <__brkval+0x1>
    6142:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <__brkval>
    6146:	df 91       	pop	r29
    6148:	cf 91       	pop	r28
    614a:	08 95       	ret

0000614c <random_r>:
    614c:	8f 92       	push	r8
    614e:	9f 92       	push	r9
    6150:	af 92       	push	r10
    6152:	bf 92       	push	r11
    6154:	cf 92       	push	r12
    6156:	df 92       	push	r13
    6158:	ef 92       	push	r14
    615a:	ff 92       	push	r15
    615c:	cf 93       	push	r28
    615e:	df 93       	push	r29
    6160:	ec 01       	movw	r28, r24
    6162:	68 81       	ld	r22, Y
    6164:	79 81       	ldd	r23, Y+1	; 0x01
    6166:	8a 81       	ldd	r24, Y+2	; 0x02
    6168:	9b 81       	ldd	r25, Y+3	; 0x03
    616a:	61 15       	cp	r22, r1
    616c:	71 05       	cpc	r23, r1
    616e:	81 05       	cpc	r24, r1
    6170:	91 05       	cpc	r25, r1
    6172:	21 f4       	brne	.+8      	; 0x617c <random_r+0x30>
    6174:	64 e2       	ldi	r22, 0x24	; 36
    6176:	79 ed       	ldi	r23, 0xD9	; 217
    6178:	8b e5       	ldi	r24, 0x5B	; 91
    617a:	97 e0       	ldi	r25, 0x07	; 7
    617c:	2d e1       	ldi	r18, 0x1D	; 29
    617e:	33 ef       	ldi	r19, 0xF3	; 243
    6180:	41 e0       	ldi	r20, 0x01	; 1
    6182:	50 e0       	ldi	r21, 0x00	; 0
    6184:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    6188:	49 01       	movw	r8, r18
    618a:	5a 01       	movw	r10, r20
    618c:	9b 01       	movw	r18, r22
    618e:	ac 01       	movw	r20, r24
    6190:	a7 ea       	ldi	r26, 0xA7	; 167
    6192:	b1 e4       	ldi	r27, 0x41	; 65
    6194:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__muluhisi3>
    6198:	6b 01       	movw	r12, r22
    619a:	7c 01       	movw	r14, r24
    619c:	ac ee       	ldi	r26, 0xEC	; 236
    619e:	b4 ef       	ldi	r27, 0xF4	; 244
    61a0:	a5 01       	movw	r20, r10
    61a2:	94 01       	movw	r18, r8
    61a4:	0e 94 57 31 	call	0x62ae	; 0x62ae <__mulohisi3>
    61a8:	dc 01       	movw	r26, r24
    61aa:	cb 01       	movw	r24, r22
    61ac:	8c 0d       	add	r24, r12
    61ae:	9d 1d       	adc	r25, r13
    61b0:	ae 1d       	adc	r26, r14
    61b2:	bf 1d       	adc	r27, r15
    61b4:	b7 ff       	sbrs	r27, 7
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <random_r+0x72>
    61b8:	01 97       	sbiw	r24, 0x01	; 1
    61ba:	a1 09       	sbc	r26, r1
    61bc:	b0 48       	sbci	r27, 0x80	; 128
    61be:	88 83       	st	Y, r24
    61c0:	99 83       	std	Y+1, r25	; 0x01
    61c2:	aa 83       	std	Y+2, r26	; 0x02
    61c4:	bb 83       	std	Y+3, r27	; 0x03
    61c6:	bc 01       	movw	r22, r24
    61c8:	cd 01       	movw	r24, r26
    61ca:	9f 77       	andi	r25, 0x7F	; 127
    61cc:	df 91       	pop	r29
    61ce:	cf 91       	pop	r28
    61d0:	ff 90       	pop	r15
    61d2:	ef 90       	pop	r14
    61d4:	df 90       	pop	r13
    61d6:	cf 90       	pop	r12
    61d8:	bf 90       	pop	r11
    61da:	af 90       	pop	r10
    61dc:	9f 90       	pop	r9
    61de:	8f 90       	pop	r8
    61e0:	08 95       	ret

000061e2 <random>:
    61e2:	8f 92       	push	r8
    61e4:	9f 92       	push	r9
    61e6:	af 92       	push	r10
    61e8:	bf 92       	push	r11
    61ea:	cf 92       	push	r12
    61ec:	df 92       	push	r13
    61ee:	ef 92       	push	r14
    61f0:	ff 92       	push	r15
    61f2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    61f6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    61fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    61fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    6202:	61 15       	cp	r22, r1
    6204:	71 05       	cpc	r23, r1
    6206:	81 05       	cpc	r24, r1
    6208:	91 05       	cpc	r25, r1
    620a:	21 f4       	brne	.+8      	; 0x6214 <random+0x32>
    620c:	64 e2       	ldi	r22, 0x24	; 36
    620e:	79 ed       	ldi	r23, 0xD9	; 217
    6210:	8b e5       	ldi	r24, 0x5B	; 91
    6212:	97 e0       	ldi	r25, 0x07	; 7
    6214:	2d e1       	ldi	r18, 0x1D	; 29
    6216:	33 ef       	ldi	r19, 0xF3	; 243
    6218:	41 e0       	ldi	r20, 0x01	; 1
    621a:	50 e0       	ldi	r21, 0x00	; 0
    621c:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divmodsi4>
    6220:	49 01       	movw	r8, r18
    6222:	5a 01       	movw	r10, r20
    6224:	9b 01       	movw	r18, r22
    6226:	ac 01       	movw	r20, r24
    6228:	a7 ea       	ldi	r26, 0xA7	; 167
    622a:	b1 e4       	ldi	r27, 0x41	; 65
    622c:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__muluhisi3>
    6230:	6b 01       	movw	r12, r22
    6232:	7c 01       	movw	r14, r24
    6234:	ac ee       	ldi	r26, 0xEC	; 236
    6236:	b4 ef       	ldi	r27, 0xF4	; 244
    6238:	a5 01       	movw	r20, r10
    623a:	94 01       	movw	r18, r8
    623c:	0e 94 57 31 	call	0x62ae	; 0x62ae <__mulohisi3>
    6240:	dc 01       	movw	r26, r24
    6242:	cb 01       	movw	r24, r22
    6244:	8c 0d       	add	r24, r12
    6246:	9d 1d       	adc	r25, r13
    6248:	ae 1d       	adc	r26, r14
    624a:	bf 1d       	adc	r27, r15
    624c:	b7 ff       	sbrs	r27, 7
    624e:	03 c0       	rjmp	.+6      	; 0x6256 <random+0x74>
    6250:	01 97       	sbiw	r24, 0x01	; 1
    6252:	a1 09       	sbc	r26, r1
    6254:	b0 48       	sbci	r27, 0x80	; 128
    6256:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    625a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    625e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    6262:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    6266:	bc 01       	movw	r22, r24
    6268:	cd 01       	movw	r24, r26
    626a:	9f 77       	andi	r25, 0x7F	; 127
    626c:	ff 90       	pop	r15
    626e:	ef 90       	pop	r14
    6270:	df 90       	pop	r13
    6272:	cf 90       	pop	r12
    6274:	bf 90       	pop	r11
    6276:	af 90       	pop	r10
    6278:	9f 90       	pop	r9
    627a:	8f 90       	pop	r8
    627c:	08 95       	ret

0000627e <srandom>:
    627e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    6282:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    6286:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    628a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    628e:	08 95       	ret

00006290 <abort>:
    6290:	81 e0       	ldi	r24, 0x01	; 1
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	f8 94       	cli
    6296:	0c 94 5c 31 	jmp	0x62b8	; 0x62b8 <__do_global_dtors>

0000629a <memset>:
    629a:	dc 01       	movw	r26, r24
    629c:	01 c0       	rjmp	.+2      	; 0x62a0 <memset+0x6>
    629e:	6d 93       	st	X+, r22
    62a0:	41 50       	subi	r20, 0x01	; 1
    62a2:	50 40       	sbci	r21, 0x00	; 0
    62a4:	e0 f7       	brcc	.-8      	; 0x629e <memset+0x4>
    62a6:	08 95       	ret

000062a8 <__mulshisi3>:
    62a8:	b7 ff       	sbrs	r27, 7
    62aa:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__muluhisi3>

000062ae <__mulohisi3>:
    62ae:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__muluhisi3>
    62b2:	82 1b       	sub	r24, r18
    62b4:	93 0b       	sbc	r25, r19
    62b6:	08 95       	ret

000062b8 <__do_global_dtors>:
    62b8:	15 e0       	ldi	r17, 0x05	; 5
    62ba:	ce e7       	ldi	r28, 0x7E	; 126
    62bc:	d5 e0       	ldi	r29, 0x05	; 5
    62be:	04 c0       	rjmp	.+8      	; 0x62c8 <__do_global_dtors+0x10>
    62c0:	fe 01       	movw	r30, r28
    62c2:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__tablejump2__>
    62c6:	21 96       	adiw	r28, 0x01	; 1
    62c8:	cf 37       	cpi	r28, 0x7F	; 127
    62ca:	d1 07       	cpc	r29, r17
    62cc:	c9 f7       	brne	.-14     	; 0x62c0 <__do_global_dtors+0x8>
    62ce:	f8 94       	cli

000062d0 <__stop_program>:
    62d0:	ff cf       	rjmp	.-2      	; 0x62d0 <__stop_program>
