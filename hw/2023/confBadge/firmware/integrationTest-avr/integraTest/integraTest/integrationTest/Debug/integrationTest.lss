
integrationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  0000564a  000056de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000564a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fa  008001ba  008001ba  00005798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019b3c  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000399c  00000000  00000000  0001fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000727a  00000000  00000000  000236a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b6c  00000000  00000000  0002a924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000536b  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001597f  00000000  00000000  000327fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c18  00000000  00000000  0004817a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__dtors_end>
       4:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
       8:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
       c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      10:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      14:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      18:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      1c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      20:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      24:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      28:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      2c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      30:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      34:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      38:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      3c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      40:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__vector_16>
      44:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      48:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_18>
      4c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_19>
      50:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      54:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      58:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      5c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>
      60:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__vector_24>
      64:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4c 56       	subi	r20, 0x6C	; 108
      6a:	4c 00       	.word	0x004c	; ????

0000006c <_ZZ19incrementLoadingBarvE3__c>:
      6c:	59 41 59 20 4c 56 4c 2b 2b 00                       YAY LVL++.

00000076 <_ZZ4loopE3__c_3>:
      76:	50 41 49 52 49 4e 47 3e 3e 3e 00                    PAIRING>>>.

00000081 <_ZZ4loopE3__c_2>:
      81:	3c 3c 3c 50 41 49 52 49 4e 47 00                    <<<PAIRING.

0000008c <_ZZ4loopE3__c_1>:
      8c:	4a 6f 68 6e 20 53 6d 69 74 68 00                    John Smith.

00000097 <_ZZ4loopE3__c_0>:
      97:	5b 6d 64 5d 4c 56 4c 00                             [md]LVL.

0000009f <_ZZ4loopE3__c>:
      9f:	5b 6d 64 5d 4c 56 4c 00                             [md]LVL.

000000a7 <_ZZ5setupE3__c_0>:
      a7:	4a 6f 68 6e 20 53 6d 69 74 68 00                    John Smith.

000000b2 <_ZZ5setupE3__c>:
      b2:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
      c2:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

000000cc <digital_pin_to_timer_PGM>:
      cc:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      dc:	00 00 00 00                                         ....

000000e0 <digital_pin_to_bit_mask_PGM>:
      e0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f0:	04 08 10 20                                         ... 

000000f4 <digital_pin_to_port_PGM>:
      f4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     104:	03 03 03 03                                         ....

00000108 <port_to_input_PGM>:
     108:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000112 <port_to_output_PGM>:
     112:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000011c <port_to_mode_PGM>:
     11c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000126 <_ZL4font>:
     126:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     136:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     146:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     156:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     166:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     176:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     186:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     196:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1a6:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1b6:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1c6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1d6:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1e6:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1f6:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     206:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     216:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     226:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     236:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     246:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     256:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     266:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     276:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     286:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     296:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2a6:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2b6:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2c6:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2d6:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2e6:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2f6:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     306:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     316:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     326:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     336:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     346:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     356:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     366:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     376:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     386:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     396:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3a6:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3b6:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3c6:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3d6:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3e6:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3f6:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     406:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     416:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     426:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     436:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     446:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     456:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     466:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     476:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     486:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     496:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4a6:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4b6:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4c6:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4d6:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4e6:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4f6:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     506:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     516:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     526:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     536:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     546:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     556:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     566:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     576:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     586:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     596:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5a6:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5b6:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5c6:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5d6:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5e6:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5f6:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     606:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     616:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000626 <_ZZN16Adafruit_SSD130615startscrollleftEhhE12scrollList2b>:
     626:	00 ff 2f                                            ../

00000629 <_ZZN16Adafruit_SSD130615startscrollleftEhhE12scrollList2a>:
     629:	27 00                                               '.

0000062b <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     62b:	22 00 ff 21 00                                      "..!.

00000630 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     630:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000638 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     638:	00 80 c0 e0 f0 f8 fc fe                             ........

00000640 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     640:	db 40 a4 a6 2e af                                   .@....

00000646 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     646:	20 00 a1 c8                                          ...

0000064a <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     64a:	d3 00 40 8d                                         ..@.

0000064e <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     64e:	ae d5 80 a8                                         ....

00000652 <_ZL12splash2_data>:
     652:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     662:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     672:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     68e:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     69e:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6ae:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6be:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6ce:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     6de:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6ee:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     6fe:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     70e:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     71e:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     72e:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     73e:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     74e:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     75e:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     76e:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     77e:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     78e:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     79e:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7ae:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7be:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7ce:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     7e6:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     7f6:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     806:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     816:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     826:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000832 <_ZL12splash1_data>:
     832:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     842:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     852:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     862:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     872:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     882:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     89a:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8aa:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8ba:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8ca:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8da:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     8ea:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     8fa:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     90a:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     91a:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     92a:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     93a:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     94a:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     95a:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     96a:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     97a:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     98a:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     99a:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9aa:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9c2:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9da:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     9ea:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     9fa:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a0a:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a1a:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a2a:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a3a:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a4a:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a5a:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a6a:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a7a:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a8a:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     a9a:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     aaa:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     aba:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     aca:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     ada:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     aea:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000af2 <__ctors_start>:
     af2:	0c 0b       	sbc	r16, r28
     af4:	ea 0d       	add	r30, r10
     af6:	bb 24       	eor	r11, r11

00000af8 <__ctors_end>:
     af8:	40 0b       	sbc	r20, r16

00000afa <__dtors_end>:
     afa:	11 24       	eor	r1, r1
     afc:	1f be       	out	0x3f, r1	; 63
     afe:	cf ef       	ldi	r28, 0xFF	; 255
     b00:	d8 e0       	ldi	r29, 0x08	; 8
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	cd bf       	out	0x3d, r28	; 61

00000b06 <__do_copy_data>:
     b06:	11 e0       	ldi	r17, 0x01	; 1
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b1 e0       	ldi	r27, 0x01	; 1
     b0c:	ea e4       	ldi	r30, 0x4A	; 74
     b0e:	f6 e5       	ldi	r31, 0x56	; 86
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <__do_copy_data+0x10>
     b12:	05 90       	lpm	r0, Z+
     b14:	0d 92       	st	X+, r0
     b16:	aa 3b       	cpi	r26, 0xBA	; 186
     b18:	b1 07       	cpc	r27, r17
     b1a:	d9 f7       	brne	.-10     	; 0xb12 <__do_copy_data+0xc>

00000b1c <__do_clear_bss>:
     b1c:	23 e0       	ldi	r18, 0x03	; 3
     b1e:	aa eb       	ldi	r26, 0xBA	; 186
     b20:	b1 e0       	ldi	r27, 0x01	; 1
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <.do_clear_bss_start>

00000b24 <.do_clear_bss_loop>:
     b24:	1d 92       	st	X+, r1

00000b26 <.do_clear_bss_start>:
     b26:	a4 3b       	cpi	r26, 0xB4	; 180
     b28:	b2 07       	cpc	r27, r18
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <.do_clear_bss_loop>

00000b2c <__do_global_ctors>:
     b2c:	15 e0       	ldi	r17, 0x05	; 5
     b2e:	cc e7       	ldi	r28, 0x7C	; 124
     b30:	d5 e0       	ldi	r29, 0x05	; 5
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__do_global_ctors+0x10>
     b34:	21 97       	sbiw	r28, 0x01	; 1
     b36:	fe 01       	movw	r30, r28
     b38:	0e 94 3b 29 	call	0x5276	; 0x5276 <__tablejump2__>
     b3c:	c9 37       	cpi	r28, 0x79	; 121
     b3e:	d1 07       	cpc	r29, r17
     b40:	c9 f7       	brne	.-14     	; 0xb34 <__do_global_ctors+0x8>
     b42:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <main>
     b46:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__do_global_dtors>

00000b4a <__bad_interrupt>:
     b4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b4e <setup>:
bool	waitingForDisconnect = false;
uint8_t loadingBarPos = 0;
uint32_t idle_refreshInterval = 200;

void setup() 
{
     b4e:	0f 93       	push	r16
	//GPIO INIT
	
	pinMode(13, OUTPUT);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	8d e0       	ldi	r24, 0x0D	; 13
     b54:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(A0, INPUT_PULLUP);
     b58:	62 e0       	ldi	r22, 0x02	; 2
     b5a:	8e e0       	ldi	r24, 0x0E	; 14
     b5c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(A1, INPUT_PULLUP);
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	8f e0       	ldi	r24, 0x0F	; 15
     b64:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(A2, INPUT_PULLUP);
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	80 e1       	ldi	r24, 0x10	; 16
     b6c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(A3, INPUT_PULLUP);
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	81 e1       	ldi	r24, 0x11	; 17
     b74:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(SIG_R2, INPUT_PULLUP);
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	pinMode(SIG_R3, OUTPUT);
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	87 e0       	ldi	r24, 0x07	; 7
     b84:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	digitalWrite(SIG_R3, LOW);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
	pinMode(SIG_L2, OUTPUT);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
	digitalWrite(SIG_L2, LOW);
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
	pinMode(SIG_L3, INPUT_PULLUP);
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     ba8:	26 e0       	ldi	r18, 0x06	; 6
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	55 e2       	ldi	r21, 0x25	; 37
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	8c e3       	ldi	r24, 0x3C	; 60
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN14HardwareSerial5beginEmh>
	
	//SERIAL INIT
	Serial.begin(9600);
  
	//NEOPIXEL INIT
	pixels.begin();
     bba:	86 e2       	ldi	r24, 0x26	; 38
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 7e 18 	call	0x30fc	; 0x30fc <_ZN17Adafruit_NeoPixel5beginEv>

	//DISPLAY INIT
	if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
     bc2:	01 e0       	ldi	r16, 0x01	; 1
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	4c e3       	ldi	r20, 0x3C	; 60
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	86 ee       	ldi	r24, 0xE6	; 230
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <_ZN16Adafruit_SSD13065beginEhhbb>
     bd2:	81 11       	cpse	r24, r1
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <setup+0x94>
	{
	Serial.println(F("SSD1306 allocation failed"));
     bd6:	62 eb       	ldi	r22, 0xB2	; 178
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8c e3       	ldi	r24, 0x3C	; 60
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <display+0x13>
     bea:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <display+0x12>
     bee:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <display+0x11>
     bf2:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <display+0x10>
	}

	//OLED INIT
	display.setTextColor(SSD1306_WHITE);	
	display.clearDisplay();
     bf6:	86 ee       	ldi	r24, 0xE6	; 230
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(2); // Draw 2X-scale text
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	86 ee       	ldi	r24, 0xE6	; 230
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.print(F("John Smith"));
     c08:	67 ea       	ldi	r22, 0xA7	; 167
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	86 ee       	ldi	r24, 0xE6	; 230
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5printEPK19__FlashStringHelper>
	display.display();      // Show initial text
     c14:	86 ee       	ldi	r24, 0xE6	; 230
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13067displayEv>
	display.startscrollleft(0x00, 0x0F);
     c1c:	4f e0       	ldi	r20, 0x0F	; 15
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	86 ee       	ldi	r24, 0xE6	; 230
     c22:	91 e0       	ldi	r25, 0x01	; 1
}
     c24:	0f 91       	pop	r16
	display.setTextColor(SSD1306_WHITE);	
	display.clearDisplay();
	display.setTextSize(2); // Draw 2X-scale text
	display.print(F("John Smith"));
	display.display();      // Show initial text
	display.startscrollleft(0x00, 0x0F);
     c26:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <_ZN16Adafruit_SSD130615startscrollleftEhh>

00000c2a <_Z11neopix_idlev>:
}


//FUNCTION DECLARATION
void neopix_idle()
{
     c2a:	2f 92       	push	r2
     c2c:	3f 92       	push	r3
     c2e:	4f 92       	push	r4
     c30:	5f 92       	push	r5
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
	static uint32_t ts_slowIdle = 0;
	static uint8_t startPosition = 0;
	if(millis() - ts_slowIdle > idle_refreshInterval)	//slow down animation
     c4e:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
     c52:	00 91 cb 01 	lds	r16, 0x01CB	; 0x8001cb <_ZZ11neopix_idlevE11ts_slowIdle>
     c56:	10 91 cc 01 	lds	r17, 0x01CC	; 0x8001cc <_ZZ11neopix_idlevE11ts_slowIdle+0x1>
     c5a:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <_ZZ11neopix_idlevE11ts_slowIdle+0x2>
     c5e:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <_ZZ11neopix_idlevE11ts_slowIdle+0x3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	80 1b       	sub	r24, r16
     c68:	91 0b       	sbc	r25, r17
     c6a:	a2 0b       	sbc	r26, r18
     c6c:	b3 0b       	sbc	r27, r19
     c6e:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <idle_refreshInterval>
     c72:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <idle_refreshInterval+0x1>
     c76:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <idle_refreshInterval+0x2>
     c7a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <idle_refreshInterval+0x3>
     c7e:	08 17       	cp	r16, r24
     c80:	19 07       	cpc	r17, r25
     c82:	2a 07       	cpc	r18, r26
     c84:	3b 07       	cpc	r19, r27
     c86:	08 f0       	brcs	.+2      	; 0xc8a <_Z11neopix_idlev+0x60>
     c88:	51 c1       	rjmp	.+674    	; 0xf2c <_Z11neopix_idlev+0x302>
	{
		ts_slowIdle = millis();
     c8a:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
     c8e:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <_ZZ11neopix_idlevE11ts_slowIdle>
     c92:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <_ZZ11neopix_idlevE11ts_slowIdle+0x1>
     c96:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <_ZZ11neopix_idlevE11ts_slowIdle+0x2>
     c9a:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <_ZZ11neopix_idlevE11ts_slowIdle+0x3>
		startPosition++;
     c9e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZZ11neopix_idlevE13startPosition>
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
     ca4:	80 31       	cpi	r24, 0x10	; 16
     ca6:	18 f4       	brcc	.+6      	; 0xcae <_Z11neopix_idlev+0x84>
	static uint32_t ts_slowIdle = 0;
	static uint8_t startPosition = 0;
	if(millis() - ts_slowIdle > idle_refreshInterval)	//slow down animation
	{
		ts_slowIdle = millis();
		startPosition++;
     ca8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZZ11neopix_idlevE13startPosition>
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <_Z11neopix_idlev+0x88>
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
     cae:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <_ZZ11neopix_idlevE13startPosition>
			
		pixels.clear(); // Set all pixel colors to 'off'
     cb2:	86 e2       	ldi	r24, 0x26	; 38
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 bc 1b 	call	0x3778	; 0x3778 <_ZN17Adafruit_NeoPixel5clearEv>
		for(int i=0; i<currentLevel; i++)		//determine how many LED should be one
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
				r=30;
				b=10;
			}
			else if(i >= 96 && i < 112)	//increase brightness
			{
				idle_refreshInterval = 25;
     cbe:	39 e1       	ldi	r19, 0x19	; 25
     cc0:	c3 2e       	mov	r12, r19
     cc2:	d1 2c       	mov	r13, r1
     cc4:	e1 2c       	mov	r14, r1
     cc6:	f1 2c       	mov	r15, r1
				r=10;
				b=10;
			}
			else if(i >= 80 && i < 96)	//increase brightness
			{
				idle_refreshInterval = 50;
     cc8:	42 e3       	ldi	r20, 0x32	; 50
     cca:	84 2e       	mov	r8, r20
     ccc:	91 2c       	mov	r9, r1
     cce:	a1 2c       	mov	r10, r1
     cd0:	b1 2c       	mov	r11, r1
				r=10;
				b=10;
			}
			else if(i >= 64 && i < 80)	//increase brightness + speed
			{
				idle_refreshInterval = 100;
     cd2:	54 e6       	ldi	r21, 0x64	; 100
     cd4:	45 2e       	mov	r4, r21
     cd6:	51 2c       	mov	r5, r1
     cd8:	61 2c       	mov	r6, r1
     cda:	71 2c       	mov	r7, r1
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
			
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<currentLevel; i++)		//determine how many LED should be one
     cdc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentLevel>
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	08 17       	cp	r16, r24
     ce4:	19 07       	cpc	r17, r25
     ce6:	0c f0       	brlt	.+2      	; 0xcea <_Z11neopix_idlev+0xc0>
     ce8:	0b c1       	rjmp	.+534    	; 0xf00 <_Z11neopix_idlev+0x2d6>
		{
			//led_ID is the current LED index that we are update. 
			uint8_t led_ID = (startPosition+i) % 16; //This is going over every single LED that needs to be on based on the current LVL
     cea:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZZ11neopix_idlevE13startPosition>
     cee:	18 01       	movw	r2, r16
     cf0:	28 0e       	add	r2, r24
     cf2:	31 1c       	adc	r3, r1
     cf4:	8f e0       	ldi	r24, 0x0F	; 15
     cf6:	28 22       	and	r2, r24
     cf8:	33 24       	eor	r3, r3
			uint8_t r = 0;
			uint8_t g = 0;
			uint8_t r_factor = 1;
			uint8_t g_factor = 1;
			uint8_t b_factor = 1;
			if (i < 16)			//only blue to start
     cfa:	00 31       	cpi	r16, 0x10	; 16
     cfc:	11 05       	cpc	r17, r1
     cfe:	0c f4       	brge	.+2      	; 0xd02 <_Z11neopix_idlev+0xd8>
     d00:	e1 c0       	rjmp	.+450    	; 0xec4 <_Z11neopix_idlev+0x29a>
			{
				b = 10;
			}
			else if(i >= 16 && i < 32)	//introduce red 
     d02:	c8 01       	movw	r24, r16
     d04:	40 97       	sbiw	r24, 0x10	; 16
     d06:	80 31       	cpi	r24, 0x10	; 16
     d08:	91 05       	cpc	r25, r1
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <_Z11neopix_idlev+0xe4>
     d0c:	dd c0       	rjmp	.+442    	; 0xec8 <_Z11neopix_idlev+0x29e>
			{
				b = 10;
				r = 10;
			}
			else if(i >= 32 && i < 48)	//introduce green
     d0e:	40 97       	sbiw	r24, 0x10	; 16
     d10:	80 31       	cpi	r24, 0x10	; 16
     d12:	91 05       	cpc	r25, r1
     d14:	08 f4       	brcc	.+2      	; 0xd18 <_Z11neopix_idlev+0xee>
     d16:	da c0       	rjmp	.+436    	; 0xecc <_Z11neopix_idlev+0x2a2>
			{
				b = 10;
				g = 10;	
			}
			else if(i >= 48 && i < 64)	//have all 3 colors
     d18:	40 97       	sbiw	r24, 0x10	; 16
     d1a:	80 31       	cpi	r24, 0x10	; 16
     d1c:	91 05       	cpc	r25, r1
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <_Z11neopix_idlev+0xf8>
     d20:	d8 c0       	rjmp	.+432    	; 0xed2 <_Z11neopix_idlev+0x2a8>
			{
				g=10;	
				r=10;
				b=10;
			}
			else if(i >= 64 && i < 80)	//increase brightness + speed
     d22:	40 97       	sbiw	r24, 0x10	; 16
     d24:	40 97       	sbiw	r24, 0x10	; 16
     d26:	48 f4       	brcc	.+18     	; 0xd3a <_Z11neopix_idlev+0x110>
			{
				idle_refreshInterval = 100;
     d28:	40 92 0a 01 	sts	0x010A, r4	; 0x80010a <idle_refreshInterval>
     d2c:	50 92 0b 01 	sts	0x010B, r5	; 0x80010b <idle_refreshInterval+0x1>
     d30:	60 92 0c 01 	sts	0x010C, r6	; 0x80010c <idle_refreshInterval+0x2>
     d34:	70 92 0d 01 	sts	0x010D, r7	; 0x80010d <idle_refreshInterval+0x3>
     d38:	c7 c0       	rjmp	.+398    	; 0xec8 <_Z11neopix_idlev+0x29e>
				b=30;
				r=10;
				b=10;
			}
			else if(i >= 80 && i < 96)	//increase brightness
     d3a:	c8 01       	movw	r24, r16
     d3c:	80 55       	subi	r24, 0x50	; 80
     d3e:	91 09       	sbc	r25, r1
     d40:	40 97       	sbiw	r24, 0x10	; 16
     d42:	58 f4       	brcc	.+22     	; 0xd5a <_Z11neopix_idlev+0x130>
			{
				idle_refreshInterval = 50;
     d44:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <idle_refreshInterval>
     d48:	90 92 0b 01 	sts	0x010B, r9	; 0x80010b <idle_refreshInterval+0x1>
     d4c:	a0 92 0c 01 	sts	0x010C, r10	; 0x80010c <idle_refreshInterval+0x2>
     d50:	b0 92 0d 01 	sts	0x010D, r11	; 0x80010d <idle_refreshInterval+0x3>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
     d54:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if(i >= 80 && i < 96)	//increase brightness
			{
				idle_refreshInterval = 50;
				b=30;
				r=30;
     d56:	de e1       	ldi	r29, 0x1E	; 30
     d58:	be c0       	rjmp	.+380    	; 0xed6 <_Z11neopix_idlev+0x2ac>
				b=10;
			}
			else if(i >= 96 && i < 112)	//increase brightness
     d5a:	c8 01       	movw	r24, r16
     d5c:	80 56       	subi	r24, 0x60	; 96
     d5e:	91 09       	sbc	r25, r1
     d60:	40 97       	sbiw	r24, 0x10	; 16
     d62:	60 f4       	brcc	.+24     	; 0xd7c <_Z11neopix_idlev+0x152>
			{
				idle_refreshInterval = 25;
     d64:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <idle_refreshInterval>
     d68:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <idle_refreshInterval+0x1>
     d6c:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <idle_refreshInterval+0x2>
     d70:	f0 92 0d 01 	sts	0x010D, r15	; 0x80010d <idle_refreshInterval+0x3>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
     d74:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if(i >= 96 && i < 112)	//increase brightness
			{
				idle_refreshInterval = 25;
				b=30;
				r=30;
     d76:	de e1       	ldi	r29, 0x1E	; 30
				b=30;
     d78:	6e e1       	ldi	r22, 0x1E	; 30
     d7a:	ae c0       	rjmp	.+348    	; 0xed8 <_Z11neopix_idlev+0x2ae>
			}
			else if(i >= 112 && i < 128)	//max score
     d7c:	c8 01       	movw	r24, r16
     d7e:	80 57       	subi	r24, 0x70	; 112
     d80:	91 09       	sbc	r25, r1
     d82:	40 97       	sbiw	r24, 0x10	; 16
     d84:	d0 f4       	brcc	.+52     	; 0xdba <_Z11neopix_idlev+0x190>
			{
				idle_refreshInterval = 12;
     d86:	8c e0       	ldi	r24, 0x0C	; 12
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 e0       	ldi	r26, 0x00	; 0
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <idle_refreshInterval>
     d92:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <idle_refreshInterval+0x1>
     d96:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <idle_refreshInterval+0x2>
     d9a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <idle_refreshInterval+0x3>
				r=random(5,20);
     d9e:	24 e1       	ldi	r18, 0x14	; 20
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     db2:	d6 2f       	mov	r29, r22
				g=0;
     db4:	c0 e0       	ldi	r28, 0x00	; 0
				b=0;
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	8f c0       	rjmp	.+286    	; 0xed8 <_Z11neopix_idlev+0x2ae>
			}
			else if(i >= 128 && i < 144)	//max score
     dba:	c8 01       	movw	r24, r16
     dbc:	80 58       	subi	r24, 0x80	; 128
     dbe:	91 09       	sbc	r25, r1
     dc0:	40 97       	sbiw	r24, 0x10	; 16
     dc2:	18 f5       	brcc	.+70     	; 0xe0a <_Z11neopix_idlev+0x1e0>
			{
				idle_refreshInterval = 6;
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <idle_refreshInterval>
     dd0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <idle_refreshInterval+0x1>
     dd4:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <idle_refreshInterval+0x2>
     dd8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <idle_refreshInterval+0x3>
				r=random(5,20);
     ddc:	24 e1       	ldi	r18, 0x14	; 20
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	65 e0       	ldi	r22, 0x05	; 5
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     df0:	d6 2f       	mov	r29, r22
				g=0;				
				b=random(5,20);
     df2:	24 e1       	ldi	r18, 0x14	; 20
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	65 e0       	ldi	r22, 0x05	; 5
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
			}
			else if(i >= 128 && i < 144)	//max score
			{
				idle_refreshInterval = 6;
				r=random(5,20);
				g=0;				
     e06:	c0 e0       	ldi	r28, 0x00	; 0
     e08:	67 c0       	rjmp	.+206    	; 0xed8 <_Z11neopix_idlev+0x2ae>
				b=random(5,20);
			}
			else if(i >= 144 && i < 160)	//max score
     e0a:	c8 01       	movw	r24, r16
     e0c:	80 59       	subi	r24, 0x90	; 144
     e0e:	91 09       	sbc	r25, r1
     e10:	40 97       	sbiw	r24, 0x10	; 16
     e12:	58 f5       	brcc	.+86     	; 0xe6a <_Z11neopix_idlev+0x240>
			{
				idle_refreshInterval = 3;
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e0       	ldi	r26, 0x00	; 0
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <idle_refreshInterval>
     e20:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <idle_refreshInterval+0x1>
     e24:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <idle_refreshInterval+0x2>
     e28:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <idle_refreshInterval+0x3>
				r=random(5,20);
     e2c:	24 e1       	ldi	r18, 0x14	; 20
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     e40:	d6 2f       	mov	r29, r22
				g=random(5,20);
     e42:	24 e1       	ldi	r18, 0x14	; 20
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	65 e0       	ldi	r22, 0x05	; 5
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     e56:	c6 2f       	mov	r28, r22
				b=random(5,20);
     e58:	24 e1       	ldi	r18, 0x14	; 20
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	65 e0       	ldi	r22, 0x05	; 5
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	2a c0       	rjmp	.+84     	; 0xebe <_Z11neopix_idlev+0x294>
			}
			else if(i >= 160)	//max score
			{
				idle_refreshInterval = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <idle_refreshInterval>
     e76:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <idle_refreshInterval+0x1>
     e7a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <idle_refreshInterval+0x2>
     e7e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <idle_refreshInterval+0x3>
				r=random(20,30);
     e82:	2e e1       	ldi	r18, 0x1E	; 30
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	64 e1       	ldi	r22, 0x14	; 20
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     e96:	d6 2f       	mov	r29, r22
				g=random(20,30);
     e98:	2e e1       	ldi	r18, 0x1E	; 30
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	64 e1       	ldi	r22, 0x14	; 20
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     eac:	c6 2f       	mov	r28, r22
				b=random(20,30);
     eae:	2e e1       	ldi	r18, 0x1E	; 30
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	64 e1       	ldi	r22, 0x14	; 20
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     ec2:	0a c0       	rjmp	.+20     	; 0xed8 <_Z11neopix_idlev+0x2ae>
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
			uint8_t g = 0;
     ec4:	c0 e0       	ldi	r28, 0x00	; 0
     ec6:	03 c0       	rjmp	.+6      	; 0xece <_Z11neopix_idlev+0x2a4>
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <_Z11neopix_idlev+0x2aa>
				r = 10;
			}
			else if(i >= 32 && i < 48)	//introduce green
			{
				b = 10;
				g = 10;	
     ecc:	ca e0       	ldi	r28, 0x0A	; 10
				led_ID = i;	//wrap around
			*/
				
			//enable more colors if your lvl is more than the 16 LEDs
			uint8_t b = 0;
			uint8_t r = 0;
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <_Z11neopix_idlev+0x2ac>
				b = 10;
				g = 10;	
			}
			else if(i >= 48 && i < 64)	//have all 3 colors
			{
				g=10;	
     ed2:	ca e0       	ldi	r28, 0x0A	; 10
				r=10;
     ed4:	da e0       	ldi	r29, 0x0A	; 10
				b=10;
     ed6:	6a e0       	ldi	r22, 0x0A	; 10
				b=random(20,30);
			}

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
     ed8:	8c 2f       	mov	r24, r28
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e0       	ldi	r26, 0x00	; 0
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ba 2f       	mov	r27, r26
     ee2:	a9 2f       	mov	r26, r25
     ee4:	98 2f       	mov	r25, r24
     ee6:	88 27       	eor	r24, r24
     ee8:	ad 2b       	or	r26, r29
     eea:	9c 01       	movw	r18, r24
     eec:	ad 01       	movw	r20, r26
     eee:	26 2b       	or	r18, r22
     ef0:	b1 01       	movw	r22, r2
     ef2:	86 e2       	ldi	r24, 0x26	; 38
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		
		if(startPosition > 15)	//wrap around when reaching the end led strip
			startPosition = 0;	
			
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<currentLevel; i++)		//determine how many LED should be one
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	ee ce       	rjmp	.-548    	; 0xcdc <_Z11neopix_idlev+0xb2>

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
     f00:	86 e2       	ldi	r24, 0x26	; 38
     f02:	92 e0       	ldi	r25, 0x02	; 2
	}
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	9f 90       	pop	r9
     f1a:	8f 90       	pop	r8
     f1c:	7f 90       	pop	r7
     f1e:	6f 90       	pop	r6
     f20:	5f 90       	pop	r5
     f22:	4f 90       	pop	r4
     f24:	3f 90       	pop	r3
     f26:	2f 90       	pop	r2

				
			//apply color
			pixels.setPixelColor(led_ID, pixels.Color(r,g,b)	);	
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
     f28:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
	}
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <_Z14neopix_successv>:

void neopix_success()
{
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
	static uint32_t ts_lastRefresh = 0;
	
	if(millis() - ts_lastRefresh > 10)
     f60:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
     f64:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <_ZZ14neopix_successvE14ts_lastRefresh>
     f68:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <_ZZ14neopix_successvE14ts_lastRefresh+0x1>
     f6c:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <_ZZ14neopix_successvE14ts_lastRefresh+0x2>
     f70:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <_ZZ14neopix_successvE14ts_lastRefresh+0x3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	8c 19       	sub	r24, r12
     f7a:	9d 09       	sbc	r25, r13
     f7c:	ae 09       	sbc	r26, r14
     f7e:	bf 09       	sbc	r27, r15
     f80:	0b 97       	sbiw	r24, 0x0b	; 11
     f82:	a1 05       	cpc	r26, r1
     f84:	b1 05       	cpc	r27, r1
     f86:	08 f4       	brcc	.+2      	; 0xf8a <_Z14neopix_successv+0x38>
     f88:	58 c0       	rjmp	.+176    	; 0x103a <_Z14neopix_successv+0xe8>
	{
		ts_lastRefresh = millis();
     f8a:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
     f8e:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <_ZZ14neopix_successvE14ts_lastRefresh>
     f92:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <_ZZ14neopix_successvE14ts_lastRefresh+0x1>
     f96:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_ZZ14neopix_successvE14ts_lastRefresh+0x2>
     f9a:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <_ZZ14neopix_successvE14ts_lastRefresh+0x3>
		pixels.clear(); // Set all pixel colors to 'off'
     f9e:	86 e2       	ldi	r24, 0x26	; 38
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <_ZN17Adafruit_NeoPixel5clearEv>
		for(int i=0; i<16; i++)
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
     faa:	2a e0       	ldi	r18, 0x0A	; 10
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	cb 01       	movw	r24, r22
     fb8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     fbc:	16 2f       	mov	r17, r22
     fbe:	2a e0       	ldi	r18, 0x0A	; 10
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	cb 01       	movw	r24, r22
     fcc:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     fd0:	6b 01       	movw	r12, r22
     fd2:	7c 01       	movw	r14, r24
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	cb 01       	movw	r24, r22
     fe2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_Z6randomll>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	99 27       	eor	r25, r25
     fec:	aa 27       	eor	r26, r26
     fee:	bb 27       	eor	r27, r27
     ff0:	dc 01       	movw	r26, r24
     ff2:	99 27       	eor	r25, r25
     ff4:	88 27       	eor	r24, r24
     ff6:	dd 24       	eor	r13, r13
     ff8:	ee 24       	eor	r14, r14
     ffa:	ff 24       	eor	r15, r15
     ffc:	fe 2c       	mov	r15, r14
     ffe:	ed 2c       	mov	r14, r13
    1000:	dc 2c       	mov	r13, r12
    1002:	cc 24       	eor	r12, r12
    1004:	8c 29       	or	r24, r12
    1006:	9d 29       	or	r25, r13
    1008:	ae 29       	or	r26, r14
    100a:	bf 29       	or	r27, r15
    100c:	9c 01       	movw	r18, r24
    100e:	ad 01       	movw	r20, r26
    1010:	21 2b       	or	r18, r17
    1012:	be 01       	movw	r22, r28
    1014:	86 e2       	ldi	r24, 0x26	; 38
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
	
	if(millis() - ts_lastRefresh > 10)
	{
		ts_lastRefresh = millis();
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
    101c:	21 96       	adiw	r28, 0x01	; 1
    101e:	c0 31       	cpi	r28, 0x10	; 16
    1020:	d1 05       	cpc	r29, r1
    1022:	19 f6       	brne	.-122    	; 0xfaa <_Z14neopix_successv+0x58>
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.
    1024:	86 e2       	ldi	r24, 0x26	; 38
    1026:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
		{
			pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.
    1036:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	08 95       	ret

0000104a <_Z19neopix_connectRightv>:

void neopix_connectRight()
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
	static uint32_t ts_lastRefresh = 0;
	static int i = 0;
	
	if(millis() - ts_lastRefresh > 25)
    104e:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1052:	00 91 c2 01 	lds	r16, 0x01C2	; 0x8001c2 <_ZZ19neopix_connectRightvE14ts_lastRefresh>
    1056:	10 91 c3 01 	lds	r17, 0x01C3	; 0x8001c3 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x1>
    105a:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x2>
    105e:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	80 1b       	sub	r24, r16
    1068:	91 0b       	sbc	r25, r17
    106a:	a2 0b       	sbc	r26, r18
    106c:	b3 0b       	sbc	r27, r19
    106e:	4a 97       	sbiw	r24, 0x1a	; 26
    1070:	a1 05       	cpc	r26, r1
    1072:	b1 05       	cpc	r27, r1
    1074:	c0 f1       	brcs	.+112    	; 0x10e6 <_Z19neopix_connectRightv+0x9c>
	{
		ts_lastRefresh = millis();
    1076:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    107a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <_ZZ19neopix_connectRightvE14ts_lastRefresh>
    107e:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x1>
    1082:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x2>
    1086:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <_ZZ19neopix_connectRightvE14ts_lastRefresh+0x3>
		
		i++;
    108a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_ZZ19neopix_connectRightvE1i>
    108e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_ZZ19neopix_connectRightvE1i+0x1>
    1092:	01 96       	adiw	r24, 0x01	; 1
		if(i==7)
    1094:	87 30       	cpi	r24, 0x07	; 7
    1096:	91 05       	cpc	r25, r1
    1098:	29 f0       	breq	.+10     	; 0x10a4 <_Z19neopix_connectRightv+0x5a>
	
	if(millis() - ts_lastRefresh > 25)
	{
		ts_lastRefresh = millis();
		
		i++;
    109a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <_ZZ19neopix_connectRightvE1i+0x1>
    109e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <_ZZ19neopix_connectRightvE1i>
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <_Z19neopix_connectRightv+0x62>
		if(i==7)
			i=0;
    10a4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <_ZZ19neopix_connectRightvE1i+0x1>
    10a8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <_ZZ19neopix_connectRightvE1i>
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
    10ac:	08 e0       	ldi	r16, 0x08	; 8
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	ba 01       	movw	r22, r20
    10ba:	86 e2       	ldi	r24, 0x26	; 38
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
    10c2:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <_ZZ19neopix_connectRightvE1i>
    10c6:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <_ZZ19neopix_connectRightvE1i+0x1>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	4a e0       	ldi	r20, 0x0A	; 10
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	86 e2       	ldi	r24, 0x26	; 38
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    10da:	86 e2       	ldi	r24, 0x26	; 38
    10dc:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
		if(i==7)
			i=0;
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
		pixels.show();
    10e2:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <_Z18neopix_connectLeftv>:

void neopix_connectLeft()
{
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
	static uint32_t ts_lastRefresh = 0;
	static int i = 0;
	
	if(millis() - ts_lastRefresh > 25)
    10f0:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    10f4:	00 91 bc 01 	lds	r16, 0x01BC	; 0x8001bc <_ZZ18neopix_connectLeftvE14ts_lastRefresh>
    10f8:	10 91 bd 01 	lds	r17, 0x01BD	; 0x8001bd <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x1>
    10fc:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x2>
    1100:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	80 1b       	sub	r24, r16
    110a:	91 0b       	sbc	r25, r17
    110c:	a2 0b       	sbc	r26, r18
    110e:	b3 0b       	sbc	r27, r19
    1110:	4a 97       	sbiw	r24, 0x1a	; 26
    1112:	a1 05       	cpc	r26, r1
    1114:	b1 05       	cpc	r27, r1
    1116:	e0 f1       	brcs	.+120    	; 0x1190 <_Z18neopix_connectLeftv+0xa4>
	{
		ts_lastRefresh = millis();
    1118:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    111c:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <_ZZ18neopix_connectLeftvE14ts_lastRefresh>
    1120:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x1>
    1124:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x2>
    1128:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_ZZ18neopix_connectLeftvE14ts_lastRefresh+0x3>
			
		i++;
    112c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    1130:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    1134:	01 96       	adiw	r24, 0x01	; 1
		if(i==7)
    1136:	87 30       	cpi	r24, 0x07	; 7
    1138:	91 05       	cpc	r25, r1
    113a:	29 f0       	breq	.+10     	; 0x1146 <_Z18neopix_connectLeftv+0x5a>
	
	if(millis() - ts_lastRefresh > 25)
	{
		ts_lastRefresh = millis();
			
		i++;
    113c:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x1>
    1140:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
    1144:	04 c0       	rjmp	.+8      	; 0x114e <_Z18neopix_connectLeftv+0x62>
		if(i==7)
			i=0;
    1146:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <__data_end+0x1>
    114a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <__data_end>
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
    114e:	08 e0       	ldi	r16, 0x08	; 8
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	ba 01       	movw	r22, r20
    115c:	86 e2       	ldi	r24, 0x26	; 38
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(7-i, pixels.Color(10,0,0) );
    1164:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    1168:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    116c:	67 e0       	ldi	r22, 0x07	; 7
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	68 1b       	sub	r22, r24
    1172:	79 0b       	sbc	r23, r25
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4a e0       	ldi	r20, 0x0A	; 10
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	86 e2       	ldi	r24, 0x26	; 38
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    1184:	86 e2       	ldi	r24, 0x26	; 38
    1186:	92 e0       	ldi	r25, 0x02	; 2
	}
}
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
		if(i==7)
			i=0;
			
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
		pixels.setPixelColor(7-i, pixels.Color(10,0,0) );
		pixels.show();
    118c:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
	}
}
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <_Z19incrementLoadingBarv>:

uint32_t ts_loadingStartTime = 0;
uint32_t ts_loadingNextIncrement = 0;
void incrementLoadingBar()
{
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
	if(currentlyLoading == false)
    119a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <currentlyLoading>
    119e:	81 11       	cpse	r24, r1
    11a0:	33 c0       	rjmp	.+102    	; 0x1208 <_Z19incrementLoadingBarv+0x72>
	{
		currentlyLoading = true;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <currentlyLoading>
		ts_loadingStartTime = millis();
    11a8:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    11ac:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <ts_loadingStartTime>
    11b0:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <ts_loadingStartTime+0x1>
    11b4:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <ts_loadingStartTime+0x2>
    11b8:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <ts_loadingStartTime+0x3>
		ts_loadingNextIncrement = ts_loadingStartTime + 1000;
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	88 51       	subi	r24, 0x18	; 24
    11c2:	9c 4f       	sbci	r25, 0xFC	; 252
    11c4:	af 4f       	sbci	r26, 0xFF	; 255
    11c6:	bf 4f       	sbci	r27, 0xFF	; 255
    11c8:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <ts_loadingNextIncrement>
    11cc:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <ts_loadingNextIncrement+0x1>
    11d0:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <ts_loadingNextIncrement+0x2>
    11d4:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <ts_loadingNextIncrement+0x3>
		pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
    11d8:	0f e0       	ldi	r16, 0x0F	; 15
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	28 e0       	ldi	r18, 0x08	; 8
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	ba 01       	movw	r22, r20
    11e6:	86 e2       	ldi	r24, 0x26	; 38
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(15, pixels.Color(30,0,30) );
    11ee:	2e e1       	ldi	r18, 0x1E	; 30
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	6f e0       	ldi	r22, 0x0F	; 15
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	86 e2       	ldi	r24, 0x26	; 38
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
    1200:	86 e2       	ldi	r24, 0x26	; 38
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
	}
	
	if(	millis() > ts_loadingNextIncrement && waitingForDisconnect == false)
    1208:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    120c:	00 91 db 01 	lds	r16, 0x01DB	; 0x8001db <ts_loadingNextIncrement>
    1210:	10 91 dc 01 	lds	r17, 0x01DC	; 0x8001dc <ts_loadingNextIncrement+0x1>
    1214:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <ts_loadingNextIncrement+0x2>
    1218:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <ts_loadingNextIncrement+0x3>
    121c:	06 17       	cp	r16, r22
    121e:	17 07       	cpc	r17, r23
    1220:	28 07       	cpc	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	08 f0       	brcs	.+2      	; 0x1228 <_Z19incrementLoadingBarv+0x92>
    1226:	72 c0       	rjmp	.+228    	; 0x130c <_Z19incrementLoadingBarv+0x176>
    1228:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <waitingForDisconnect>
    122c:	81 11       	cpse	r24, r1
    122e:	6e c0       	rjmp	.+220    	; 0x130c <_Z19incrementLoadingBarv+0x176>
	{
		if(loadingBarPos < 8)
    1230:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <loadingBarPos>
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	a0 f5       	brcc	.+104    	; 0x12a0 <_Z19incrementLoadingBarv+0x10a>
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
    1238:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	88 51       	subi	r24, 0x18	; 24
    1242:	9c 4f       	sbci	r25, 0xFC	; 252
    1244:	af 4f       	sbci	r26, 0xFF	; 255
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <ts_loadingNextIncrement>
    124c:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <ts_loadingNextIncrement+0x1>
    1250:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <ts_loadingNextIncrement+0x2>
    1254:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <ts_loadingNextIncrement+0x3>
			loadingBarPos++;
    1258:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <loadingBarPos>
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <loadingBarPos>
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
    1262:	0f e0       	ldi	r16, 0x0F	; 15
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	28 e0       	ldi	r18, 0x08	; 8
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	ba 01       	movw	r22, r20
    1270:	86 e2       	ldi	r24, 0x26	; 38
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.fill( pixels.Color(30,0,30), 15-loadingBarPos+1, loadingBarPos);
    1278:	00 91 e3 01 	lds	r16, 0x01E3	; 0x8001e3 <loadingBarPos>
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	20 e1       	ldi	r18, 0x10	; 16
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	20 1b       	sub	r18, r16
    1284:	31 0b       	sbc	r19, r17
    1286:	4e e1       	ldi	r20, 0x1E	; 30
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	ba 01       	movw	r22, r20
    128c:	86 e2       	ldi	r24, 0x26	; 38
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.show();
    1294:	86 e2       	ldi	r24, 0x26	; 38
    1296:	92 e0       	ldi	r25, 0x02	; 2
			display.print(F("LVL"));
			display.println(currentLevel);
			display.display();
		}
	}
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
			loadingBarPos++;
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
			pixels.fill( pixels.Color(30,0,30), 15-loadingBarPos+1, loadingBarPos);
			pixels.show();
    129c:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN17Adafruit_NeoPixel4showEv>
		}
		else
		{			
			currentLevel++;
    12a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentLevel>
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
			if(currentLevel>=200)	
    12a6:	88 3c       	cpi	r24, 0xC8	; 200
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <_Z19incrementLoadingBarv+0x116>
				currentLevel = 199;		//cap level at 199. No more additional LED animation after 199
    12aa:	87 ec       	ldi	r24, 0xC7	; 199
    12ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <currentLevel>
			waitingForDisconnect = true;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <waitingForDisconnect>
			
			display.clearDisplay();
    12b6:	86 ee       	ldi	r24, 0xE6	; 230
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
			display.setTextSize(2);
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	86 ee       	ldi	r24, 0xE6	; 230
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    12c8:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <display+0xd>
    12cc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <display+0xc>
    cursor_y = y;
    12d0:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <display+0xf>
    12d4:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <display+0xe>
			display.setCursor(0,0);
			display.println(F("YAY LVL++"));
    12d8:	6c e6       	ldi	r22, 0x6C	; 108
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	86 ee       	ldi	r24, 0xE6	; 230
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_ZN5Print7printlnEPK19__FlashStringHelper>
			display.print(F("LVL"));
    12e4:	68 e6       	ldi	r22, 0x68	; 104
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	86 ee       	ldi	r24, 0xE6	; 230
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5printEPK19__FlashStringHelper>
			display.println(currentLevel);
    12f0:	4a e0       	ldi	r20, 0x0A	; 10
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <currentLevel>
    12f8:	86 ee       	ldi	r24, 0xE6	; 230
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN5Print7printlnEhi>
			display.display();
    1300:	86 ee       	ldi	r24, 0xE6	; 230
    1302:	91 e0       	ldi	r25, 0x01	; 1
		}
	}
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
			display.setTextSize(2);
			display.setCursor(0,0);
			display.println(F("YAY LVL++"));
			display.print(F("LVL"));
			display.println(currentLevel);
			display.display();
    1308:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13067displayEv>
		}
	}
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <loop>:
	display.display();      // Show initial text
	display.startscrollleft(0x00, 0x0F);
}

void loop() 
{
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
	//NSEC COMMUNICATION
	bool commLeftConnected = false;
	bool commRightConnected = false;
	if(digitalRead(SIG_L3) == LOW) //scan left port
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	0e 94 93 11 	call	0x2326	; 0x2326 <digitalRead>
    1328:	8c 01       	movw	r16, r24
	else
	{
		commLeftConnected = false;
	}
	
	if(digitalRead(SIG_R2) == LOW) //scan right port
    132a:	86 e0       	ldi	r24, 0x06	; 6
    132c:	0e 94 93 11 	call	0x2326	; 0x2326 <digitalRead>
    1330:	ec 01       	movw	r28, r24
		
		
	//--------------------------------------------
	//DEBUG OUTPUT
	static uint32_t ts_uart = 0;
	if(millis() - ts_uart > 100)
    1332:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1336:	c0 90 d7 01 	lds	r12, 0x01D7	; 0x8001d7 <_ZZ4loopE7ts_uart>
    133a:	d0 90 d8 01 	lds	r13, 0x01D8	; 0x8001d8 <_ZZ4loopE7ts_uart+0x1>
    133e:	e0 90 d9 01 	lds	r14, 0x01D9	; 0x8001d9 <_ZZ4loopE7ts_uart+0x2>
    1342:	f0 90 da 01 	lds	r15, 0x01DA	; 0x8001da <_ZZ4loopE7ts_uart+0x3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8c 19       	sub	r24, r12
    134c:	9d 09       	sbc	r25, r13
    134e:	ae 09       	sbc	r26, r14
    1350:	bf 09       	sbc	r27, r15
    1352:	85 36       	cpi	r24, 0x65	; 101
    1354:	91 05       	cpc	r25, r1
    1356:	a1 05       	cpc	r26, r1
    1358:	b1 05       	cpc	r27, r1
    135a:	08 f4       	brcc	.+2      	; 0x135e <loop+0x4c>
    135c:	8f c0       	rjmp	.+286    	; 0x147c <loop+0x16a>
	{
		ts_uart = millis();
    135e:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1362:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <_ZZ4loopE7ts_uart>
    1366:	70 93 d8 01 	sts	0x01D8, r23	; 0x8001d8 <_ZZ4loopE7ts_uart+0x1>
    136a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <_ZZ4loopE7ts_uart+0x2>
    136e:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <_ZZ4loopE7ts_uart+0x3>
		Serial.print((float)millis()/1000.f);	
    1372:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1376:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__floatunsisf>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4a e7       	ldi	r20, 0x7A	; 122
    1380:	54 e4       	ldi	r21, 0x44	; 68
    1382:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
    1386:	ab 01       	movw	r20, r22
    1388:	bc 01       	movw	r22, r24
    138a:	22 e0       	ldi	r18, 0x02	; 2
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	8c e3       	ldi	r24, 0x3C	; 60
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Print5printEdi>
		Serial.print("\t LVL:");
    1396:	6f e0       	ldi	r22, 0x0F	; 15
    1398:	71 e0       	ldi	r23, 0x01	; 1
    139a:	8c e3       	ldi	r24, 0x3C	; 60
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN5Print5printEPKc>
		Serial.print(currentLevel);
    13a2:	4a e0       	ldi	r20, 0x0A	; 10
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <currentLevel>
    13aa:	8c e3       	ldi	r24, 0x3C	; 60
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN5Print5printEhi>
		
		//cheat code
		if(digitalRead(BTN_U) == LOW)
    13b2:	8f e0       	ldi	r24, 0x0F	; 15
    13b4:	0e 94 93 11 	call	0x2326	; 0x2326 <digitalRead>
    13b8:	89 2b       	or	r24, r25
    13ba:	19 f5       	brne	.+70     	; 0x1402 <loop+0xf0>
		{
			//while(digitalRead(BTN_U) == LOW)
			{
				Serial.print("\t Level Up");
    13bc:	66 e1       	ldi	r22, 0x16	; 22
    13be:	71 e0       	ldi	r23, 0x01	; 1
    13c0:	8c e3       	ldi	r24, 0x3C	; 60
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN5Print5printEPKc>
				currentLevel++;
    13c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentLevel>
    13cc:	8f 5f       	subi	r24, 0xFF	; 255
    13ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <currentLevel>

				display.stopscroll();
    13d2:	86 ee       	ldi	r24, 0xE6	; 230
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 41 23 	call	0x4682	; 0x4682 <_ZN16Adafruit_SSD130610stopscrollEv>
				display.clearDisplay();
    13da:	86 ee       	ldi	r24, 0xE6	; 230
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				display.setTextSize(2);
    13e2:	62 e0       	ldi	r22, 0x02	; 2
    13e4:	86 ee       	ldi	r24, 0xE6	; 230
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    13ec:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <display+0xd>
    13f0:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <display+0xc>
    cursor_y = y;
    13f4:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <display+0xf>
    13f8:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <display+0xe>
				display.setCursor(0,0);
				display.print(F("[md]LVL"));
    13fc:	6f e9       	ldi	r22, 0x9F	; 159
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	27 c0       	rjmp	.+78     	; 0x1450 <loop+0x13e>
				display.print(currentLevel);
				display.display();
			}
		}
		else if(digitalRead(BTN_D) == LOW)
    1402:	80 e1       	ldi	r24, 0x10	; 16
    1404:	0e 94 93 11 	call	0x2326	; 0x2326 <digitalRead>
    1408:	89 2b       	or	r24, r25
    140a:	91 f5       	brne	.+100    	; 0x1470 <loop+0x15e>
		{
			//while(digitalRead(BTN_D) == LOW)
			{
				Serial.print("\t Level Down");
    140c:	61 e2       	ldi	r22, 0x21	; 33
    140e:	71 e0       	ldi	r23, 0x01	; 1
    1410:	8c e3       	ldi	r24, 0x3C	; 60
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN5Print5printEPKc>
				currentLevel--;
    1418:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentLevel>
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <currentLevel>
				
				display.stopscroll();
    1422:	86 ee       	ldi	r24, 0xE6	; 230
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 41 23 	call	0x4682	; 0x4682 <_ZN16Adafruit_SSD130610stopscrollEv>
				display.clearDisplay();
    142a:	86 ee       	ldi	r24, 0xE6	; 230
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				display.setTextSize(2);
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	86 ee       	ldi	r24, 0xE6	; 230
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    143c:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <display+0xd>
    1440:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <display+0xc>
    cursor_y = y;
    1444:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <display+0xf>
    1448:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <display+0xe>
				display.setCursor(0,0);
				display.print(F("[md]LVL"));
    144c:	67 e9       	ldi	r22, 0x97	; 151
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	86 ee       	ldi	r24, 0xE6	; 230
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5printEPK19__FlashStringHelper>
				display.print(currentLevel);
    1458:	4a e0       	ldi	r20, 0x0A	; 10
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <currentLevel>
    1460:	86 ee       	ldi	r24, 0xE6	; 230
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN5Print5printEhi>
				display.display();
    1468:	86 ee       	ldi	r24, 0xE6	; 230
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13067displayEv>
			}
		}
		
		Serial.println("");	
    1470:	62 e4       	ldi	r22, 0x42	; 66
    1472:	71 e0       	ldi	r23, 0x01	; 1
    1474:	8c e3       	ldi	r24, 0x3C	; 60
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN5Print7printlnEPKc>
  
  
	//--------------------------------------------
	//NEOPIXEL UPDATE
	static uint32_t ts_neopix = 0;
	if(millis() - ts_neopix > 1)
    147c:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1480:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <_ZZ4loopE9ts_neopix>
    1484:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <_ZZ4loopE9ts_neopix+0x1>
    1488:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <_ZZ4loopE9ts_neopix+0x2>
    148c:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <_ZZ4loopE9ts_neopix+0x3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8c 19       	sub	r24, r12
    1496:	9d 09       	sbc	r25, r13
    1498:	ae 09       	sbc	r26, r14
    149a:	bf 09       	sbc	r27, r15
    149c:	02 97       	sbiw	r24, 0x02	; 2
    149e:	a1 05       	cpc	r26, r1
    14a0:	b1 05       	cpc	r27, r1
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <loop+0x194>
    14a4:	49 c0       	rjmp	.+146    	; 0x1538 <loop+0x226>
	{
		ts_neopix = millis();
    14a6:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    14aa:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_ZZ4loopE9ts_neopix>
    14ae:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <_ZZ4loopE9ts_neopix+0x1>
    14b2:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZZ4loopE9ts_neopix+0x2>
    14b6:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_ZZ4loopE9ts_neopix+0x3>
		if(commLeftConnected == true)
    14ba:	01 15       	cp	r16, r1
    14bc:	11 05       	cpc	r17, r1
    14be:	61 f4       	brne	.+24     	; 0x14d8 <loop+0x1c6>
		{
			if(waitingForDisconnect == false)
    14c0:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <waitingForDisconnect>
    14c4:	81 11       	cpse	r24, r1
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <loop+0x1c0>
			{
				incrementLoadingBar();
    14c8:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z19incrementLoadingBarv>
				neopix_connectLeft();
    14cc:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z18neopix_connectLeftv>
    14d0:	33 c0       	rjmp	.+102    	; 0x1538 <loop+0x226>
			}
			else
				neopix_success();		
    14d2:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z14neopix_successv>
    14d6:	30 c0       	rjmp	.+96     	; 0x1538 <loop+0x226>
				
		}
		else if(commRightConnected == true)
    14d8:	20 97       	sbiw	r28, 0x00	; 0
    14da:	49 f4       	brne	.+18     	; 0x14ee <loop+0x1dc>
		{
			if(waitingForDisconnect == false)
    14dc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <waitingForDisconnect>
    14e0:	81 11       	cpse	r24, r1
    14e2:	f7 cf       	rjmp	.-18     	; 0x14d2 <loop+0x1c0>
			{
				neopix_connectRight();
    14e4:	0e 94 25 08 	call	0x104a	; 0x104a <_Z19neopix_connectRightv>
				incrementLoadingBar();
    14e8:	0e 94 cb 08 	call	0x1196	; 0x1196 <_Z19incrementLoadingBarv>
    14ec:	25 c0       	rjmp	.+74     	; 0x1538 <loop+0x226>
			else
				neopix_success();
		}
		else
		{
			neopix_idle();
    14ee:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z11neopix_idlev>
			if(waitingForDisconnect == true)	//if you just disconnect after pairing successfully. Return to showing the name
    14f2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <waitingForDisconnect>
    14f6:	88 23       	and	r24, r24
    14f8:	c9 f0       	breq	.+50     	; 0x152c <loop+0x21a>
			{
				display.clearDisplay();
    14fa:	86 ee       	ldi	r24, 0xE6	; 230
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				display.setTextSize(2); // Draw 2X-scale text
    1502:	62 e0       	ldi	r22, 0x02	; 2
    1504:	86 ee       	ldi	r24, 0xE6	; 230
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
				display.print(F("John Smith"));
    150c:	6c e8       	ldi	r22, 0x8C	; 140
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	86 ee       	ldi	r24, 0xE6	; 230
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5printEPK19__FlashStringHelper>
				display.display();      // Show initial text
    1518:	86 ee       	ldi	r24, 0xE6	; 230
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13067displayEv>
				display.startscrollleft(0x00, 0x0F);	
    1520:	4f e0       	ldi	r20, 0x0F	; 15
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	86 ee       	ldi	r24, 0xE6	; 230
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 e5 22 	call	0x45ca	; 0x45ca <_ZN16Adafruit_SSD130615startscrollleftEhh>
			}
			
			waitingForDisconnect = false;	//clear loading bar variables
    152c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <waitingForDisconnect>
			currentlyLoading = false;
    1530:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <currentlyLoading>
			loadingBarPos = 0;
    1534:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <loadingBarPos>

	
	//--------------------------------------------
	//DISPLAY UPDATE
	static uint32_t ts_oled = 0;
	if(millis() - ts_oled > 100)
    1538:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    153c:	c0 90 cf 01 	lds	r12, 0x01CF	; 0x8001cf <_ZZ4loopE7ts_oled>
    1540:	d0 90 d0 01 	lds	r13, 0x01D0	; 0x8001d0 <_ZZ4loopE7ts_oled+0x1>
    1544:	e0 90 d1 01 	lds	r14, 0x01D1	; 0x8001d1 <_ZZ4loopE7ts_oled+0x2>
    1548:	f0 90 d2 01 	lds	r15, 0x01D2	; 0x8001d2 <_ZZ4loopE7ts_oled+0x3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8c 19       	sub	r24, r12
    1552:	9d 09       	sbc	r25, r13
    1554:	ae 09       	sbc	r26, r14
    1556:	bf 09       	sbc	r27, r15
    1558:	85 36       	cpi	r24, 0x65	; 101
    155a:	91 05       	cpc	r25, r1
    155c:	a1 05       	cpc	r26, r1
    155e:	b1 05       	cpc	r27, r1
    1560:	08 f4       	brcc	.+2      	; 0x1564 <loop+0x252>
    1562:	51 c0       	rjmp	.+162    	; 0x1606 <loop+0x2f4>
	{
		ts_oled = millis();
    1564:	0e 94 57 10 	call	0x20ae	; 0x20ae <millis>
    1568:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <_ZZ4loopE7ts_oled>
    156c:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <_ZZ4loopE7ts_oled+0x1>
    1570:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <_ZZ4loopE7ts_oled+0x2>
    1574:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <_ZZ4loopE7ts_oled+0x3>
		
		if(waitingForDisconnect == false)	//only show "pairing" if you just disconnected. After pairing is completed, "waitingForDisconnect" flag will be asserted. Another message will be shown
    1578:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <waitingForDisconnect>
    157c:	81 11       	cpse	r24, r1
    157e:	43 c0       	rjmp	.+134    	; 0x1606 <loop+0x2f4>
		{
			if		(commLeftConnected==true)
    1580:	01 2b       	or	r16, r17
    1582:	c1 f4       	brne	.+48     	; 0x15b4 <loop+0x2a2>
			{
				display.stopscroll();
    1584:	86 ee       	ldi	r24, 0xE6	; 230
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 41 23 	call	0x4682	; 0x4682 <_ZN16Adafruit_SSD130610stopscrollEv>
				display.clearDisplay();
    158c:	86 ee       	ldi	r24, 0xE6	; 230
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				display.setTextSize(2);
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	86 ee       	ldi	r24, 0xE6	; 230
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    159e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <display+0xd>
    15a2:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <display+0xc>
    cursor_y = y;
    15a6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <display+0xf>
    15aa:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <display+0xe>
				display.setCursor(0,0);
				display.println(F("<<<PAIRING"));
    15ae:	61 e8       	ldi	r22, 0x81	; 129
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	19 c0       	rjmp	.+50     	; 0x15e6 <loop+0x2d4>
				display.display();	
			}			
			else if (commRightConnected==true)
    15b4:	cd 2b       	or	r28, r29
    15b6:	39 f5       	brne	.+78     	; 0x1606 <loop+0x2f4>
			{
				display.stopscroll();
    15b8:	86 ee       	ldi	r24, 0xE6	; 230
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	0e 94 41 23 	call	0x4682	; 0x4682 <_ZN16Adafruit_SSD130610stopscrollEv>
				display.clearDisplay();
    15c0:	86 ee       	ldi	r24, 0xE6	; 230
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				display.setTextSize(2);
    15c8:	62 e0       	ldi	r22, 0x02	; 2
    15ca:	86 ee       	ldi	r24, 0xE6	; 230
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    15d2:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <display+0xd>
    15d6:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <display+0xc>
    cursor_y = y;
    15da:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <display+0xf>
    15de:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <display+0xe>
				display.setCursor(0,0);
				display.println(F("PAIRING>>>"));	
    15e2:	66 e7       	ldi	r22, 0x76	; 118
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	86 ee       	ldi	r24, 0xE6	; 230
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_ZN5Print7printlnEPK19__FlashStringHelper>
				display.display();	
    15ee:	86 ee       	ldi	r24, 0xE6	; 230
    15f0:	91 e0       	ldi	r25, 0x01	; 1
			{
				
			}
		}
	}
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
				display.stopscroll();
				display.clearDisplay();
				display.setTextSize(2);
				display.setCursor(0,0);
				display.println(F("PAIRING>>>"));	
				display.display();	
    1602:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_ZN16Adafruit_SSD13067displayEv>
			{
				
			}
		}
	}
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	cf 90       	pop	r12
    1616:	08 95       	ret

00001618 <_GLOBAL__sub_I_pixels>:
			display.print(F("LVL"));
			display.println(currentLevel);
			display.display();
		}
	}
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
#include <Adafruit_SSD1306.h>

//NEOPIXEL DECLARATION
#define PIN			9
#define NUMPIXELS	16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    162a:	22 e5       	ldi	r18, 0x52	; 82
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	49 e0       	ldi	r20, 0x09	; 9
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	60 e1       	ldi	r22, 0x10	; 16
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	86 e2       	ldi	r24, 0x26	; 38
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN17Adafruit_NeoPixelC1Ejij>
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    163e:	80 ea       	ldi	r24, 0xA0	; 160
    1640:	88 2e       	mov	r8, r24
    1642:	86 e8       	ldi	r24, 0x86	; 134
    1644:	98 2e       	mov	r9, r24
    1646:	aa 24       	eor	r10, r10
    1648:	a3 94       	inc	r10
    164a:	b1 2c       	mov	r11, r1
    164c:	90 e8       	ldi	r25, 0x80	; 128
    164e:	c9 2e       	mov	r12, r25
    1650:	9a e1       	ldi	r25, 0x1A	; 26
    1652:	d9 2e       	mov	r13, r25
    1654:	96 e0       	ldi	r25, 0x06	; 6
    1656:	e9 2e       	mov	r14, r25
    1658:	f1 2c       	mov	r15, r1
    165a:	0f ef       	ldi	r16, 0xFF	; 255
    165c:	26 ee       	ldi	r18, 0xE6	; 230
    165e:	32 e0       	ldi	r19, 0x02	; 2
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	60 e8       	ldi	r22, 0x80	; 128
    1664:	86 ee       	ldi	r24, 0xE6	; 230
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
			display.print(F("LVL"));
			display.println(currentLevel);
			display.display();
		}
	}
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	9f 90       	pop	r9
    167c:	8f 90       	pop	r8
    167e:	08 95       	ret

00001680 <_GLOBAL__sub_D_pixels>:
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1680:	86 ee       	ldi	r24, 0xE6	; 230
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <_ZN16Adafruit_SSD1306D1Ev>
#include <Adafruit_SSD1306.h>

//NEOPIXEL DECLARATION
#define PIN			9
#define NUMPIXELS	16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    1688:	86 e2       	ldi	r24, 0x26	; 38
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <_ZN17Adafruit_NeoPixelD1Ev>

00001690 <__divsf3>:
    1690:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3x>
    1694:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_round>
    1698:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_pscB>
    169c:	58 f0       	brcs	.+22     	; 0x16b4 <__divsf3+0x24>
    169e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_pscA>
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <__divsf3+0x24>
    16a4:	29 f4       	brne	.+10     	; 0x16b0 <__divsf3+0x20>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__divsf3+0x24>
    16aa:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_inf>
    16ae:	51 11       	cpse	r21, r1
    16b0:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_szero>
    16b4:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_nan>

000016b8 <__divsf3x>:
    16b8:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_split3>
    16bc:	68 f3       	brcs	.-38     	; 0x1698 <__divsf3+0x8>

000016be <__divsf3_pse>:
    16be:	99 23       	and	r25, r25
    16c0:	b1 f3       	breq	.-20     	; 0x16ae <__divsf3+0x1e>
    16c2:	55 23       	and	r21, r21
    16c4:	91 f3       	breq	.-28     	; 0x16aa <__divsf3+0x1a>
    16c6:	95 1b       	sub	r25, r21
    16c8:	55 0b       	sbc	r21, r21
    16ca:	bb 27       	eor	r27, r27
    16cc:	aa 27       	eor	r26, r26
    16ce:	62 17       	cp	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	38 f0       	brcs	.+14     	; 0x16e4 <__divsf3_pse+0x26>
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	5f 4f       	sbci	r21, 0xFF	; 255
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	44 1f       	adc	r20, r20
    16e0:	aa 1f       	adc	r26, r26
    16e2:	a9 f3       	breq	.-22     	; 0x16ce <__divsf3_pse+0x10>
    16e4:	35 d0       	rcall	.+106    	; 0x1750 <__divsf3_pse+0x92>
    16e6:	0e 2e       	mov	r0, r30
    16e8:	3a f0       	brmi	.+14     	; 0x16f8 <__divsf3_pse+0x3a>
    16ea:	e0 e8       	ldi	r30, 0x80	; 128
    16ec:	32 d0       	rcall	.+100    	; 0x1752 <__divsf3_pse+0x94>
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	e6 95       	lsr	r30
    16f4:	00 1c       	adc	r0, r0
    16f6:	ca f7       	brpl	.-14     	; 0x16ea <__divsf3_pse+0x2c>
    16f8:	2b d0       	rcall	.+86     	; 0x1750 <__divsf3_pse+0x92>
    16fa:	fe 2f       	mov	r31, r30
    16fc:	29 d0       	rcall	.+82     	; 0x1750 <__divsf3_pse+0x92>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	bb 1f       	adc	r27, r27
    1706:	26 17       	cp	r18, r22
    1708:	37 07       	cpc	r19, r23
    170a:	48 07       	cpc	r20, r24
    170c:	ab 07       	cpc	r26, r27
    170e:	b0 e8       	ldi	r27, 0x80	; 128
    1710:	09 f0       	breq	.+2      	; 0x1714 <__divsf3_pse+0x56>
    1712:	bb 0b       	sbc	r27, r27
    1714:	80 2d       	mov	r24, r0
    1716:	bf 01       	movw	r22, r30
    1718:	ff 27       	eor	r31, r31
    171a:	93 58       	subi	r25, 0x83	; 131
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	3a f0       	brmi	.+14     	; 0x172e <__divsf3_pse+0x70>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	78 f0       	brcs	.+30     	; 0x1744 <__divsf3_pse+0x86>
    1726:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_inf>
    172a:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_szero>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	e4 f3       	brlt	.-8      	; 0x172a <__divsf3_pse+0x6c>
    1732:	98 3e       	cpi	r25, 0xE8	; 232
    1734:	d4 f3       	brlt	.-12     	; 0x172a <__divsf3_pse+0x6c>
    1736:	86 95       	lsr	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	b7 95       	ror	r27
    173e:	f7 95       	ror	r31
    1740:	9f 5f       	subi	r25, 0xFF	; 255
    1742:	c9 f7       	brne	.-14     	; 0x1736 <__divsf3_pse+0x78>
    1744:	88 0f       	add	r24, r24
    1746:	91 1d       	adc	r25, r1
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	97 f9       	bld	r25, 7
    174e:	08 95       	ret
    1750:	e1 e0       	ldi	r30, 0x01	; 1
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	bb 1f       	adc	r27, r27
    175a:	62 17       	cp	r22, r18
    175c:	73 07       	cpc	r23, r19
    175e:	84 07       	cpc	r24, r20
    1760:	ba 07       	cpc	r27, r26
    1762:	20 f0       	brcs	.+8      	; 0x176c <__divsf3_pse+0xae>
    1764:	62 1b       	sub	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	84 0b       	sbc	r24, r20
    176a:	ba 0b       	sbc	r27, r26
    176c:	ee 1f       	adc	r30, r30
    176e:	88 f7       	brcc	.-30     	; 0x1752 <__divsf3_pse+0x94>
    1770:	e0 95       	com	r30
    1772:	08 95       	ret

00001774 <__floatunsisf>:
    1774:	e8 94       	clt
    1776:	09 c0       	rjmp	.+18     	; 0x178a <__floatsisf+0x12>

00001778 <__floatsisf>:
    1778:	97 fb       	bst	r25, 7
    177a:	3e f4       	brtc	.+14     	; 0x178a <__floatsisf+0x12>
    177c:	90 95       	com	r25
    177e:	80 95       	com	r24
    1780:	70 95       	com	r23
    1782:	61 95       	neg	r22
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	8f 4f       	sbci	r24, 0xFF	; 255
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	99 23       	and	r25, r25
    178c:	a9 f0       	breq	.+42     	; 0x17b8 <__floatsisf+0x40>
    178e:	f9 2f       	mov	r31, r25
    1790:	96 e9       	ldi	r25, 0x96	; 150
    1792:	bb 27       	eor	r27, r27
    1794:	93 95       	inc	r25
    1796:	f6 95       	lsr	r31
    1798:	87 95       	ror	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	b7 95       	ror	r27
    17a0:	f1 11       	cpse	r31, r1
    17a2:	f8 cf       	rjmp	.-16     	; 0x1794 <__floatsisf+0x1c>
    17a4:	fa f4       	brpl	.+62     	; 0x17e4 <__floatsisf+0x6c>
    17a6:	bb 0f       	add	r27, r27
    17a8:	11 f4       	brne	.+4      	; 0x17ae <__floatsisf+0x36>
    17aa:	60 ff       	sbrs	r22, 0
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <__floatsisf+0x6c>
    17ae:	6f 5f       	subi	r22, 0xFF	; 255
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <__floatsisf+0x6c>
    17b8:	88 23       	and	r24, r24
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <__floatsisf+0x48>
    17bc:	96 e9       	ldi	r25, 0x96	; 150
    17be:	11 c0       	rjmp	.+34     	; 0x17e2 <__floatsisf+0x6a>
    17c0:	77 23       	and	r23, r23
    17c2:	21 f0       	breq	.+8      	; 0x17cc <__floatsisf+0x54>
    17c4:	9e e8       	ldi	r25, 0x8E	; 142
    17c6:	87 2f       	mov	r24, r23
    17c8:	76 2f       	mov	r23, r22
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__floatsisf+0x5e>
    17cc:	66 23       	and	r22, r22
    17ce:	71 f0       	breq	.+28     	; 0x17ec <__floatsisf+0x74>
    17d0:	96 e8       	ldi	r25, 0x86	; 134
    17d2:	86 2f       	mov	r24, r22
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	2a f0       	brmi	.+10     	; 0x17e4 <__floatsisf+0x6c>
    17da:	9a 95       	dec	r25
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	da f7       	brpl	.-10     	; 0x17da <__floatsisf+0x62>
    17e4:	88 0f       	add	r24, r24
    17e6:	96 95       	lsr	r25
    17e8:	87 95       	ror	r24
    17ea:	97 f9       	bld	r25, 7
    17ec:	08 95       	ret

000017ee <__fp_inf>:
    17ee:	97 f9       	bld	r25, 7
    17f0:	9f 67       	ori	r25, 0x7F	; 127
    17f2:	80 e8       	ldi	r24, 0x80	; 128
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	08 95       	ret

000017fa <__fp_nan>:
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	80 ec       	ldi	r24, 0xC0	; 192
    17fe:	08 95       	ret

00001800 <__fp_pscA>:
    1800:	00 24       	eor	r0, r0
    1802:	0a 94       	dec	r0
    1804:	16 16       	cp	r1, r22
    1806:	17 06       	cpc	r1, r23
    1808:	18 06       	cpc	r1, r24
    180a:	09 06       	cpc	r0, r25
    180c:	08 95       	ret

0000180e <__fp_pscB>:
    180e:	00 24       	eor	r0, r0
    1810:	0a 94       	dec	r0
    1812:	12 16       	cp	r1, r18
    1814:	13 06       	cpc	r1, r19
    1816:	14 06       	cpc	r1, r20
    1818:	05 06       	cpc	r0, r21
    181a:	08 95       	ret

0000181c <__fp_round>:
    181c:	09 2e       	mov	r0, r25
    181e:	03 94       	inc	r0
    1820:	00 0c       	add	r0, r0
    1822:	11 f4       	brne	.+4      	; 0x1828 <__fp_round+0xc>
    1824:	88 23       	and	r24, r24
    1826:	52 f0       	brmi	.+20     	; 0x183c <__fp_round+0x20>
    1828:	bb 0f       	add	r27, r27
    182a:	40 f4       	brcc	.+16     	; 0x183c <__fp_round+0x20>
    182c:	bf 2b       	or	r27, r31
    182e:	11 f4       	brne	.+4      	; 0x1834 <__fp_round+0x18>
    1830:	60 ff       	sbrs	r22, 0
    1832:	04 c0       	rjmp	.+8      	; 0x183c <__fp_round+0x20>
    1834:	6f 5f       	subi	r22, 0xFF	; 255
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	8f 4f       	sbci	r24, 0xFF	; 255
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	08 95       	ret

0000183e <__fp_split3>:
    183e:	57 fd       	sbrc	r21, 7
    1840:	90 58       	subi	r25, 0x80	; 128
    1842:	44 0f       	add	r20, r20
    1844:	55 1f       	adc	r21, r21
    1846:	59 f0       	breq	.+22     	; 0x185e <__fp_splitA+0x10>
    1848:	5f 3f       	cpi	r21, 0xFF	; 255
    184a:	71 f0       	breq	.+28     	; 0x1868 <__fp_splitA+0x1a>
    184c:	47 95       	ror	r20

0000184e <__fp_splitA>:
    184e:	88 0f       	add	r24, r24
    1850:	97 fb       	bst	r25, 7
    1852:	99 1f       	adc	r25, r25
    1854:	61 f0       	breq	.+24     	; 0x186e <__fp_splitA+0x20>
    1856:	9f 3f       	cpi	r25, 0xFF	; 255
    1858:	79 f0       	breq	.+30     	; 0x1878 <__fp_splitA+0x2a>
    185a:	87 95       	ror	r24
    185c:	08 95       	ret
    185e:	12 16       	cp	r1, r18
    1860:	13 06       	cpc	r1, r19
    1862:	14 06       	cpc	r1, r20
    1864:	55 1f       	adc	r21, r21
    1866:	f2 cf       	rjmp	.-28     	; 0x184c <__fp_split3+0xe>
    1868:	46 95       	lsr	r20
    186a:	f1 df       	rcall	.-30     	; 0x184e <__fp_splitA>
    186c:	08 c0       	rjmp	.+16     	; 0x187e <__fp_splitA+0x30>
    186e:	16 16       	cp	r1, r22
    1870:	17 06       	cpc	r1, r23
    1872:	18 06       	cpc	r1, r24
    1874:	99 1f       	adc	r25, r25
    1876:	f1 cf       	rjmp	.-30     	; 0x185a <__fp_splitA+0xc>
    1878:	86 95       	lsr	r24
    187a:	71 05       	cpc	r23, r1
    187c:	61 05       	cpc	r22, r1
    187e:	08 94       	sec
    1880:	08 95       	ret

00001882 <__fp_zero>:
    1882:	e8 94       	clt

00001884 <__fp_szero>:
    1884:	bb 27       	eor	r27, r27
    1886:	66 27       	eor	r22, r22
    1888:	77 27       	eor	r23, r23
    188a:	cb 01       	movw	r24, r22
    188c:	97 f9       	bld	r25, 7
    188e:	08 95       	ret

00001890 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1890:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1892:	91 8d       	ldd	r25, Z+25	; 0x19
    1894:	22 8d       	ldd	r18, Z+26	; 0x1a
    1896:	89 2f       	mov	r24, r25
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	80 5c       	subi	r24, 0xC0	; 192
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	82 1b       	sub	r24, r18
    18a0:	91 09       	sbc	r25, r1
}
    18a2:	8f 73       	andi	r24, 0x3F	; 63
    18a4:	99 27       	eor	r25, r25
    18a6:	08 95       	ret

000018a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18a8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18aa:	91 8d       	ldd	r25, Z+25	; 0x19
    18ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ae:	98 17       	cp	r25, r24
    18b0:	31 f0       	breq	.+12     	; 0x18be <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b4:	e8 0f       	add	r30, r24
    18b6:	f1 1d       	adc	r31, r1
    18b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18c2:	08 95       	ret

000018c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18c4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18c6:	91 8d       	ldd	r25, Z+25	; 0x19
    18c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ca:	98 17       	cp	r25, r24
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    18d0:	df 01       	movw	r26, r30
    18d2:	a8 0f       	add	r26, r24
    18d4:	b1 1d       	adc	r27, r1
    18d6:	5d 96       	adiw	r26, 0x1d	; 29
    18d8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18da:	92 8d       	ldd	r25, Z+26	; 0x1a
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	9f 73       	andi	r25, 0x3F	; 63
    18e0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    18ea:	08 95       	ret

000018ec <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    18ec:	fc 01       	movw	r30, r24
    18ee:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    18f0:	44 8d       	ldd	r20, Z+28	; 0x1c
    18f2:	25 2f       	mov	r18, r21
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	84 2f       	mov	r24, r20
    18f8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    18fa:	82 1b       	sub	r24, r18
    18fc:	93 0b       	sbc	r25, r19
    18fe:	54 17       	cp	r21, r20
    1900:	10 f0       	brcs	.+4      	; 0x1906 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1902:	cf 96       	adiw	r24, 0x3f	; 63
    1904:	08 95       	ret
  return tail - head - 1;
    1906:	01 97       	sbiw	r24, 0x01	; 1
}
    1908:	08 95       	ret

0000190a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    190a:	80 ee       	ldi	r24, 0xE0	; 224
    190c:	9d e0       	ldi	r25, 0x0D	; 13
    190e:	89 2b       	or	r24, r25
    1910:	49 f0       	breq	.+18     	; 0x1924 <_Z14serialEventRunv+0x1a>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	89 2b       	or	r24, r25
    1918:	29 f0       	breq	.+10     	; 0x1924 <_Z14serialEventRunv+0x1a>
    191a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_Z17Serial0_availablev>
    191e:	81 11       	cpse	r24, r1
    1920:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1924:	08 95       	ret

00001926 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1926:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1928:	84 8d       	ldd	r24, Z+28	; 0x1c
    192a:	df 01       	movw	r26, r30
    192c:	a8 0f       	add	r26, r24
    192e:	b1 1d       	adc	r27, r1
    1930:	a3 5a       	subi	r26, 0xA3	; 163
    1932:	bf 4f       	sbci	r27, 0xFF	; 255
    1934:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1936:	84 8d       	ldd	r24, Z+28	; 0x1c
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	8f 73       	andi	r24, 0x3F	; 63
    193e:	99 27       	eor	r25, r25
    1940:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1942:	a6 89       	ldd	r26, Z+22	; 0x16
    1944:	b7 89       	ldd	r27, Z+23	; 0x17
    1946:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1948:	a0 89       	ldd	r26, Z+16	; 0x10
    194a:	b1 89       	ldd	r27, Z+17	; 0x11
    194c:	8c 91       	ld	r24, X
    194e:	83 70       	andi	r24, 0x03	; 3
    1950:	80 64       	ori	r24, 0x40	; 64
    1952:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1954:	93 8d       	ldd	r25, Z+27	; 0x1b
    1956:	84 8d       	ldd	r24, Z+28	; 0x1c
    1958:	98 13       	cpse	r25, r24
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    195c:	02 88       	ldd	r0, Z+18	; 0x12
    195e:	f3 89       	ldd	r31, Z+19	; 0x13
    1960:	e0 2d       	mov	r30, r0
    1962:	80 81       	ld	r24, Z
    1964:	8f 7d       	andi	r24, 0xDF	; 223
    1966:	80 83       	st	Z, r24
    1968:	08 95       	ret

0000196a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	ec 01       	movw	r28, r24
  _written = true;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    197c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    197e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1980:	98 13       	cpse	r25, r24
    1982:	05 c0       	rjmp	.+10     	; 0x198e <_ZN14HardwareSerial5writeEh+0x24>
    1984:	e8 89       	ldd	r30, Y+16	; 0x10
    1986:	f9 89       	ldd	r31, Y+17	; 0x11
    1988:	80 81       	ld	r24, Z
    198a:	85 fd       	sbrc	r24, 5
    198c:	26 c0       	rjmp	.+76     	; 0x19da <_ZN14HardwareSerial5writeEh+0x70>
    198e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1990:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	0f 5f       	subi	r16, 0xFF	; 255
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	0f 73       	andi	r16, 0x3F	; 63
    199a:	11 27       	eor	r17, r17
    199c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    199e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19a0:	e8 12       	cpse	r14, r24
    19a2:	0c c0       	rjmp	.+24     	; 0x19bc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	07 fc       	sbrc	r0, 7
    19a8:	fa cf       	rjmp	.-12     	; 0x199e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19aa:	e8 89       	ldd	r30, Y+16	; 0x10
    19ac:	f9 89       	ldd	r31, Y+17	; 0x11
    19ae:	80 81       	ld	r24, Z
    19b0:	85 ff       	sbrs	r24, 5
    19b2:	f5 cf       	rjmp	.-22     	; 0x199e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    19b4:	ce 01       	movw	r24, r28
    19b6:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19ba:	f1 cf       	rjmp	.-30     	; 0x199e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    19bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19be:	fe 01       	movw	r30, r28
    19c0:	e8 0f       	add	r30, r24
    19c2:	f1 1d       	adc	r31, r1
    19c4:	e3 5a       	subi	r30, 0xA3	; 163
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19ca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19cc:	f8 94       	cli
    _tx_buffer_head = i;
    19ce:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    19d0:	ea 89       	ldd	r30, Y+18	; 0x12
    19d2:	fb 89       	ldd	r31, Y+19	; 0x13
    19d4:	80 81       	ld	r24, Z
    19d6:	80 62       	ori	r24, 0x20	; 32
    19d8:	0a c0       	rjmp	.+20     	; 0x19ee <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    19da:	9f b7       	in	r25, 0x3f	; 63
    19dc:	f8 94       	cli
      *_udr = c;
    19de:	ee 89       	ldd	r30, Y+22	; 0x16
    19e0:	ff 89       	ldd	r31, Y+23	; 0x17
    19e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    19e4:	e8 89       	ldd	r30, Y+16	; 0x10
    19e6:	f9 89       	ldd	r31, Y+17	; 0x11
    19e8:	80 81       	ld	r24, Z
    19ea:	83 70       	andi	r24, 0x03	; 3
    19ec:	80 64       	ori	r24, 0x40	; 64
    19ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	08 95       	ret

00001a04 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1a0c:	88 23       	and	r24, r24
    1a0e:	c9 f0       	breq	.+50     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a10:	ea 89       	ldd	r30, Y+18	; 0x12
    1a12:	fb 89       	ldd	r31, Y+19	; 0x13
    1a14:	80 81       	ld	r24, Z
    1a16:	85 fd       	sbrc	r24, 5
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <_ZN14HardwareSerial5flushEv+0x20>
    1a1a:	a8 89       	ldd	r26, Y+16	; 0x10
    1a1c:	b9 89       	ldd	r27, Y+17	; 0x11
    1a1e:	8c 91       	ld	r24, X
    1a20:	86 fd       	sbrc	r24, 6
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	07 fc       	sbrc	r0, 7
    1a28:	f5 cf       	rjmp	.-22     	; 0x1a14 <_ZN14HardwareSerial5flushEv+0x10>
    1a2a:	80 81       	ld	r24, Z
    1a2c:	85 ff       	sbrs	r24, 5
    1a2e:	f2 cf       	rjmp	.-28     	; 0x1a14 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a30:	a8 89       	ldd	r26, Y+16	; 0x10
    1a32:	b9 89       	ldd	r27, Y+17	; 0x11
    1a34:	8c 91       	ld	r24, X
    1a36:	85 ff       	sbrs	r24, 5
    1a38:	ed cf       	rjmp	.-38     	; 0x1a14 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a40:	e7 cf       	rjmp	.-50     	; 0x1a10 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	ec 01       	movw	r28, r24
    1a58:	6a 01       	movw	r12, r20
    1a5a:	7b 01       	movw	r14, r22
    1a5c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a5e:	60 e8       	ldi	r22, 0x80	; 128
    1a60:	74 e8       	ldi	r23, 0x84	; 132
    1a62:	8e e1       	ldi	r24, 0x1E	; 30
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a7 01       	movw	r20, r14
    1a68:	96 01       	movw	r18, r12
    1a6a:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <__udivmodsi4>
    1a6e:	da 01       	movw	r26, r20
    1a70:	c9 01       	movw	r24, r18
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	a1 09       	sbc	r26, r1
    1a76:	b1 09       	sbc	r27, r1
    1a78:	b6 95       	lsr	r27
    1a7a:	a7 95       	ror	r26
    1a7c:	97 95       	ror	r25
    1a7e:	87 95       	ror	r24
    1a80:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1a82:	e8 89       	ldd	r30, Y+16	; 0x10
    1a84:	f9 89       	ldd	r31, Y+17	; 0x11
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a8a:	21 15       	cp	r18, r1
    1a8c:	80 e1       	ldi	r24, 0x10	; 16
    1a8e:	38 07       	cpc	r19, r24
    1a90:	a8 f0       	brcs	.+42     	; 0x1abc <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1a92:	e8 89       	ldd	r30, Y+16	; 0x10
    1a94:	f9 89       	ldd	r31, Y+17	; 0x11
    1a96:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a98:	60 e4       	ldi	r22, 0x40	; 64
    1a9a:	72 e4       	ldi	r23, 0x42	; 66
    1a9c:	8f e0       	ldi	r24, 0x0F	; 15
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a7 01       	movw	r20, r14
    1aa2:	96 01       	movw	r18, r12
    1aa4:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <__udivmodsi4>
    1aa8:	da 01       	movw	r26, r20
    1aaa:	c9 01       	movw	r24, r18
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	a1 09       	sbc	r26, r1
    1ab0:	b1 09       	sbc	r27, r1
    1ab2:	b6 95       	lsr	r27
    1ab4:	a7 95       	ror	r26
    1ab6:	97 95       	ror	r25
    1ab8:	87 95       	ror	r24
    1aba:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1abc:	ec 85       	ldd	r30, Y+12	; 0x0c
    1abe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ac0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ac2:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ac4:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ac6:	20 83       	st	Z, r18

  _written = false;
    1ac8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1aca:	ec 89       	ldd	r30, Y+20	; 0x14
    1acc:	fd 89       	ldd	r31, Y+21	; 0x15
    1ace:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1ad0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ad2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 61       	ori	r24, 0x10	; 16
    1ad8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1ada:	ea 89       	ldd	r30, Y+18	; 0x12
    1adc:	fb 89       	ldd	r31, Y+19	; 0x13
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 60       	ori	r24, 0x08	; 8
    1ae2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1ae4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ae6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1aee:	ea 89       	ldd	r30, Y+18	; 0x12
    1af0:	fb 89       	ldd	r31, Y+19	; 0x13
    1af2:	80 81       	ld	r24, Z
    1af4:	8f 7d       	andi	r24, 0xDF	; 223
    1af6:	80 83       	st	Z, r24
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	08 95       	ret

00001b08 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	08 95       	ret

00001b0e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1b0e:	08 95       	ret

00001b10 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	8f 93       	push	r24
    1b1e:	9f 93       	push	r25
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b24:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <Serial+0x10>
    1b28:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <Serial+0x11>
    1b2c:	80 81       	ld	r24, Z
    1b2e:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <Serial+0x16>
    1b32:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <Serial+0x17>
    1b36:	82 fd       	sbrc	r24, 2
    1b38:	12 c0       	rjmp	.+36     	; 0x1b5e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b3a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b3c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <Serial+0x19>
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b44:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <Serial+0x1a>
    1b48:	82 17       	cp	r24, r18
    1b4a:	51 f0       	breq	.+20     	; 0x1b60 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b4c:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <Serial+0x19>
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	e4 5c       	subi	r30, 0xC4	; 196
    1b54:	fd 4f       	sbci	r31, 0xFD	; 253
    1b56:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1b58:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <Serial+0x19>
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b5e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b60:	ff 91       	pop	r31
    1b62:	ef 91       	pop	r30
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	2f 91       	pop	r18
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1b96:	8c e3       	ldi	r24, 0x3C	; 60
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1bc0:	8c e3       	ldi	r24, 0x3C	; 60
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN14HardwareSerial9availableEv>
    1bc8:	21 e0       	ldi	r18, 0x01	; 1
    1bca:	89 2b       	or	r24, r25
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <_Z17Serial0_availablev+0x10>
    1bce:	20 e0       	ldi	r18, 0x00	; 0
}
    1bd0:	82 2f       	mov	r24, r18
    1bd2:	08 95       	ret

00001bd4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1bd4:	ec e3       	ldi	r30, 0x3C	; 60
    1bd6:	f2 e0       	ldi	r31, 0x02	; 2
    1bd8:	13 82       	std	Z+3, r1	; 0x03
    1bda:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1bdc:	88 ee       	ldi	r24, 0xE8	; 232
    1bde:	93 e0       	ldi	r25, 0x03	; 3
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	84 83       	std	Z+4, r24	; 0x04
    1be6:	95 83       	std	Z+5, r25	; 0x05
    1be8:	a6 83       	std	Z+6, r26	; 0x06
    1bea:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1bec:	82 e3       	ldi	r24, 0x32	; 50
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	85 ec       	ldi	r24, 0xC5	; 197
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	95 87       	std	Z+13, r25	; 0x0d
    1bfa:	84 87       	std	Z+12, r24	; 0x0c
    1bfc:	84 ec       	ldi	r24, 0xC4	; 196
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	97 87       	std	Z+15, r25	; 0x0f
    1c02:	86 87       	std	Z+14, r24	; 0x0e
    1c04:	80 ec       	ldi	r24, 0xC0	; 192
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	91 8b       	std	Z+17, r25	; 0x11
    1c0a:	80 8b       	std	Z+16, r24	; 0x10
    1c0c:	81 ec       	ldi	r24, 0xC1	; 193
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	93 8b       	std	Z+19, r25	; 0x13
    1c12:	82 8b       	std	Z+18, r24	; 0x12
    1c14:	82 ec       	ldi	r24, 0xC2	; 194
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	95 8b       	std	Z+21, r25	; 0x15
    1c1a:	84 8b       	std	Z+20, r24	; 0x14
    1c1c:	86 ec       	ldi	r24, 0xC6	; 198
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	97 8b       	std	Z+23, r25	; 0x17
    1c22:	86 8b       	std	Z+22, r24	; 0x16
    1c24:	11 8e       	std	Z+25, r1	; 0x19
    1c26:	12 8e       	std	Z+26, r1	; 0x1a
    1c28:	13 8e       	std	Z+27, r1	; 0x1b
    1c2a:	14 8e       	std	Z+28, r1	; 0x1c
    1c2c:	08 95       	ret

00001c2e <initVariant>:
    1c2e:	08 95       	ret

00001c30 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c30:	0e 94 c4 10 	call	0x2188	; 0x2188 <init>

	initVariant();
    1c34:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c38:	0e 94 a7 05 	call	0xb4e	; 0xb4e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c3c:	c5 e8       	ldi	r28, 0x85	; 133
    1c3e:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c40:	0e 94 89 09 	call	0x1312	; 0x1312 <loop>
		if (serialEventRun) serialEventRun();
    1c44:	20 97       	sbiw	r28, 0x00	; 0
    1c46:	e1 f3       	breq	.-8      	; 0x1c40 <main+0x10>
    1c48:	0e 94 85 0c 	call	0x190a	; 0x190a <_Z14serialEventRunv>
    1c4c:	f9 cf       	rjmp	.-14     	; 0x1c40 <main+0x10>

00001c4e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	6c 01       	movw	r12, r24
    1c60:	7a 01       	movw	r14, r20
    1c62:	8b 01       	movw	r16, r22
    1c64:	c0 e0       	ldi	r28, 0x00	; 0
    1c66:	d0 e0       	ldi	r29, 0x00	; 0
    1c68:	ce 15       	cp	r28, r14
    1c6a:	df 05       	cpc	r29, r15
    1c6c:	81 f0       	breq	.+32     	; 0x1c8e <_ZN5Print5writeEPKhj+0x40>
    1c6e:	d8 01       	movw	r26, r16
    1c70:	6d 91       	ld	r22, X+
    1c72:	8d 01       	movw	r16, r26
    1c74:	d6 01       	movw	r26, r12
    1c76:	ed 91       	ld	r30, X+
    1c78:	fc 91       	ld	r31, X
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	f0 81       	ld	r31, Z
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	c6 01       	movw	r24, r12
    1c82:	09 95       	icall
    1c84:	89 2b       	or	r24, r25
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <_ZN5Print5writeEPKhj+0x3e>
    1c88:	21 96       	adiw	r28, 0x01	; 1
    1c8a:	ee cf       	rjmp	.-36     	; 0x1c68 <_ZN5Print5writeEPKhj+0x1a>
    1c8c:	7e 01       	movw	r14, r28
    1c8e:	c7 01       	movw	r24, r14
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	08 95       	ret

00001ca2 <_ZN5Print5writeEPKc>:
    1ca2:	61 15       	cp	r22, r1
    1ca4:	71 05       	cpc	r23, r1
    1ca6:	79 f0       	breq	.+30     	; 0x1cc6 <_ZN5Print5writeEPKc+0x24>
    1ca8:	fb 01       	movw	r30, r22
    1caa:	01 90       	ld	r0, Z+
    1cac:	00 20       	and	r0, r0
    1cae:	e9 f7       	brne	.-6      	; 0x1caa <_ZN5Print5writeEPKc+0x8>
    1cb0:	31 97       	sbiw	r30, 0x01	; 1
    1cb2:	af 01       	movw	r20, r30
    1cb4:	46 1b       	sub	r20, r22
    1cb6:	57 0b       	sbc	r21, r23
    1cb8:	dc 01       	movw	r26, r24
    1cba:	ed 91       	ld	r30, X+
    1cbc:	fc 91       	ld	r31, X
    1cbe:	02 80       	ldd	r0, Z+2	; 0x02
    1cc0:	f3 81       	ldd	r31, Z+3	; 0x03
    1cc2:	e0 2d       	mov	r30, r0
    1cc4:	09 94       	ijmp
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	08 95       	ret

00001ccc <_ZN5Print5printEPK19__FlashStringHelper>:
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	8c 01       	movw	r16, r24
    1cda:	7b 01       	movw	r14, r22
    1cdc:	c0 e0       	ldi	r28, 0x00	; 0
    1cde:	d0 e0       	ldi	r29, 0x00	; 0
    1ce0:	f7 01       	movw	r30, r14
    1ce2:	ec 0f       	add	r30, r28
    1ce4:	fd 1f       	adc	r31, r29
    1ce6:	64 91       	lpm	r22, Z
    1ce8:	66 23       	and	r22, r22
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1cec:	d8 01       	movw	r26, r16
    1cee:	ed 91       	ld	r30, X+
    1cf0:	fc 91       	ld	r31, X
    1cf2:	01 90       	ld	r0, Z+
    1cf4:	f0 81       	ld	r31, Z
    1cf6:	e0 2d       	mov	r30, r0
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	09 95       	icall
    1cfc:	89 2b       	or	r24, r25
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d00:	21 96       	adiw	r28, 0x01	; 1
    1d02:	ee cf       	rjmp	.-36     	; 0x1ce0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1d04:	ce 01       	movw	r24, r28
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <_ZN5Print5printEPKc>:
    1d14:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZN5Print5writeEPKc>

00001d18 <_ZN5Print5printEc>:
    1d18:	dc 01       	movw	r26, r24
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	01 90       	ld	r0, Z+
    1d20:	f0 81       	ld	r31, Z
    1d22:	e0 2d       	mov	r30, r0
    1d24:	09 94       	ijmp

00001d26 <_ZN5Print7printlnEv>:
    1d26:	60 e4       	ldi	r22, 0x40	; 64
    1d28:	71 e0       	ldi	r23, 0x01	; 1
    1d2a:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZN5Print5writeEPKc>

00001d2e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	ec 01       	movw	r28, r24
    1d38:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5Print5printEPK19__FlashStringHelper>
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	ce 01       	movw	r24, r28
    1d40:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN5Print7printlnEv>
    1d44:	80 0f       	add	r24, r16
    1d46:	91 1f       	adc	r25, r17
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <_ZN5Print7printlnEPKc>:
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN5Print5writeEPKc>
    1d60:	8c 01       	movw	r16, r24
    1d62:	ce 01       	movw	r24, r28
    1d64:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN5Print7printlnEv>
    1d68:	80 0f       	add	r24, r16
    1d6a:	91 1f       	adc	r25, r17
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	08 95       	ret

00001d76 <_ZN5Print11printNumberEmh>:
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	a1 97       	sbiw	r28, 0x21	; 33
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	7c 01       	movw	r14, r24
    1d9c:	fa 01       	movw	r30, r20
    1d9e:	cb 01       	movw	r24, r22
    1da0:	19 a2       	std	Y+33, r1	; 0x21
    1da2:	22 30       	cpi	r18, 0x02	; 2
    1da4:	08 f4       	brcc	.+2      	; 0x1da8 <_ZN5Print11printNumberEmh+0x32>
    1da6:	2a e0       	ldi	r18, 0x0A	; 10
    1da8:	8e 01       	movw	r16, r28
    1daa:	0f 5d       	subi	r16, 0xDF	; 223
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	82 2e       	mov	r8, r18
    1db0:	91 2c       	mov	r9, r1
    1db2:	a1 2c       	mov	r10, r1
    1db4:	b1 2c       	mov	r11, r1
    1db6:	bf 01       	movw	r22, r30
    1db8:	a5 01       	movw	r20, r10
    1dba:	94 01       	movw	r18, r8
    1dbc:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <__udivmodsi4>
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	ca 01       	movw	r24, r20
    1dc4:	01 50       	subi	r16, 0x01	; 1
    1dc6:	11 09       	sbc	r17, r1
    1dc8:	6a 30       	cpi	r22, 0x0A	; 10
    1dca:	10 f4       	brcc	.+4      	; 0x1dd0 <_ZN5Print11printNumberEmh+0x5a>
    1dcc:	60 5d       	subi	r22, 0xD0	; 208
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <_ZN5Print11printNumberEmh+0x5c>
    1dd0:	69 5c       	subi	r22, 0xC9	; 201
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	6c 93       	st	X, r22
    1dd6:	23 2b       	or	r18, r19
    1dd8:	24 2b       	or	r18, r20
    1dda:	25 2b       	or	r18, r21
    1ddc:	61 f7       	brne	.-40     	; 0x1db6 <_ZN5Print11printNumberEmh+0x40>
    1dde:	b8 01       	movw	r22, r16
    1de0:	c7 01       	movw	r24, r14
    1de2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN5Print5writeEPKc>
    1de6:	a1 96       	adiw	r28, 0x21	; 33
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	9f 90       	pop	r9
    1e04:	8f 90       	pop	r8
    1e06:	08 95       	ret

00001e08 <_ZN5Print5printEmi>:
    1e08:	21 15       	cp	r18, r1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	41 f4       	brne	.+16     	; 0x1e1e <_ZN5Print5printEmi+0x16>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	01 90       	ld	r0, Z+
    1e16:	f0 81       	ld	r31, Z
    1e18:	e0 2d       	mov	r30, r0
    1e1a:	64 2f       	mov	r22, r20
    1e1c:	09 94       	ijmp
    1e1e:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <_ZN5Print11printNumberEmh>

00001e22 <_ZN5Print5printEhi>:
    1e22:	9a 01       	movw	r18, r20
    1e24:	46 2f       	mov	r20, r22
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <_ZN5Print5printEmi>

00001e30 <_ZN5Print7printlnEhi>:
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	ec 01       	movw	r28, r24
    1e3a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN5Print5printEhi>
    1e3e:	8c 01       	movw	r16, r24
    1e40:	ce 01       	movw	r24, r28
    1e42:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN5Print7printlnEv>
    1e46:	80 0f       	add	r24, r16
    1e48:	91 1f       	adc	r25, r17
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	08 95       	ret

00001e54 <_ZN5Print5printEji>:
    1e54:	9a 01       	movw	r18, r20
    1e56:	ab 01       	movw	r20, r22
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <_ZN5Print5printEmi>

00001e60 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	6a 01       	movw	r12, r20
    1e7e:	7b 01       	movw	r14, r22
    1e80:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1e82:	9a 01       	movw	r18, r20
    1e84:	ab 01       	movw	r20, r22
    1e86:	c7 01       	movw	r24, r14
    1e88:	b6 01       	movw	r22, r12
    1e8a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <__unordsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	19 f0       	breq	.+6      	; 0x1e98 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e92:	63 e4       	ldi	r22, 0x43	; 67
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1e98:	46 01       	movw	r8, r12
    1e9a:	57 01       	movw	r10, r14
    1e9c:	e8 94       	clt
    1e9e:	b7 f8       	bld	r11, 7
    1ea0:	2f ef       	ldi	r18, 0xFF	; 255
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	5f e7       	ldi	r21, 0x7F	; 127
    1ea8:	c5 01       	movw	r24, r10
    1eaa:	b4 01       	movw	r22, r8
    1eac:	0e 94 db 28 	call	0x51b6	; 0x51b6 <__unordsf2>
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	0d c0       	rjmp	.+26     	; 0x1ece <_ZN5Print10printFloatEdh+0x6e>
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	5f e7       	ldi	r21, 0x7F	; 127
    1ebc:	c5 01       	movw	r24, r10
    1ebe:	b4 01       	movw	r22, r8
    1ec0:	0e 94 11 28 	call	0x5022	; 0x5022 <__cmpsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	1c f4       	brge	.+6      	; 0x1ece <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ec8:	67 e4       	ldi	r22, 0x47	; 71
    1eca:	71 e0       	ldi	r23, 0x01	; 1
    1ecc:	0c c0       	rjmp	.+24     	; 0x1ee6 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1ece:	2f ef       	ldi	r18, 0xFF	; 255
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	5f e4       	ldi	r21, 0x4F	; 79
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__gesf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	94 f4       	brge	.+36     	; 0x1f06 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ee2:	6b e4       	ldi	r22, 0x4B	; 75
    1ee4:	71 e0       	ldi	r23, 0x01	; 1
    1ee6:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	9f 90       	pop	r9
    1efe:	8f 90       	pop	r8
    1f00:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f02:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1f06:	2f ef       	ldi	r18, 0xFF	; 255
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	5f ec       	ldi	r21, 0xCF	; 207
    1f0e:	c7 01       	movw	r24, r14
    1f10:	b6 01       	movw	r22, r12
    1f12:	0e 94 11 28 	call	0x5022	; 0x5022 <__cmpsf2>
    1f16:	87 fd       	sbrc	r24, 7
    1f18:	e4 cf       	rjmp	.-56     	; 0x1ee2 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	a9 01       	movw	r20, r18
    1f20:	c7 01       	movw	r24, r14
    1f22:	b6 01       	movw	r22, r12
    1f24:	0e 94 11 28 	call	0x5022	; 0x5022 <__cmpsf2>
    1f28:	87 ff       	sbrs	r24, 7
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1f2c:	6d e2       	ldi	r22, 0x2D	; 45
    1f2e:	c8 01       	movw	r24, r16
    1f30:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN5Print5printEc>
    1f34:	ec 01       	movw	r28, r24
     number = -number;
    1f36:	f7 fa       	bst	r15, 7
    1f38:	f0 94       	com	r15
    1f3a:	f7 f8       	bld	r15, 7
    1f3c:	f0 94       	com	r15
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1f40:	c0 e0       	ldi	r28, 0x00	; 0
    1f42:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f44:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1f4e:	7b 14       	cp	r7, r11
    1f50:	41 f0       	breq	.+16     	; 0x1f62 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f5e:	b3 94       	inc	r11
    1f60:	f6 cf       	rjmp	.-20     	; 0x1f4e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1f62:	a7 01       	movw	r20, r14
    1f64:	96 01       	movw	r18, r12
    1f66:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <__addsf3>
    1f6a:	6b 01       	movw	r12, r22
    1f6c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1f6e:	0e 94 16 28 	call	0x502c	; 0x502c <__fixunssfsi>
    1f72:	4b 01       	movw	r8, r22
    1f74:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f76:	2a e0       	ldi	r18, 0x0A	; 10
    1f78:	ab 01       	movw	r20, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1f82:	c8 0f       	add	r28, r24
    1f84:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1f86:	77 20       	and	r7, r7
    1f88:	b9 f1       	breq	.+110    	; 0x1ff8 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	b4 01       	movw	r22, r8
    1f8e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__floatunsisf>
    1f92:	9b 01       	movw	r18, r22
    1f94:	ac 01       	movw	r20, r24
    1f96:	c7 01       	movw	r24, r14
    1f98:	b6 01       	movw	r22, r12
    1f9a:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <__subsf3>
    1f9e:	6b 01       	movw	r12, r22
    1fa0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1fa2:	6e e2       	ldi	r22, 0x2E	; 46
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN5Print5printEc>
    1faa:	c8 0f       	add	r28, r24
    1fac:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	c7 01       	movw	r24, r14
    1fb8:	b6 01       	movw	r22, r12
    1fba:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__mulsf3>
    1fbe:	4b 01       	movw	r8, r22
    1fc0:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1fc2:	0e 94 16 28 	call	0x502c	; 0x502c <__fixunssfsi>
    1fc6:	6b 01       	movw	r12, r22
    1fc8:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1fca:	4a e0       	ldi	r20, 0x0A	; 10
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	c8 01       	movw	r24, r16
    1fd0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN5Print5printEji>
    1fd4:	c8 0f       	add	r28, r24
    1fd6:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1fd8:	b6 01       	movw	r22, r12
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__floatunsisf>
    1fe2:	9b 01       	movw	r18, r22
    1fe4:	ac 01       	movw	r20, r24
    1fe6:	c5 01       	movw	r24, r10
    1fe8:	b4 01       	movw	r22, r8
    1fea:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <__subsf3>
    1fee:	6b 01       	movw	r12, r22
    1ff0:	7c 01       	movw	r14, r24
    1ff2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1ff4:	71 10       	cpse	r7, r1
    1ff6:	db cf       	rjmp	.-74     	; 0x1fae <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1ff8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	9f 90       	pop	r9
    2010:	8f 90       	pop	r8
    2012:	7f 90       	pop	r7
    2014:	08 95       	ret

00002016 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2016:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <_ZN5Print10printFloatEdh>

0000201a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    201a:	1f 92       	push	r1
    201c:	0f 92       	push	r0
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	0f 92       	push	r0
    2022:	11 24       	eor	r1, r1
    2024:	2f 93       	push	r18
    2026:	3f 93       	push	r19
    2028:	8f 93       	push	r24
    202a:	9f 93       	push	r25
    202c:	af 93       	push	r26
    202e:	bf 93       	push	r27
    2030:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <timer0_millis>
    2034:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <timer0_millis+0x1>
    2038:	a0 91 dc 02 	lds	r26, 0x02DC	; 0x8002dc <timer0_millis+0x2>
    203c:	b0 91 dd 02 	lds	r27, 0x02DD	; 0x8002dd <timer0_millis+0x3>
    2040:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <timer0_fract>
    2044:	26 e0       	ldi	r18, 0x06	; 6
    2046:	23 0f       	add	r18, r19
    2048:	2d 37       	cpi	r18, 0x7D	; 125
    204a:	20 f4       	brcc	.+8      	; 0x2054 <__vector_16+0x3a>
    204c:	02 96       	adiw	r24, 0x02	; 2
    204e:	a1 1d       	adc	r26, r1
    2050:	b1 1d       	adc	r27, r1
    2052:	05 c0       	rjmp	.+10     	; 0x205e <__vector_16+0x44>
    2054:	29 e8       	ldi	r18, 0x89	; 137
    2056:	23 0f       	add	r18, r19
    2058:	03 96       	adiw	r24, 0x03	; 3
    205a:	a1 1d       	adc	r26, r1
    205c:	b1 1d       	adc	r27, r1
    205e:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <timer0_fract>
    2062:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <timer0_millis>
    2066:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <timer0_millis+0x1>
    206a:	a0 93 dc 02 	sts	0x02DC, r26	; 0x8002dc <timer0_millis+0x2>
    206e:	b0 93 dd 02 	sts	0x02DD, r27	; 0x8002dd <timer0_millis+0x3>
    2072:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer0_overflow_count>
    2076:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer0_overflow_count+0x1>
    207a:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer0_overflow_count+0x2>
    207e:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer0_overflow_count+0x3>
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	a1 1d       	adc	r26, r1
    2086:	b1 1d       	adc	r27, r1
    2088:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <timer0_overflow_count>
    208c:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <timer0_overflow_count+0x1>
    2090:	a0 93 e0 02 	sts	0x02E0, r26	; 0x8002e0 <timer0_overflow_count+0x2>
    2094:	b0 93 e1 02 	sts	0x02E1, r27	; 0x8002e1 <timer0_overflow_count+0x3>
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <millis>:
    20ae:	2f b7       	in	r18, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <timer0_millis>
    20b6:	70 91 db 02 	lds	r23, 0x02DB	; 0x8002db <timer0_millis+0x1>
    20ba:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <timer0_millis+0x2>
    20be:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <timer0_millis+0x3>
    20c2:	2f bf       	out	0x3f, r18	; 63
    20c4:	08 95       	ret

000020c6 <micros>:
    20c6:	3f b7       	in	r19, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer0_overflow_count>
    20ce:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer0_overflow_count+0x1>
    20d2:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer0_overflow_count+0x2>
    20d6:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer0_overflow_count+0x3>
    20da:	26 b5       	in	r18, 0x26	; 38
    20dc:	a8 9b       	sbis	0x15, 0	; 21
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <micros+0x24>
    20e0:	2f 3f       	cpi	r18, 0xFF	; 255
    20e2:	19 f0       	breq	.+6      	; 0x20ea <micros+0x24>
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	a1 1d       	adc	r26, r1
    20e8:	b1 1d       	adc	r27, r1
    20ea:	3f bf       	out	0x3f, r19	; 63
    20ec:	ba 2f       	mov	r27, r26
    20ee:	a9 2f       	mov	r26, r25
    20f0:	98 2f       	mov	r25, r24
    20f2:	88 27       	eor	r24, r24
    20f4:	82 0f       	add	r24, r18
    20f6:	91 1d       	adc	r25, r1
    20f8:	a1 1d       	adc	r26, r1
    20fa:	b1 1d       	adc	r27, r1
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	43 e0       	ldi	r20, 0x03	; 3
    2102:	66 0f       	add	r22, r22
    2104:	77 1f       	adc	r23, r23
    2106:	88 1f       	adc	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	4a 95       	dec	r20
    210c:	d1 f7       	brne	.-12     	; 0x2102 <micros+0x3c>
    210e:	08 95       	ret

00002110 <delay>:
    2110:	8f 92       	push	r8
    2112:	9f 92       	push	r9
    2114:	af 92       	push	r10
    2116:	bf 92       	push	r11
    2118:	cf 92       	push	r12
    211a:	df 92       	push	r13
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	6b 01       	movw	r12, r22
    2122:	7c 01       	movw	r14, r24
    2124:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    2128:	4b 01       	movw	r8, r22
    212a:	5c 01       	movw	r10, r24
    212c:	c1 14       	cp	r12, r1
    212e:	d1 04       	cpc	r13, r1
    2130:	e1 04       	cpc	r14, r1
    2132:	f1 04       	cpc	r15, r1
    2134:	01 f1       	breq	.+64     	; 0x2176 <delay+0x66>
    2136:	0e 94 c1 24 	call	0x4982	; 0x4982 <yield>
    213a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	88 19       	sub	r24, r8
    2144:	99 09       	sbc	r25, r9
    2146:	aa 09       	sbc	r26, r10
    2148:	bb 09       	sbc	r27, r11
    214a:	88 3e       	cpi	r24, 0xE8	; 232
    214c:	93 40       	sbci	r25, 0x03	; 3
    214e:	a1 05       	cpc	r26, r1
    2150:	b1 05       	cpc	r27, r1
    2152:	60 f3       	brcs	.-40     	; 0x212c <delay+0x1c>
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	c2 1a       	sub	r12, r18
    2158:	d1 08       	sbc	r13, r1
    215a:	e1 08       	sbc	r14, r1
    215c:	f1 08       	sbc	r15, r1
    215e:	88 ee       	ldi	r24, 0xE8	; 232
    2160:	88 0e       	add	r8, r24
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	98 1e       	adc	r9, r24
    2166:	a1 1c       	adc	r10, r1
    2168:	b1 1c       	adc	r11, r1
    216a:	c1 14       	cp	r12, r1
    216c:	d1 04       	cpc	r13, r1
    216e:	e1 04       	cpc	r14, r1
    2170:	f1 04       	cpc	r15, r1
    2172:	19 f7       	brne	.-58     	; 0x213a <delay+0x2a>
    2174:	db cf       	rjmp	.-74     	; 0x212c <delay+0x1c>
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	bf 90       	pop	r11
    2180:	af 90       	pop	r10
    2182:	9f 90       	pop	r9
    2184:	8f 90       	pop	r8
    2186:	08 95       	ret

00002188 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2188:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    218a:	84 b5       	in	r24, 0x24	; 36
    218c:	82 60       	ori	r24, 0x02	; 2
    218e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2190:	84 b5       	in	r24, 0x24	; 36
    2192:	81 60       	ori	r24, 0x01	; 1
    2194:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2196:	85 b5       	in	r24, 0x25	; 37
    2198:	82 60       	ori	r24, 0x02	; 2
    219a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    219c:	85 b5       	in	r24, 0x25	; 37
    219e:	81 60       	ori	r24, 0x01	; 1
    21a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    21a2:	ee e6       	ldi	r30, 0x6E	; 110
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	81 60       	ori	r24, 0x01	; 1
    21aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21ac:	e1 e8       	ldi	r30, 0x81	; 129
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21b2:	80 81       	ld	r24, Z
    21b4:	82 60       	ori	r24, 0x02	; 2
    21b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21b8:	80 81       	ld	r24, Z
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21be:	e0 e8       	ldi	r30, 0x80	; 128
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	81 60       	ori	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21c8:	e1 eb       	ldi	r30, 0xB1	; 177
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	84 60       	ori	r24, 0x04	; 4
    21d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21d2:	e0 eb       	ldi	r30, 0xB0	; 176
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	81 60       	ori	r24, 0x01	; 1
    21da:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    21dc:	ea e7       	ldi	r30, 0x7A	; 122
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	84 60       	ori	r24, 0x04	; 4
    21e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    21e6:	80 81       	ld	r24, Z
    21e8:	82 60       	ori	r24, 0x02	; 2
    21ea:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    21ec:	80 81       	ld	r24, Z
    21ee:	8e 7f       	andi	r24, 0xFE	; 254
    21f0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21f2:	80 81       	ld	r24, Z
    21f4:	80 68       	ori	r24, 0x80	; 128
    21f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    21fc:	08 95       	ret

000021fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	81 f0       	breq	.+32     	; 0x2222 <turnOffPWM+0x24>
    2202:	28 f4       	brcc	.+10     	; 0x220e <turnOffPWM+0x10>
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	99 f0       	breq	.+38     	; 0x222e <turnOffPWM+0x30>
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	a1 f0       	breq	.+40     	; 0x2234 <turnOffPWM+0x36>
    220c:	08 95       	ret
    220e:	87 30       	cpi	r24, 0x07	; 7
    2210:	a9 f0       	breq	.+42     	; 0x223c <turnOffPWM+0x3e>
    2212:	88 30       	cpi	r24, 0x08	; 8
    2214:	b9 f0       	breq	.+46     	; 0x2244 <turnOffPWM+0x46>
    2216:	84 30       	cpi	r24, 0x04	; 4
    2218:	d1 f4       	brne	.+52     	; 0x224e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    221a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    221e:	8f 7d       	andi	r24, 0xDF	; 223
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2222:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2226:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2228:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    222c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    222e:	84 b5       	in	r24, 0x24	; 36
    2230:	8f 77       	andi	r24, 0x7F	; 127
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2234:	84 b5       	in	r24, 0x24	; 36
    2236:	8f 7d       	andi	r24, 0xDF	; 223
    2238:	84 bd       	out	0x24, r24	; 36
    223a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    223c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2240:	8f 77       	andi	r24, 0x7F	; 127
    2242:	03 c0       	rjmp	.+6      	; 0x224a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2244:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2248:	8f 7d       	andi	r24, 0xDF	; 223
    224a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    224e:	08 95       	ret

00002250 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	e0 52       	subi	r30, 0x20	; 32
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    225e:	fc 01       	movw	r30, r24
    2260:	ec 50       	subi	r30, 0x0C	; 12
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2266:	88 23       	and	r24, r24
    2268:	61 f1       	breq	.+88     	; 0x22c2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	fc 01       	movw	r30, r24
    2272:	e4 5e       	subi	r30, 0xE4	; 228
    2274:	fe 4f       	sbci	r31, 0xFE	; 254
    2276:	c5 91       	lpm	r28, Z+
    2278:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    227a:	fc 01       	movw	r30, r24
    227c:	ee 5e       	subi	r30, 0xEE	; 238
    227e:	fe 4f       	sbci	r31, 0xFE	; 254
    2280:	a5 91       	lpm	r26, Z+
    2282:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2284:	61 11       	cpse	r22, r1
    2286:	09 c0       	rjmp	.+18     	; 0x229a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2288:	9f b7       	in	r25, 0x3f	; 63
                cli();
    228a:	f8 94       	cli
		*reg &= ~bit;
    228c:	88 81       	ld	r24, Y
    228e:	20 95       	com	r18
    2290:	82 23       	and	r24, r18
    2292:	88 83       	st	Y, r24
		*out &= ~bit;
    2294:	ec 91       	ld	r30, X
    2296:	2e 23       	and	r18, r30
    2298:	0b c0       	rjmp	.+22     	; 0x22b0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    229a:	62 30       	cpi	r22, 0x02	; 2
    229c:	61 f4       	brne	.+24     	; 0x22b6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    229e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    22a0:	f8 94       	cli
		*reg &= ~bit;
    22a2:	88 81       	ld	r24, Y
    22a4:	32 2f       	mov	r19, r18
    22a6:	30 95       	com	r19
    22a8:	83 23       	and	r24, r19
    22aa:	88 83       	st	Y, r24
		*out |= bit;
    22ac:	ec 91       	ld	r30, X
    22ae:	2e 2b       	or	r18, r30
    22b0:	2c 93       	st	X, r18
		SREG = oldSREG;
    22b2:	9f bf       	out	0x3f, r25	; 63
    22b4:	06 c0       	rjmp	.+12     	; 0x22c2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22b6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22b8:	f8 94       	cli
		*reg |= bit;
    22ba:	e8 81       	ld	r30, Y
    22bc:	2e 2b       	or	r18, r30
    22be:	28 83       	st	Y, r18
		SREG = oldSREG;
    22c0:	8f bf       	out	0x3f, r24	; 63
	}
}
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	08 95       	ret

000022c8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	e4 53       	subi	r30, 0x34	; 52
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22da:	f9 01       	movw	r30, r18
    22dc:	e0 52       	subi	r30, 0x20	; 32
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22e2:	f9 01       	movw	r30, r18
    22e4:	ec 50       	subi	r30, 0x0C	; 12
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22ea:	cc 23       	and	r28, r28
    22ec:	c1 f0       	breq	.+48     	; 0x231e <digitalWrite+0x56>
    22ee:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22f0:	81 11       	cpse	r24, r1
    22f2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turnOffPWM>

	out = portOutputRegister(port);
    22f6:	ec 2f       	mov	r30, r28
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ee 5e       	subi	r30, 0xEE	; 238
    2300:	fe 4f       	sbci	r31, 0xFE	; 254
    2302:	a5 91       	lpm	r26, Z+
    2304:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2306:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2308:	f8 94       	cli

	if (val == LOW) {
    230a:	11 11       	cpse	r17, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <digitalWrite+0x4e>
		*out &= ~bit;
    230e:	8c 91       	ld	r24, X
    2310:	d0 95       	com	r29
    2312:	d8 23       	and	r29, r24
    2314:	02 c0       	rjmp	.+4      	; 0x231a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2316:	ec 91       	ld	r30, X
    2318:	de 2b       	or	r29, r30
    231a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    231c:	9f bf       	out	0x3f, r25	; 63
}
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	08 95       	ret

00002326 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	f9 01       	movw	r30, r18
    2330:	e4 53       	subi	r30, 0x34	; 52
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2336:	f9 01       	movw	r30, r18
    2338:	e0 52       	subi	r30, 0x20	; 32
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    233e:	f9 01       	movw	r30, r18
    2340:	ec 50       	subi	r30, 0x0C	; 12
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2346:	cc 23       	and	r28, r28
    2348:	91 f0       	breq	.+36     	; 0x236e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    234a:	81 11       	cpse	r24, r1
    234c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2350:	ec 2f       	mov	r30, r28
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	e8 5f       	subi	r30, 0xF8	; 248
    235a:	fe 4f       	sbci	r31, 0xFE	; 254
    235c:	a5 91       	lpm	r26, Z+
    235e:	b4 91       	lpm	r27, Z
    2360:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2362:	ed 23       	and	r30, r29
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	21 f4       	brne	.+8      	; 0x2372 <digitalRead+0x4c>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <digitalRead+0x4c>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	08 95       	ret

00002378 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2378:	cf 92       	push	r12
    237a:	df 92       	push	r13
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
  if (howbig == 0) {
    2380:	61 15       	cp	r22, r1
    2382:	71 05       	cpc	r23, r1
    2384:	81 05       	cpc	r24, r1
    2386:	91 05       	cpc	r25, r1
    2388:	49 f0       	breq	.+18     	; 0x239c <_Z6randoml+0x24>
    238a:	6b 01       	movw	r12, r22
    238c:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    238e:	0e 94 ad 2a 	call	0x555a	; 0x555a <random>
    2392:	a7 01       	movw	r20, r14
    2394:	96 01       	movw	r18, r12
    2396:	0e 94 02 29 	call	0x5204	; 0x5204 <__divmodsi4>
    239a:	03 c0       	rjmp	.+6      	; 0x23a2 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	df 90       	pop	r13
    23a8:	cf 90       	pop	r12
    23aa:	08 95       	ret

000023ac <_Z6randomll>:

long random(long howsmall, long howbig)
{
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
  if (howsmall >= howbig) {
    23b8:	62 17       	cp	r22, r18
    23ba:	73 07       	cpc	r23, r19
    23bc:	84 07       	cpc	r24, r20
    23be:	95 07       	cpc	r25, r21
    23c0:	84 f4       	brge	.+32     	; 0x23e2 <_Z6randomll+0x36>
    23c2:	89 01       	movw	r16, r18
    23c4:	9a 01       	movw	r18, r20
    23c6:	6b 01       	movw	r12, r22
    23c8:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    23ca:	c9 01       	movw	r24, r18
    23cc:	b8 01       	movw	r22, r16
    23ce:	6c 19       	sub	r22, r12
    23d0:	7d 09       	sbc	r23, r13
    23d2:	8e 09       	sbc	r24, r14
    23d4:	9f 09       	sbc	r25, r15
    23d6:	0e 94 bc 11 	call	0x2378	; 0x2378 <_Z6randoml>
    23da:	6c 0d       	add	r22, r12
    23dc:	7d 1d       	adc	r23, r13
    23de:	8e 1d       	adc	r24, r14
    23e0:	9f 1d       	adc	r25, r15
}
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	df 90       	pop	r13
    23ec:	cf 90       	pop	r12
    23ee:	08 95       	ret

000023f0 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    23f0:	2f 92       	push	r2
    23f2:	3f 92       	push	r3
    23f4:	4f 92       	push	r4
    23f6:	5f 92       	push	r5
    23f8:	6f 92       	push	r6
    23fa:	7f 92       	push	r7
    23fc:	8f 92       	push	r8
    23fe:	9f 92       	push	r9
    2400:	af 92       	push	r10
    2402:	bf 92       	push	r11
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	00 d0       	rcall	.+0      	; 0x2416 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    2416:	00 d0       	rcall	.+0      	; 0x2418 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2418:	00 d0       	rcall	.+0      	; 0x241a <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	2c 01       	movw	r4, r24
    2420:	7e 83       	std	Y+6, r23	; 0x06
    2422:	6d 83       	std	Y+5, r22	; 0x05
    2424:	6a 01       	movw	r12, r20
    2426:	59 01       	movw	r10, r18
    2428:	c8 01       	movw	r24, r16
    242a:	fc 82       	std	Y+4, r15	; 0x04
    242c:	eb 82       	std	Y+3, r14	; 0x03
    242e:	48 01       	movw	r8, r16
    2430:	84 1a       	sub	r8, r20
    2432:	95 0a       	sbc	r9, r21
    2434:	97 fe       	sbrs	r9, 7
    2436:	03 c0       	rjmp	.+6      	; 0x243e <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2438:	91 94       	neg	r9
    243a:	81 94       	neg	r8
    243c:	91 08       	sbc	r9, r1
    243e:	35 01       	movw	r6, r10
    2440:	2d 81       	ldd	r18, Y+5	; 0x05
    2442:	3e 81       	ldd	r19, Y+6	; 0x06
    2444:	62 1a       	sub	r6, r18
    2446:	73 0a       	sbc	r7, r19
    2448:	77 fe       	sbrs	r7, 7
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    244c:	71 94       	neg	r7
    244e:	61 94       	neg	r6
    2450:	71 08       	sbc	r7, r1
    2452:	68 14       	cp	r6, r8
    2454:	79 04       	cpc	r7, r9
    2456:	5c f4       	brge	.+22     	; 0x246e <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    2458:	3a 2d       	mov	r19, r10
    245a:	2b 2d       	mov	r18, r11
    245c:	5c 01       	movw	r10, r24
    245e:	83 2f       	mov	r24, r19
    2460:	92 2f       	mov	r25, r18
    2462:	3d 81       	ldd	r19, Y+5	; 0x05
    2464:	2e 81       	ldd	r18, Y+6	; 0x06
    2466:	de 82       	std	Y+6, r13	; 0x06
    2468:	cd 82       	std	Y+5, r12	; 0x05
    246a:	c3 2e       	mov	r12, r19
    246c:	d2 2e       	mov	r13, r18
    246e:	ad 81       	ldd	r26, Y+5	; 0x05
    2470:	be 81       	ldd	r27, Y+6	; 0x06
    2472:	aa 16       	cp	r10, r26
    2474:	bb 06       	cpc	r11, r27
    2476:	5c f4       	brge	.+22     	; 0x248e <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    2478:	3c 2d       	mov	r19, r12
    247a:	2d 2d       	mov	r18, r13
    247c:	6c 01       	movw	r12, r24
    247e:	83 2f       	mov	r24, r19
    2480:	92 2f       	mov	r25, r18
    2482:	3d 81       	ldd	r19, Y+5	; 0x05
    2484:	2e 81       	ldd	r18, Y+6	; 0x06
    2486:	be 82       	std	Y+6, r11	; 0x06
    2488:	ad 82       	std	Y+5, r10	; 0x05
    248a:	a3 2e       	mov	r10, r19
    248c:	b2 2e       	mov	r11, r18
    248e:	85 01       	movw	r16, r10
    2490:	2d 81       	ldd	r18, Y+5	; 0x05
    2492:	3e 81       	ldd	r19, Y+6	; 0x06
    2494:	02 1b       	sub	r16, r18
    2496:	13 0b       	sbc	r17, r19
    2498:	1c 01       	movw	r2, r24
    249a:	2c 18       	sub	r2, r12
    249c:	3d 08       	sbc	r3, r13
    249e:	37 fe       	sbrs	r3, 7
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    24a2:	31 94       	neg	r3
    24a4:	21 94       	neg	r2
    24a6:	31 08       	sbc	r3, r1
    24a8:	78 01       	movw	r14, r16
    24aa:	17 ff       	sbrs	r17, 7
    24ac:	03 c0       	rjmp	.+6      	; 0x24b4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	e3 1a       	sub	r14, r19
    24b2:	f3 0a       	sbc	r15, r19
    24b4:	f5 94       	asr	r15
    24b6:	e7 94       	ror	r14
    24b8:	c8 16       	cp	r12, r24
    24ba:	d9 06       	cpc	r13, r25
    24bc:	2c f0       	brlt	.+10     	; 0x24c8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    24be:	8f ef       	ldi	r24, 0xFF	; 255
    24c0:	9f ef       	ldi	r25, 0xFF	; 255
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    24c8:	a1 e0       	ldi	r26, 0x01	; 1
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	ba 83       	std	Y+2, r27	; 0x02
    24ce:	a9 83       	std	Y+1, r26	; 0x01
    24d0:	2d 81       	ldd	r18, Y+5	; 0x05
    24d2:	3e 81       	ldd	r19, Y+6	; 0x06
    24d4:	a2 16       	cp	r10, r18
    24d6:	b3 06       	cpc	r11, r19
    24d8:	24 f1       	brlt	.+72     	; 0x2522 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    24da:	d2 01       	movw	r26, r4
    24dc:	ed 91       	ld	r30, X+
    24de:	fc 91       	ld	r31, X
    24e0:	04 84       	ldd	r0, Z+12	; 0x0c
    24e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    24e4:	e0 2d       	mov	r30, r0
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	68 14       	cp	r6, r8
    24ec:	79 04       	cpc	r7, r9
    24ee:	24 f4       	brge	.+8      	; 0x24f8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    24f0:	4d 81       	ldd	r20, Y+5	; 0x05
    24f2:	5e 81       	ldd	r21, Y+6	; 0x06
    24f4:	b6 01       	movw	r22, r12
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    24f8:	a6 01       	movw	r20, r12
    24fa:	6d 81       	ldd	r22, Y+5	; 0x05
    24fc:	7e 81       	ldd	r23, Y+6	; 0x06
    24fe:	c2 01       	movw	r24, r4
    2500:	09 95       	icall
    2502:	e2 18       	sub	r14, r2
    2504:	f3 08       	sbc	r15, r3
    2506:	f7 fe       	sbrs	r15, 7
    2508:	06 c0       	rjmp	.+12     	; 0x2516 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    250a:	29 81       	ldd	r18, Y+1	; 0x01
    250c:	3a 81       	ldd	r19, Y+2	; 0x02
    250e:	c2 0e       	add	r12, r18
    2510:	d3 1e       	adc	r13, r19
    2512:	e0 0e       	add	r14, r16
    2514:	f1 1e       	adc	r15, r17
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	d7 cf       	rjmp	.-82     	; 0x24d0 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    2522:	26 96       	adiw	r28, 0x06	; 6
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	df 90       	pop	r13
    253c:	cf 90       	pop	r12
    253e:	bf 90       	pop	r11
    2540:	af 90       	pop	r10
    2542:	9f 90       	pop	r9
    2544:	8f 90       	pop	r8
    2546:	7f 90       	pop	r7
    2548:	6f 90       	pop	r6
    254a:	5f 90       	pop	r5
    254c:	4f 90       	pop	r4
    254e:	3f 90       	pop	r3
    2550:	2f 90       	pop	r2
    2552:	08 95       	ret

00002554 <_ZN12Adafruit_GFX10writePixelEiij>:
    2554:	dc 01       	movw	r26, r24
    2556:	ed 91       	ld	r30, X+
    2558:	fc 91       	ld	r31, X
    255a:	00 84       	ldd	r0, Z+8	; 0x08
    255c:	f1 85       	ldd	r31, Z+9	; 0x09
    255e:	e0 2d       	mov	r30, r0
    2560:	09 94       	ijmp

00002562 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	dc 01       	movw	r26, r24
    2568:	ed 91       	ld	r30, X+
    256a:	fc 91       	ld	r31, X
    256c:	04 8c       	ldd	r0, Z+28	; 0x1c
    256e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2570:	e0 2d       	mov	r30, r0
    2572:	09 95       	icall
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	dc 01       	movw	r26, r24
    2580:	ed 91       	ld	r30, X+
    2582:	fc 91       	ld	r31, X
    2584:	06 8c       	ldd	r0, Z+30	; 0x1e
    2586:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2588:	e0 2d       	mov	r30, r0
    258a:	09 95       	icall
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	dc 01       	movw	r26, r24
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	00 a0       	ldd	r0, Z+32	; 0x20
    25a2:	f1 a1       	ldd	r31, Z+33	; 0x21
    25a4:	e0 2d       	mov	r30, r0
    25a6:	09 95       	icall
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	08 95       	ret

000025b2 <_ZN12Adafruit_GFX10startWriteEv>:
    25b2:	08 95       	ret

000025b4 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    25b4:	8f 92       	push	r8
    25b6:	9f 92       	push	r9
    25b8:	af 92       	push	r10
    25ba:	bf 92       	push	r11
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	ec 01       	movw	r28, r24
    25ce:	5b 01       	movw	r10, r22
    25d0:	4a 01       	movw	r8, r20
    25d2:	69 01       	movw	r12, r18
    25d4:	78 01       	movw	r14, r16
    25d6:	e8 81       	ld	r30, Y
    25d8:	f9 81       	ldd	r31, Y+1	; 0x01
    25da:	02 84       	ldd	r0, Z+10	; 0x0a
    25dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    25de:	e0 2d       	mov	r30, r0
    25e0:	09 95       	icall
    25e2:	c8 0c       	add	r12, r8
    25e4:	d9 1c       	adc	r13, r9
    25e6:	86 01       	movw	r16, r12
    25e8:	01 50       	subi	r16, 0x01	; 1
    25ea:	11 09       	sbc	r17, r1
    25ec:	e8 81       	ld	r30, Y
    25ee:	f9 81       	ldd	r31, Y+1	; 0x01
    25f0:	04 88       	ldd	r0, Z+20	; 0x14
    25f2:	f5 89       	ldd	r31, Z+21	; 0x15
    25f4:	e0 2d       	mov	r30, r0
    25f6:	95 01       	movw	r18, r10
    25f8:	a4 01       	movw	r20, r8
    25fa:	b5 01       	movw	r22, r10
    25fc:	ce 01       	movw	r24, r28
    25fe:	09 95       	icall
    2600:	e8 81       	ld	r30, Y
    2602:	f9 81       	ldd	r31, Y+1	; 0x01
    2604:	06 88       	ldd	r0, Z+22	; 0x16
    2606:	f7 89       	ldd	r31, Z+23	; 0x17
    2608:	e0 2d       	mov	r30, r0
    260a:	ce 01       	movw	r24, r28
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	09 94       	ijmp

00002626 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2626:	8f 92       	push	r8
    2628:	9f 92       	push	r9
    262a:	af 92       	push	r10
    262c:	bf 92       	push	r11
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	ec 01       	movw	r28, r24
    2640:	5b 01       	movw	r10, r22
    2642:	4a 01       	movw	r8, r20
    2644:	69 01       	movw	r12, r18
    2646:	e8 81       	ld	r30, Y
    2648:	f9 81       	ldd	r31, Y+1	; 0x01
    264a:	02 84       	ldd	r0, Z+10	; 0x0a
    264c:	f3 85       	ldd	r31, Z+11	; 0x0b
    264e:	e0 2d       	mov	r30, r0
    2650:	09 95       	icall
    2652:	95 01       	movw	r18, r10
    2654:	2c 0d       	add	r18, r12
    2656:	3d 1d       	adc	r19, r13
    2658:	21 50       	subi	r18, 0x01	; 1
    265a:	31 09       	sbc	r19, r1
    265c:	e8 81       	ld	r30, Y
    265e:	f9 81       	ldd	r31, Y+1	; 0x01
    2660:	04 88       	ldd	r0, Z+20	; 0x14
    2662:	f5 89       	ldd	r31, Z+21	; 0x15
    2664:	e0 2d       	mov	r30, r0
    2666:	78 01       	movw	r14, r16
    2668:	84 01       	movw	r16, r8
    266a:	a4 01       	movw	r20, r8
    266c:	b5 01       	movw	r22, r10
    266e:	ce 01       	movw	r24, r28
    2670:	09 95       	icall
    2672:	e8 81       	ld	r30, Y
    2674:	f9 81       	ldd	r31, Y+1	; 0x01
    2676:	06 88       	ldd	r0, Z+22	; 0x16
    2678:	f7 89       	ldd	r31, Z+23	; 0x17
    267a:	e0 2d       	mov	r30, r0
    267c:	ce 01       	movw	r24, r28
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	09 94       	ijmp

00002698 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    2698:	4f 92       	push	r4
    269a:	5f 92       	push	r5
    269c:	6f 92       	push	r6
    269e:	7f 92       	push	r7
    26a0:	8f 92       	push	r8
    26a2:	9f 92       	push	r9
    26a4:	af 92       	push	r10
    26a6:	bf 92       	push	r11
    26a8:	cf 92       	push	r12
    26aa:	df 92       	push	r13
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	6c 01       	movw	r12, r24
    26ba:	2b 01       	movw	r4, r22
    26bc:	5a 01       	movw	r10, r20
    26be:	39 01       	movw	r6, r18
    26c0:	48 01       	movw	r8, r16
    26c2:	dc 01       	movw	r26, r24
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	02 84       	ldd	r0, Z+10	; 0x0a
    26ca:	f3 85       	ldd	r31, Z+11	; 0x0b
    26cc:	e0 2d       	mov	r30, r0
    26ce:	09 95       	icall
    26d0:	e2 01       	movw	r28, r4
    26d2:	64 0c       	add	r6, r4
    26d4:	75 1c       	adc	r7, r5
    26d6:	d6 01       	movw	r26, r12
    26d8:	ed 91       	ld	r30, X+
    26da:	fc 91       	ld	r31, X
    26dc:	c6 15       	cp	r28, r6
    26de:	d7 05       	cpc	r29, r7
    26e0:	5c f4       	brge	.+22     	; 0x26f8 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    26e2:	00 88       	ldd	r0, Z+16	; 0x10
    26e4:	f1 89       	ldd	r31, Z+17	; 0x11
    26e6:	e0 2d       	mov	r30, r0
    26e8:	87 01       	movw	r16, r14
    26ea:	94 01       	movw	r18, r8
    26ec:	a5 01       	movw	r20, r10
    26ee:	be 01       	movw	r22, r28
    26f0:	c6 01       	movw	r24, r12
    26f2:	09 95       	icall
    26f4:	21 96       	adiw	r28, 0x01	; 1
    26f6:	ef cf       	rjmp	.-34     	; 0x26d6 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    26f8:	06 88       	ldd	r0, Z+22	; 0x16
    26fa:	f7 89       	ldd	r31, Z+23	; 0x17
    26fc:	e0 2d       	mov	r30, r0
    26fe:	c6 01       	movw	r24, r12
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	bf 90       	pop	r11
    2712:	af 90       	pop	r10
    2714:	9f 90       	pop	r9
    2716:	8f 90       	pop	r8
    2718:	7f 90       	pop	r7
    271a:	6f 90       	pop	r6
    271c:	5f 90       	pop	r5
    271e:	4f 90       	pop	r4
    2720:	09 94       	ijmp

00002722 <_ZN12Adafruit_GFX10fillScreenEj>:
    2722:	ef 92       	push	r14
    2724:	ff 92       	push	r15
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	dc 01       	movw	r26, r24
    272c:	1a 96       	adiw	r26, 0x0a	; 10
    272e:	0d 91       	ld	r16, X+
    2730:	1c 91       	ld	r17, X
    2732:	1b 97       	sbiw	r26, 0x0b	; 11
    2734:	18 96       	adiw	r26, 0x08	; 8
    2736:	2d 91       	ld	r18, X+
    2738:	3c 91       	ld	r19, X
    273a:	19 97       	sbiw	r26, 0x09	; 9
    273c:	ed 91       	ld	r30, X+
    273e:	fc 91       	ld	r31, X
    2740:	00 a0       	ldd	r0, Z+32	; 0x20
    2742:	f1 a1       	ldd	r31, Z+33	; 0x21
    2744:	e0 2d       	mov	r30, r0
    2746:	7b 01       	movw	r14, r22
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	09 95       	icall
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	08 95       	ret

0000275c <_ZN12Adafruit_GFX8drawLineEiiiij>:
    275c:	8f 92       	push	r8
    275e:	9f 92       	push	r9
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	4c 01       	movw	r8, r24
    2776:	6b 01       	movw	r12, r22
    2778:	5a 01       	movw	r10, r20
    277a:	e9 01       	movw	r28, r18
    277c:	dc 01       	movw	r26, r24
    277e:	ed 91       	ld	r30, X+
    2780:	fc 91       	ld	r31, X
    2782:	62 17       	cp	r22, r18
    2784:	73 07       	cpc	r23, r19
    2786:	81 f4       	brne	.+32     	; 0x27a8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    2788:	04 17       	cp	r16, r20
    278a:	15 07       	cpc	r17, r21
    278c:	24 f4       	brge	.+8      	; 0x2796 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    278e:	8b 2d       	mov	r24, r11
    2790:	58 01       	movw	r10, r16
    2792:	04 2f       	mov	r16, r20
    2794:	18 2f       	mov	r17, r24
    2796:	0a 19       	sub	r16, r10
    2798:	1b 09       	sbc	r17, r11
    279a:	98 01       	movw	r18, r16
    279c:	2f 5f       	subi	r18, 0xFF	; 255
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	04 8c       	ldd	r0, Z+28	; 0x1c
    27a2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    27a4:	e0 2d       	mov	r30, r0
    27a6:	12 c0       	rjmp	.+36     	; 0x27cc <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    27a8:	40 17       	cp	r20, r16
    27aa:	51 07       	cpc	r21, r17
    27ac:	09 f5       	brne	.+66     	; 0x27f0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    27ae:	26 17       	cp	r18, r22
    27b0:	37 07       	cpc	r19, r23
    27b2:	24 f4       	brge	.+8      	; 0x27bc <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    27b4:	8d 2d       	mov	r24, r13
    27b6:	69 01       	movw	r12, r18
    27b8:	c6 2f       	mov	r28, r22
    27ba:	d8 2f       	mov	r29, r24
    27bc:	9e 01       	movw	r18, r28
    27be:	2c 19       	sub	r18, r12
    27c0:	3d 09       	sbc	r19, r13
    27c2:	2f 5f       	subi	r18, 0xFF	; 255
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	06 8c       	ldd	r0, Z+30	; 0x1e
    27c8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    27ca:	e0 2d       	mov	r30, r0
    27cc:	87 01       	movw	r16, r14
    27ce:	a5 01       	movw	r20, r10
    27d0:	b6 01       	movw	r22, r12
    27d2:	c4 01       	movw	r24, r8
    27d4:	09 95       	icall
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	af 90       	pop	r10
    27ea:	9f 90       	pop	r9
    27ec:	8f 90       	pop	r8
    27ee:	08 95       	ret
    27f0:	02 84       	ldd	r0, Z+10	; 0x0a
    27f2:	f3 85       	ldd	r31, Z+11	; 0x0b
    27f4:	e0 2d       	mov	r30, r0
    27f6:	09 95       	icall
    27f8:	d4 01       	movw	r26, r8
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	04 88       	ldd	r0, Z+20	; 0x14
    2800:	f5 89       	ldd	r31, Z+21	; 0x15
    2802:	e0 2d       	mov	r30, r0
    2804:	9e 01       	movw	r18, r28
    2806:	a5 01       	movw	r20, r10
    2808:	b6 01       	movw	r22, r12
    280a:	c4 01       	movw	r24, r8
    280c:	09 95       	icall
    280e:	d4 01       	movw	r26, r8
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	06 88       	ldd	r0, Z+22	; 0x16
    2816:	f7 89       	ldd	r31, Z+23	; 0x17
    2818:	e0 2d       	mov	r30, r0
    281a:	c4 01       	movw	r24, r8
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	ff 90       	pop	r15
    2826:	ef 90       	pop	r14
    2828:	df 90       	pop	r13
    282a:	cf 90       	pop	r12
    282c:	bf 90       	pop	r11
    282e:	af 90       	pop	r10
    2830:	9f 90       	pop	r9
    2832:	8f 90       	pop	r8
    2834:	09 94       	ijmp

00002836 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    2836:	6f 92       	push	r6
    2838:	7f 92       	push	r7
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	ec 01       	movw	r28, r24
    2854:	4b 01       	movw	r8, r22
    2856:	5a 01       	movw	r10, r20
    2858:	69 01       	movw	r12, r18
    285a:	38 01       	movw	r6, r16
    285c:	e8 81       	ld	r30, Y
    285e:	f9 81       	ldd	r31, Y+1	; 0x01
    2860:	02 84       	ldd	r0, Z+10	; 0x0a
    2862:	f3 85       	ldd	r31, Z+11	; 0x0b
    2864:	e0 2d       	mov	r30, r0
    2866:	09 95       	icall
    2868:	e8 81       	ld	r30, Y
    286a:	f9 81       	ldd	r31, Y+1	; 0x01
    286c:	02 88       	ldd	r0, Z+18	; 0x12
    286e:	f3 89       	ldd	r31, Z+19	; 0x13
    2870:	e0 2d       	mov	r30, r0
    2872:	87 01       	movw	r16, r14
    2874:	96 01       	movw	r18, r12
    2876:	a5 01       	movw	r20, r10
    2878:	b4 01       	movw	r22, r8
    287a:	ce 01       	movw	r24, r28
    287c:	09 95       	icall
    287e:	a5 01       	movw	r20, r10
    2880:	46 0d       	add	r20, r6
    2882:	57 1d       	adc	r21, r7
    2884:	41 50       	subi	r20, 0x01	; 1
    2886:	51 09       	sbc	r21, r1
    2888:	e8 81       	ld	r30, Y
    288a:	f9 81       	ldd	r31, Y+1	; 0x01
    288c:	02 88       	ldd	r0, Z+18	; 0x12
    288e:	f3 89       	ldd	r31, Z+19	; 0x13
    2890:	e0 2d       	mov	r30, r0
    2892:	96 01       	movw	r18, r12
    2894:	b4 01       	movw	r22, r8
    2896:	ce 01       	movw	r24, r28
    2898:	09 95       	icall
    289a:	e8 81       	ld	r30, Y
    289c:	f9 81       	ldd	r31, Y+1	; 0x01
    289e:	00 88       	ldd	r0, Z+16	; 0x10
    28a0:	f1 89       	ldd	r31, Z+17	; 0x11
    28a2:	e0 2d       	mov	r30, r0
    28a4:	93 01       	movw	r18, r6
    28a6:	a5 01       	movw	r20, r10
    28a8:	b4 01       	movw	r22, r8
    28aa:	ce 01       	movw	r24, r28
    28ac:	09 95       	icall
    28ae:	c8 0c       	add	r12, r8
    28b0:	d9 1c       	adc	r13, r9
    28b2:	b6 01       	movw	r22, r12
    28b4:	61 50       	subi	r22, 0x01	; 1
    28b6:	71 09       	sbc	r23, r1
    28b8:	e8 81       	ld	r30, Y
    28ba:	f9 81       	ldd	r31, Y+1	; 0x01
    28bc:	00 88       	ldd	r0, Z+16	; 0x10
    28be:	f1 89       	ldd	r31, Z+17	; 0x11
    28c0:	e0 2d       	mov	r30, r0
    28c2:	93 01       	movw	r18, r6
    28c4:	a5 01       	movw	r20, r10
    28c6:	ce 01       	movw	r24, r28
    28c8:	09 95       	icall
    28ca:	e8 81       	ld	r30, Y
    28cc:	f9 81       	ldd	r31, Y+1	; 0x01
    28ce:	06 88       	ldd	r0, Z+22	; 0x16
    28d0:	f7 89       	ldd	r31, Z+23	; 0x17
    28d2:	e0 2d       	mov	r30, r0
    28d4:	ce 01       	movw	r24, r28
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	cf 90       	pop	r12
    28e6:	bf 90       	pop	r11
    28e8:	af 90       	pop	r10
    28ea:	9f 90       	pop	r9
    28ec:	8f 90       	pop	r8
    28ee:	7f 90       	pop	r7
    28f0:	6f 90       	pop	r6
    28f2:	09 94       	ijmp

000028f4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    28f4:	08 95       	ret

000028f6 <_ZN12Adafruit_GFX11setRotationEh>:
    28f6:	fc 01       	movw	r30, r24
    28f8:	63 70       	andi	r22, 0x03	; 3
    28fa:	66 8b       	std	Z+22, r22	; 0x16
    28fc:	84 81       	ldd	r24, Z+4	; 0x04
    28fe:	95 81       	ldd	r25, Z+5	; 0x05
    2900:	26 81       	ldd	r18, Z+6	; 0x06
    2902:	37 81       	ldd	r19, Z+7	; 0x07
    2904:	61 30       	cpi	r22, 0x01	; 1
    2906:	39 f0       	breq	.+14     	; 0x2916 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2908:	63 30       	cpi	r22, 0x03	; 3
    290a:	29 f0       	breq	.+10     	; 0x2916 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    290c:	91 87       	std	Z+9, r25	; 0x09
    290e:	80 87       	std	Z+8, r24	; 0x08
    2910:	33 87       	std	Z+11, r19	; 0x0b
    2912:	22 87       	std	Z+10, r18	; 0x0a
    2914:	08 95       	ret
    2916:	31 87       	std	Z+9, r19	; 0x09
    2918:	20 87       	std	Z+8, r18	; 0x08
    291a:	93 87       	std	Z+11, r25	; 0x0b
    291c:	82 87       	std	Z+10, r24	; 0x0a
    291e:	08 95       	ret

00002920 <_ZN12Adafruit_GFXC1Eii>:
    2920:	fc 01       	movw	r30, r24
    2922:	13 82       	std	Z+3, r1	; 0x03
    2924:	12 82       	std	Z+2, r1	; 0x02
    2926:	83 e5       	ldi	r24, 0x53	; 83
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
    292e:	75 83       	std	Z+5, r23	; 0x05
    2930:	64 83       	std	Z+4, r22	; 0x04
    2932:	57 83       	std	Z+7, r21	; 0x07
    2934:	46 83       	std	Z+6, r20	; 0x06
    2936:	71 87       	std	Z+9, r23	; 0x09
    2938:	60 87       	std	Z+8, r22	; 0x08
    293a:	53 87       	std	Z+11, r21	; 0x0b
    293c:	42 87       	std	Z+10, r20	; 0x0a
    293e:	16 8a       	std	Z+22, r1	; 0x16
    2940:	15 86       	std	Z+13, r1	; 0x0d
    2942:	14 86       	std	Z+12, r1	; 0x0c
    2944:	17 86       	std	Z+15, r1	; 0x0f
    2946:	16 86       	std	Z+14, r1	; 0x0e
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	85 8b       	std	Z+21, r24	; 0x15
    294c:	84 8b       	std	Z+20, r24	; 0x14
    294e:	2f ef       	ldi	r18, 0xFF	; 255
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	33 8b       	std	Z+19, r19	; 0x13
    2954:	22 8b       	std	Z+18, r18	; 0x12
    2956:	31 8b       	std	Z+17, r19	; 0x11
    2958:	20 8b       	std	Z+16, r18	; 0x10
    295a:	87 8b       	std	Z+23, r24	; 0x17
    295c:	10 8e       	std	Z+24, r1	; 0x18
    295e:	12 8e       	std	Z+26, r1	; 0x1a
    2960:	11 8e       	std	Z+25, r1	; 0x19
    2962:	08 95       	ret

00002964 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    2964:	3f 92       	push	r3
    2966:	4f 92       	push	r4
    2968:	5f 92       	push	r5
    296a:	6f 92       	push	r6
    296c:	7f 92       	push	r7
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	2a 97       	sbiw	r28, 0x0a	; 10
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	5c 01       	movw	r10, r24
    2998:	7e 83       	std	Y+6, r23	; 0x06
    299a:	6d 83       	std	Y+5, r22	; 0x05
    299c:	58 87       	std	Y+8, r21	; 0x08
    299e:	4f 83       	std	Y+7, r20	; 0x07
    29a0:	29 01       	movw	r4, r18
    29a2:	37 01       	movw	r6, r14
    29a4:	dc 01       	movw	r26, r24
    29a6:	ed 91       	ld	r30, X+
    29a8:	fc 91       	ld	r31, X
    29aa:	02 84       	ldd	r0, Z+10	; 0x0a
    29ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    29ae:	e0 2d       	mov	r30, r0
    29b0:	09 95       	icall
    29b2:	c8 01       	movw	r24, r16
    29b4:	07 96       	adiw	r24, 0x07	; 7
    29b6:	97 fd       	sbrc	r25, 7
    29b8:	07 96       	adiw	r24, 0x07	; 7
    29ba:	9c 01       	movw	r18, r24
    29bc:	93 e0       	ldi	r25, 0x03	; 3
    29be:	35 95       	asr	r19
    29c0:	27 95       	ror	r18
    29c2:	9a 95       	dec	r25
    29c4:	e1 f7       	brne	.-8      	; 0x29be <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    29c6:	3a 83       	std	Y+2, r19	; 0x02
    29c8:	29 83       	std	Y+1, r18	; 0x01
    29ca:	81 2c       	mov	r8, r1
    29cc:	91 2c       	mov	r9, r1
    29ce:	e1 2c       	mov	r14, r1
    29d0:	f1 2c       	mov	r15, r1
    29d2:	31 2c       	mov	r3, r1
    29d4:	8f 81       	ldd	r24, Y+7	; 0x07
    29d6:	98 85       	ldd	r25, Y+8	; 0x08
    29d8:	8e 0d       	add	r24, r14
    29da:	9f 1d       	adc	r25, r15
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	e6 14       	cp	r14, r6
    29e2:	f7 04       	cpc	r15, r7
    29e4:	0c f0       	brlt	.+2      	; 0x29e8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    29e6:	3d c0       	rjmp	.+122    	; 0x2a62 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    29e8:	1a 86       	std	Y+10, r1	; 0x0a
    29ea:	19 86       	std	Y+9, r1	; 0x09
    29ec:	a9 85       	ldd	r26, Y+9	; 0x09
    29ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    29f0:	a0 17       	cp	r26, r16
    29f2:	b1 07       	cpc	r27, r17
    29f4:	74 f5       	brge	.+92     	; 0x2a52 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    29f6:	cd 01       	movw	r24, r26
    29f8:	87 70       	andi	r24, 0x07	; 7
    29fa:	99 27       	eor	r25, r25
    29fc:	89 2b       	or	r24, r25
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    2a00:	33 0c       	add	r3, r3
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    2a04:	e9 85       	ldd	r30, Y+9	; 0x09
    2a06:	fa 85       	ldd	r31, Y+10	; 0x0a
    2a08:	f7 fd       	sbrc	r31, 7
    2a0a:	37 96       	adiw	r30, 0x07	; 7
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	f5 95       	asr	r31
    2a10:	e7 95       	ror	r30
    2a12:	8a 95       	dec	r24
    2a14:	e1 f7       	brne	.-8      	; 0x2a0e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    2a16:	e8 0d       	add	r30, r8
    2a18:	f9 1d       	adc	r31, r9
    2a1a:	e4 0d       	add	r30, r4
    2a1c:	f5 1d       	adc	r31, r5
    2a1e:	34 90       	lpm	r3, Z
    2a20:	37 fe       	sbrs	r3, 7
    2a22:	11 c0       	rjmp	.+34     	; 0x2a46 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    2a24:	d5 01       	movw	r26, r10
    2a26:	ed 91       	ld	r30, X+
    2a28:	fc 91       	ld	r31, X
    2a2a:	04 84       	ldd	r0, Z+12	; 0x0c
    2a2c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	96 01       	movw	r18, r12
    2a32:	4b 81       	ldd	r20, Y+3	; 0x03
    2a34:	5c 81       	ldd	r21, Y+4	; 0x04
    2a36:	6d 81       	ldd	r22, Y+5	; 0x05
    2a38:	7e 81       	ldd	r23, Y+6	; 0x06
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	68 0f       	add	r22, r24
    2a40:	79 1f       	adc	r23, r25
    2a42:	c5 01       	movw	r24, r10
    2a44:	09 95       	icall
    2a46:	a9 85       	ldd	r26, Y+9	; 0x09
    2a48:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	ba 87       	std	Y+10, r27	; 0x0a
    2a4e:	a9 87       	std	Y+9, r26	; 0x09
    2a50:	cd cf       	rjmp	.-102    	; 0x29ec <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    2a52:	bf ef       	ldi	r27, 0xFF	; 255
    2a54:	eb 1a       	sub	r14, r27
    2a56:	fb 0a       	sbc	r15, r27
    2a58:	29 81       	ldd	r18, Y+1	; 0x01
    2a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5c:	82 0e       	add	r8, r18
    2a5e:	93 1e       	adc	r9, r19
    2a60:	b9 cf       	rjmp	.-142    	; 0x29d4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    2a62:	d5 01       	movw	r26, r10
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	06 88       	ldd	r0, Z+22	; 0x16
    2a6a:	f7 89       	ldd	r31, Z+23	; 0x17
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	c5 01       	movw	r24, r10
    2a70:	2a 96       	adiw	r28, 0x0a	; 10
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	bf 90       	pop	r11
    2a8e:	af 90       	pop	r10
    2a90:	9f 90       	pop	r9
    2a92:	8f 90       	pop	r8
    2a94:	7f 90       	pop	r7
    2a96:	6f 90       	pop	r6
    2a98:	5f 90       	pop	r5
    2a9a:	4f 90       	pop	r4
    2a9c:	3f 90       	pop	r3
    2a9e:	09 94       	ijmp

00002aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    2aa0:	2f 92       	push	r2
    2aa2:	3f 92       	push	r3
    2aa4:	4f 92       	push	r4
    2aa6:	5f 92       	push	r5
    2aa8:	6f 92       	push	r6
    2aaa:	7f 92       	push	r7
    2aac:	8f 92       	push	r8
    2aae:	9f 92       	push	r9
    2ab0:	af 92       	push	r10
    2ab2:	bf 92       	push	r11
    2ab4:	cf 92       	push	r12
    2ab6:	df 92       	push	r13
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	6b 97       	sbiw	r28, 0x1b	; 27
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ad6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ad8:	2b 01       	movw	r4, r22
    2ada:	5a 83       	std	Y+2, r21	; 0x02
    2adc:	49 83       	std	Y+1, r20	; 0x01
    2ade:	d2 2e       	mov	r13, r18
    2ae0:	19 87       	std	Y+9, r17	; 0x09
    2ae2:	08 87       	std	Y+8, r16	; 0x08
    2ae4:	47 01       	movw	r8, r14
    2ae6:	ab 82       	std	Y+3, r10	; 0x03
    2ae8:	dc 01       	movw	r26, r24
    2aea:	59 96       	adiw	r26, 0x19	; 25
    2aec:	2d 91       	ld	r18, X+
    2aee:	3c 91       	ld	r19, X
    2af0:	5a 97       	sbiw	r26, 0x1a	; 26
    2af2:	21 15       	cp	r18, r1
    2af4:	31 05       	cpc	r19, r1
    2af6:	09 f0       	breq	.+2      	; 0x2afa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    2af8:	00 c1       	rjmp	.+512    	; 0x2cfa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    2afa:	18 96       	adiw	r26, 0x08	; 8
    2afc:	8d 91       	ld	r24, X+
    2afe:	9c 91       	ld	r25, X
    2b00:	19 97       	sbiw	r26, 0x09	; 9
    2b02:	68 17       	cp	r22, r24
    2b04:	79 07       	cpc	r23, r25
    2b06:	0c f0       	brlt	.+2      	; 0x2b0a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    2b08:	e7 c1       	rjmp	.+974    	; 0x2ed8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2b0a:	1a 96       	adiw	r26, 0x0a	; 10
    2b0c:	8d 91       	ld	r24, X+
    2b0e:	9c 91       	ld	r25, X
    2b10:	1b 97       	sbiw	r26, 0x0b	; 11
    2b12:	48 17       	cp	r20, r24
    2b14:	59 07       	cpc	r21, r25
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    2b18:	df c1       	rjmp	.+958    	; 0x2ed8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2b1a:	2c 2c       	mov	r2, r12
    2b1c:	31 2c       	mov	r3, r1
    2b1e:	fb 01       	movw	r30, r22
    2b20:	26 e0       	ldi	r18, 0x06	; 6
    2b22:	c2 9e       	mul	r12, r18
    2b24:	e0 0d       	add	r30, r0
    2b26:	f1 1d       	adc	r31, r1
    2b28:	11 24       	eor	r1, r1
    2b2a:	fd 87       	std	Y+13, r31	; 0x0d
    2b2c:	ec 87       	std	Y+12, r30	; 0x0c
    2b2e:	1e 16       	cp	r1, r30
    2b30:	1f 06       	cpc	r1, r31
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    2b34:	d1 c1       	rjmp	.+930    	; 0x2ed8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2b36:	4a 2d       	mov	r20, r10
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	5b 87       	std	Y+11, r21	; 0x0b
    2b3c:	4a 87       	std	Y+10, r20	; 0x0a
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	44 0f       	add	r20, r20
    2b42:	55 1f       	adc	r21, r21
    2b44:	8a 95       	dec	r24
    2b46:	e1 f7       	brne	.-8      	; 0x2b40 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    2b48:	5f 87       	std	Y+15, r21	; 0x0f
    2b4a:	4e 87       	std	Y+14, r20	; 0x0e
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	84 0f       	add	r24, r20
    2b52:	95 1f       	adc	r25, r21
    2b54:	18 16       	cp	r1, r24
    2b56:	19 06       	cpc	r1, r25
    2b58:	0c f0       	brlt	.+2      	; 0x2b5c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    2b5a:	be c1       	rjmp	.+892    	; 0x2ed8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2b5c:	58 96       	adiw	r26, 0x18	; 24
    2b5e:	8c 91       	ld	r24, X
    2b60:	81 11       	cpse	r24, r1
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2b64:	6f ea       	ldi	r22, 0xAF	; 175
    2b66:	6d 15       	cp	r22, r13
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2b6a:	d3 94       	inc	r13
    2b6c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b6e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b70:	ed 91       	ld	r30, X+
    2b72:	fc 91       	ld	r31, X
    2b74:	11 97       	sbiw	r26, 0x01	; 1
    2b76:	02 84       	ldd	r0, Z+10	; 0x0a
    2b78:	f3 85       	ldd	r31, Z+11	; 0x0b
    2b7a:	e0 2d       	mov	r30, r0
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	09 95       	icall
    2b80:	b5 e0       	ldi	r27, 0x05	; 5
    2b82:	db 9e       	mul	r13, r27
    2b84:	c0 01       	movw	r24, r0
    2b86:	11 24       	eor	r1, r1
    2b88:	ec 2d       	mov	r30, r12
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	f9 8b       	std	Y+17, r31	; 0x11
    2b8e:	e8 8b       	std	Y+16, r30	; 0x10
    2b90:	92 01       	movw	r18, r4
    2b92:	2b 5f       	subi	r18, 0xFB	; 251
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	3b 8b       	std	Y+19, r19	; 0x13
    2b98:	2a 8b       	std	Y+18, r18	; 0x12
    2b9a:	32 01       	movw	r6, r4
    2b9c:	5d 82       	std	Y+5, r5	; 0x05
    2b9e:	4c 82       	std	Y+4, r4	; 0x04
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	44 19       	sub	r20, r4
    2ba4:	55 09       	sbc	r21, r5
    2ba6:	5d 8b       	std	Y+21, r21	; 0x15
    2ba8:	4c 8b       	std	Y+20, r20	; 0x14
    2baa:	7b 81       	ldd	r23, Y+3	; 0x03
    2bac:	67 2f       	mov	r22, r23
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	7f 8b       	std	Y+23, r23	; 0x17
    2bb2:	6e 8b       	std	Y+22, r22	; 0x16
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	08 96       	adiw	r24, 0x08	; 8
    2bba:	99 8f       	std	Y+25, r25	; 0x19
    2bbc:	88 8f       	std	Y+24, r24	; 0x18
    2bbe:	ec 89       	ldd	r30, Y+20	; 0x14
    2bc0:	fd 89       	ldd	r31, Y+21	; 0x15
    2bc2:	e6 0d       	add	r30, r6
    2bc4:	f7 1d       	adc	r31, r7
    2bc6:	ea 5d       	subi	r30, 0xDA	; 218
    2bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bca:	d4 90       	lpm	r13, Z
    2bcc:	a9 81       	ldd	r26, Y+1	; 0x01
    2bce:	ba 81       	ldd	r27, Y+2	; 0x02
    2bd0:	bf 83       	std	Y+7, r27	; 0x07
    2bd2:	ae 83       	std	Y+6, r26	; 0x06
    2bd4:	5d 01       	movw	r10, r26
    2bd6:	d0 fe       	sbrs	r13, 0
    2bd8:	16 c0       	rjmp	.+44     	; 0x2c06 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    2bda:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2bdc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2bde:	ed 91       	ld	r30, X+
    2be0:	fc 91       	ld	r31, X
    2be2:	b1 e0       	ldi	r27, 0x01	; 1
    2be4:	cb 12       	cpse	r12, r27
    2be6:	09 c0       	rjmp	.+18     	; 0x2bfa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2be8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bea:	21 30       	cpi	r18, 0x01	; 1
    2bec:	31 f4       	brne	.+12     	; 0x2bfa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2bee:	04 84       	ldd	r0, Z+12	; 0x0c
    2bf0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2bf2:	e0 2d       	mov	r30, r0
    2bf4:	28 85       	ldd	r18, Y+8	; 0x08
    2bf6:	39 85       	ldd	r19, Y+9	; 0x09
    2bf8:	19 c0       	rjmp	.+50     	; 0x2c2c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    2bfa:	06 84       	ldd	r0, Z+14	; 0x0e
    2bfc:	f7 85       	ldd	r31, Z+15	; 0x0f
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	e8 84       	ldd	r14, Y+8	; 0x08
    2c02:	f9 84       	ldd	r15, Y+9	; 0x09
    2c04:	1d c0       	rjmp	.+58     	; 0x2c40 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    2c06:	48 85       	ldd	r20, Y+8	; 0x08
    2c08:	59 85       	ldd	r21, Y+9	; 0x09
    2c0a:	48 15       	cp	r20, r8
    2c0c:	59 05       	cpc	r21, r9
    2c0e:	11 f1       	breq	.+68     	; 0x2c54 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2c10:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c12:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c14:	ed 91       	ld	r30, X+
    2c16:	fc 91       	ld	r31, X
    2c18:	b1 e0       	ldi	r27, 0x01	; 1
    2c1a:	cb 12       	cpse	r12, r27
    2c1c:	0d c0       	rjmp	.+26     	; 0x2c38 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c20:	21 30       	cpi	r18, 0x01	; 1
    2c22:	51 f4       	brne	.+20     	; 0x2c38 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2c24:	04 84       	ldd	r0, Z+12	; 0x0c
    2c26:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c28:	e0 2d       	mov	r30, r0
    2c2a:	94 01       	movw	r18, r8
    2c2c:	a5 01       	movw	r20, r10
    2c2e:	b3 01       	movw	r22, r6
    2c30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c34:	09 95       	icall
    2c36:	0e c0       	rjmp	.+28     	; 0x2c54 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2c38:	06 84       	ldd	r0, Z+14	; 0x0e
    2c3a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c3c:	e0 2d       	mov	r30, r0
    2c3e:	74 01       	movw	r14, r8
    2c40:	0a 85       	ldd	r16, Y+10	; 0x0a
    2c42:	1b 85       	ldd	r17, Y+11	; 0x0b
    2c44:	91 01       	movw	r18, r2
    2c46:	4e 81       	ldd	r20, Y+6	; 0x06
    2c48:	5f 81       	ldd	r21, Y+7	; 0x07
    2c4a:	6c 81       	ldd	r22, Y+4	; 0x04
    2c4c:	7d 81       	ldd	r23, Y+5	; 0x05
    2c4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c52:	09 95       	icall
    2c54:	d6 94       	lsr	r13
    2c56:	4e 81       	ldd	r20, Y+6	; 0x06
    2c58:	5f 81       	ldd	r21, Y+7	; 0x07
    2c5a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c5c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c5e:	46 0f       	add	r20, r22
    2c60:	57 1f       	adc	r21, r23
    2c62:	5f 83       	std	Y+7, r21	; 0x07
    2c64:	4e 83       	std	Y+6, r20	; 0x06
    2c66:	7f ef       	ldi	r23, 0xFF	; 255
    2c68:	a7 1a       	sub	r10, r23
    2c6a:	b7 0a       	sbc	r11, r23
    2c6c:	88 8d       	ldd	r24, Y+24	; 0x18
    2c6e:	99 8d       	ldd	r25, Y+25	; 0x19
    2c70:	a8 16       	cp	r10, r24
    2c72:	b9 06       	cpc	r11, r25
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    2c76:	af cf       	rjmp	.-162    	; 0x2bd6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    2c78:	ac 81       	ldd	r26, Y+4	; 0x04
    2c7a:	bd 81       	ldd	r27, Y+5	; 0x05
    2c7c:	e8 89       	ldd	r30, Y+16	; 0x10
    2c7e:	f9 89       	ldd	r31, Y+17	; 0x11
    2c80:	ae 0f       	add	r26, r30
    2c82:	bf 1f       	adc	r27, r31
    2c84:	bd 83       	std	Y+5, r27	; 0x05
    2c86:	ac 83       	std	Y+4, r26	; 0x04
    2c88:	ff ef       	ldi	r31, 0xFF	; 255
    2c8a:	6f 1a       	sub	r6, r31
    2c8c:	7f 0a       	sbc	r7, r31
    2c8e:	2a 89       	ldd	r18, Y+18	; 0x12
    2c90:	3b 89       	ldd	r19, Y+19	; 0x13
    2c92:	62 16       	cp	r6, r18
    2c94:	73 06       	cpc	r7, r19
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    2c98:	92 cf       	rjmp	.-220    	; 0x2bbe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    2c9a:	48 85       	ldd	r20, Y+8	; 0x08
    2c9c:	59 85       	ldd	r21, Y+9	; 0x09
    2c9e:	48 15       	cp	r20, r8
    2ca0:	59 05       	cpc	r21, r9
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    2ca4:	f7 c0       	rjmp	.+494    	; 0x2e94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2ca6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2ca8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	b1 e0       	ldi	r27, 0x01	; 1
    2cb0:	cb 12       	cpse	r12, r27
    2cb2:	12 c0       	rjmp	.+36     	; 0x2cd8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    2cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cb6:	21 30       	cpi	r18, 0x01	; 1
    2cb8:	79 f4       	brne	.+30     	; 0x2cd8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    2cba:	b2 01       	movw	r22, r4
    2cbc:	6b 5f       	subi	r22, 0xFB	; 251
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc0:	00 88       	ldd	r0, Z+16	; 0x10
    2cc2:	f1 89       	ldd	r31, Z+17	; 0x11
    2cc4:	e0 2d       	mov	r30, r0
    2cc6:	84 01       	movw	r16, r8
    2cc8:	28 e0       	ldi	r18, 0x08	; 8
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	49 81       	ldd	r20, Y+1	; 0x01
    2cce:	5a 81       	ldd	r21, Y+2	; 0x02
    2cd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cd4:	09 95       	icall
    2cd6:	de c0       	rjmp	.+444    	; 0x2e94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2cd8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cda:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cdc:	62 19       	sub	r22, r2
    2cde:	73 09       	sbc	r23, r3
    2ce0:	06 84       	ldd	r0, Z+14	; 0x0e
    2ce2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ce4:	e0 2d       	mov	r30, r0
    2ce6:	74 01       	movw	r14, r8
    2ce8:	0e 85       	ldd	r16, Y+14	; 0x0e
    2cea:	1f 85       	ldd	r17, Y+15	; 0x0f
    2cec:	91 01       	movw	r18, r2
    2cee:	49 81       	ldd	r20, Y+1	; 0x01
    2cf0:	5a 81       	ldd	r21, Y+2	; 0x02
    2cf2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cf4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cf6:	09 95       	icall
    2cf8:	cd c0       	rjmp	.+410    	; 0x2e94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2cfa:	f9 01       	movw	r30, r18
    2cfc:	34 96       	adiw	r30, 0x04	; 4
    2cfe:	e4 91       	lpm	r30, Z
    2d00:	de 1a       	sub	r13, r30
    2d02:	f9 01       	movw	r30, r18
    2d04:	32 96       	adiw	r30, 0x02	; 2
    2d06:	85 91       	lpm	r24, Z+
    2d08:	94 91       	lpm	r25, Z
    2d0a:	b7 e0       	ldi	r27, 0x07	; 7
    2d0c:	db 9e       	mul	r13, r27
    2d0e:	80 0d       	add	r24, r0
    2d10:	91 1d       	adc	r25, r1
    2d12:	11 24       	eor	r1, r1
    2d14:	f9 01       	movw	r30, r18
    2d16:	25 91       	lpm	r18, Z+
    2d18:	34 91       	lpm	r19, Z
    2d1a:	39 8b       	std	Y+17, r19	; 0x11
    2d1c:	28 8b       	std	Y+16, r18	; 0x10
    2d1e:	fc 01       	movw	r30, r24
    2d20:	25 90       	lpm	r2, Z+
    2d22:	34 90       	lpm	r3, Z
    2d24:	fc 01       	movw	r30, r24
    2d26:	32 96       	adiw	r30, 0x02	; 2
    2d28:	74 90       	lpm	r7, Z
    2d2a:	31 96       	adiw	r30, 0x01	; 1
    2d2c:	a4 90       	lpm	r10, Z
    2d2e:	32 96       	adiw	r30, 0x02	; 2
    2d30:	94 90       	lpm	r9, Z
    2d32:	31 96       	adiw	r30, 0x01	; 1
    2d34:	b4 90       	lpm	r11, Z
    2d36:	31 e0       	ldi	r19, 0x01	; 1
    2d38:	3c 15       	cp	r19, r12
    2d3a:	18 f0       	brcs	.+6      	; 0x2d42 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    2d3c:	4b 81       	ldd	r20, Y+3	; 0x03
    2d3e:	42 30       	cpi	r20, 0x02	; 2
    2d40:	68 f0       	brcs	.+26     	; 0x2d5c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    2d42:	69 2d       	mov	r22, r9
    2d44:	09 2c       	mov	r0, r9
    2d46:	00 0c       	add	r0, r0
    2d48:	77 0b       	sbc	r23, r23
    2d4a:	7d 83       	std	Y+5, r23	; 0x05
    2d4c:	6c 83       	std	Y+4, r22	; 0x04
    2d4e:	8b 2d       	mov	r24, r11
    2d50:	0b 2c       	mov	r0, r11
    2d52:	00 0c       	add	r0, r0
    2d54:	99 0b       	sbc	r25, r25
    2d56:	9f 83       	std	Y+7, r25	; 0x07
    2d58:	8e 83       	std	Y+6, r24	; 0x06
    2d5a:	04 c0       	rjmp	.+8      	; 0x2d64 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    2d5c:	1f 82       	std	Y+7, r1	; 0x07
    2d5e:	1e 82       	std	Y+6, r1	; 0x06
    2d60:	1d 82       	std	Y+5, r1	; 0x05
    2d62:	1c 82       	std	Y+4, r1	; 0x04
    2d64:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d66:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d68:	ed 91       	ld	r30, X+
    2d6a:	fc 91       	ld	r31, X
    2d6c:	11 97       	sbiw	r26, 0x01	; 1
    2d6e:	02 84       	ldd	r0, Z+10	; 0x0a
    2d70:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d72:	e0 2d       	mov	r30, r0
    2d74:	cd 01       	movw	r24, r26
    2d76:	09 95       	icall
    2d78:	61 2c       	mov	r6, r1
    2d7a:	d1 2c       	mov	r13, r1
    2d7c:	81 2c       	mov	r8, r1
    2d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d80:	ef 2f       	mov	r30, r31
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	fb 87       	std	Y+11, r31	; 0x0b
    2d86:	ea 87       	std	Y+10, r30	; 0x0a
    2d88:	2c 2d       	mov	r18, r12
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	3d 87       	std	Y+13, r19	; 0x0d
    2d8e:	2c 87       	std	Y+12, r18	; 0x0c
    2d90:	49 81       	ldd	r20, Y+1	; 0x01
    2d92:	5a 81       	ldd	r21, Y+2	; 0x02
    2d94:	4b 0d       	add	r20, r11
    2d96:	51 1d       	adc	r21, r1
    2d98:	b7 fc       	sbrc	r11, 7
    2d9a:	5a 95       	dec	r21
    2d9c:	5d 8b       	std	Y+21, r21	; 0x15
    2d9e:	4c 8b       	std	Y+20, r20	; 0x14
    2da0:	b2 01       	movw	r22, r4
    2da2:	69 0d       	add	r22, r9
    2da4:	71 1d       	adc	r23, r1
    2da6:	97 fc       	sbrc	r9, 7
    2da8:	7a 95       	dec	r23
    2daa:	7f 8b       	std	Y+23, r23	; 0x17
    2dac:	6e 8b       	std	Y+22, r22	; 0x16
    2dae:	8a 14       	cp	r8, r10
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    2db2:	70 c0       	rjmp	.+224    	; 0x2e94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2db4:	28 2d       	mov	r18, r8
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4e 81       	ldd	r20, Y+6	; 0x06
    2dba:	5f 81       	ldd	r21, Y+7	; 0x07
    2dbc:	42 0f       	add	r20, r18
    2dbe:	53 1f       	adc	r21, r19
    2dc0:	aa 85       	ldd	r26, Y+10	; 0x0a
    2dc2:	bb 85       	ldd	r27, Y+11	; 0x0b
    2dc4:	a4 9f       	mul	r26, r20
    2dc6:	c0 01       	movw	r24, r0
    2dc8:	a5 9f       	mul	r26, r21
    2dca:	90 0d       	add	r25, r0
    2dcc:	b4 9f       	mul	r27, r20
    2dce:	90 0d       	add	r25, r0
    2dd0:	11 24       	eor	r1, r1
    2dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd6:	e8 0f       	add	r30, r24
    2dd8:	f9 1f       	adc	r31, r25
    2dda:	ff 87       	std	Y+15, r31	; 0x0f
    2ddc:	ee 87       	std	Y+14, r30	; 0x0e
    2dde:	86 2d       	mov	r24, r6
    2de0:	91 2c       	mov	r9, r1
    2de2:	4c 89       	ldd	r20, Y+20	; 0x14
    2de4:	5d 89       	ldd	r21, Y+21	; 0x15
    2de6:	42 0f       	add	r20, r18
    2de8:	53 1f       	adc	r21, r19
    2dea:	5b 8b       	std	Y+19, r21	; 0x13
    2dec:	4a 8b       	std	Y+18, r20	; 0x12
    2dee:	97 14       	cp	r9, r7
    2df0:	08 f0       	brcs	.+2      	; 0x2df4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    2df2:	4d c0       	rjmp	.+154    	; 0x2e8e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    2df4:	bb 24       	eor	r11, r11
    2df6:	b3 94       	inc	r11
    2df8:	b8 0e       	add	r11, r24
    2dfa:	87 70       	andi	r24, 0x07	; 7
    2dfc:	41 f4       	brne	.+16     	; 0x2e0e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    2dfe:	c1 01       	movw	r24, r2
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	e8 89       	ldd	r30, Y+16	; 0x10
    2e04:	f9 89       	ldd	r31, Y+17	; 0x11
    2e06:	e2 0d       	add	r30, r2
    2e08:	f3 1d       	adc	r31, r3
    2e0a:	d4 90       	lpm	r13, Z
    2e0c:	1c 01       	movw	r2, r24
    2e0e:	d7 fe       	sbrs	r13, 7
    2e10:	3a c0       	rjmp	.+116    	; 0x2e86 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2e12:	51 e0       	ldi	r21, 0x01	; 1
    2e14:	c5 12       	cpse	r12, r21
    2e16:	16 c0       	rjmp	.+44     	; 0x2e44 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2e18:	6b 81       	ldd	r22, Y+3	; 0x03
    2e1a:	61 30       	cpi	r22, 0x01	; 1
    2e1c:	99 f4       	brne	.+38     	; 0x2e44 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2e1e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e20:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	11 97       	sbiw	r26, 0x01	; 1
    2e28:	04 84       	ldd	r0, Z+12	; 0x0c
    2e2a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	28 85       	ldd	r18, Y+8	; 0x08
    2e30:	39 85       	ldd	r19, Y+9	; 0x09
    2e32:	4a 89       	ldd	r20, Y+18	; 0x12
    2e34:	5b 89       	ldd	r21, Y+19	; 0x13
    2e36:	6e 89       	ldd	r22, Y+22	; 0x16
    2e38:	7f 89       	ldd	r23, Y+23	; 0x17
    2e3a:	69 0d       	add	r22, r9
    2e3c:	71 1d       	adc	r23, r1
    2e3e:	cd 01       	movw	r24, r26
    2e40:	09 95       	icall
    2e42:	21 c0       	rjmp	.+66     	; 0x2e86 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2e44:	8c 81       	ldd	r24, Y+4	; 0x04
    2e46:	9d 81       	ldd	r25, Y+5	; 0x05
    2e48:	89 0d       	add	r24, r9
    2e4a:	91 1d       	adc	r25, r1
    2e4c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e4e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e50:	8e 9f       	mul	r24, r30
    2e52:	b0 01       	movw	r22, r0
    2e54:	8f 9f       	mul	r24, r31
    2e56:	70 0d       	add	r23, r0
    2e58:	9e 9f       	mul	r25, r30
    2e5a:	70 0d       	add	r23, r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	64 0d       	add	r22, r4
    2e60:	75 1d       	adc	r23, r5
    2e62:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e64:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e66:	ed 91       	ld	r30, X+
    2e68:	fc 91       	ld	r31, X
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	06 84       	ldd	r0, Z+14	; 0x0e
    2e6e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e70:	e0 2d       	mov	r30, r0
    2e72:	e8 84       	ldd	r14, Y+8	; 0x08
    2e74:	f9 84       	ldd	r15, Y+9	; 0x09
    2e76:	0a 85       	ldd	r16, Y+10	; 0x0a
    2e78:	1b 85       	ldd	r17, Y+11	; 0x0b
    2e7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e7c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e7e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e80:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e82:	cd 01       	movw	r24, r26
    2e84:	09 95       	icall
    2e86:	dd 0c       	add	r13, r13
    2e88:	93 94       	inc	r9
    2e8a:	8b 2d       	mov	r24, r11
    2e8c:	b0 cf       	rjmp	.-160    	; 0x2dee <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    2e8e:	67 0c       	add	r6, r7
    2e90:	83 94       	inc	r8
    2e92:	8d cf       	rjmp	.-230    	; 0x2dae <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    2e94:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e96:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e98:	ed 91       	ld	r30, X+
    2e9a:	fc 91       	ld	r31, X
    2e9c:	11 97       	sbiw	r26, 0x01	; 1
    2e9e:	06 88       	ldd	r0, Z+22	; 0x16
    2ea0:	f7 89       	ldd	r31, Z+23	; 0x17
    2ea2:	e0 2d       	mov	r30, r0
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	6b 96       	adiw	r28, 0x1b	; 27
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	ef 90       	pop	r14
    2ebe:	df 90       	pop	r13
    2ec0:	cf 90       	pop	r12
    2ec2:	bf 90       	pop	r11
    2ec4:	af 90       	pop	r10
    2ec6:	9f 90       	pop	r9
    2ec8:	8f 90       	pop	r8
    2eca:	7f 90       	pop	r7
    2ecc:	6f 90       	pop	r6
    2ece:	5f 90       	pop	r5
    2ed0:	4f 90       	pop	r4
    2ed2:	3f 90       	pop	r3
    2ed4:	2f 90       	pop	r2
    2ed6:	09 94       	ijmp
    2ed8:	6b 96       	adiw	r28, 0x1b	; 27
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
    2ef4:	bf 90       	pop	r11
    2ef6:	af 90       	pop	r10
    2ef8:	9f 90       	pop	r9
    2efa:	8f 90       	pop	r8
    2efc:	7f 90       	pop	r7
    2efe:	6f 90       	pop	r6
    2f00:	5f 90       	pop	r5
    2f02:	4f 90       	pop	r4
    2f04:	3f 90       	pop	r3
    2f06:	2f 90       	pop	r2
    2f08:	08 95       	ret

00002f0a <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	cf 92       	push	r12
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	ec 01       	movw	r28, r24
    2f20:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    2f22:	89 8d       	ldd	r24, Y+25	; 0x19
    2f24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <_ZN12Adafruit_GFX5writeEh+0x22>
    2f2a:	42 c0       	rjmp	.+132    	; 0x2fb0 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    2f2c:	6a 30       	cpi	r22, 0x0A	; 10
    2f2e:	59 f4       	brne	.+22     	; 0x2f46 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    2f30:	1d 86       	std	Y+13, r1	; 0x0d
    2f32:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    2f34:	2d 89       	ldd	r18, Y+21	; 0x15
    2f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f3a:	38 e0       	ldi	r19, 0x08	; 8
    2f3c:	23 9f       	mul	r18, r19
    2f3e:	80 0d       	add	r24, r0
    2f40:	91 1d       	adc	r25, r1
    2f42:	11 24       	eor	r1, r1
    2f44:	43 c0       	rjmp	.+134    	; 0x2fcc <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    2f46:	6d 30       	cpi	r22, 0x0D	; 13
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <_ZN12Adafruit_GFX5writeEh+0x42>
    2f4a:	aa c0       	rjmp	.+340    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    2f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4e:	88 23       	and	r24, r24
    2f50:	c9 f0       	breq	.+50     	; 0x2f84 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2f52:	3c 89       	ldd	r19, Y+20	; 0x14
    2f54:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f56:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f58:	46 e0       	ldi	r20, 0x06	; 6
    2f5a:	34 9f       	mul	r19, r20
    2f5c:	80 0d       	add	r24, r0
    2f5e:	91 1d       	adc	r25, r1
    2f60:	11 24       	eor	r1, r1
    2f62:	48 85       	ldd	r20, Y+8	; 0x08
    2f64:	59 85       	ldd	r21, Y+9	; 0x09
    2f66:	48 17       	cp	r20, r24
    2f68:	59 07       	cpc	r21, r25
    2f6a:	64 f4       	brge	.+24     	; 0x2f84 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    2f6c:	1d 86       	std	Y+13, r1	; 0x0d
    2f6e:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    2f70:	3d 89       	ldd	r19, Y+21	; 0x15
    2f72:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f74:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f76:	48 e0       	ldi	r20, 0x08	; 8
    2f78:	34 9f       	mul	r19, r20
    2f7a:	80 0d       	add	r24, r0
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	11 24       	eor	r1, r1
    2f80:	9f 87       	std	Y+15, r25	; 0x0f
    2f82:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    2f84:	ea 88       	ldd	r14, Y+18	; 0x12
    2f86:	fb 88       	ldd	r15, Y+19	; 0x13
    2f88:	08 89       	ldd	r16, Y+16	; 0x10
    2f8a:	19 89       	ldd	r17, Y+17	; 0x11
    2f8c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f8e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f94:	ad 88       	ldd	r10, Y+21	; 0x15
    2f96:	cc 88       	ldd	r12, Y+20	; 0x14
    2f98:	ce 01       	movw	r24, r28
    2f9a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    2f9e:	2c 89       	ldd	r18, Y+20	; 0x14
    2fa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fa2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fa4:	36 e0       	ldi	r19, 0x06	; 6
    2fa6:	23 9f       	mul	r18, r19
    2fa8:	80 0d       	add	r24, r0
    2faa:	91 1d       	adc	r25, r1
    2fac:	11 24       	eor	r1, r1
    2fae:	3e c0       	rjmp	.+124    	; 0x302c <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    2fb0:	6a 30       	cpi	r22, 0x0A	; 10
    2fb2:	79 f4       	brne	.+30     	; 0x2fd2 <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    2fb4:	1d 86       	std	Y+13, r1	; 0x0d
    2fb6:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2fb8:	2d 89       	ldd	r18, Y+21	; 0x15
    2fba:	fc 01       	movw	r30, r24
    2fbc:	38 96       	adiw	r30, 0x08	; 8
    2fbe:	e4 91       	lpm	r30, Z
    2fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc4:	2e 9f       	mul	r18, r30
    2fc6:	80 0d       	add	r24, r0
    2fc8:	91 1d       	adc	r25, r1
    2fca:	11 24       	eor	r1, r1
    2fcc:	9f 87       	std	Y+15, r25	; 0x0f
    2fce:	8e 87       	std	Y+14, r24	; 0x0e
    2fd0:	67 c0       	rjmp	.+206    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    2fd2:	6d 30       	cpi	r22, 0x0D	; 13
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <_ZN12Adafruit_GFX5writeEh+0xce>
    2fd6:	64 c0       	rjmp	.+200    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    2fd8:	fc 01       	movw	r30, r24
    2fda:	34 96       	adiw	r30, 0x04	; 4
    2fdc:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2fde:	63 17       	cp	r22, r19
    2fe0:	08 f4       	brcc	.+2      	; 0x2fe4 <_ZN12Adafruit_GFX5writeEh+0xda>
    2fe2:	5e c0       	rjmp	.+188    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
    2fe4:	32 96       	adiw	r30, 0x02	; 2
    2fe6:	e4 91       	lpm	r30, Z
    2fe8:	e6 17       	cp	r30, r22
    2fea:	08 f4       	brcc	.+2      	; 0x2fee <_ZN12Adafruit_GFX5writeEh+0xe4>
    2fec:	59 c0       	rjmp	.+178    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    2fee:	46 2f       	mov	r20, r22
    2ff0:	43 1b       	sub	r20, r19
    2ff2:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	32 96       	adiw	r30, 0x02	; 2
    2ff8:	85 90       	lpm	r8, Z+
    2ffa:	94 90       	lpm	r9, Z
    2ffc:	47 e0       	ldi	r20, 0x07	; 7
    2ffe:	34 9f       	mul	r19, r20
    3000:	80 0c       	add	r8, r0
    3002:	91 1c       	adc	r9, r1
    3004:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    3006:	f4 01       	movw	r30, r8
    3008:	32 96       	adiw	r30, 0x02	; 2
    300a:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    300c:	31 96       	adiw	r30, 0x01	; 1
    300e:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3010:	33 23       	and	r19, r19
    3012:	11 f0       	breq	.+4      	; 0x3018 <_ZN12Adafruit_GFX5writeEh+0x10e>
    3014:	e1 11       	cpse	r30, r1
    3016:	0d c0       	rjmp	.+26     	; 0x3032 <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    3018:	f4 01       	movw	r30, r8
    301a:	34 96       	adiw	r30, 0x04	; 4
    301c:	e4 91       	lpm	r30, Z
    301e:	2c 89       	ldd	r18, Y+20	; 0x14
    3020:	8c 85       	ldd	r24, Y+12	; 0x0c
    3022:	9d 85       	ldd	r25, Y+13	; 0x0d
    3024:	e2 9f       	mul	r30, r18
    3026:	80 0d       	add	r24, r0
    3028:	91 1d       	adc	r25, r1
    302a:	11 24       	eor	r1, r1
    302c:	9d 87       	std	Y+13, r25	; 0x0d
    302e:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    3030:	37 c0       	rjmp	.+110    	; 0x30a0 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    3032:	f4 01       	movw	r30, r8
    3034:	35 96       	adiw	r30, 0x05	; 5
    3036:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    3038:	5f 89       	ldd	r21, Y+23	; 0x17
    303a:	55 23       	and	r21, r21
    303c:	19 f1       	breq	.+70     	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x17a>
    303e:	5c 89       	ldd	r21, Y+20	; 0x14
    3040:	e3 2f       	mov	r30, r19
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	e4 0f       	add	r30, r20
    3046:	f1 1d       	adc	r31, r1
    3048:	47 fd       	sbrc	r20, 7
    304a:	fa 95       	dec	r31
    304c:	5e 9f       	mul	r21, r30
    304e:	b0 01       	movw	r22, r0
    3050:	5f 9f       	mul	r21, r31
    3052:	70 0d       	add	r23, r0
    3054:	11 24       	eor	r1, r1
    3056:	4c 85       	ldd	r20, Y+12	; 0x0c
    3058:	5d 85       	ldd	r21, Y+13	; 0x0d
    305a:	46 0f       	add	r20, r22
    305c:	57 1f       	adc	r21, r23
    305e:	68 85       	ldd	r22, Y+8	; 0x08
    3060:	79 85       	ldd	r23, Y+9	; 0x09
    3062:	64 17       	cp	r22, r20
    3064:	75 07       	cpc	r23, r21
    3066:	74 f4       	brge	.+28     	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    3068:	1d 86       	std	Y+13, r1	; 0x0d
    306a:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    306c:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    306e:	fc 01       	movw	r30, r24
    3070:	38 96       	adiw	r30, 0x08	; 8
    3072:	e4 91       	lpm	r30, Z
    3074:	8e 85       	ldd	r24, Y+14	; 0x0e
    3076:	9f 85       	ldd	r25, Y+15	; 0x0f
    3078:	3e 9f       	mul	r19, r30
    307a:	80 0d       	add	r24, r0
    307c:	91 1d       	adc	r25, r1
    307e:	11 24       	eor	r1, r1
    3080:	9f 87       	std	Y+15, r25	; 0x0f
    3082:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    3084:	ea 88       	ldd	r14, Y+18	; 0x12
    3086:	fb 88       	ldd	r15, Y+19	; 0x13
    3088:	08 89       	ldd	r16, Y+16	; 0x10
    308a:	19 89       	ldd	r17, Y+17	; 0x11
    308c:	4e 85       	ldd	r20, Y+14	; 0x0e
    308e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3090:	6c 85       	ldd	r22, Y+12	; 0x0c
    3092:	7d 85       	ldd	r23, Y+13	; 0x0d
    3094:	ad 88       	ldd	r10, Y+21	; 0x15
    3096:	cc 88       	ldd	r12, Y+20	; 0x14
    3098:	ce 01       	movw	r24, r28
    309a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    309e:	bc cf       	rjmp	.-136    	; 0x3018 <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	cf 90       	pop	r12
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	08 95       	ret

000030ba <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    30ba:	61 11       	cpse	r22, r1
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    30be:	61 e0       	ldi	r22, 0x01	; 1
    30c0:	fc 01       	movw	r30, r24
    30c2:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    30c4:	41 11       	cpse	r20, r1
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	fc 01       	movw	r30, r24
    30cc:	45 8b       	std	Z+21, r20	; 0x15
    30ce:	08 95       	ret

000030d0 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    30d0:	46 2f       	mov	r20, r22
    30d2:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <_ZN12Adafruit_GFX11setTextSizeEhh>

000030d6 <_ZN17Adafruit_NeoPixelD1Ev>:

/*!
  @brief   Retrieve the last-set brightness value for the strip.
  @return  Brightness value: 0 = minimum (off), 255 = maximum.
*/
uint8_t Adafruit_NeoPixel::getBrightness(void) const { return brightness - 1; }
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	ec 01       	movw	r28, r24
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <free>
    30e4:	8e 81       	ldd	r24, Y+6	; 0x06
    30e6:	9f 81       	ldd	r25, Y+7	; 0x07
    30e8:	97 fd       	sbrc	r25, 7
    30ea:	05 c0       	rjmp	.+10     	; 0x30f6 <_ZN17Adafruit_NeoPixelD1Ev+0x20>
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	0c 94 28 11 	jmp	0x2250	; 0x2250 <pinMode>
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	08 95       	ret

000030fc <_ZN17Adafruit_NeoPixel5beginEv>:
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	ec 01       	movw	r28, r24
    3102:	8e 81       	ldd	r24, Y+6	; 0x06
    3104:	9f 81       	ldd	r25, Y+7	; 0x07
    3106:	97 fd       	sbrc	r25, 7
    3108:	07 c0       	rjmp	.+14     	; 0x3118 <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	8e 81       	ldd	r24, Y+6	; 0x06
    3114:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	08 95       	ret

00003122 <_ZN17Adafruit_NeoPixel12updateLengthEj>:
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	ec 01       	movw	r28, r24
    3130:	7b 01       	movw	r14, r22
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <free>
    313a:	9e 85       	ldd	r25, Y+14	; 0x0e
    313c:	8b 85       	ldd	r24, Y+11	; 0x0b
    313e:	98 17       	cp	r25, r24
    3140:	19 f0       	breq	.+6      	; 0x3148 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x26>
    3142:	84 e0       	ldi	r24, 0x04	; 4
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	02 c0       	rjmp	.+4      	; 0x314c <_ZN17Adafruit_NeoPixel12updateLengthEj+0x2a>
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	8e 9d       	mul	r24, r14
    314e:	80 01       	movw	r16, r0
    3150:	8f 9d       	mul	r24, r15
    3152:	10 0d       	add	r17, r0
    3154:	9e 9d       	mul	r25, r14
    3156:	10 0d       	add	r17, r0
    3158:	11 24       	eor	r1, r1
    315a:	1d 83       	std	Y+5, r17	; 0x05
    315c:	0c 83       	std	Y+4, r16	; 0x04
    315e:	c8 01       	movw	r24, r16
    3160:	0e 94 41 29 	call	0x5282	; 0x5282 <malloc>
    3164:	9a 87       	std	Y+10, r25	; 0x0a
    3166:	89 87       	std	Y+9, r24	; 0x09
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	41 f0       	breq	.+16     	; 0x317c <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5a>
    316c:	a8 01       	movw	r20, r16
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	0e 94 09 2b 	call	0x5612	; 0x5612 <memset>
    3176:	fb 82       	std	Y+3, r15	; 0x03
    3178:	ea 82       	std	Y+2, r14	; 0x02
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x62>
    317c:	1d 82       	std	Y+5, r1	; 0x05
    317e:	1c 82       	std	Y+4, r1	; 0x04
    3180:	1b 82       	std	Y+3, r1	; 0x03
    3182:	1a 82       	std	Y+2, r1	; 0x02
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	ff 90       	pop	r15
    318e:	ef 90       	pop	r14
    3190:	08 95       	ret

00003192 <_ZN17Adafruit_NeoPixel10updateTypeEj>:
    3192:	fc 01       	movw	r30, r24
    3194:	31 e0       	ldi	r19, 0x01	; 1
    3196:	96 85       	ldd	r25, Z+14	; 0x0e
    3198:	83 85       	ldd	r24, Z+11	; 0x0b
    319a:	98 13       	cpse	r25, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	cb 01       	movw	r24, r22
    31a0:	26 e0       	ldi	r18, 0x06	; 6
    31a2:	96 95       	lsr	r25
    31a4:	87 95       	ror	r24
    31a6:	2a 95       	dec	r18
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
    31aa:	28 2f       	mov	r18, r24
    31ac:	23 70       	andi	r18, 0x03	; 3
    31ae:	26 87       	std	Z+14, r18	; 0x0e
    31b0:	cb 01       	movw	r24, r22
    31b2:	44 e0       	ldi	r20, 0x04	; 4
    31b4:	96 95       	lsr	r25
    31b6:	87 95       	ror	r24
    31b8:	4a 95       	dec	r20
    31ba:	e1 f7       	brne	.-8      	; 0x31b4 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
    31bc:	83 70       	andi	r24, 0x03	; 3
    31be:	83 87       	std	Z+11, r24	; 0x0b
    31c0:	ab 01       	movw	r20, r22
    31c2:	56 95       	lsr	r21
    31c4:	47 95       	ror	r20
    31c6:	56 95       	lsr	r21
    31c8:	47 95       	ror	r20
    31ca:	43 70       	andi	r20, 0x03	; 3
    31cc:	44 87       	std	Z+12, r20	; 0x0c
    31ce:	96 2f       	mov	r25, r22
    31d0:	93 70       	andi	r25, 0x03	; 3
    31d2:	95 87       	std	Z+13, r25	; 0x0d
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	6f 3f       	cpi	r22, 0xFF	; 255
    31d8:	71 05       	cpc	r23, r1
    31da:	11 f0       	breq	.+4      	; 0x31e0 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	90 83       	st	Z, r25
    31e2:	41 85       	ldd	r20, Z+9	; 0x09
    31e4:	52 85       	ldd	r21, Z+10	; 0x0a
    31e6:	45 2b       	or	r20, r21
    31e8:	51 f0       	breq	.+20     	; 0x31fe <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	28 13       	cpse	r18, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	39 17       	cp	r19, r25
    31f2:	29 f0       	breq	.+10     	; 0x31fe <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    31f4:	62 81       	ldd	r22, Z+2	; 0x02
    31f6:	73 81       	ldd	r23, Z+3	; 0x03
    31f8:	cf 01       	movw	r24, r30
    31fa:	0c 94 91 18 	jmp	0x3122	; 0x3122 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    31fe:	08 95       	ret

00003200 <_ZN17Adafruit_NeoPixel4showEv>:
    3200:	cf 92       	push	r12
    3202:	df 92       	push	r13
    3204:	ef 92       	push	r14
    3206:	ff 92       	push	r15
    3208:	0f 93       	push	r16
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	29 97       	sbiw	r28, 0x09	; 9
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	8c 01       	movw	r16, r24
    3222:	dc 01       	movw	r26, r24
    3224:	19 96       	adiw	r26, 0x09	; 9
    3226:	8d 91       	ld	r24, X+
    3228:	9c 91       	ld	r25, X
    322a:	1a 97       	sbiw	r26, 0x0a	; 10
    322c:	89 2b       	or	r24, r25
    322e:	09 f4       	brne	.+2      	; 0x3232 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    3230:	8f c1       	rjmp	.+798    	; 0x3550 <nextbyte20+0x30>
    3232:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    3236:	f8 01       	movw	r30, r16
    3238:	c7 84       	ldd	r12, Z+15	; 0x0f
    323a:	d0 88       	ldd	r13, Z+16	; 0x10
    323c:	e1 88       	ldd	r14, Z+17	; 0x11
    323e:	f2 88       	ldd	r15, Z+18	; 0x12
    3240:	6c 15       	cp	r22, r12
    3242:	7d 05       	cpc	r23, r13
    3244:	8e 05       	cpc	r24, r14
    3246:	9f 05       	cpc	r25, r15
    3248:	20 f4       	brcc	.+8      	; 0x3252 <_ZN17Adafruit_NeoPixel4showEv+0x52>
    324a:	67 87       	std	Z+15, r22	; 0x0f
    324c:	70 8b       	std	Z+16, r23	; 0x10
    324e:	81 8b       	std	Z+17, r24	; 0x11
    3250:	92 8b       	std	Z+18, r25	; 0x12
    3252:	f8 01       	movw	r30, r16
    3254:	c7 84       	ldd	r12, Z+15	; 0x0f
    3256:	d0 88       	ldd	r13, Z+16	; 0x10
    3258:	e1 88       	ldd	r14, Z+17	; 0x11
    325a:	f2 88       	ldd	r15, Z+18	; 0x12
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8c 19       	sub	r24, r12
    3262:	9d 09       	sbc	r25, r13
    3264:	ae 09       	sbc	r26, r14
    3266:	bf 09       	sbc	r27, r15
    3268:	8c 32       	cpi	r24, 0x2C	; 44
    326a:	91 40       	sbci	r25, 0x01	; 1
    326c:	a1 05       	cpc	r26, r1
    326e:	b1 05       	cpc	r27, r1
    3270:	00 f3       	brcs	.-64     	; 0x3232 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    3272:	f8 94       	cli
    3274:	d8 01       	movw	r26, r16
    3276:	14 96       	adiw	r26, 0x04	; 4
    3278:	8d 91       	ld	r24, X+
    327a:	9c 91       	ld	r25, X
    327c:	15 97       	sbiw	r26, 0x05	; 5
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	19 96       	adiw	r26, 0x09	; 9
    3284:	0d 90       	ld	r0, X+
    3286:	bc 91       	ld	r27, X
    3288:	a0 2d       	mov	r26, r0
    328a:	7d 01       	movw	r14, r26
    328c:	ef ef       	ldi	r30, 0xFF	; 255
    328e:	ee 1a       	sub	r14, r30
    3290:	fe 0a       	sbc	r15, r30
    3292:	8c 91       	ld	r24, X
    3294:	89 87       	std	Y+9, r24	; 0x09
    3296:	d8 01       	movw	r26, r16
    3298:	8c 91       	ld	r24, X
    329a:	53 96       	adiw	r26, 0x13	; 19
    329c:	0d 90       	ld	r0, X+
    329e:	bc 91       	ld	r27, X
    32a0:	a0 2d       	mov	r26, r0
    32a2:	88 23       	and	r24, r24
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <_ZN17Adafruit_NeoPixel4showEv+0xa8>
    32a6:	1a c1       	rjmp	.+564    	; 0x34dc <headC+0x88>
    32a8:	1d 82       	std	Y+5, r1	; 0x05
    32aa:	ab 32       	cpi	r26, 0x2B	; 43
    32ac:	b1 05       	cpc	r27, r1
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
    32b0:	59 c0       	rjmp	.+178    	; 0x3364 <headD+0x82>
    32b2:	9b b1       	in	r25, 0x0b	; 11
    32b4:	f8 01       	movw	r30, r16
    32b6:	85 89       	ldd	r24, Z+21	; 0x15
    32b8:	98 2b       	or	r25, r24
    32ba:	98 87       	std	Y+8, r25	; 0x08
    32bc:	9b b1       	in	r25, 0x0b	; 11
    32be:	80 95       	com	r24
    32c0:	89 23       	and	r24, r25
    32c2:	8f 83       	std	Y+7, r24	; 0x07
    32c4:	8f 81       	ldd	r24, Y+7	; 0x07
    32c6:	8e 83       	std	Y+6, r24	; 0x06
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	87 ff       	sbrs	r24, 7
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <_ZN17Adafruit_NeoPixel4showEv+0xd2>
    32ce:	88 85       	ldd	r24, Y+8	; 0x08
    32d0:	8e 83       	std	Y+6, r24	; 0x06
    32d2:	58 85       	ldd	r21, Y+8	; 0x08
    32d4:	6f 81       	ldd	r22, Y+7	; 0x07
    32d6:	49 85       	ldd	r20, Y+9	; 0x09
    32d8:	3e 81       	ldd	r19, Y+6	; 0x06
    32da:	2d 81       	ldd	r18, Y+5	; 0x05
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	9a 81       	ldd	r25, Y+2	; 0x02
    32e0:	d7 01       	movw	r26, r14

000032e2 <headD>:
    32e2:	5b b9       	out	0x0b, r21	; 11
    32e4:	26 2f       	mov	r18, r22
    32e6:	3b b9       	out	0x0b, r19	; 11
    32e8:	00 c0       	rjmp	.+0      	; 0x32ea <headD+0x8>
    32ea:	46 fd       	sbrc	r20, 6
    32ec:	25 2f       	mov	r18, r21
    32ee:	6b b9       	out	0x0b, r22	; 11
    32f0:	00 c0       	rjmp	.+0      	; 0x32f2 <headD+0x10>
    32f2:	5b b9       	out	0x0b, r21	; 11
    32f4:	36 2f       	mov	r19, r22
    32f6:	2b b9       	out	0x0b, r18	; 11
    32f8:	00 c0       	rjmp	.+0      	; 0x32fa <headD+0x18>
    32fa:	45 fd       	sbrc	r20, 5
    32fc:	35 2f       	mov	r19, r21
    32fe:	6b b9       	out	0x0b, r22	; 11
    3300:	00 c0       	rjmp	.+0      	; 0x3302 <headD+0x20>
    3302:	5b b9       	out	0x0b, r21	; 11
    3304:	26 2f       	mov	r18, r22
    3306:	3b b9       	out	0x0b, r19	; 11
    3308:	00 c0       	rjmp	.+0      	; 0x330a <headD+0x28>
    330a:	44 fd       	sbrc	r20, 4
    330c:	25 2f       	mov	r18, r21
    330e:	6b b9       	out	0x0b, r22	; 11
    3310:	00 c0       	rjmp	.+0      	; 0x3312 <headD+0x30>
    3312:	5b b9       	out	0x0b, r21	; 11
    3314:	36 2f       	mov	r19, r22
    3316:	2b b9       	out	0x0b, r18	; 11
    3318:	00 c0       	rjmp	.+0      	; 0x331a <headD+0x38>
    331a:	43 fd       	sbrc	r20, 3
    331c:	35 2f       	mov	r19, r21
    331e:	6b b9       	out	0x0b, r22	; 11
    3320:	00 c0       	rjmp	.+0      	; 0x3322 <headD+0x40>
    3322:	5b b9       	out	0x0b, r21	; 11
    3324:	26 2f       	mov	r18, r22
    3326:	3b b9       	out	0x0b, r19	; 11
    3328:	00 c0       	rjmp	.+0      	; 0x332a <headD+0x48>
    332a:	42 fd       	sbrc	r20, 2
    332c:	25 2f       	mov	r18, r21
    332e:	6b b9       	out	0x0b, r22	; 11
    3330:	00 c0       	rjmp	.+0      	; 0x3332 <headD+0x50>
    3332:	5b b9       	out	0x0b, r21	; 11
    3334:	36 2f       	mov	r19, r22
    3336:	2b b9       	out	0x0b, r18	; 11
    3338:	00 c0       	rjmp	.+0      	; 0x333a <headD+0x58>
    333a:	41 fd       	sbrc	r20, 1
    333c:	35 2f       	mov	r19, r21
    333e:	6b b9       	out	0x0b, r22	; 11
    3340:	00 c0       	rjmp	.+0      	; 0x3342 <headD+0x60>
    3342:	5b b9       	out	0x0b, r21	; 11
    3344:	26 2f       	mov	r18, r22
    3346:	3b b9       	out	0x0b, r19	; 11
    3348:	00 c0       	rjmp	.+0      	; 0x334a <headD+0x68>
    334a:	40 fd       	sbrc	r20, 0
    334c:	25 2f       	mov	r18, r21
    334e:	6b b9       	out	0x0b, r22	; 11
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	5b b9       	out	0x0b, r21	; 11
    3354:	36 2f       	mov	r19, r22
    3356:	2b b9       	out	0x0b, r18	; 11
    3358:	4d 91       	ld	r20, X+
    335a:	47 fd       	sbrc	r20, 7
    335c:	35 2f       	mov	r19, r21
    335e:	6b b9       	out	0x0b, r22	; 11
    3360:	01 f6       	brne	.-128    	; 0x32e2 <headD>
    3362:	b8 c0       	rjmp	.+368    	; 0x34d4 <headC+0x80>
    3364:	a5 32       	cpi	r26, 0x25	; 37
    3366:	b1 05       	cpc	r27, r1
    3368:	09 f0       	breq	.+2      	; 0x336c <headD+0x8a>
    336a:	59 c0       	rjmp	.+178    	; 0x341e <headB+0x82>
    336c:	95 b1       	in	r25, 0x05	; 5
    336e:	f8 01       	movw	r30, r16
    3370:	85 89       	ldd	r24, Z+21	; 0x15
    3372:	98 2b       	or	r25, r24
    3374:	98 87       	std	Y+8, r25	; 0x08
    3376:	95 b1       	in	r25, 0x05	; 5
    3378:	80 95       	com	r24
    337a:	89 23       	and	r24, r25
    337c:	8f 83       	std	Y+7, r24	; 0x07
    337e:	8f 81       	ldd	r24, Y+7	; 0x07
    3380:	8e 83       	std	Y+6, r24	; 0x06
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	87 ff       	sbrs	r24, 7
    3386:	02 c0       	rjmp	.+4      	; 0x338c <headD+0xaa>
    3388:	88 85       	ldd	r24, Y+8	; 0x08
    338a:	8e 83       	std	Y+6, r24	; 0x06
    338c:	58 85       	ldd	r21, Y+8	; 0x08
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	49 85       	ldd	r20, Y+9	; 0x09
    3392:	3e 81       	ldd	r19, Y+6	; 0x06
    3394:	2d 81       	ldd	r18, Y+5	; 0x05
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	d7 01       	movw	r26, r14

0000339c <headB>:
    339c:	55 b9       	out	0x05, r21	; 5
    339e:	26 2f       	mov	r18, r22
    33a0:	35 b9       	out	0x05, r19	; 5
    33a2:	00 c0       	rjmp	.+0      	; 0x33a4 <headB+0x8>
    33a4:	46 fd       	sbrc	r20, 6
    33a6:	25 2f       	mov	r18, r21
    33a8:	65 b9       	out	0x05, r22	; 5
    33aa:	00 c0       	rjmp	.+0      	; 0x33ac <headB+0x10>
    33ac:	55 b9       	out	0x05, r21	; 5
    33ae:	36 2f       	mov	r19, r22
    33b0:	25 b9       	out	0x05, r18	; 5
    33b2:	00 c0       	rjmp	.+0      	; 0x33b4 <headB+0x18>
    33b4:	45 fd       	sbrc	r20, 5
    33b6:	35 2f       	mov	r19, r21
    33b8:	65 b9       	out	0x05, r22	; 5
    33ba:	00 c0       	rjmp	.+0      	; 0x33bc <headB+0x20>
    33bc:	55 b9       	out	0x05, r21	; 5
    33be:	26 2f       	mov	r18, r22
    33c0:	35 b9       	out	0x05, r19	; 5
    33c2:	00 c0       	rjmp	.+0      	; 0x33c4 <headB+0x28>
    33c4:	44 fd       	sbrc	r20, 4
    33c6:	25 2f       	mov	r18, r21
    33c8:	65 b9       	out	0x05, r22	; 5
    33ca:	00 c0       	rjmp	.+0      	; 0x33cc <headB+0x30>
    33cc:	55 b9       	out	0x05, r21	; 5
    33ce:	36 2f       	mov	r19, r22
    33d0:	25 b9       	out	0x05, r18	; 5
    33d2:	00 c0       	rjmp	.+0      	; 0x33d4 <headB+0x38>
    33d4:	43 fd       	sbrc	r20, 3
    33d6:	35 2f       	mov	r19, r21
    33d8:	65 b9       	out	0x05, r22	; 5
    33da:	00 c0       	rjmp	.+0      	; 0x33dc <headB+0x40>
    33dc:	55 b9       	out	0x05, r21	; 5
    33de:	26 2f       	mov	r18, r22
    33e0:	35 b9       	out	0x05, r19	; 5
    33e2:	00 c0       	rjmp	.+0      	; 0x33e4 <headB+0x48>
    33e4:	42 fd       	sbrc	r20, 2
    33e6:	25 2f       	mov	r18, r21
    33e8:	65 b9       	out	0x05, r22	; 5
    33ea:	00 c0       	rjmp	.+0      	; 0x33ec <headB+0x50>
    33ec:	55 b9       	out	0x05, r21	; 5
    33ee:	36 2f       	mov	r19, r22
    33f0:	25 b9       	out	0x05, r18	; 5
    33f2:	00 c0       	rjmp	.+0      	; 0x33f4 <headB+0x58>
    33f4:	41 fd       	sbrc	r20, 1
    33f6:	35 2f       	mov	r19, r21
    33f8:	65 b9       	out	0x05, r22	; 5
    33fa:	00 c0       	rjmp	.+0      	; 0x33fc <headB+0x60>
    33fc:	55 b9       	out	0x05, r21	; 5
    33fe:	26 2f       	mov	r18, r22
    3400:	35 b9       	out	0x05, r19	; 5
    3402:	00 c0       	rjmp	.+0      	; 0x3404 <headB+0x68>
    3404:	40 fd       	sbrc	r20, 0
    3406:	25 2f       	mov	r18, r21
    3408:	65 b9       	out	0x05, r22	; 5
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	55 b9       	out	0x05, r21	; 5
    340e:	36 2f       	mov	r19, r22
    3410:	25 b9       	out	0x05, r18	; 5
    3412:	4d 91       	ld	r20, X+
    3414:	47 fd       	sbrc	r20, 7
    3416:	35 2f       	mov	r19, r21
    3418:	65 b9       	out	0x05, r22	; 5
    341a:	01 f6       	brne	.-128    	; 0x339c <headB>
    341c:	5b c0       	rjmp	.+182    	; 0x34d4 <headC+0x80>
    341e:	98 97       	sbiw	r26, 0x28	; 40
    3420:	09 f0       	breq	.+2      	; 0x3424 <headB+0x88>
    3422:	8c c0       	rjmp	.+280    	; 0x353c <nextbyte20+0x1c>
    3424:	98 b1       	in	r25, 0x08	; 8
    3426:	f8 01       	movw	r30, r16
    3428:	85 89       	ldd	r24, Z+21	; 0x15
    342a:	98 2b       	or	r25, r24
    342c:	98 87       	std	Y+8, r25	; 0x08
    342e:	98 b1       	in	r25, 0x08	; 8
    3430:	80 95       	com	r24
    3432:	89 23       	and	r24, r25
    3434:	8f 83       	std	Y+7, r24	; 0x07
    3436:	8f 81       	ldd	r24, Y+7	; 0x07
    3438:	8e 83       	std	Y+6, r24	; 0x06
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	87 ff       	sbrs	r24, 7
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <headB+0xa8>
    3440:	88 85       	ldd	r24, Y+8	; 0x08
    3442:	8e 83       	std	Y+6, r24	; 0x06
    3444:	58 85       	ldd	r21, Y+8	; 0x08
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	49 85       	ldd	r20, Y+9	; 0x09
    344a:	3e 81       	ldd	r19, Y+6	; 0x06
    344c:	2d 81       	ldd	r18, Y+5	; 0x05
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	9a 81       	ldd	r25, Y+2	; 0x02
    3452:	d7 01       	movw	r26, r14

00003454 <headC>:
    3454:	58 b9       	out	0x08, r21	; 8
    3456:	26 2f       	mov	r18, r22
    3458:	38 b9       	out	0x08, r19	; 8
    345a:	00 c0       	rjmp	.+0      	; 0x345c <headC+0x8>
    345c:	46 fd       	sbrc	r20, 6
    345e:	25 2f       	mov	r18, r21
    3460:	68 b9       	out	0x08, r22	; 8
    3462:	00 c0       	rjmp	.+0      	; 0x3464 <headC+0x10>
    3464:	58 b9       	out	0x08, r21	; 8
    3466:	36 2f       	mov	r19, r22
    3468:	28 b9       	out	0x08, r18	; 8
    346a:	00 c0       	rjmp	.+0      	; 0x346c <headC+0x18>
    346c:	45 fd       	sbrc	r20, 5
    346e:	35 2f       	mov	r19, r21
    3470:	68 b9       	out	0x08, r22	; 8
    3472:	00 c0       	rjmp	.+0      	; 0x3474 <headC+0x20>
    3474:	58 b9       	out	0x08, r21	; 8
    3476:	26 2f       	mov	r18, r22
    3478:	38 b9       	out	0x08, r19	; 8
    347a:	00 c0       	rjmp	.+0      	; 0x347c <headC+0x28>
    347c:	44 fd       	sbrc	r20, 4
    347e:	25 2f       	mov	r18, r21
    3480:	68 b9       	out	0x08, r22	; 8
    3482:	00 c0       	rjmp	.+0      	; 0x3484 <headC+0x30>
    3484:	58 b9       	out	0x08, r21	; 8
    3486:	36 2f       	mov	r19, r22
    3488:	28 b9       	out	0x08, r18	; 8
    348a:	00 c0       	rjmp	.+0      	; 0x348c <headC+0x38>
    348c:	43 fd       	sbrc	r20, 3
    348e:	35 2f       	mov	r19, r21
    3490:	68 b9       	out	0x08, r22	; 8
    3492:	00 c0       	rjmp	.+0      	; 0x3494 <headC+0x40>
    3494:	58 b9       	out	0x08, r21	; 8
    3496:	26 2f       	mov	r18, r22
    3498:	38 b9       	out	0x08, r19	; 8
    349a:	00 c0       	rjmp	.+0      	; 0x349c <headC+0x48>
    349c:	42 fd       	sbrc	r20, 2
    349e:	25 2f       	mov	r18, r21
    34a0:	68 b9       	out	0x08, r22	; 8
    34a2:	00 c0       	rjmp	.+0      	; 0x34a4 <headC+0x50>
    34a4:	58 b9       	out	0x08, r21	; 8
    34a6:	36 2f       	mov	r19, r22
    34a8:	28 b9       	out	0x08, r18	; 8
    34aa:	00 c0       	rjmp	.+0      	; 0x34ac <headC+0x58>
    34ac:	41 fd       	sbrc	r20, 1
    34ae:	35 2f       	mov	r19, r21
    34b0:	68 b9       	out	0x08, r22	; 8
    34b2:	00 c0       	rjmp	.+0      	; 0x34b4 <headC+0x60>
    34b4:	58 b9       	out	0x08, r21	; 8
    34b6:	26 2f       	mov	r18, r22
    34b8:	38 b9       	out	0x08, r19	; 8
    34ba:	00 c0       	rjmp	.+0      	; 0x34bc <headC+0x68>
    34bc:	40 fd       	sbrc	r20, 0
    34be:	25 2f       	mov	r18, r21
    34c0:	68 b9       	out	0x08, r22	; 8
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	58 b9       	out	0x08, r21	; 8
    34c6:	36 2f       	mov	r19, r22
    34c8:	28 b9       	out	0x08, r18	; 8
    34ca:	4d 91       	ld	r20, X+
    34cc:	47 fd       	sbrc	r20, 7
    34ce:	35 2f       	mov	r19, r21
    34d0:	68 b9       	out	0x08, r22	; 8
    34d2:	01 f6       	brne	.-128    	; 0x3454 <headC>
    34d4:	49 87       	std	Y+9, r20	; 0x09
    34d6:	3e 83       	std	Y+6, r19	; 0x06
    34d8:	2d 83       	std	Y+5, r18	; 0x05
    34da:	2e c0       	rjmp	.+92     	; 0x3538 <nextbyte20+0x18>
    34dc:	9c 91       	ld	r25, X
    34de:	f8 01       	movw	r30, r16
    34e0:	85 89       	ldd	r24, Z+21	; 0x15
    34e2:	98 2b       	or	r25, r24
    34e4:	98 87       	std	Y+8, r25	; 0x08
    34e6:	9c 91       	ld	r25, X
    34e8:	80 95       	com	r24
    34ea:	89 23       	and	r24, r25
    34ec:	8f 83       	std	Y+7, r24	; 0x07
    34ee:	8f 81       	ldd	r24, Y+7	; 0x07
    34f0:	8c 83       	std	Y+4, r24	; 0x04
    34f2:	88 e0       	ldi	r24, 0x08	; 8
    34f4:	8b 83       	std	Y+3, r24	; 0x03
    34f6:	58 85       	ldd	r21, Y+8	; 0x08
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	49 85       	ldd	r20, Y+9	; 0x09
    34fc:	3b 81       	ldd	r19, Y+3	; 0x03
    34fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	f7 01       	movw	r30, r14

00003506 <head20>:
    3506:	5c 93       	st	X, r21
    3508:	47 fd       	sbrc	r20, 7
    350a:	25 2f       	mov	r18, r21
    350c:	2c 93       	st	X, r18
    350e:	26 2f       	mov	r18, r22
    3510:	3a 95       	dec	r19
    3512:	31 f0       	breq	.+12     	; 0x3520 <nextbyte20>
    3514:	44 1f       	adc	r20, r20
    3516:	6c 93       	st	X, r22
    3518:	00 c0       	rjmp	.+0      	; 0x351a <head20+0x14>
    351a:	00 c0       	rjmp	.+0      	; 0x351c <head20+0x16>
    351c:	00 c0       	rjmp	.+0      	; 0x351e <head20+0x18>
    351e:	f3 cf       	rjmp	.-26     	; 0x3506 <head20>

00003520 <nextbyte20>:
    3520:	6c 93       	st	X, r22
    3522:	00 00       	nop
    3524:	38 e0       	ldi	r19, 0x08	; 8
    3526:	41 91       	ld	r20, Z+
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	69 f7       	brne	.-38     	; 0x3506 <head20>
    352c:	f8 01       	movw	r30, r16
    352e:	b4 8b       	std	Z+20, r27	; 0x14
    3530:	a3 8b       	std	Z+19, r26	; 0x13
    3532:	49 87       	std	Y+9, r20	; 0x09
    3534:	3b 83       	std	Y+3, r19	; 0x03
    3536:	2c 83       	std	Y+4, r18	; 0x04
    3538:	9a 83       	std	Y+2, r25	; 0x02
    353a:	89 83       	std	Y+1, r24	; 0x01
    353c:	78 94       	sei
    353e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    3542:	d8 01       	movw	r26, r16
    3544:	1f 96       	adiw	r26, 0x0f	; 15
    3546:	6d 93       	st	X+, r22
    3548:	7d 93       	st	X+, r23
    354a:	8d 93       	st	X+, r24
    354c:	9c 93       	st	X, r25
    354e:	52 97       	sbiw	r26, 0x12	; 18
    3550:	29 96       	adiw	r28, 0x09	; 9
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	08 95       	ret

0000356e <_ZN17Adafruit_NeoPixel6setPinEi>:
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	ec 01       	movw	r28, r24
    3578:	16 2f       	mov	r17, r22
    357a:	07 2f       	mov	r16, r23
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	88 23       	and	r24, r24
    3580:	39 f0       	breq	.+14     	; 0x3590 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    3582:	8e 81       	ldd	r24, Y+6	; 0x06
    3584:	9f 81       	ldd	r25, Y+7	; 0x07
    3586:	97 fd       	sbrc	r25, 7
    3588:	03 c0       	rjmp	.+6      	; 0x3590 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3590:	1e 83       	std	Y+6, r17	; 0x06
    3592:	0f 83       	std	Y+7, r16	; 0x07
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	88 23       	and	r24, r24
    3598:	41 f0       	breq	.+16     	; 0x35aa <_ZN17Adafruit_NeoPixel6setPinEi+0x3c>
    359a:	61 e0       	ldi	r22, 0x01	; 1
    359c:	81 2f       	mov	r24, r17
    359e:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	81 2f       	mov	r24, r17
    35a6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    35aa:	81 2f       	mov	r24, r17
    35ac:	90 2f       	mov	r25, r16
    35ae:	fc 01       	movw	r30, r24
    35b0:	ec 50       	subi	r30, 0x0C	; 12
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	e4 91       	lpm	r30, Z
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	ee 0f       	add	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	ee 5e       	subi	r30, 0xEE	; 238
    35be:	fe 4f       	sbci	r31, 0xFE	; 254
    35c0:	25 91       	lpm	r18, Z+
    35c2:	34 91       	lpm	r19, Z
    35c4:	3c 8b       	std	Y+20, r19	; 0x14
    35c6:	2b 8b       	std	Y+19, r18	; 0x13
    35c8:	fc 01       	movw	r30, r24
    35ca:	e0 52       	subi	r30, 0x20	; 32
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	e4 91       	lpm	r30, Z
    35d0:	ed 8b       	std	Y+21, r30	; 0x15
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_ZN17Adafruit_NeoPixelC1Ejij>:
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	ec 01       	movw	r28, r24
    35ea:	7b 01       	movw	r14, r22
    35ec:	8a 01       	movw	r16, r20
    35ee:	19 82       	std	Y+1, r1	; 0x01
    35f0:	18 86       	std	Y+8, r1	; 0x08
    35f2:	1a 86       	std	Y+10, r1	; 0x0a
    35f4:	19 86       	std	Y+9, r1	; 0x09
    35f6:	1f 86       	std	Y+15, r1	; 0x0f
    35f8:	18 8a       	std	Y+16, r1	; 0x10
    35fa:	19 8a       	std	Y+17, r1	; 0x11
    35fc:	1a 8a       	std	Y+18, r1	; 0x12
    35fe:	b9 01       	movw	r22, r18
    3600:	0e 94 c9 18 	call	0x3192	; 0x3192 <_ZN17Adafruit_NeoPixel10updateTypeEj>
    3604:	b7 01       	movw	r22, r14
    3606:	ce 01       	movw	r24, r28
    3608:	0e 94 91 18 	call	0x3122	; 0x3122 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    360c:	b8 01       	movw	r22, r16
    360e:	ce 01       	movw	r24, r28
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <_ZN17Adafruit_NeoPixel6setPinEi>

00003620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
    3620:	7f 92       	push	r7
    3622:	8f 92       	push	r8
    3624:	9f 92       	push	r9
    3626:	af 92       	push	r10
    3628:	bf 92       	push	r11
    362a:	cf 92       	push	r12
    362c:	df 92       	push	r13
    362e:	ef 92       	push	r14
    3630:	ff 92       	push	r15
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	fc 01       	movw	r30, r24
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	68 17       	cp	r22, r24
    3642:	79 07       	cpc	r23, r25
    3644:	08 f0       	brcs	.+2      	; 0x3648 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
    3646:	53 c0       	rjmp	.+166    	; 0x36ee <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    3648:	4a 01       	movw	r8, r20
    364a:	aa 24       	eor	r10, r10
    364c:	bb 24       	eor	r11, r11
    364e:	78 2c       	mov	r7, r8
    3650:	c3 2e       	mov	r12, r19
    3652:	d4 2e       	mov	r13, r20
    3654:	e5 2e       	mov	r14, r21
    3656:	ff 24       	eor	r15, r15
    3658:	bc 2d       	mov	r27, r12
    365a:	a2 2f       	mov	r26, r18
    365c:	80 85       	ldd	r24, Z+8	; 0x08
    365e:	88 23       	and	r24, r24
    3660:	61 f0       	breq	.+24     	; 0x367a <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
    3662:	88 9e       	mul	r8, r24
    3664:	40 01       	movw	r8, r0
    3666:	11 24       	eor	r1, r1
    3668:	79 2c       	mov	r7, r9
    366a:	8c 9d       	mul	r24, r12
    366c:	60 01       	movw	r12, r0
    366e:	11 24       	eor	r1, r1
    3670:	bd 2d       	mov	r27, r13
    3672:	82 9f       	mul	r24, r18
    3674:	70 01       	movw	r14, r0
    3676:	11 24       	eor	r1, r1
    3678:	af 2d       	mov	r26, r15
    367a:	96 85       	ldd	r25, Z+14	; 0x0e
    367c:	d3 85       	ldd	r29, Z+11	; 0x0b
    367e:	e1 84       	ldd	r14, Z+9	; 0x09
    3680:	f2 84       	ldd	r15, Z+10	; 0x0a
    3682:	9d 13       	cpse	r25, r29
    3684:	08 c0       	rjmp	.+16     	; 0x3696 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
    3686:	cb 01       	movw	r24, r22
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	68 0f       	add	r22, r24
    368e:	79 1f       	adc	r23, r25
    3690:	6e 0d       	add	r22, r14
    3692:	7f 1d       	adc	r23, r15
    3694:	1c c0       	rjmp	.+56     	; 0x36ce <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    3696:	66 0f       	add	r22, r22
    3698:	77 1f       	adc	r23, r23
    369a:	66 0f       	add	r22, r22
    369c:	77 1f       	adc	r23, r23
    369e:	6e 0d       	add	r22, r14
    36a0:	7f 1d       	adc	r23, r15
    36a2:	05 2f       	mov	r16, r21
    36a4:	11 27       	eor	r17, r17
    36a6:	22 27       	eor	r18, r18
    36a8:	33 27       	eor	r19, r19
    36aa:	7b 01       	movw	r14, r22
    36ac:	e9 0e       	add	r14, r25
    36ae:	f1 1c       	adc	r15, r1
    36b0:	81 11       	cpse	r24, r1
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
    36b4:	20 2f       	mov	r18, r16
    36b6:	09 c0       	rjmp	.+18     	; 0x36ca <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	80 9f       	mul	r24, r16
    36bc:	60 01       	movw	r12, r0
    36be:	81 9f       	mul	r24, r17
    36c0:	d0 0c       	add	r13, r0
    36c2:	90 9f       	mul	r25, r16
    36c4:	d0 0c       	add	r13, r0
    36c6:	11 24       	eor	r1, r1
    36c8:	2d 2d       	mov	r18, r13
    36ca:	e7 01       	movw	r28, r14
    36cc:	28 83       	st	Y, r18
    36ce:	83 85       	ldd	r24, Z+11	; 0x0b
    36d0:	9b 01       	movw	r18, r22
    36d2:	28 0f       	add	r18, r24
    36d4:	31 1d       	adc	r19, r1
    36d6:	e9 01       	movw	r28, r18
    36d8:	78 82       	st	Y, r7
    36da:	84 85       	ldd	r24, Z+12	; 0x0c
    36dc:	eb 01       	movw	r28, r22
    36de:	c8 0f       	add	r28, r24
    36e0:	d1 1d       	adc	r29, r1
    36e2:	b8 83       	st	Y, r27
    36e4:	85 85       	ldd	r24, Z+13	; 0x0d
    36e6:	fb 01       	movw	r30, r22
    36e8:	e8 0f       	add	r30, r24
    36ea:	f1 1d       	adc	r31, r1
    36ec:	a0 83       	st	Z, r26
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	df 90       	pop	r13
    36fc:	cf 90       	pop	r12
    36fe:	bf 90       	pop	r11
    3700:	af 90       	pop	r10
    3702:	9f 90       	pop	r9
    3704:	8f 90       	pop	r8
    3706:	7f 90       	pop	r7
    3708:	08 95       	ret

0000370a <_ZN17Adafruit_NeoPixel4fillEmjj>:
    370a:	8f 92       	push	r8
    370c:	9f 92       	push	r9
    370e:	af 92       	push	r10
    3710:	bf 92       	push	r11
    3712:	cf 92       	push	r12
    3714:	df 92       	push	r13
    3716:	ef 92       	push	r14
    3718:	ff 92       	push	r15
    371a:	0f 93       	push	r16
    371c:	1f 93       	push	r17
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	6c 01       	movw	r12, r24
    3724:	4a 01       	movw	r8, r20
    3726:	5b 01       	movw	r10, r22
    3728:	e9 01       	movw	r28, r18
    372a:	fc 01       	movw	r30, r24
    372c:	e2 80       	ldd	r14, Z+2	; 0x02
    372e:	f3 80       	ldd	r15, Z+3	; 0x03
    3730:	2e 15       	cp	r18, r14
    3732:	3f 05       	cpc	r19, r15
    3734:	a0 f4       	brcc	.+40     	; 0x375e <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    3736:	01 15       	cp	r16, r1
    3738:	11 05       	cpc	r17, r1
    373a:	31 f0       	breq	.+12     	; 0x3748 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    373c:	02 0f       	add	r16, r18
    373e:	13 1f       	adc	r17, r19
    3740:	0e 15       	cp	r16, r14
    3742:	1f 05       	cpc	r17, r15
    3744:	08 f4       	brcc	.+2      	; 0x3748 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    3746:	78 01       	movw	r14, r16
    3748:	ce 15       	cp	r28, r14
    374a:	df 05       	cpc	r29, r15
    374c:	40 f4       	brcc	.+16     	; 0x375e <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    374e:	a5 01       	movw	r20, r10
    3750:	94 01       	movw	r18, r8
    3752:	be 01       	movw	r22, r28
    3754:	c6 01       	movw	r24, r12
    3756:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
    375a:	21 96       	adiw	r28, 0x01	; 1
    375c:	f5 cf       	rjmp	.-22     	; 0x3748 <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	df 90       	pop	r13
    376c:	cf 90       	pop	r12
    376e:	bf 90       	pop	r11
    3770:	af 90       	pop	r10
    3772:	9f 90       	pop	r9
    3774:	8f 90       	pop	r8
    3776:	08 95       	ret

00003778 <_ZN17Adafruit_NeoPixel5clearEv>:

/*!
  @brief   Fill the whole NeoPixel strip with 0 / black / off.
*/
void Adafruit_NeoPixel::clear(void) { memset(pixels, 0, numBytes); }
    3778:	fc 01       	movw	r30, r24
    377a:	44 81       	ldd	r20, Z+4	; 0x04
    377c:	55 81       	ldd	r21, Z+5	; 0x05
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	81 85       	ldd	r24, Z+9	; 0x09
    3784:	92 85       	ldd	r25, Z+10	; 0x0a
    3786:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <memset>

0000378a <_ZN16Adafruit_SSD13069drawPixelEiij>:
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
}
    378a:	fc 01       	movw	r30, r24
    378c:	77 fd       	sbrc	r23, 7
    378e:	b9 c0       	rjmp	.+370    	; 0x3902 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    3790:	80 85       	ldd	r24, Z+8	; 0x08
    3792:	91 85       	ldd	r25, Z+9	; 0x09
    3794:	68 17       	cp	r22, r24
    3796:	79 07       	cpc	r23, r25
    3798:	0c f0       	brlt	.+2      	; 0x379c <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    379a:	b3 c0       	rjmp	.+358    	; 0x3902 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    379c:	57 fd       	sbrc	r21, 7
    379e:	b1 c0       	rjmp	.+354    	; 0x3902 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    37a0:	82 85       	ldd	r24, Z+10	; 0x0a
    37a2:	93 85       	ldd	r25, Z+11	; 0x0b
    37a4:	48 17       	cp	r20, r24
    37a6:	59 07       	cpc	r21, r25
    37a8:	0c f0       	brlt	.+2      	; 0x37ac <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    37aa:	08 95       	ret
    37ac:	86 89       	ldd	r24, Z+22	; 0x16
    37ae:	82 30       	cpi	r24, 0x02	; 2
    37b0:	79 f4       	brne	.+30     	; 0x37d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    37b2:	84 81       	ldd	r24, Z+4	; 0x04
    37b4:	95 81       	ldd	r25, Z+5	; 0x05
    37b6:	dc 01       	movw	r26, r24
    37b8:	a6 1b       	sub	r26, r22
    37ba:	b7 0b       	sbc	r27, r23
    37bc:	bd 01       	movw	r22, r26
    37be:	61 50       	subi	r22, 0x01	; 1
    37c0:	71 09       	sbc	r23, r1
    37c2:	86 81       	ldd	r24, Z+6	; 0x06
    37c4:	97 81       	ldd	r25, Z+7	; 0x07
    37c6:	dc 01       	movw	r26, r24
    37c8:	a4 1b       	sub	r26, r20
    37ca:	b5 0b       	sbc	r27, r21
    37cc:	ad 01       	movw	r20, r26
    37ce:	0e c0       	rjmp	.+28     	; 0x37ec <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    37d0:	83 30       	cpi	r24, 0x03	; 3
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    37d4:	84 c0       	rjmp	.+264    	; 0x38de <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    37d6:	64 27       	eor	r22, r20
    37d8:	75 27       	eor	r23, r21
    37da:	ca 01       	movw	r24, r20
    37dc:	86 27       	eor	r24, r22
    37de:	97 27       	eor	r25, r23
    37e0:	68 27       	eor	r22, r24
    37e2:	79 27       	eor	r23, r25
    37e4:	46 81       	ldd	r20, Z+6	; 0x06
    37e6:	57 81       	ldd	r21, Z+7	; 0x07
    37e8:	48 1b       	sub	r20, r24
    37ea:	59 0b       	sbc	r21, r25
    37ec:	41 50       	subi	r20, 0x01	; 1
    37ee:	51 09       	sbc	r21, r1
    37f0:	21 30       	cpi	r18, 0x01	; 1
    37f2:	31 05       	cpc	r19, r1
    37f4:	31 f0       	breq	.+12     	; 0x3802 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    37f6:	48 f1       	brcs	.+82     	; 0x384a <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    37f8:	22 30       	cpi	r18, 0x02	; 2
    37fa:	31 05       	cpc	r19, r1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    37fe:	4a c0       	rjmp	.+148    	; 0x3894 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    3800:	08 95       	ret
    3802:	ca 01       	movw	r24, r20
    3804:	57 fd       	sbrc	r21, 7
    3806:	07 96       	adiw	r24, 0x07	; 7
    3808:	9c 01       	movw	r18, r24
    380a:	a3 e0       	ldi	r26, 0x03	; 3
    380c:	35 95       	asr	r19
    380e:	27 95       	ror	r18
    3810:	aa 95       	dec	r26
    3812:	e1 f7       	brne	.-8      	; 0x380c <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    3814:	a4 81       	ldd	r26, Z+4	; 0x04
    3816:	b5 81       	ldd	r27, Z+5	; 0x05
    3818:	2a 9f       	mul	r18, r26
    381a:	c0 01       	movw	r24, r0
    381c:	2b 9f       	mul	r18, r27
    381e:	90 0d       	add	r25, r0
    3820:	3a 9f       	mul	r19, r26
    3822:	90 0d       	add	r25, r0
    3824:	11 24       	eor	r1, r1
    3826:	68 0f       	add	r22, r24
    3828:	79 1f       	adc	r23, r25
    382a:	07 8c       	ldd	r0, Z+31	; 0x1f
    382c:	f0 a1       	ldd	r31, Z+32	; 0x20
    382e:	e0 2d       	mov	r30, r0
    3830:	e6 0f       	add	r30, r22
    3832:	f7 1f       	adc	r31, r23
    3834:	47 70       	andi	r20, 0x07	; 7
    3836:	55 27       	eor	r21, r21
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	01 c0       	rjmp	.+2      	; 0x3840 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    383e:	88 0f       	add	r24, r24
    3840:	4a 95       	dec	r20
    3842:	ea f7       	brpl	.-6      	; 0x383e <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    3844:	90 81       	ld	r25, Z
    3846:	89 2b       	or	r24, r25
    3848:	48 c0       	rjmp	.+144    	; 0x38da <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    384a:	ca 01       	movw	r24, r20
    384c:	57 fd       	sbrc	r21, 7
    384e:	07 96       	adiw	r24, 0x07	; 7
    3850:	9c 01       	movw	r18, r24
    3852:	93 e0       	ldi	r25, 0x03	; 3
    3854:	35 95       	asr	r19
    3856:	27 95       	ror	r18
    3858:	9a 95       	dec	r25
    385a:	e1 f7       	brne	.-8      	; 0x3854 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    385c:	a4 81       	ldd	r26, Z+4	; 0x04
    385e:	b5 81       	ldd	r27, Z+5	; 0x05
    3860:	2a 9f       	mul	r18, r26
    3862:	c0 01       	movw	r24, r0
    3864:	2b 9f       	mul	r18, r27
    3866:	90 0d       	add	r25, r0
    3868:	3a 9f       	mul	r19, r26
    386a:	90 0d       	add	r25, r0
    386c:	11 24       	eor	r1, r1
    386e:	68 0f       	add	r22, r24
    3870:	79 1f       	adc	r23, r25
    3872:	07 8c       	ldd	r0, Z+31	; 0x1f
    3874:	f0 a1       	ldd	r31, Z+32	; 0x20
    3876:	e0 2d       	mov	r30, r0
    3878:	e6 0f       	add	r30, r22
    387a:	f7 1f       	adc	r31, r23
    387c:	47 70       	andi	r20, 0x07	; 7
    387e:	55 27       	eor	r21, r21
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    3886:	88 0f       	add	r24, r24
    3888:	4a 95       	dec	r20
    388a:	ea f7       	brpl	.-6      	; 0x3886 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    388c:	80 95       	com	r24
    388e:	90 81       	ld	r25, Z
    3890:	89 23       	and	r24, r25
    3892:	23 c0       	rjmp	.+70     	; 0x38da <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    3894:	ca 01       	movw	r24, r20
    3896:	57 fd       	sbrc	r21, 7
    3898:	07 96       	adiw	r24, 0x07	; 7
    389a:	9c 01       	movw	r18, r24
    389c:	83 e0       	ldi	r24, 0x03	; 3
    389e:	35 95       	asr	r19
    38a0:	27 95       	ror	r18
    38a2:	8a 95       	dec	r24
    38a4:	e1 f7       	brne	.-8      	; 0x389e <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    38a6:	a4 81       	ldd	r26, Z+4	; 0x04
    38a8:	b5 81       	ldd	r27, Z+5	; 0x05
    38aa:	2a 9f       	mul	r18, r26
    38ac:	c0 01       	movw	r24, r0
    38ae:	2b 9f       	mul	r18, r27
    38b0:	90 0d       	add	r25, r0
    38b2:	3a 9f       	mul	r19, r26
    38b4:	90 0d       	add	r25, r0
    38b6:	11 24       	eor	r1, r1
    38b8:	68 0f       	add	r22, r24
    38ba:	79 1f       	adc	r23, r25
    38bc:	07 8c       	ldd	r0, Z+31	; 0x1f
    38be:	f0 a1       	ldd	r31, Z+32	; 0x20
    38c0:	e0 2d       	mov	r30, r0
    38c2:	e6 0f       	add	r30, r22
    38c4:	f7 1f       	adc	r31, r23
    38c6:	47 70       	andi	r20, 0x07	; 7
    38c8:	55 27       	eor	r21, r21
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	01 c0       	rjmp	.+2      	; 0x38d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    38d0:	88 0f       	add	r24, r24
    38d2:	4a 95       	dec	r20
    38d4:	ea f7       	brpl	.-6      	; 0x38d0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    38d6:	90 81       	ld	r25, Z
    38d8:	89 27       	eor	r24, r25
    38da:	80 83       	st	Z, r24
    38dc:	08 95       	ret
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    38e2:	86 cf       	rjmp	.-244    	; 0x37f0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    38e4:	64 27       	eor	r22, r20
    38e6:	75 27       	eor	r23, r21
    38e8:	46 27       	eor	r20, r22
    38ea:	57 27       	eor	r21, r23
    38ec:	64 27       	eor	r22, r20
    38ee:	75 27       	eor	r23, r21
    38f0:	84 81       	ldd	r24, Z+4	; 0x04
    38f2:	95 81       	ldd	r25, Z+5	; 0x05
    38f4:	dc 01       	movw	r26, r24
    38f6:	a6 1b       	sub	r26, r22
    38f8:	b7 0b       	sbc	r27, r23
    38fa:	bd 01       	movw	r22, r26
    38fc:	61 50       	subi	r22, 0x01	; 1
    38fe:	71 09       	sbc	r23, r1
    3900:	77 cf       	rjmp	.-274    	; 0x37f0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    3902:	08 95       	ret

00003904 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    3904:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZN8SPIClass13interruptModeE>
    3908:	22 23       	and	r18, r18
    390a:	99 f0       	breq	.+38     	; 0x3932 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    390c:	4f b7       	in	r20, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZN8SPIClass13interruptModeE>
    3914:	21 30       	cpi	r18, 0x01	; 1
    3916:	59 f4       	brne	.+22     	; 0x392e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    3918:	2d b3       	in	r18, 0x1d	; 29
    391a:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <_ZN8SPIClass13interruptSaveE>
    391e:	3d b3       	in	r19, 0x1d	; 29
    3920:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <_ZN8SPIClass13interruptMaskE>
    3924:	20 95       	com	r18
    3926:	23 23       	and	r18, r19
    3928:	2d bb       	out	0x1d, r18	; 29
    392a:	4f bf       	out	0x3f, r20	; 63
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    392e:	40 93 e2 02 	sts	0x02E2, r20	; 0x8002e2 <_ZN8SPIClass13interruptSaveE>
    3932:	8c bd       	out	0x2c, r24	; 44
    3934:	9d bd       	out	0x2d, r25	; 45
    3936:	08 95       	ret

00003938 <_ZN8SPIClass8transferEh>:
    3938:	8e bd       	out	0x2e, r24	; 46
    393a:	00 00       	nop
    393c:	0d b4       	in	r0, 0x2d	; 45
    393e:	07 fe       	sbrs	r0, 7
    3940:	fd cf       	rjmp	.-6      	; 0x393c <_ZN8SPIClass8transferEh+0x4>
    3942:	8e b5       	in	r24, 0x2e	; 46
    3944:	08 95       	ret

00003946 <_ZN8SPIClass14endTransactionEv>:
    3946:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN8SPIClass13interruptModeE>
    394a:	88 23       	and	r24, r24
    394c:	61 f0       	breq	.+24     	; 0x3966 <_ZN8SPIClass14endTransactionEv+0x20>
    394e:	9f b7       	in	r25, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZN8SPIClass13interruptModeE>
    3956:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_ZN8SPIClass13interruptSaveE>
    395a:	21 30       	cpi	r18, 0x01	; 1
    395c:	19 f4       	brne	.+6      	; 0x3964 <_ZN8SPIClass14endTransactionEv+0x1e>
    395e:	8d bb       	out	0x1d, r24	; 29
    3960:	9f bf       	out	0x3f, r25	; 63
    3962:	08 95       	ret
    3964:	8f bf       	out	0x3f, r24	; 63
    3966:	08 95       	ret

00003968 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    3968:	4f 92       	push	r4
    396a:	5f 92       	push	r5
    396c:	6f 92       	push	r6
    396e:	7f 92       	push	r7
    3970:	8f 92       	push	r8
    3972:	9f 92       	push	r9
    3974:	af 92       	push	r10
    3976:	bf 92       	push	r11
    3978:	cf 92       	push	r12
    397a:	df 92       	push	r13
    397c:	ef 92       	push	r14
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	3c 01       	movw	r6, r24
    398c:	29 01       	movw	r4, r18
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	0e 94 90 14 	call	0x2920	; 0x2920 <_ZN12Adafruit_GFXC1Eii>
    3996:	8f e7       	ldi	r24, 0x7F	; 127
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	f3 01       	movw	r30, r6
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	80 83       	st	Z, r24
    39a0:	14 8e       	std	Z+28, r1	; 0x1c
    39a2:	13 8e       	std	Z+27, r1	; 0x1b
    39a4:	41 14       	cp	r4, r1
    39a6:	51 04       	cpc	r5, r1
    39a8:	11 f0       	breq	.+4      	; 0x39ae <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x46>
    39aa:	c2 01       	movw	r24, r4
    39ac:	02 c0       	rjmp	.+4      	; 0x39b2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x4a>
    39ae:	86 ee       	ldi	r24, 0xE6	; 230
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	f3 01       	movw	r30, r6
    39b4:	96 8f       	std	Z+30, r25	; 0x1e
    39b6:	85 8f       	std	Z+29, r24	; 0x1d
    39b8:	10 a2       	std	Z+32, r1	; 0x20
    39ba:	17 8e       	std	Z+31, r1	; 0x1f
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	84 a3       	std	Z+36, r24	; 0x24
    39c0:	85 a3       	std	Z+37, r24	; 0x25
    39c2:	86 a3       	std	Z+38, r24	; 0x26
    39c4:	87 a3       	std	Z+39, r24	; 0x27
    39c6:	00 a7       	std	Z+40, r16	; 0x28
    39c8:	c5 aa       	std	Z+53, r12	; 0x35
    39ca:	d6 aa       	std	Z+54, r13	; 0x36
    39cc:	e7 aa       	std	Z+55, r14	; 0x37
    39ce:	f0 ae       	std	Z+56, r15	; 0x38
    39d0:	81 ae       	std	Z+57, r8	; 0x39
    39d2:	92 ae       	std	Z+58, r9	; 0x3a
    39d4:	a3 ae       	std	Z+59, r10	; 0x3b
    39d6:	b4 ae       	std	Z+60, r11	; 0x3c
    39d8:	80 e5       	ldi	r24, 0x50	; 80
    39da:	86 af       	std	Z+62, r24	; 0x3e
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	87 af       	std	Z+63, r24	; 0x3f
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	0f 91       	pop	r16
    39e6:	ff 90       	pop	r15
    39e8:	ef 90       	pop	r14
    39ea:	df 90       	pop	r13
    39ec:	cf 90       	pop	r12
    39ee:	bf 90       	pop	r11
    39f0:	af 90       	pop	r10
    39f2:	9f 90       	pop	r9
    39f4:	8f 90       	pop	r8
    39f6:	7f 90       	pop	r7
    39f8:	6f 90       	pop	r6
    39fa:	5f 90       	pop	r5
    39fc:	4f 90       	pop	r4
    39fe:	08 95       	ret

00003a00 <_ZN16Adafruit_SSD1306D1Ev>:
    3a00:	2f e7       	ldi	r18, 0x7F	; 127
    3a02:	31 e0       	ldi	r19, 0x01	; 1
    3a04:	fc 01       	movw	r30, r24
    3a06:	31 83       	std	Z+1, r19	; 0x01
    3a08:	20 83       	st	Z, r18
    3a0a:	87 8d       	ldd	r24, Z+31	; 0x1f
    3a0c:	90 a1       	ldd	r25, Z+32	; 0x20
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	11 f0       	breq	.+4      	; 0x3a16 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    3a12:	0c 94 d9 29 	jmp	0x53b2	; 0x53b2 <free>
    3a16:	08 95       	ret

00003a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	fc 01       	movw	r30, r24
    3a20:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a22:	96 8d       	ldd	r25, Z+30	; 0x1e
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	19 f1       	breq	.+70     	; 0x3a6e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    3a28:	16 2f       	mov	r17, r22
    3a2a:	ef 01       	movw	r28, r30
    3a2c:	61 a1       	ldd	r22, Z+33	; 0x21
    3a2e:	06 2e       	mov	r0, r22
    3a30:	00 0c       	add	r0, r0
    3a32:	77 0b       	sbc	r23, r23
    3a34:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN7TwoWire17beginTransmissionEi>
    3a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	ed 91       	ld	r30, X+
    3a40:	fc 91       	ld	r31, X
    3a42:	01 90       	ld	r0, Z+
    3a44:	f0 81       	ld	r31, Z
    3a46:	e0 2d       	mov	r30, r0
    3a48:	60 e0       	ldi	r22, 0x00	; 0
    3a4a:	09 95       	icall
    3a4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a50:	dc 01       	movw	r26, r24
    3a52:	ed 91       	ld	r30, X+
    3a54:	fc 91       	ld	r31, X
    3a56:	01 90       	ld	r0, Z+
    3a58:	f0 81       	ld	r31, Z
    3a5a:	e0 2d       	mov	r30, r0
    3a5c:	61 2f       	mov	r22, r17
    3a5e:	09 95       	icall
    3a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	1f 91       	pop	r17
    3a6a:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <_ZN7TwoWire15endTransmissionEv>
    3a6e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3a70:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3a72:	9c 91       	ld	r25, X
    3a74:	83 a9       	ldd	r24, Z+51	; 0x33
    3a76:	80 95       	com	r24
    3a78:	89 23       	and	r24, r25
    3a7a:	8c 93       	st	X, r24
    3a7c:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a7e:	94 8d       	ldd	r25, Z+28	; 0x1c
    3a80:	89 2b       	or	r24, r25
    3a82:	31 f0       	breq	.+12     	; 0x3a90 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    3a84:	86 2f       	mov	r24, r22
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	1f 91       	pop	r17
    3a8c:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <_ZN8SPIClass8transferEh>
    3a90:	28 e0       	ldi	r18, 0x08	; 8
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	80 e8       	ldi	r24, 0x80	; 128
    3a96:	a1 a5       	ldd	r26, Z+41	; 0x29
    3a98:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3a9a:	91 a9       	ldd	r25, Z+49	; 0x31
    3a9c:	46 2f       	mov	r20, r22
    3a9e:	48 23       	and	r20, r24
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    3aa2:	4c 91       	ld	r20, X
    3aa4:	94 2b       	or	r25, r20
    3aa6:	03 c0       	rjmp	.+6      	; 0x3aae <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    3aa8:	4c 91       	ld	r20, X
    3aaa:	90 95       	com	r25
    3aac:	94 23       	and	r25, r20
    3aae:	9c 93       	st	X, r25
    3ab0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    3ab2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    3ab4:	4c 91       	ld	r20, X
    3ab6:	92 a9       	ldd	r25, Z+50	; 0x32
    3ab8:	94 2b       	or	r25, r20
    3aba:	9c 93       	st	X, r25
    3abc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    3abe:	b4 a5       	ldd	r27, Z+44	; 0x2c
    3ac0:	4c 91       	ld	r20, X
    3ac2:	92 a9       	ldd	r25, Z+50	; 0x32
    3ac4:	90 95       	com	r25
    3ac6:	94 23       	and	r25, r20
    3ac8:	9c 93       	st	X, r25
    3aca:	86 95       	lsr	r24
    3acc:	21 50       	subi	r18, 0x01	; 1
    3ace:	31 09       	sbc	r19, r1
    3ad0:	11 f7       	brne	.-60     	; 0x3a96 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	08 95       	ret

00003ada <_ZN16Adafruit_SSD130613invertDisplayEb>:
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	ec 01       	movw	r28, r24
    3ae2:	16 2f       	mov	r17, r22
    3ae4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	39 f0       	breq	.+14     	; 0x3afa <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    3aec:	4d a9       	ldd	r20, Y+53	; 0x35
    3aee:	5e a9       	ldd	r21, Y+54	; 0x36
    3af0:	6f a9       	ldd	r22, Y+55	; 0x37
    3af2:	78 ad       	ldd	r23, Y+56	; 0x38
    3af4:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    3af8:	0f c0       	rjmp	.+30     	; 0x3b18 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    3afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3afe:	89 2b       	or	r24, r25
    3b00:	21 f0       	breq	.+8      	; 0x3b0a <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    3b02:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b04:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b06:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3b0a:	ef a5       	ldd	r30, Y+47	; 0x2f
    3b0c:	f8 a9       	ldd	r31, Y+48	; 0x30
    3b0e:	90 81       	ld	r25, Z
    3b10:	8c a9       	ldd	r24, Y+52	; 0x34
    3b12:	80 95       	com	r24
    3b14:	89 23       	and	r24, r25
    3b16:	80 83       	st	Z, r24
    3b18:	11 11       	cpse	r17, r1
    3b1a:	02 c0       	rjmp	.+4      	; 0x3b20 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    3b1c:	66 ea       	ldi	r22, 0xA6	; 166
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    3b20:	67 ea       	ldi	r22, 0xA7	; 167
    3b22:	ce 01       	movw	r24, r28
    3b24:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	49 f0       	breq	.+18     	; 0x3b42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    3b30:	49 ad       	ldd	r20, Y+57	; 0x39
    3b32:	5a ad       	ldd	r21, Y+58	; 0x3a
    3b34:	6b ad       	ldd	r22, Y+59	; 0x3b
    3b36:	7c ad       	ldd	r23, Y+60	; 0x3c
    3b38:	df 91       	pop	r29
    3b3a:	cf 91       	pop	r28
    3b3c:	1f 91       	pop	r17
    3b3e:	0c 94 95 24 	jmp	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    3b42:	ef a5       	ldd	r30, Y+47	; 0x2f
    3b44:	f8 a9       	ldd	r31, Y+48	; 0x30
    3b46:	90 81       	ld	r25, Z
    3b48:	8c a9       	ldd	r24, Y+52	; 0x34
    3b4a:	89 2b       	or	r24, r25
    3b4c:	80 83       	st	Z, r24
    3b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b52:	89 2b       	or	r24, r25
    3b54:	29 f0       	breq	.+10     	; 0x3b60 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <_ZN8SPIClass14endTransactionEv>
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	08 95       	ret

00003b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    3b68:	bf 92       	push	r11
    3b6a:	cf 92       	push	r12
    3b6c:	df 92       	push	r13
    3b6e:	ef 92       	push	r14
    3b70:	ff 92       	push	r15
    3b72:	0f 93       	push	r16
    3b74:	1f 93       	push	r17
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
    3b7a:	ec 01       	movw	r28, r24
    3b7c:	b6 2e       	mov	r11, r22
    3b7e:	07 2f       	mov	r16, r23
    3b80:	14 2f       	mov	r17, r20
    3b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    3b8a:	52 c0       	rjmp	.+164    	; 0x3c30 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    3b8c:	69 a1       	ldd	r22, Y+33	; 0x21
    3b8e:	06 2e       	mov	r0, r22
    3b90:	00 0c       	add	r0, r0
    3b92:	77 0b       	sbc	r23, r23
    3b94:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN7TwoWire17beginTransmissionEi>
    3b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	ed 91       	ld	r30, X+
    3ba0:	fc 91       	ld	r31, X
    3ba2:	01 90       	ld	r0, Z+
    3ba4:	f0 81       	ld	r31, Z
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	60 e0       	ldi	r22, 0x00	; 0
    3baa:	09 95       	icall
    3bac:	cb 2c       	mov	r12, r11
    3bae:	d0 2e       	mov	r13, r16
    3bb0:	ee 24       	eor	r14, r14
    3bb2:	e3 94       	inc	r14
    3bb4:	f1 2c       	mov	r15, r1
    3bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bba:	11 23       	and	r17, r17
    3bbc:	71 f1       	breq	.+92     	; 0x3c1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    3bbe:	b0 e2       	ldi	r27, 0x20	; 32
    3bc0:	eb 16       	cp	r14, r27
    3bc2:	f1 04       	cpc	r15, r1
    3bc4:	b8 f0       	brcs	.+46     	; 0x3bf4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    3bc6:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN7TwoWire15endTransmissionEv>
    3bca:	69 a1       	ldd	r22, Y+33	; 0x21
    3bcc:	06 2e       	mov	r0, r22
    3bce:	00 0c       	add	r0, r0
    3bd0:	77 0b       	sbc	r23, r23
    3bd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bd6:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN7TwoWire17beginTransmissionEi>
    3bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bde:	dc 01       	movw	r26, r24
    3be0:	ed 91       	ld	r30, X+
    3be2:	fc 91       	ld	r31, X
    3be4:	01 90       	ld	r0, Z+
    3be6:	f0 81       	ld	r31, Z
    3be8:	e0 2d       	mov	r30, r0
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	09 95       	icall
    3bee:	ee 24       	eor	r14, r14
    3bf0:	e3 94       	inc	r14
    3bf2:	f1 2c       	mov	r15, r1
    3bf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bf6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bf8:	f6 01       	movw	r30, r12
    3bfa:	64 91       	lpm	r22, Z
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	ed 91       	ld	r30, X+
    3c00:	fc 91       	ld	r31, X
    3c02:	01 90       	ld	r0, Z+
    3c04:	f0 81       	ld	r31, Z
    3c06:	e0 2d       	mov	r30, r0
    3c08:	09 95       	icall
    3c0a:	bf ef       	ldi	r27, 0xFF	; 255
    3c0c:	eb 1a       	sub	r14, r27
    3c0e:	fb 0a       	sbc	r15, r27
    3c10:	11 50       	subi	r17, 0x01	; 1
    3c12:	f6 01       	movw	r30, r12
    3c14:	31 96       	adiw	r30, 0x01	; 1
    3c16:	6f 01       	movw	r12, r30
    3c18:	ce cf       	rjmp	.-100    	; 0x3bb6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	ff 90       	pop	r15
    3c24:	ef 90       	pop	r14
    3c26:	df 90       	pop	r13
    3c28:	cf 90       	pop	r12
    3c2a:	bf 90       	pop	r11
    3c2c:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <_ZN7TwoWire15endTransmissionEv>
    3c30:	ed a5       	ldd	r30, Y+45	; 0x2d
    3c32:	fe a5       	ldd	r31, Y+46	; 0x2e
    3c34:	90 81       	ld	r25, Z
    3c36:	8b a9       	ldd	r24, Y+51	; 0x33
    3c38:	80 95       	com	r24
    3c3a:	89 23       	and	r24, r25
    3c3c:	80 83       	st	Z, r24
    3c3e:	e6 2e       	mov	r14, r22
    3c40:	f7 2e       	mov	r15, r23
    3c42:	11 23       	and	r17, r17
    3c44:	79 f1       	breq	.+94     	; 0x3ca4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    3c46:	f7 01       	movw	r30, r14
    3c48:	84 91       	lpm	r24, Z
    3c4a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3c4c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3c4e:	23 2b       	or	r18, r19
    3c50:	39 f0       	breq	.+14     	; 0x3c60 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    3c52:	0e 94 9c 1c 	call	0x3938	; 0x3938 <_ZN8SPIClass8transferEh>
    3c56:	11 50       	subi	r17, 0x01	; 1
    3c58:	c7 01       	movw	r24, r14
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	f1 cf       	rjmp	.-30     	; 0x3c42 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    3c60:	28 e0       	ldi	r18, 0x08	; 8
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	e9 a5       	ldd	r30, Y+41	; 0x29
    3c68:	fa a5       	ldd	r31, Y+42	; 0x2a
    3c6a:	99 a9       	ldd	r25, Y+49	; 0x31
    3c6c:	58 2f       	mov	r21, r24
    3c6e:	54 23       	and	r21, r20
    3c70:	19 f0       	breq	.+6      	; 0x3c78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    3c72:	50 81       	ld	r21, Z
    3c74:	95 2b       	or	r25, r21
    3c76:	03 c0       	rjmp	.+6      	; 0x3c7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    3c78:	50 81       	ld	r21, Z
    3c7a:	90 95       	com	r25
    3c7c:	95 23       	and	r25, r21
    3c7e:	90 83       	st	Z, r25
    3c80:	eb a5       	ldd	r30, Y+43	; 0x2b
    3c82:	fc a5       	ldd	r31, Y+44	; 0x2c
    3c84:	50 81       	ld	r21, Z
    3c86:	9a a9       	ldd	r25, Y+50	; 0x32
    3c88:	95 2b       	or	r25, r21
    3c8a:	90 83       	st	Z, r25
    3c8c:	eb a5       	ldd	r30, Y+43	; 0x2b
    3c8e:	fc a5       	ldd	r31, Y+44	; 0x2c
    3c90:	50 81       	ld	r21, Z
    3c92:	9a a9       	ldd	r25, Y+50	; 0x32
    3c94:	90 95       	com	r25
    3c96:	95 23       	and	r25, r21
    3c98:	90 83       	st	Z, r25
    3c9a:	46 95       	lsr	r20
    3c9c:	21 50       	subi	r18, 0x01	; 1
    3c9e:	31 09       	sbc	r19, r1
    3ca0:	11 f7       	brne	.-60     	; 0x3c66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    3ca2:	d9 cf       	rjmp	.-78     	; 0x3c56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	0f 91       	pop	r16
    3cac:	ff 90       	pop	r15
    3cae:	ef 90       	pop	r14
    3cb0:	df 90       	pop	r13
    3cb2:	cf 90       	pop	r12
    3cb4:	bf 90       	pop	r11
    3cb6:	08 95       	ret

00003cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    3cb8:	fc 01       	movw	r30, r24
    3cba:	86 81       	ldd	r24, Z+6	; 0x06
    3cbc:	97 81       	ldd	r25, Z+7	; 0x07
    3cbe:	9c 01       	movw	r18, r24
    3cc0:	29 5f       	subi	r18, 0xF9	; 249
    3cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc4:	37 ff       	sbrs	r19, 7
    3cc6:	02 c0       	rjmp	.+4      	; 0x3ccc <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    3cc8:	29 5f       	subi	r18, 0xF9	; 249
    3cca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ccc:	83 e0       	ldi	r24, 0x03	; 3
    3cce:	35 95       	asr	r19
    3cd0:	27 95       	ror	r18
    3cd2:	8a 95       	dec	r24
    3cd4:	e1 f7       	brne	.-8      	; 0x3cce <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    3cd6:	84 81       	ldd	r24, Z+4	; 0x04
    3cd8:	95 81       	ldd	r25, Z+5	; 0x05
    3cda:	28 9f       	mul	r18, r24
    3cdc:	a0 01       	movw	r20, r0
    3cde:	29 9f       	mul	r18, r25
    3ce0:	50 0d       	add	r21, r0
    3ce2:	38 9f       	mul	r19, r24
    3ce4:	50 0d       	add	r21, r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	60 e0       	ldi	r22, 0x00	; 0
    3cea:	70 e0       	ldi	r23, 0x00	; 0
    3cec:	87 8d       	ldd	r24, Z+31	; 0x1f
    3cee:	90 a1       	ldd	r25, Z+32	; 0x20
    3cf0:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <memset>

00003cf4 <_ZN16Adafruit_SSD13065beginEhhbb>:
    3cf4:	8f 92       	push	r8
    3cf6:	9f 92       	push	r9
    3cf8:	af 92       	push	r10
    3cfa:	bf 92       	push	r11
    3cfc:	cf 92       	push	r12
    3cfe:	df 92       	push	r13
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	ec 01       	movw	r28, r24
    3d0e:	86 2e       	mov	r8, r22
    3d10:	b4 2e       	mov	r11, r20
    3d12:	a2 2e       	mov	r10, r18
    3d14:	90 2e       	mov	r9, r16
    3d16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d18:	98 a1       	ldd	r25, Y+32	; 0x20
    3d1a:	89 2b       	or	r24, r25
    3d1c:	e9 f4       	brne	.+58     	; 0x3d58 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    3d1e:	2e 81       	ldd	r18, Y+6	; 0x06
    3d20:	3f 81       	ldd	r19, Y+7	; 0x07
    3d22:	c9 01       	movw	r24, r18
    3d24:	07 96       	adiw	r24, 0x07	; 7
    3d26:	97 fd       	sbrc	r25, 7
    3d28:	07 96       	adiw	r24, 0x07	; 7
    3d2a:	23 e0       	ldi	r18, 0x03	; 3
    3d2c:	95 95       	asr	r25
    3d2e:	87 95       	ror	r24
    3d30:	2a 95       	dec	r18
    3d32:	e1 f7       	brne	.-8      	; 0x3d2c <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    3d34:	2c 81       	ldd	r18, Y+4	; 0x04
    3d36:	3d 81       	ldd	r19, Y+5	; 0x05
    3d38:	ac 01       	movw	r20, r24
    3d3a:	42 9f       	mul	r20, r18
    3d3c:	c0 01       	movw	r24, r0
    3d3e:	43 9f       	mul	r20, r19
    3d40:	90 0d       	add	r25, r0
    3d42:	52 9f       	mul	r21, r18
    3d44:	90 0d       	add	r25, r0
    3d46:	11 24       	eor	r1, r1
    3d48:	0e 94 41 29 	call	0x5282	; 0x5282 <malloc>
    3d4c:	98 a3       	std	Y+32, r25	; 0x20
    3d4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3d50:	89 2b       	or	r24, r25
    3d52:	11 f4       	brne	.+4      	; 0x3d58 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	92 c1       	rjmp	.+804    	; 0x407c <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    3d58:	ce 01       	movw	r24, r28
    3d5a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    3d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d60:	9f 81       	ldd	r25, Y+7	; 0x07
    3d62:	6c 81       	ldd	r22, Y+4	; 0x04
    3d64:	7d 81       	ldd	r23, Y+5	; 0x05
    3d66:	81 32       	cpi	r24, 0x21	; 33
    3d68:	91 05       	cpc	r25, r1
    3d6a:	e4 f0       	brlt	.+56     	; 0x3da4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    3d6c:	ac 01       	movw	r20, r24
    3d6e:	40 54       	subi	r20, 0x40	; 64
    3d70:	51 09       	sbc	r21, r1
    3d72:	57 ff       	sbrs	r21, 7
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    3d76:	4f 5f       	subi	r20, 0xFF	; 255
    3d78:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7a:	55 95       	asr	r21
    3d7c:	47 95       	ror	r20
    3d7e:	62 55       	subi	r22, 0x52	; 82
    3d80:	71 09       	sbc	r23, r1
    3d82:	77 ff       	sbrs	r23, 7
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    3d86:	6f 5f       	subi	r22, 0xFF	; 255
    3d88:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8a:	75 95       	asr	r23
    3d8c:	67 95       	ror	r22
    3d8e:	cc 24       	eor	r12, r12
    3d90:	c3 94       	inc	r12
    3d92:	d1 2c       	mov	r13, r1
    3d94:	80 e4       	ldi	r24, 0x40	; 64
    3d96:	e8 2e       	mov	r14, r24
    3d98:	f1 2c       	mov	r15, r1
    3d9a:	02 e5       	ldi	r16, 0x52	; 82
    3d9c:	10 e0       	ldi	r17, 0x00	; 0
    3d9e:	22 e3       	ldi	r18, 0x32	; 50
    3da0:	38 e0       	ldi	r19, 0x08	; 8
    3da2:	1b c0       	rjmp	.+54     	; 0x3dda <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    3da4:	ac 01       	movw	r20, r24
    3da6:	40 52       	subi	r20, 0x20	; 32
    3da8:	51 09       	sbc	r21, r1
    3daa:	57 ff       	sbrs	r21, 7
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    3dae:	4f 5f       	subi	r20, 0xFF	; 255
    3db0:	5f 4f       	sbci	r21, 0xFF	; 255
    3db2:	55 95       	asr	r21
    3db4:	47 95       	ror	r20
    3db6:	63 57       	subi	r22, 0x73	; 115
    3db8:	71 09       	sbc	r23, r1
    3dba:	77 ff       	sbrs	r23, 7
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    3dbe:	6f 5f       	subi	r22, 0xFF	; 255
    3dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc2:	75 95       	asr	r23
    3dc4:	67 95       	ror	r22
    3dc6:	cc 24       	eor	r12, r12
    3dc8:	c3 94       	inc	r12
    3dca:	d1 2c       	mov	r13, r1
    3dcc:	a0 e2       	ldi	r26, 0x20	; 32
    3dce:	ea 2e       	mov	r14, r26
    3dd0:	f1 2c       	mov	r15, r1
    3dd2:	03 e7       	ldi	r16, 0x73	; 115
    3dd4:	10 e0       	ldi	r17, 0x00	; 0
    3dd6:	22 e5       	ldi	r18, 0x52	; 82
    3dd8:	36 e0       	ldi	r19, 0x06	; 6
    3dda:	ce 01       	movw	r24, r28
    3ddc:	0e 94 b2 14 	call	0x2964	; 0x2964 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    3de0:	8a a2       	std	Y+34, r8	; 0x22
    3de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3de4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	99 f0       	breq	.+38     	; 0x3e10 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    3dea:	b1 10       	cpse	r11, r1
    3dec:	07 c0       	rjmp	.+14     	; 0x3dfc <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    3dee:	2e 81       	ldd	r18, Y+6	; 0x06
    3df0:	3f 81       	ldd	r19, Y+7	; 0x07
    3df2:	20 32       	cpi	r18, 0x20	; 32
    3df4:	31 05       	cpc	r19, r1
    3df6:	21 f4       	brne	.+8      	; 0x3e00 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    3df8:	2c e3       	ldi	r18, 0x3C	; 60
    3dfa:	03 c0       	rjmp	.+6      	; 0x3e02 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    3dfc:	2b 2d       	mov	r18, r11
    3dfe:	01 c0       	rjmp	.+2      	; 0x3e02 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    3e00:	2d e3       	ldi	r18, 0x3D	; 61
    3e02:	29 a3       	std	Y+33, r18	; 0x21
    3e04:	99 20       	and	r9, r9
    3e06:	09 f4       	brne	.+2      	; 0x3e0a <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    3e08:	36 c1       	rjmp	.+620    	; 0x4076 <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    3e0a:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN7TwoWire5beginEv>
    3e0e:	79 c0       	rjmp	.+242    	; 0x3f02 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    3e10:	61 e0       	ldi	r22, 0x01	; 1
    3e12:	8e a1       	ldd	r24, Y+38	; 0x26
    3e14:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3e18:	61 e0       	ldi	r22, 0x01	; 1
    3e1a:	8f a1       	ldd	r24, Y+39	; 0x27
    3e1c:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3e20:	8e a1       	ldd	r24, Y+38	; 0x26
    3e22:	08 2e       	mov	r0, r24
    3e24:	00 0c       	add	r0, r0
    3e26:	99 0b       	sbc	r25, r25
    3e28:	fc 01       	movw	r30, r24
    3e2a:	ec 50       	subi	r30, 0x0C	; 12
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	e4 91       	lpm	r30, Z
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	ee 0f       	add	r30, r30
    3e34:	ff 1f       	adc	r31, r31
    3e36:	ee 5e       	subi	r30, 0xEE	; 238
    3e38:	fe 4f       	sbci	r31, 0xFE	; 254
    3e3a:	25 91       	lpm	r18, Z+
    3e3c:	34 91       	lpm	r19, Z
    3e3e:	3e a7       	std	Y+46, r19	; 0x2e
    3e40:	2d a7       	std	Y+45, r18	; 0x2d
    3e42:	fc 01       	movw	r30, r24
    3e44:	e0 52       	subi	r30, 0x20	; 32
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	e4 91       	lpm	r30, Z
    3e4a:	eb ab       	std	Y+51, r30	; 0x33
    3e4c:	8f a1       	ldd	r24, Y+39	; 0x27
    3e4e:	08 2e       	mov	r0, r24
    3e50:	00 0c       	add	r0, r0
    3e52:	99 0b       	sbc	r25, r25
    3e54:	fc 01       	movw	r30, r24
    3e56:	ec 50       	subi	r30, 0x0C	; 12
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	e4 91       	lpm	r30, Z
    3e5c:	f0 e0       	ldi	r31, 0x00	; 0
    3e5e:	ee 0f       	add	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	ee 5e       	subi	r30, 0xEE	; 238
    3e64:	fe 4f       	sbci	r31, 0xFE	; 254
    3e66:	a5 91       	lpm	r26, Z+
    3e68:	b4 91       	lpm	r27, Z
    3e6a:	b8 ab       	std	Y+48, r27	; 0x30
    3e6c:	af a7       	std	Y+47, r26	; 0x2f
    3e6e:	fc 01       	movw	r30, r24
    3e70:	e0 52       	subi	r30, 0x20	; 32
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	e4 91       	lpm	r30, Z
    3e76:	ec ab       	std	Y+52, r30	; 0x34
    3e78:	8c 91       	ld	r24, X
    3e7a:	e8 2b       	or	r30, r24
    3e7c:	ec 93       	st	X, r30
    3e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e82:	89 2b       	or	r24, r25
    3e84:	31 f0       	breq	.+12     	; 0x3e92 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    3e86:	99 20       	and	r9, r9
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    3e8a:	3b c0       	rjmp	.+118    	; 0x3f02 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    3e8c:	0e 94 7f 23 	call	0x46fe	; 0x46fe <_ZN8SPIClass5beginEv>
    3e90:	38 c0       	rjmp	.+112    	; 0x3f02 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    3e92:	61 e0       	ldi	r22, 0x01	; 1
    3e94:	8c a1       	ldd	r24, Y+36	; 0x24
    3e96:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3e9a:	61 e0       	ldi	r22, 0x01	; 1
    3e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e9e:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3ea2:	8c a1       	ldd	r24, Y+36	; 0x24
    3ea4:	08 2e       	mov	r0, r24
    3ea6:	00 0c       	add	r0, r0
    3ea8:	99 0b       	sbc	r25, r25
    3eaa:	fc 01       	movw	r30, r24
    3eac:	ec 50       	subi	r30, 0x0C	; 12
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	e4 91       	lpm	r30, Z
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	ee 0f       	add	r30, r30
    3eb6:	ff 1f       	adc	r31, r31
    3eb8:	ee 5e       	subi	r30, 0xEE	; 238
    3eba:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebc:	25 91       	lpm	r18, Z+
    3ebe:	34 91       	lpm	r19, Z
    3ec0:	3a a7       	std	Y+42, r19	; 0x2a
    3ec2:	29 a7       	std	Y+41, r18	; 0x29
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e0 52       	subi	r30, 0x20	; 32
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	e4 91       	lpm	r30, Z
    3ecc:	e9 ab       	std	Y+49, r30	; 0x31
    3ece:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed0:	08 2e       	mov	r0, r24
    3ed2:	00 0c       	add	r0, r0
    3ed4:	99 0b       	sbc	r25, r25
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	ec 50       	subi	r30, 0x0C	; 12
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	e4 91       	lpm	r30, Z
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	ee 0f       	add	r30, r30
    3ee2:	ff 1f       	adc	r31, r31
    3ee4:	ee 5e       	subi	r30, 0xEE	; 238
    3ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee8:	a5 91       	lpm	r26, Z+
    3eea:	b4 91       	lpm	r27, Z
    3eec:	bc a7       	std	Y+44, r27	; 0x2c
    3eee:	ab a7       	std	Y+43, r26	; 0x2b
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	e0 52       	subi	r30, 0x20	; 32
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	e4 91       	lpm	r30, Z
    3ef8:	ea ab       	std	Y+50, r30	; 0x32
    3efa:	8c 91       	ld	r24, X
    3efc:	e0 95       	com	r30
    3efe:	e8 23       	and	r30, r24
    3f00:	ec 93       	st	X, r30
    3f02:	aa 20       	and	r10, r10
    3f04:	f1 f0       	breq	.+60     	; 0x3f42 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    3f06:	88 a5       	ldd	r24, Y+40	; 0x28
    3f08:	87 fd       	sbrc	r24, 7
    3f0a:	1b c0       	rjmp	.+54     	; 0x3f42 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    3f0c:	61 e0       	ldi	r22, 0x01	; 1
    3f0e:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    3f12:	61 e0       	ldi	r22, 0x01	; 1
    3f14:	88 a5       	ldd	r24, Y+40	; 0x28
    3f16:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    3f1a:	61 e0       	ldi	r22, 0x01	; 1
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 88 10 	call	0x2110	; 0x2110 <delay>
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	88 a5       	ldd	r24, Y+40	; 0x28
    3f2a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    3f2e:	6a e0       	ldi	r22, 0x0A	; 10
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 88 10 	call	0x2110	; 0x2110 <delay>
    3f3a:	61 e0       	ldi	r22, 0x01	; 1
    3f3c:	88 a5       	ldd	r24, Y+40	; 0x28
    3f3e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    3f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	39 f0       	breq	.+14     	; 0x3f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    3f4a:	4d a9       	ldd	r20, Y+53	; 0x35
    3f4c:	5e a9       	ldd	r21, Y+54	; 0x36
    3f4e:	6f a9       	ldd	r22, Y+55	; 0x37
    3f50:	78 ad       	ldd	r23, Y+56	; 0x38
    3f52:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    3f56:	0f c0       	rjmp	.+30     	; 0x3f76 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    3f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f5c:	89 2b       	or	r24, r25
    3f5e:	21 f0       	breq	.+8      	; 0x3f68 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    3f60:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f64:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3f68:	ef a5       	ldd	r30, Y+47	; 0x2f
    3f6a:	f8 a9       	ldd	r31, Y+48	; 0x30
    3f6c:	90 81       	ld	r25, Z
    3f6e:	8c a9       	ldd	r24, Y+52	; 0x34
    3f70:	80 95       	com	r24
    3f72:	89 23       	and	r24, r25
    3f74:	80 83       	st	Z, r24
    3f76:	44 e0       	ldi	r20, 0x04	; 4
    3f78:	6e e4       	ldi	r22, 0x4E	; 78
    3f7a:	76 e0       	ldi	r23, 0x06	; 6
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3f82:	6e 81       	ldd	r22, Y+6	; 0x06
    3f84:	61 50       	subi	r22, 0x01	; 1
    3f86:	ce 01       	movw	r24, r28
    3f88:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3f8c:	44 e0       	ldi	r20, 0x04	; 4
    3f8e:	6a e4       	ldi	r22, 0x4A	; 74
    3f90:	76 e0       	ldi	r23, 0x06	; 6
    3f92:	ce 01       	movw	r24, r28
    3f94:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3f98:	8a a1       	ldd	r24, Y+34	; 0x22
    3f9a:	81 30       	cpi	r24, 0x01	; 1
    3f9c:	11 f4       	brne	.+4      	; 0x3fa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    3f9e:	60 e1       	ldi	r22, 0x10	; 16
    3fa0:	01 c0       	rjmp	.+2      	; 0x3fa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    3fa2:	64 e1       	ldi	r22, 0x14	; 20
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3faa:	44 e0       	ldi	r20, 0x04	; 4
    3fac:	66 e4       	ldi	r22, 0x46	; 70
    3fae:	76 e0       	ldi	r23, 0x06	; 6
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3fb6:	8f e8       	ldi	r24, 0x8F	; 143
    3fb8:	8d af       	std	Y+61, r24	; 0x3d
    3fba:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    3fbe:	80 38       	cpi	r24, 0x80	; 128
    3fc0:	91 05       	cpc	r25, r1
    3fc2:	71 f4       	brne	.+28     	; 0x3fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    3fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3fc8:	80 34       	cpi	r24, 0x40	; 64
    3fca:	91 05       	cpc	r25, r1
    3fcc:	b9 f4       	brne	.+46     	; 0x3ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3fce:	8a a1       	ldd	r24, Y+34	; 0x22
    3fd0:	81 30       	cpi	r24, 0x01	; 1
    3fd2:	11 f4       	brne	.+4      	; 0x3fd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    3fd4:	8f e9       	ldi	r24, 0x9F	; 159
    3fd6:	01 c0       	rjmp	.+2      	; 0x3fda <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    3fd8:	8f ec       	ldi	r24, 0xCF	; 207
    3fda:	8d af       	std	Y+61, r24	; 0x3d
    3fdc:	12 e1       	ldi	r17, 0x12	; 18
    3fde:	0f c0       	rjmp	.+30     	; 0x3ffe <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    3fe0:	80 36       	cpi	r24, 0x60	; 96
    3fe2:	91 05       	cpc	r25, r1
    3fe4:	59 f4       	brne	.+22     	; 0x3ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fea:	40 97       	sbiw	r24, 0x10	; 16
    3fec:	39 f4       	brne	.+14     	; 0x3ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3fee:	8a a1       	ldd	r24, Y+34	; 0x22
    3ff0:	81 30       	cpi	r24, 0x01	; 1
    3ff2:	11 f4       	brne	.+4      	; 0x3ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    3ff4:	80 e1       	ldi	r24, 0x10	; 16
    3ff6:	01 c0       	rjmp	.+2      	; 0x3ffa <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    3ff8:	8f ea       	ldi	r24, 0xAF	; 175
    3ffa:	8d af       	std	Y+61, r24	; 0x3d
    3ffc:	12 e0       	ldi	r17, 0x02	; 2
    3ffe:	6a ed       	ldi	r22, 0xDA	; 218
    4000:	ce 01       	movw	r24, r28
    4002:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4006:	61 2f       	mov	r22, r17
    4008:	ce 01       	movw	r24, r28
    400a:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    400e:	61 e8       	ldi	r22, 0x81	; 129
    4010:	ce 01       	movw	r24, r28
    4012:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4016:	6d ad       	ldd	r22, Y+61	; 0x3d
    4018:	ce 01       	movw	r24, r28
    401a:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    401e:	69 ed       	ldi	r22, 0xD9	; 217
    4020:	ce 01       	movw	r24, r28
    4022:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4026:	8a a1       	ldd	r24, Y+34	; 0x22
    4028:	81 30       	cpi	r24, 0x01	; 1
    402a:	11 f4       	brne	.+4      	; 0x4030 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    402c:	62 e2       	ldi	r22, 0x22	; 34
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    4030:	61 ef       	ldi	r22, 0xF1	; 241
    4032:	ce 01       	movw	r24, r28
    4034:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4038:	46 e0       	ldi	r20, 0x06	; 6
    403a:	60 e4       	ldi	r22, 0x40	; 64
    403c:	76 e0       	ldi	r23, 0x06	; 6
    403e:	ce 01       	movw	r24, r28
    4040:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4046:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4048:	00 97       	sbiw	r24, 0x00	; 0
    404a:	39 f0       	breq	.+14     	; 0x405a <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    404c:	49 ad       	ldd	r20, Y+57	; 0x39
    404e:	5a ad       	ldd	r21, Y+58	; 0x3a
    4050:	6b ad       	ldd	r22, Y+59	; 0x3b
    4052:	7c ad       	ldd	r23, Y+60	; 0x3c
    4054:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    4058:	0c c0       	rjmp	.+24     	; 0x4072 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    405a:	ef a5       	ldd	r30, Y+47	; 0x2f
    405c:	f8 a9       	ldd	r31, Y+48	; 0x30
    405e:	90 81       	ld	r25, Z
    4060:	8c a9       	ldd	r24, Y+52	; 0x34
    4062:	89 2b       	or	r24, r25
    4064:	80 83       	st	Z, r24
    4066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    406a:	89 2b       	or	r24, r25
    406c:	11 f0       	breq	.+4      	; 0x4072 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    406e:	0e 94 a3 1c 	call	0x3946	; 0x3946 <_ZN8SPIClass14endTransactionEv>
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	03 c0       	rjmp	.+6      	; 0x407c <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    4076:	a1 10       	cpse	r10, r1
    4078:	46 cf       	rjmp	.-372    	; 0x3f06 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    407a:	67 cf       	rjmp	.-306    	; 0x3f4a <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	df 90       	pop	r13
    408a:	cf 90       	pop	r12
    408c:	bf 90       	pop	r11
    408e:	af 90       	pop	r10
    4090:	9f 90       	pop	r9
    4092:	8f 90       	pop	r8
    4094:	08 95       	ret

00004096 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    4096:	0f 93       	push	r16
    4098:	1f 93       	push	r17
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	dc 01       	movw	r26, r24
    40a0:	57 fd       	sbrc	r21, 7
    40a2:	64 c0       	rjmp	.+200    	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    40a4:	16 96       	adiw	r26, 0x06	; 6
    40a6:	8d 91       	ld	r24, X+
    40a8:	9c 91       	ld	r25, X
    40aa:	17 97       	sbiw	r26, 0x07	; 7
    40ac:	48 17       	cp	r20, r24
    40ae:	59 07       	cpc	r21, r25
    40b0:	0c f0       	brlt	.+2      	; 0x40b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    40b2:	5c c0       	rjmp	.+184    	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    40b4:	77 ff       	sbrs	r23, 7
    40b6:	04 c0       	rjmp	.+8      	; 0x40c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    40b8:	26 0f       	add	r18, r22
    40ba:	37 1f       	adc	r19, r23
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	14 96       	adiw	r26, 0x04	; 4
    40c2:	cd 91       	ld	r28, X+
    40c4:	dc 91       	ld	r29, X
    40c6:	15 97       	sbiw	r26, 0x05	; 5
    40c8:	cb 01       	movw	r24, r22
    40ca:	82 0f       	add	r24, r18
    40cc:	93 1f       	adc	r25, r19
    40ce:	c8 17       	cp	r28, r24
    40d0:	d9 07       	cpc	r29, r25
    40d2:	1c f4       	brge	.+6      	; 0x40da <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    40d4:	9e 01       	movw	r18, r28
    40d6:	26 1b       	sub	r18, r22
    40d8:	37 0b       	sbc	r19, r23
    40da:	12 16       	cp	r1, r18
    40dc:	13 06       	cpc	r1, r19
    40de:	0c f0       	brlt	.+2      	; 0x40e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    40e0:	45 c0       	rjmp	.+138    	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    40e2:	fa 01       	movw	r30, r20
    40e4:	57 fd       	sbrc	r21, 7
    40e6:	37 96       	adiw	r30, 0x07	; 7
    40e8:	cf 01       	movw	r24, r30
    40ea:	e3 e0       	ldi	r30, 0x03	; 3
    40ec:	95 95       	asr	r25
    40ee:	87 95       	ror	r24
    40f0:	ea 95       	dec	r30
    40f2:	e1 f7       	brne	.-8      	; 0x40ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    40f4:	8c 9f       	mul	r24, r28
    40f6:	f0 01       	movw	r30, r0
    40f8:	8d 9f       	mul	r24, r29
    40fa:	f0 0d       	add	r31, r0
    40fc:	9c 9f       	mul	r25, r28
    40fe:	f0 0d       	add	r31, r0
    4100:	11 24       	eor	r1, r1
    4102:	6e 0f       	add	r22, r30
    4104:	7f 1f       	adc	r23, r31
    4106:	5f 96       	adiw	r26, 0x1f	; 31
    4108:	ed 91       	ld	r30, X+
    410a:	fc 91       	ld	r31, X
    410c:	90 97       	sbiw	r26, 0x20	; 32
    410e:	e6 0f       	add	r30, r22
    4110:	f7 1f       	adc	r31, r23
    4112:	47 70       	andi	r20, 0x07	; 7
    4114:	55 27       	eor	r21, r21
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	01 c0       	rjmp	.+2      	; 0x411e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    411c:	88 0f       	add	r24, r24
    411e:	4a 95       	dec	r20
    4120:	ea f7       	brpl	.-6      	; 0x411c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    4122:	48 2f       	mov	r20, r24
    4124:	01 30       	cpi	r16, 0x01	; 1
    4126:	11 05       	cpc	r17, r1
    4128:	39 f0       	breq	.+14     	; 0x4138 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    412a:	78 f0       	brcs	.+30     	; 0x414a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    412c:	02 30       	cpi	r16, 0x02	; 2
    412e:	11 05       	cpc	r17, r1
    4130:	e9 f4       	brne	.+58     	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4132:	2e 0f       	add	r18, r30
    4134:	3f 1f       	adc	r19, r31
    4136:	13 c0       	rjmp	.+38     	; 0x415e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    4138:	2e 0f       	add	r18, r30
    413a:	3f 1f       	adc	r19, r31
    413c:	e2 17       	cp	r30, r18
    413e:	f3 07       	cpc	r31, r19
    4140:	a9 f0       	breq	.+42     	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4142:	80 81       	ld	r24, Z
    4144:	84 2b       	or	r24, r20
    4146:	81 93       	st	Z+, r24
    4148:	f9 cf       	rjmp	.-14     	; 0x413c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    414a:	80 95       	com	r24
    414c:	2e 0f       	add	r18, r30
    414e:	3f 1f       	adc	r19, r31
    4150:	e2 17       	cp	r30, r18
    4152:	f3 07       	cpc	r31, r19
    4154:	59 f0       	breq	.+22     	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4156:	90 81       	ld	r25, Z
    4158:	98 23       	and	r25, r24
    415a:	91 93       	st	Z+, r25
    415c:	f9 cf       	rjmp	.-14     	; 0x4150 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    415e:	e2 17       	cp	r30, r18
    4160:	f3 07       	cpc	r31, r19
    4162:	21 f0       	breq	.+8      	; 0x416c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    4164:	80 81       	ld	r24, Z
    4166:	84 27       	eor	r24, r20
    4168:	81 93       	st	Z+, r24
    416a:	f9 cf       	rjmp	.-14     	; 0x415e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    416c:	df 91       	pop	r29
    416e:	cf 91       	pop	r28
    4170:	1f 91       	pop	r17
    4172:	0f 91       	pop	r16
    4174:	08 95       	ret

00004176 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	ec 01       	movw	r28, r24
    4184:	77 fd       	sbrc	r23, 7
    4186:	a5 c0       	rjmp	.+330    	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4188:	ec 80       	ldd	r14, Y+4	; 0x04
    418a:	fd 80       	ldd	r15, Y+5	; 0x05
    418c:	6e 15       	cp	r22, r14
    418e:	7f 05       	cpc	r23, r15
    4190:	0c f0       	brlt	.+2      	; 0x4194 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    4192:	9f c0       	rjmp	.+318    	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4194:	57 ff       	sbrs	r21, 7
    4196:	04 c0       	rjmp	.+8      	; 0x41a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    4198:	24 0f       	add	r18, r20
    419a:	35 1f       	adc	r19, r21
    419c:	40 e0       	ldi	r20, 0x00	; 0
    419e:	50 e0       	ldi	r21, 0x00	; 0
    41a0:	8e 81       	ldd	r24, Y+6	; 0x06
    41a2:	9f 81       	ldd	r25, Y+7	; 0x07
    41a4:	fa 01       	movw	r30, r20
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	8e 17       	cp	r24, r30
    41ac:	9f 07       	cpc	r25, r31
    41ae:	1c f4       	brge	.+6      	; 0x41b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    41b0:	9c 01       	movw	r18, r24
    41b2:	24 1b       	sub	r18, r20
    41b4:	35 0b       	sbc	r19, r21
    41b6:	12 16       	cp	r1, r18
    41b8:	13 06       	cpc	r1, r19
    41ba:	0c f0       	brlt	.+2      	; 0x41be <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    41bc:	8a c0       	rjmp	.+276    	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    41be:	92 2f       	mov	r25, r18
    41c0:	84 2f       	mov	r24, r20
    41c2:	86 95       	lsr	r24
    41c4:	86 95       	lsr	r24
    41c6:	86 95       	lsr	r24
    41c8:	8e 9d       	mul	r24, r14
    41ca:	d0 01       	movw	r26, r0
    41cc:	8f 9d       	mul	r24, r15
    41ce:	b0 0d       	add	r27, r0
    41d0:	11 24       	eor	r1, r1
    41d2:	6a 0f       	add	r22, r26
    41d4:	7b 1f       	adc	r23, r27
    41d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    41d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    41da:	a6 0f       	add	r26, r22
    41dc:	b7 1f       	adc	r27, r23
    41de:	47 70       	andi	r20, 0x07	; 7
    41e0:	b1 f1       	breq	.+108    	; 0x424e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    41e2:	88 e0       	ldi	r24, 0x08	; 8
    41e4:	84 1b       	sub	r24, r20
    41e6:	48 2f       	mov	r20, r24
    41e8:	68 2f       	mov	r22, r24
    41ea:	70 e0       	ldi	r23, 0x00	; 0
    41ec:	fb 01       	movw	r30, r22
    41ee:	e8 5c       	subi	r30, 0xC8	; 200
    41f0:	f9 4f       	sbci	r31, 0xF9	; 249
    41f2:	e4 91       	lpm	r30, Z
    41f4:	28 17       	cp	r18, r24
    41f6:	98 f4       	brcc	.+38     	; 0x421e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    41f8:	62 1b       	sub	r22, r18
    41fa:	71 09       	sbc	r23, r1
    41fc:	2f ef       	ldi	r18, 0xFF	; 255
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    4202:	35 95       	asr	r19
    4204:	27 95       	ror	r18
    4206:	6a 95       	dec	r22
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    420a:	e2 23       	and	r30, r18
    420c:	01 30       	cpi	r16, 0x01	; 1
    420e:	11 05       	cpc	r17, r1
    4210:	49 f0       	breq	.+18     	; 0x4224 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    4212:	78 f0       	brcs	.+30     	; 0x4232 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4214:	02 30       	cpi	r16, 0x02	; 2
    4216:	11 05       	cpc	r17, r1
    4218:	09 f0       	breq	.+2      	; 0x421c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    421a:	5b c0       	rjmp	.+182    	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    421c:	0e c0       	rjmp	.+28     	; 0x423a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    421e:	01 30       	cpi	r16, 0x01	; 1
    4220:	11 05       	cpc	r17, r1
    4222:	19 f4       	brne	.+6      	; 0x422a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    4224:	8c 91       	ld	r24, X
    4226:	e8 2b       	or	r30, r24
    4228:	0a c0       	rjmp	.+20     	; 0x423e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    422a:	01 30       	cpi	r16, 0x01	; 1
    422c:	11 05       	cpc	r17, r1
    422e:	08 f0       	brcs	.+2      	; 0x4232 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    4230:	49 c0       	rjmp	.+146    	; 0x42c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    4232:	e0 95       	com	r30
    4234:	8c 91       	ld	r24, X
    4236:	e8 23       	and	r30, r24
    4238:	02 c0       	rjmp	.+4      	; 0x423e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    423a:	8c 91       	ld	r24, X
    423c:	e8 27       	eor	r30, r24
    423e:	ec 93       	st	X, r30
    4240:	94 17       	cp	r25, r20
    4242:	08 f4       	brcc	.+2      	; 0x4246 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    4244:	46 c0       	rjmp	.+140    	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4246:	2c 81       	ldd	r18, Y+4	; 0x04
    4248:	3d 81       	ldd	r19, Y+5	; 0x05
    424a:	a2 0f       	add	r26, r18
    424c:	b3 1f       	adc	r27, r19
    424e:	e9 2f       	mov	r30, r25
    4250:	e4 1b       	sub	r30, r20
    4252:	e8 30       	cpi	r30, 0x08	; 8
    4254:	f8 f0       	brcs	.+62     	; 0x4294 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    4256:	02 30       	cpi	r16, 0x02	; 2
    4258:	11 05       	cpc	r17, r1
    425a:	61 f4       	brne	.+24     	; 0x4274 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    425c:	8e 2f       	mov	r24, r30
    425e:	9c 91       	ld	r25, X
    4260:	90 95       	com	r25
    4262:	9c 93       	st	X, r25
    4264:	2c 81       	ldd	r18, Y+4	; 0x04
    4266:	3d 81       	ldd	r19, Y+5	; 0x05
    4268:	a2 0f       	add	r26, r18
    426a:	b3 1f       	adc	r27, r19
    426c:	88 50       	subi	r24, 0x08	; 8
    426e:	88 30       	cpi	r24, 0x08	; 8
    4270:	b0 f7       	brcc	.-20     	; 0x425e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    4272:	0f c0       	rjmp	.+30     	; 0x4292 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	01 15       	cp	r16, r1
    4278:	11 05       	cpc	r17, r1
    427a:	09 f4       	brne	.+2      	; 0x427e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	81 95       	neg	r24
    4280:	9e 2f       	mov	r25, r30
    4282:	8c 93       	st	X, r24
    4284:	2c 81       	ldd	r18, Y+4	; 0x04
    4286:	3d 81       	ldd	r19, Y+5	; 0x05
    4288:	a2 0f       	add	r26, r18
    428a:	b3 1f       	adc	r27, r19
    428c:	98 50       	subi	r25, 0x08	; 8
    428e:	98 30       	cpi	r25, 0x08	; 8
    4290:	c0 f7       	brcc	.-16     	; 0x4282 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    4292:	e7 70       	andi	r30, 0x07	; 7
    4294:	ee 23       	and	r30, r30
    4296:	e9 f0       	breq	.+58     	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	e0 5d       	subi	r30, 0xD0	; 208
    429c:	f9 4f       	sbci	r31, 0xF9	; 249
    429e:	e4 91       	lpm	r30, Z
    42a0:	01 30       	cpi	r16, 0x01	; 1
    42a2:	11 05       	cpc	r17, r1
    42a4:	39 f0       	breq	.+14     	; 0x42b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    42a6:	48 f0       	brcs	.+18     	; 0x42ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    42a8:	02 30       	cpi	r16, 0x02	; 2
    42aa:	11 05       	cpc	r17, r1
    42ac:	91 f4       	brne	.+36     	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    42ae:	8c 91       	ld	r24, X
    42b0:	e8 27       	eor	r30, r24
    42b2:	06 c0       	rjmp	.+12     	; 0x42c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    42b4:	8c 91       	ld	r24, X
    42b6:	e8 2b       	or	r30, r24
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    42ba:	e0 95       	com	r30
    42bc:	8c 91       	ld	r24, X
    42be:	e8 23       	and	r30, r24
    42c0:	ec 93       	st	X, r30
    42c2:	07 c0       	rjmp	.+14     	; 0x42d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    42c4:	02 30       	cpi	r16, 0x02	; 2
    42c6:	11 05       	cpc	r17, r1
    42c8:	09 f4       	brne	.+2      	; 0x42cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    42ca:	b7 cf       	rjmp	.-146    	; 0x423a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    42cc:	ae 0d       	add	r26, r14
    42ce:	bf 1d       	adc	r27, r15
    42d0:	be cf       	rjmp	.-132    	; 0x424e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	1f 91       	pop	r17
    42d8:	0f 91       	pop	r16
    42da:	ff 90       	pop	r15
    42dc:	ef 90       	pop	r14
    42de:	08 95       	ret

000042e0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	dc 01       	movw	r26, r24
    42e6:	56 96       	adiw	r26, 0x16	; 22
    42e8:	ec 91       	ld	r30, X
    42ea:	56 97       	sbiw	r26, 0x16	; 22
    42ec:	e2 30       	cpi	r30, 0x02	; 2
    42ee:	61 f0       	breq	.+24     	; 0x4308 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    42f0:	e3 30       	cpi	r30, 0x03	; 3
    42f2:	09 f1       	breq	.+66     	; 0x4336 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    42f4:	e1 30       	cpi	r30, 0x01	; 1
    42f6:	81 f5       	brne	.+96     	; 0x4358 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    42f8:	14 96       	adiw	r26, 0x04	; 4
    42fa:	ed 91       	ld	r30, X+
    42fc:	fc 91       	ld	r31, X
    42fe:	15 97       	sbiw	r26, 0x05	; 5
    4300:	e4 1b       	sub	r30, r20
    4302:	f5 0b       	sbc	r31, r21
    4304:	31 97       	sbiw	r30, 0x01	; 1
    4306:	23 c0       	rjmp	.+70     	; 0x434e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    4308:	dc 01       	movw	r26, r24
    430a:	14 96       	adiw	r26, 0x04	; 4
    430c:	ed 91       	ld	r30, X+
    430e:	fc 91       	ld	r31, X
    4310:	15 97       	sbiw	r26, 0x05	; 5
    4312:	df 01       	movw	r26, r30
    4314:	a6 1b       	sub	r26, r22
    4316:	b7 0b       	sbc	r27, r23
    4318:	bd 01       	movw	r22, r26
    431a:	dc 01       	movw	r26, r24
    431c:	16 96       	adiw	r26, 0x06	; 6
    431e:	ed 91       	ld	r30, X+
    4320:	fc 91       	ld	r31, X
    4322:	17 97       	sbiw	r26, 0x07	; 7
    4324:	df 01       	movw	r26, r30
    4326:	a4 1b       	sub	r26, r20
    4328:	b5 0b       	sbc	r27, r21
    432a:	ad 01       	movw	r20, r26
    432c:	41 50       	subi	r20, 0x01	; 1
    432e:	51 09       	sbc	r21, r1
    4330:	62 1b       	sub	r22, r18
    4332:	73 0b       	sbc	r23, r19
    4334:	11 c0       	rjmp	.+34     	; 0x4358 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    4336:	fa 01       	movw	r30, r20
    4338:	dc 01       	movw	r26, r24
    433a:	16 96       	adiw	r26, 0x06	; 6
    433c:	4d 91       	ld	r20, X+
    433e:	5c 91       	ld	r21, X
    4340:	17 97       	sbiw	r26, 0x07	; 7
    4342:	da 01       	movw	r26, r20
    4344:	a6 1b       	sub	r26, r22
    4346:	b7 0b       	sbc	r27, r23
    4348:	bd 01       	movw	r22, r26
    434a:	62 1b       	sub	r22, r18
    434c:	73 0b       	sbc	r23, r19
    434e:	ab 01       	movw	r20, r22
    4350:	bf 01       	movw	r22, r30
    4352:	0e 94 bb 20 	call	0x4176	; 0x4176 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    4356:	02 c0       	rjmp	.+4      	; 0x435c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    4358:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	08 95       	ret

00004362 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	dc 01       	movw	r26, r24
    4368:	56 96       	adiw	r26, 0x16	; 22
    436a:	ec 91       	ld	r30, X
    436c:	56 97       	sbiw	r26, 0x16	; 22
    436e:	e2 30       	cpi	r30, 0x02	; 2
    4370:	69 f0       	breq	.+26     	; 0x438c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    4372:	e3 30       	cpi	r30, 0x03	; 3
    4374:	11 f1       	breq	.+68     	; 0x43ba <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    4376:	e1 30       	cpi	r30, 0x01	; 1
    4378:	89 f5       	brne	.+98     	; 0x43dc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    437a:	14 96       	adiw	r26, 0x04	; 4
    437c:	ed 91       	ld	r30, X+
    437e:	fc 91       	ld	r31, X
    4380:	15 97       	sbiw	r26, 0x05	; 5
    4382:	e4 1b       	sub	r30, r20
    4384:	f5 0b       	sbc	r31, r21
    4386:	e2 1b       	sub	r30, r18
    4388:	f3 0b       	sbc	r31, r19
    438a:	23 c0       	rjmp	.+70     	; 0x43d2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    438c:	dc 01       	movw	r26, r24
    438e:	14 96       	adiw	r26, 0x04	; 4
    4390:	ed 91       	ld	r30, X+
    4392:	fc 91       	ld	r31, X
    4394:	15 97       	sbiw	r26, 0x05	; 5
    4396:	df 01       	movw	r26, r30
    4398:	a6 1b       	sub	r26, r22
    439a:	b7 0b       	sbc	r27, r23
    439c:	bd 01       	movw	r22, r26
    439e:	61 50       	subi	r22, 0x01	; 1
    43a0:	71 09       	sbc	r23, r1
    43a2:	dc 01       	movw	r26, r24
    43a4:	16 96       	adiw	r26, 0x06	; 6
    43a6:	ed 91       	ld	r30, X+
    43a8:	fc 91       	ld	r31, X
    43aa:	17 97       	sbiw	r26, 0x07	; 7
    43ac:	df 01       	movw	r26, r30
    43ae:	a4 1b       	sub	r26, r20
    43b0:	b5 0b       	sbc	r27, r21
    43b2:	ad 01       	movw	r20, r26
    43b4:	42 1b       	sub	r20, r18
    43b6:	53 0b       	sbc	r21, r19
    43b8:	11 c0       	rjmp	.+34     	; 0x43dc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    43ba:	fa 01       	movw	r30, r20
    43bc:	dc 01       	movw	r26, r24
    43be:	16 96       	adiw	r26, 0x06	; 6
    43c0:	4d 91       	ld	r20, X+
    43c2:	5c 91       	ld	r21, X
    43c4:	17 97       	sbiw	r26, 0x07	; 7
    43c6:	da 01       	movw	r26, r20
    43c8:	a6 1b       	sub	r26, r22
    43ca:	b7 0b       	sbc	r27, r23
    43cc:	bd 01       	movw	r22, r26
    43ce:	61 50       	subi	r22, 0x01	; 1
    43d0:	71 09       	sbc	r23, r1
    43d2:	ab 01       	movw	r20, r22
    43d4:	bf 01       	movw	r22, r30
    43d6:	0e 94 4b 20 	call	0x4096	; 0x4096 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    43dc:	0e 94 bb 20 	call	0x4176	; 0x4176 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	08 95       	ret

000043e6 <_ZN16Adafruit_SSD13067displayEv>:
    43e6:	cf 92       	push	r12
    43e8:	df 92       	push	r13
    43ea:	ef 92       	push	r14
    43ec:	ff 92       	push	r15
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	ec 01       	movw	r28, r24
    43f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	39 f0       	breq	.+14     	; 0x440e <_ZN16Adafruit_SSD13067displayEv+0x28>
    4400:	4d a9       	ldd	r20, Y+53	; 0x35
    4402:	5e a9       	ldd	r21, Y+54	; 0x36
    4404:	6f a9       	ldd	r22, Y+55	; 0x37
    4406:	78 ad       	ldd	r23, Y+56	; 0x38
    4408:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    440c:	0f c0       	rjmp	.+30     	; 0x442c <_ZN16Adafruit_SSD13067displayEv+0x46>
    440e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4412:	89 2b       	or	r24, r25
    4414:	21 f0       	breq	.+8      	; 0x441e <_ZN16Adafruit_SSD13067displayEv+0x38>
    4416:	8e ad       	ldd	r24, Y+62	; 0x3e
    4418:	9f ad       	ldd	r25, Y+63	; 0x3f
    441a:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN8SPIClass16beginTransactionE11SPISettings>
    441e:	ef a5       	ldd	r30, Y+47	; 0x2f
    4420:	f8 a9       	ldd	r31, Y+48	; 0x30
    4422:	90 81       	ld	r25, Z
    4424:	8c a9       	ldd	r24, Y+52	; 0x34
    4426:	80 95       	com	r24
    4428:	89 23       	and	r24, r25
    442a:	80 83       	st	Z, r24
    442c:	45 e0       	ldi	r20, 0x05	; 5
    442e:	6b e2       	ldi	r22, 0x2B	; 43
    4430:	76 e0       	ldi	r23, 0x06	; 6
    4432:	ce 01       	movw	r24, r28
    4434:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4438:	6c 81       	ldd	r22, Y+4	; 0x04
    443a:	61 50       	subi	r22, 0x01	; 1
    443c:	ce 01       	movw	r24, r28
    443e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4442:	2e 81       	ldd	r18, Y+6	; 0x06
    4444:	3f 81       	ldd	r19, Y+7	; 0x07
    4446:	c9 01       	movw	r24, r18
    4448:	07 96       	adiw	r24, 0x07	; 7
    444a:	97 fd       	sbrc	r25, 7
    444c:	07 96       	adiw	r24, 0x07	; 7
    444e:	23 e0       	ldi	r18, 0x03	; 3
    4450:	95 95       	asr	r25
    4452:	87 95       	ror	r24
    4454:	2a 95       	dec	r18
    4456:	e1 f7       	brne	.-8      	; 0x4450 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    4458:	2c 81       	ldd	r18, Y+4	; 0x04
    445a:	3d 81       	ldd	r19, Y+5	; 0x05
    445c:	82 9f       	mul	r24, r18
    445e:	70 01       	movw	r14, r0
    4460:	83 9f       	mul	r24, r19
    4462:	f0 0c       	add	r15, r0
    4464:	92 9f       	mul	r25, r18
    4466:	f0 0c       	add	r15, r0
    4468:	11 24       	eor	r1, r1
    446a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    446c:	18 a1       	ldd	r17, Y+32	; 0x20
    446e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4472:	e0 0e       	add	r14, r16
    4474:	f1 1e       	adc	r15, r17
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	09 f4       	brne	.+2      	; 0x447c <_ZN16Adafruit_SSD13067displayEv+0x96>
    447a:	43 c0       	rjmp	.+134    	; 0x4502 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    447c:	69 a1       	ldd	r22, Y+33	; 0x21
    447e:	06 2e       	mov	r0, r22
    4480:	00 0c       	add	r0, r0
    4482:	77 0b       	sbc	r23, r23
    4484:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN7TwoWire17beginTransmissionEi>
    4488:	8d 8d       	ldd	r24, Y+29	; 0x1d
    448a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    448c:	dc 01       	movw	r26, r24
    448e:	ed 91       	ld	r30, X+
    4490:	fc 91       	ld	r31, X
    4492:	01 90       	ld	r0, Z+
    4494:	f0 81       	ld	r31, Z
    4496:	e0 2d       	mov	r30, r0
    4498:	60 e4       	ldi	r22, 0x40	; 64
    449a:	09 95       	icall
    449c:	68 01       	movw	r12, r16
    449e:	01 e0       	ldi	r16, 0x01	; 1
    44a0:	10 e0       	ldi	r17, 0x00	; 0
    44a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44a6:	ec 14       	cp	r14, r12
    44a8:	fd 04       	cpc	r15, r13
    44aa:	41 f1       	breq	.+80     	; 0x44fc <_ZN16Adafruit_SSD13067displayEv+0x116>
    44ac:	00 32       	cpi	r16, 0x20	; 32
    44ae:	11 05       	cpc	r17, r1
    44b0:	b0 f0       	brcs	.+44     	; 0x44de <_ZN16Adafruit_SSD13067displayEv+0xf8>
    44b2:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN7TwoWire15endTransmissionEv>
    44b6:	69 a1       	ldd	r22, Y+33	; 0x21
    44b8:	06 2e       	mov	r0, r22
    44ba:	00 0c       	add	r0, r0
    44bc:	77 0b       	sbc	r23, r23
    44be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44c2:	0e 94 a3 24 	call	0x4946	; 0x4946 <_ZN7TwoWire17beginTransmissionEi>
    44c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44ca:	dc 01       	movw	r26, r24
    44cc:	ed 91       	ld	r30, X+
    44ce:	fc 91       	ld	r31, X
    44d0:	01 90       	ld	r0, Z+
    44d2:	f0 81       	ld	r31, Z
    44d4:	e0 2d       	mov	r30, r0
    44d6:	60 e4       	ldi	r22, 0x40	; 64
    44d8:	09 95       	icall
    44da:	01 e0       	ldi	r16, 0x01	; 1
    44dc:	10 e0       	ldi	r17, 0x00	; 0
    44de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44e2:	f6 01       	movw	r30, r12
    44e4:	61 91       	ld	r22, Z+
    44e6:	6f 01       	movw	r12, r30
    44e8:	dc 01       	movw	r26, r24
    44ea:	ed 91       	ld	r30, X+
    44ec:	fc 91       	ld	r31, X
    44ee:	01 90       	ld	r0, Z+
    44f0:	f0 81       	ld	r31, Z
    44f2:	e0 2d       	mov	r30, r0
    44f4:	09 95       	icall
    44f6:	0f 5f       	subi	r16, 0xFF	; 255
    44f8:	1f 4f       	sbci	r17, 0xFF	; 255
    44fa:	d3 cf       	rjmp	.-90     	; 0x44a2 <_ZN16Adafruit_SSD13067displayEv+0xbc>
    44fc:	0e 94 b8 24 	call	0x4970	; 0x4970 <_ZN7TwoWire15endTransmissionEv>
    4500:	35 c0       	rjmp	.+106    	; 0x456c <_ZN16Adafruit_SSD13067displayEv+0x186>
    4502:	ed a5       	ldd	r30, Y+45	; 0x2d
    4504:	fe a5       	ldd	r31, Y+46	; 0x2e
    4506:	90 81       	ld	r25, Z
    4508:	8b a9       	ldd	r24, Y+51	; 0x33
    450a:	89 2b       	or	r24, r25
    450c:	80 83       	st	Z, r24
    450e:	0e 15       	cp	r16, r14
    4510:	1f 05       	cpc	r17, r15
    4512:	61 f1       	breq	.+88     	; 0x456c <_ZN16Adafruit_SSD13067displayEv+0x186>
    4514:	f8 01       	movw	r30, r16
    4516:	81 91       	ld	r24, Z+
    4518:	8f 01       	movw	r16, r30
    451a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    451c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    451e:	23 2b       	or	r18, r19
    4520:	19 f0       	breq	.+6      	; 0x4528 <_ZN16Adafruit_SSD13067displayEv+0x142>
    4522:	0e 94 9c 1c 	call	0x3938	; 0x3938 <_ZN8SPIClass8transferEh>
    4526:	f3 cf       	rjmp	.-26     	; 0x450e <_ZN16Adafruit_SSD13067displayEv+0x128>
    4528:	28 e0       	ldi	r18, 0x08	; 8
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e8       	ldi	r20, 0x80	; 128
    452e:	e9 a5       	ldd	r30, Y+41	; 0x29
    4530:	fa a5       	ldd	r31, Y+42	; 0x2a
    4532:	99 a9       	ldd	r25, Y+49	; 0x31
    4534:	58 2f       	mov	r21, r24
    4536:	54 23       	and	r21, r20
    4538:	19 f0       	breq	.+6      	; 0x4540 <_ZN16Adafruit_SSD13067displayEv+0x15a>
    453a:	50 81       	ld	r21, Z
    453c:	95 2b       	or	r25, r21
    453e:	03 c0       	rjmp	.+6      	; 0x4546 <_ZN16Adafruit_SSD13067displayEv+0x160>
    4540:	50 81       	ld	r21, Z
    4542:	90 95       	com	r25
    4544:	95 23       	and	r25, r21
    4546:	90 83       	st	Z, r25
    4548:	eb a5       	ldd	r30, Y+43	; 0x2b
    454a:	fc a5       	ldd	r31, Y+44	; 0x2c
    454c:	50 81       	ld	r21, Z
    454e:	9a a9       	ldd	r25, Y+50	; 0x32
    4550:	95 2b       	or	r25, r21
    4552:	90 83       	st	Z, r25
    4554:	eb a5       	ldd	r30, Y+43	; 0x2b
    4556:	fc a5       	ldd	r31, Y+44	; 0x2c
    4558:	50 81       	ld	r21, Z
    455a:	9a a9       	ldd	r25, Y+50	; 0x32
    455c:	90 95       	com	r25
    455e:	95 23       	and	r25, r21
    4560:	90 83       	st	Z, r25
    4562:	46 95       	lsr	r20
    4564:	21 50       	subi	r18, 0x01	; 1
    4566:	31 09       	sbc	r19, r1
    4568:	11 f7       	brne	.-60     	; 0x452e <_ZN16Adafruit_SSD13067displayEv+0x148>
    456a:	d1 cf       	rjmp	.-94     	; 0x450e <_ZN16Adafruit_SSD13067displayEv+0x128>
    456c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    456e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	71 f0       	breq	.+28     	; 0x4590 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    4574:	49 ad       	ldd	r20, Y+57	; 0x39
    4576:	5a ad       	ldd	r21, Y+58	; 0x3a
    4578:	6b ad       	ldd	r22, Y+59	; 0x3b
    457a:	7c ad       	ldd	r23, Y+60	; 0x3c
    457c:	df 91       	pop	r29
    457e:	cf 91       	pop	r28
    4580:	1f 91       	pop	r17
    4582:	0f 91       	pop	r16
    4584:	ff 90       	pop	r15
    4586:	ef 90       	pop	r14
    4588:	df 90       	pop	r13
    458a:	cf 90       	pop	r12
    458c:	0c 94 95 24 	jmp	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    4590:	ef a5       	ldd	r30, Y+47	; 0x2f
    4592:	f8 a9       	ldd	r31, Y+48	; 0x30
    4594:	90 81       	ld	r25, Z
    4596:	8c a9       	ldd	r24, Y+52	; 0x34
    4598:	89 2b       	or	r24, r25
    459a:	80 83       	st	Z, r24
    459c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    459e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45a0:	89 2b       	or	r24, r25
    45a2:	51 f0       	breq	.+20     	; 0x45b8 <_ZN16Adafruit_SSD13067displayEv+0x1d2>
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	ff 90       	pop	r15
    45ae:	ef 90       	pop	r14
    45b0:	df 90       	pop	r13
    45b2:	cf 90       	pop	r12
    45b4:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <_ZN8SPIClass14endTransactionEv>
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	ff 90       	pop	r15
    45c2:	ef 90       	pop	r14
    45c4:	df 90       	pop	r13
    45c6:	cf 90       	pop	r12
    45c8:	08 95       	ret

000045ca <_ZN16Adafruit_SSD130615startscrollleftEhh>:
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	ec 01       	movw	r28, r24
    45d4:	06 2f       	mov	r16, r22
    45d6:	14 2f       	mov	r17, r20
    45d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	39 f0       	breq	.+14     	; 0x45ee <_ZN16Adafruit_SSD130615startscrollleftEhh+0x24>
    45e0:	4d a9       	ldd	r20, Y+53	; 0x35
    45e2:	5e a9       	ldd	r21, Y+54	; 0x36
    45e4:	6f a9       	ldd	r22, Y+55	; 0x37
    45e6:	78 ad       	ldd	r23, Y+56	; 0x38
    45e8:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <_ZN16Adafruit_SSD130615startscrollleftEhh+0x42>
    45ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45f2:	89 2b       	or	r24, r25
    45f4:	21 f0       	breq	.+8      	; 0x45fe <_ZN16Adafruit_SSD130615startscrollleftEhh+0x34>
    45f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45fa:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN8SPIClass16beginTransactionE11SPISettings>
    45fe:	ef a5       	ldd	r30, Y+47	; 0x2f
    4600:	f8 a9       	ldd	r31, Y+48	; 0x30
    4602:	90 81       	ld	r25, Z
    4604:	8c a9       	ldd	r24, Y+52	; 0x34
    4606:	80 95       	com	r24
    4608:	89 23       	and	r24, r25
    460a:	80 83       	st	Z, r24
    460c:	42 e0       	ldi	r20, 0x02	; 2
    460e:	69 e2       	ldi	r22, 0x29	; 41
    4610:	76 e0       	ldi	r23, 0x06	; 6
    4612:	ce 01       	movw	r24, r28
    4614:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4618:	60 2f       	mov	r22, r16
    461a:	ce 01       	movw	r24, r28
    461c:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	ce 01       	movw	r24, r28
    4624:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4628:	61 2f       	mov	r22, r17
    462a:	ce 01       	movw	r24, r28
    462c:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4630:	43 e0       	ldi	r20, 0x03	; 3
    4632:	66 e2       	ldi	r22, 0x26	; 38
    4634:	76 e0       	ldi	r23, 0x06	; 6
    4636:	ce 01       	movw	r24, r28
    4638:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    463c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    463e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4640:	00 97       	sbiw	r24, 0x00	; 0
    4642:	51 f0       	breq	.+20     	; 0x4658 <_ZN16Adafruit_SSD130615startscrollleftEhh+0x8e>
    4644:	49 ad       	ldd	r20, Y+57	; 0x39
    4646:	5a ad       	ldd	r21, Y+58	; 0x3a
    4648:	6b ad       	ldd	r22, Y+59	; 0x3b
    464a:	7c ad       	ldd	r23, Y+60	; 0x3c
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	0c 94 95 24 	jmp	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    4658:	ef a5       	ldd	r30, Y+47	; 0x2f
    465a:	f8 a9       	ldd	r31, Y+48	; 0x30
    465c:	90 81       	ld	r25, Z
    465e:	8c a9       	ldd	r24, Y+52	; 0x34
    4660:	89 2b       	or	r24, r25
    4662:	80 83       	st	Z, r24
    4664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4668:	89 2b       	or	r24, r25
    466a:	31 f0       	breq	.+12     	; 0x4678 <_ZN16Adafruit_SSD130615startscrollleftEhh+0xae>
    466c:	df 91       	pop	r29
    466e:	cf 91       	pop	r28
    4670:	1f 91       	pop	r17
    4672:	0f 91       	pop	r16
    4674:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <_ZN8SPIClass14endTransactionEv>
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	1f 91       	pop	r17
    467e:	0f 91       	pop	r16
    4680:	08 95       	ret

00004682 <_ZN16Adafruit_SSD130610stopscrollEv>:

/*!
    @brief  Cease a previously-begun scrolling action.
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
    4682:	cf 93       	push	r28
    4684:	df 93       	push	r29
    4686:	ec 01       	movw	r28, r24
  TRANSACTION_START
    4688:	8d 8d       	ldd	r24, Y+29	; 0x1d
    468a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	39 f0       	breq	.+14     	; 0x469e <_ZN16Adafruit_SSD130610stopscrollEv+0x1c>
    4690:	4d a9       	ldd	r20, Y+53	; 0x35
    4692:	5e a9       	ldd	r21, Y+54	; 0x36
    4694:	6f a9       	ldd	r22, Y+55	; 0x37
    4696:	78 ad       	ldd	r23, Y+56	; 0x38
    4698:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    469c:	0f c0       	rjmp	.+30     	; 0x46bc <_ZN16Adafruit_SSD130610stopscrollEv+0x3a>
    469e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a2:	89 2b       	or	r24, r25
    46a4:	21 f0       	breq	.+8      	; 0x46ae <_ZN16Adafruit_SSD130610stopscrollEv+0x2c>
    46a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    46a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46aa:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN8SPIClass16beginTransactionE11SPISettings>
    46ae:	ef a5       	ldd	r30, Y+47	; 0x2f
    46b0:	f8 a9       	ldd	r31, Y+48	; 0x30
    46b2:	90 81       	ld	r25, Z
    46b4:	8c a9       	ldd	r24, Y+52	; 0x34
    46b6:	80 95       	com	r24
    46b8:	89 23       	and	r24, r25
    46ba:	80 83       	st	Z, r24
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
    46bc:	6e e2       	ldi	r22, 0x2E	; 46
    46be:	ce 01       	movw	r24, r28
    46c0:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
    46c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46c8:	00 97       	sbiw	r24, 0x00	; 0
    46ca:	41 f0       	breq	.+16     	; 0x46dc <_ZN16Adafruit_SSD130610stopscrollEv+0x5a>
    46cc:	49 ad       	ldd	r20, Y+57	; 0x39
    46ce:	5a ad       	ldd	r21, Y+58	; 0x3a
    46d0:	6b ad       	ldd	r22, Y+59	; 0x3b
    46d2:	7c ad       	ldd	r23, Y+60	; 0x3c
}
    46d4:	df 91       	pop	r29
    46d6:	cf 91       	pop	r28
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
    46d8:	0c 94 95 24 	jmp	0x492a	; 0x492a <_ZN7TwoWire8setClockEm>
    46dc:	ef a5       	ldd	r30, Y+47	; 0x2f
    46de:	f8 a9       	ldd	r31, Y+48	; 0x30
    46e0:	90 81       	ld	r25, Z
    46e2:	8c a9       	ldd	r24, Y+52	; 0x34
    46e4:	89 2b       	or	r24, r25
    46e6:	80 83       	st	Z, r24
    46e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46ec:	89 2b       	or	r24, r25
    46ee:	21 f0       	breq	.+8      	; 0x46f8 <_ZN16Adafruit_SSD130610stopscrollEv+0x76>
}
    46f0:	df 91       	pop	r29
    46f2:	cf 91       	pop	r28
    @return None (void).
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
    46f4:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <_ZN8SPIClass14endTransactionEv>
}
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	08 95       	ret

000046fe <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    46fe:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4700:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4702:	f8 94       	cli
  if (!initialized) {
    4704:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SPIClass11initializedE>
    4708:	81 11       	cpse	r24, r1
    470a:	27 c0       	rjmp	.+78     	; 0x475a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    470c:	ee ef       	ldi	r30, 0xFE	; 254
    470e:	f0 e0       	ldi	r31, 0x00	; 0
    4710:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4712:	ea ee       	ldi	r30, 0xEA	; 234
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4718:	e8 2f       	mov	r30, r24
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	ee 0f       	add	r30, r30
    471e:	ff 1f       	adc	r31, r31
    4720:	e4 5e       	subi	r30, 0xE4	; 228
    4722:	fe 4f       	sbci	r31, 0xFE	; 254
    4724:	a5 91       	lpm	r26, Z+
    4726:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4728:	ec 91       	ld	r30, X
    472a:	e9 23       	and	r30, r25
    472c:	21 f4       	brne	.+8      	; 0x4736 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    472e:	61 e0       	ldi	r22, 0x01	; 1
    4730:	8a e0       	ldi	r24, 0x0A	; 10
    4732:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4736:	61 e0       	ldi	r22, 0x01	; 1
    4738:	8a e0       	ldi	r24, 0x0A	; 10
    473a:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    473e:	8c b5       	in	r24, 0x2c	; 44
    4740:	80 61       	ori	r24, 0x10	; 16
    4742:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4744:	8c b5       	in	r24, 0x2c	; 44
    4746:	80 64       	ori	r24, 0x40	; 64
    4748:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    474a:	61 e0       	ldi	r22, 0x01	; 1
    474c:	8d e0       	ldi	r24, 0x0D	; 13
    474e:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
    pinMode(MOSI, OUTPUT);
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	8b e0       	ldi	r24, 0x0B	; 11
    4756:	0e 94 28 11 	call	0x2250	; 0x2250 <pinMode>
  }
  initialized++; // reference count
    475a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN8SPIClass11initializedE>
    475e:	8f 5f       	subi	r24, 0xFF	; 255
    4760:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4764:	cf bf       	out	0x3f, r28	; 63
}
    4766:	cf 91       	pop	r28
    4768:	08 95       	ret

0000476a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    476a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    4774:	82 1b       	sub	r24, r18
    4776:	91 09       	sbc	r25, r1
    4778:	08 95       	ret

0000477a <_ZN7TwoWire4readEv>:
    477a:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    477e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    4782:	98 17       	cp	r25, r24
    4784:	50 f4       	brcc	.+20     	; 0x479a <_ZN7TwoWire4readEv+0x20>
    4786:	e9 2f       	mov	r30, r25
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	e4 5e       	subi	r30, 0xE4	; 228
    478c:	fc 4f       	sbci	r31, 0xFC	; 252
    478e:	20 81       	ld	r18, Z
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	9f 5f       	subi	r25, 0xFF	; 255
    4794:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    4798:	02 c0       	rjmp	.+4      	; 0x479e <_ZN7TwoWire4readEv+0x24>
    479a:	2f ef       	ldi	r18, 0xFF	; 255
    479c:	3f ef       	ldi	r19, 0xFF	; 255
    479e:	c9 01       	movw	r24, r18
    47a0:	08 95       	ret

000047a2 <_ZN7TwoWire4peekEv>:
    47a2:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    47a6:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    47aa:	e8 17       	cp	r30, r24
    47ac:	30 f4       	brcc	.+12     	; 0x47ba <_ZN7TwoWire4peekEv+0x18>
    47ae:	f0 e0       	ldi	r31, 0x00	; 0
    47b0:	e4 5e       	subi	r30, 0xE4	; 228
    47b2:	fc 4f       	sbci	r31, 0xFC	; 252
    47b4:	80 81       	ld	r24, Z
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	08 95       	ret
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	08 95       	ret

000047c0 <_ZN7TwoWire5flushEv>:
    47c0:	08 95       	ret

000047c2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    47c2:	cf 93       	push	r28
    47c4:	df 93       	push	r29
    47c6:	ec 01       	movw	r28, r24
    47c8:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <_ZN7TwoWire14user_onReceiveE>
    47cc:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <_ZN7TwoWire14user_onReceiveE+0x1>
    47d0:	30 97       	sbiw	r30, 0x00	; 0
    47d2:	f1 f0       	breq	.+60     	; 0x4810 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    47d4:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    47d8:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    47dc:	98 17       	cp	r25, r24
    47de:	c0 f0       	brcs	.+48     	; 0x4810 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	29 2f       	mov	r18, r25
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	26 17       	cp	r18, r22
    47e8:	37 07       	cpc	r19, r23
    47ea:	54 f4       	brge	.+20     	; 0x4800 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    47ec:	de 01       	movw	r26, r28
    47ee:	a2 0f       	add	r26, r18
    47f0:	b3 1f       	adc	r27, r19
    47f2:	4c 91       	ld	r20, X
    47f4:	d9 01       	movw	r26, r18
    47f6:	a4 5e       	subi	r26, 0xE4	; 228
    47f8:	bc 4f       	sbci	r27, 0xFC	; 252
    47fa:	4c 93       	st	X, r20
    47fc:	9f 5f       	subi	r25, 0xFF	; 255
    47fe:	f1 cf       	rjmp	.-30     	; 0x47e2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    4800:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    4804:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    4808:	cb 01       	movw	r24, r22
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	09 94       	ijmp
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	08 95       	ret

00004816 <_ZN7TwoWire16onRequestServiceEv>:
    4816:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <_ZN7TwoWire14user_onRequestE>
    481a:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <_ZN7TwoWire14user_onRequestE+0x1>
    481e:	30 97       	sbiw	r30, 0x00	; 0
    4820:	29 f0       	breq	.+10     	; 0x482c <_ZN7TwoWire16onRequestServiceEv+0x16>
    4822:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    4826:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    482a:	09 94       	ijmp
    482c:	08 95       	ret

0000482e <_ZN7TwoWire5writeEPKhj>:
    482e:	cf 92       	push	r12
    4830:	df 92       	push	r13
    4832:	ef 92       	push	r14
    4834:	ff 92       	push	r15
    4836:	0f 93       	push	r16
    4838:	1f 93       	push	r17
    483a:	cf 93       	push	r28
    483c:	df 93       	push	r29
    483e:	7c 01       	movw	r14, r24
    4840:	cb 01       	movw	r24, r22
    4842:	8a 01       	movw	r16, r20
    4844:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <_ZN7TwoWire12transmittingE>
    4848:	22 23       	and	r18, r18
    484a:	89 f0       	breq	.+34     	; 0x486e <_ZN7TwoWire5writeEPKhj+0x40>
    484c:	eb 01       	movw	r28, r22
    484e:	6b 01       	movw	r12, r22
    4850:	c4 0e       	add	r12, r20
    4852:	d5 1e       	adc	r13, r21
    4854:	cc 15       	cp	r28, r12
    4856:	dd 05       	cpc	r29, r13
    4858:	69 f0       	breq	.+26     	; 0x4874 <_ZN7TwoWire5writeEPKhj+0x46>
    485a:	69 91       	ld	r22, Y+
    485c:	d7 01       	movw	r26, r14
    485e:	ed 91       	ld	r30, X+
    4860:	fc 91       	ld	r31, X
    4862:	01 90       	ld	r0, Z+
    4864:	f0 81       	ld	r31, Z
    4866:	e0 2d       	mov	r30, r0
    4868:	c7 01       	movw	r24, r14
    486a:	09 95       	icall
    486c:	f3 cf       	rjmp	.-26     	; 0x4854 <_ZN7TwoWire5writeEPKhj+0x26>
    486e:	64 2f       	mov	r22, r20
    4870:	0e 94 01 25 	call	0x4a02	; 0x4a02 <twi_transmit>
    4874:	c8 01       	movw	r24, r16
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	ff 90       	pop	r15
    4880:	ef 90       	pop	r14
    4882:	df 90       	pop	r13
    4884:	cf 90       	pop	r12
    4886:	08 95       	ret

00004888 <_ZN7TwoWire5writeEh>:
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	1f 92       	push	r1
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
    4892:	69 83       	std	Y+1, r22	; 0x01
    4894:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <_ZN7TwoWire12transmittingE>
    4898:	22 23       	and	r18, r18
    489a:	d1 f0       	breq	.+52     	; 0x48d0 <_ZN7TwoWire5writeEh+0x48>
    489c:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    48a0:	20 32       	cpi	r18, 0x20	; 32
    48a2:	40 f0       	brcs	.+16     	; 0x48b4 <_ZN7TwoWire5writeEh+0x2c>
    48a4:	21 e0       	ldi	r18, 0x01	; 1
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	fc 01       	movw	r30, r24
    48aa:	33 83       	std	Z+3, r19	; 0x03
    48ac:	22 83       	std	Z+2, r18	; 0x02
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	15 c0       	rjmp	.+42     	; 0x48de <_ZN7TwoWire5writeEh+0x56>
    48b4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    48b8:	e8 2f       	mov	r30, r24
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	e7 50       	subi	r30, 0x07	; 7
    48be:	fd 4f       	sbci	r31, 0xFD	; 253
    48c0:	99 81       	ldd	r25, Y+1	; 0x01
    48c2:	90 83       	st	Z, r25
    48c4:	8f 5f       	subi	r24, 0xFF	; 255
    48c6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    48ca:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    48ce:	05 c0       	rjmp	.+10     	; 0x48da <_ZN7TwoWire5writeEh+0x52>
    48d0:	61 e0       	ldi	r22, 0x01	; 1
    48d2:	ce 01       	movw	r24, r28
    48d4:	01 96       	adiw	r24, 0x01	; 1
    48d6:	0e 94 01 25 	call	0x4a02	; 0x4a02 <twi_transmit>
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0f 90       	pop	r0
    48e0:	df 91       	pop	r29
    48e2:	cf 91       	pop	r28
    48e4:	08 95       	ret

000048e6 <_ZN7TwoWireC1Ev>:
    48e6:	fc 01       	movw	r30, r24
    48e8:	13 82       	std	Z+3, r1	; 0x03
    48ea:	12 82       	std	Z+2, r1	; 0x02
    48ec:	88 ee       	ldi	r24, 0xE8	; 232
    48ee:	93 e0       	ldi	r25, 0x03	; 3
    48f0:	a0 e0       	ldi	r26, 0x00	; 0
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	84 83       	std	Z+4, r24	; 0x04
    48f6:	95 83       	std	Z+5, r25	; 0x05
    48f8:	a6 83       	std	Z+6, r26	; 0x06
    48fa:	b7 83       	std	Z+7, r27	; 0x07
    48fc:	8b ea       	ldi	r24, 0xAB	; 171
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	80 83       	st	Z, r24
    4904:	08 95       	ret

00004906 <_ZN7TwoWire5beginEv>:
    4906:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZN7TwoWire13rxBufferIndexE>
    490a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN7TwoWire14rxBufferLengthE>
    490e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    4912:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    4916:	0e 94 c2 24 	call	0x4984	; 0x4984 <twi_init>
    491a:	8b e0       	ldi	r24, 0x0B	; 11
    491c:	94 e2       	ldi	r25, 0x24	; 36
    491e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <twi_attachSlaveTxEvent>
    4922:	81 ee       	ldi	r24, 0xE1	; 225
    4924:	93 e2       	ldi	r25, 0x23	; 35
    4926:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <twi_attachSlaveRxEvent>

0000492a <_ZN7TwoWire8setClockEm>:
    492a:	cb 01       	movw	r24, r22
    492c:	ba 01       	movw	r22, r20
    492e:	0c 94 ed 24 	jmp	0x49da	; 0x49da <twi_setFrequency>

00004932 <_ZN7TwoWire17beginTransmissionEh>:
    4932:	81 e0       	ldi	r24, 0x01	; 1
    4934:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZN7TwoWire12transmittingE>
    4938:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <_ZN7TwoWire9txAddressE>
    493c:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    4940:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    4944:	08 95       	ret

00004946 <_ZN7TwoWire17beginTransmissionEi>:
    4946:	0c 94 99 24 	jmp	0x4932	; 0x4932 <_ZN7TwoWire17beginTransmissionEh>

0000494a <_ZN7TwoWire15endTransmissionEh>:
    494a:	0f 93       	push	r16
    494c:	06 2f       	mov	r16, r22
    494e:	21 e0       	ldi	r18, 0x01	; 1
    4950:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    4954:	69 ef       	ldi	r22, 0xF9	; 249
    4956:	72 e0       	ldi	r23, 0x02	; 2
    4958:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <_ZN7TwoWire9txAddressE>
    495c:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <twi_writeTo>
    4960:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_ZN7TwoWire13txBufferIndexE>
    4964:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_ZN7TwoWire14txBufferLengthE>
    4968:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <_ZN7TwoWire12transmittingE>
    496c:	0f 91       	pop	r16
    496e:	08 95       	ret

00004970 <_ZN7TwoWire15endTransmissionEv>:
    4970:	61 e0       	ldi	r22, 0x01	; 1
    4972:	0c 94 a5 24 	jmp	0x494a	; 0x494a <_ZN7TwoWire15endTransmissionEh>

00004976 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4976:	86 ee       	ldi	r24, 0xE6	; 230
    4978:	92 e0       	ldi	r25, 0x02	; 2
    497a:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <_ZN7TwoWireC1Ev>

0000497e <__cxa_pure_virtual>:
    497e:	0e 94 04 2b 	call	0x5608	; 0x5608 <abort>

00004982 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4982:	08 95       	ret

00004984 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4984:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <twi_sendStop>
    498e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_inRepStart>
    4992:	61 e0       	ldi	r22, 0x01	; 1
    4994:	82 e1       	ldi	r24, 0x12	; 18
    4996:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    499a:	61 e0       	ldi	r22, 0x01	; 1
    499c:	83 e1       	ldi	r24, 0x13	; 19
    499e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    49a2:	e9 eb       	ldi	r30, 0xB9	; 185
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	8e 7f       	andi	r24, 0xFE	; 254
    49aa:	80 83       	st	Z, r24
    49ac:	80 81       	ld	r24, Z
    49ae:	8d 7f       	andi	r24, 0xFD	; 253
    49b0:	80 83       	st	Z, r24
    49b2:	80 e2       	ldi	r24, 0x20	; 32
    49b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    49b8:	85 e4       	ldi	r24, 0x45	; 69
    49ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    49be:	08 95       	ret

000049c0 <twi_disable>:
    49c0:	ec eb       	ldi	r30, 0xBC	; 188
    49c2:	f0 e0       	ldi	r31, 0x00	; 0
    49c4:	80 81       	ld	r24, Z
    49c6:	8a 7b       	andi	r24, 0xBA	; 186
    49c8:	80 83       	st	Z, r24
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	82 e1       	ldi	r24, 0x12	; 18
    49ce:	0e 94 64 11 	call	0x22c8	; 0x22c8 <digitalWrite>
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	83 e1       	ldi	r24, 0x13	; 19
    49d6:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <digitalWrite>

000049da <twi_setFrequency>:
    49da:	9b 01       	movw	r18, r22
    49dc:	ac 01       	movw	r20, r24
    49de:	60 e0       	ldi	r22, 0x00	; 0
    49e0:	72 e1       	ldi	r23, 0x12	; 18
    49e2:	8a e7       	ldi	r24, 0x7A	; 122
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <__udivmodsi4>
    49ea:	da 01       	movw	r26, r20
    49ec:	c9 01       	movw	r24, r18
    49ee:	40 97       	sbiw	r24, 0x10	; 16
    49f0:	a1 09       	sbc	r26, r1
    49f2:	b1 09       	sbc	r27, r1
    49f4:	b6 95       	lsr	r27
    49f6:	a7 95       	ror	r26
    49f8:	97 95       	ror	r25
    49fa:	87 95       	ror	r24
    49fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4a00:	08 95       	ret

00004a02 <twi_transmit>:
    4a02:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <twi_txBufferLength>
    4a06:	26 2f       	mov	r18, r22
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	24 0f       	add	r18, r20
    4a0c:	31 1d       	adc	r19, r1
    4a0e:	21 32       	cpi	r18, 0x21	; 33
    4a10:	31 05       	cpc	r19, r1
    4a12:	dc f4       	brge	.+54     	; 0x4a4a <twi_transmit+0x48>
    4a14:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <twi_state>
    4a18:	24 30       	cpi	r18, 0x04	; 4
    4a1a:	c9 f4       	brne	.+50     	; 0x4a4e <twi_transmit+0x4c>
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	80 e0       	ldi	r24, 0x00	; 0
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	86 17       	cp	r24, r22
    4a24:	58 f4       	brcc	.+22     	; 0x4a3c <twi_transmit+0x3a>
    4a26:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <twi_txBufferLength>
    4a2a:	21 91       	ld	r18, Z+
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	a0 5a       	subi	r26, 0xA0	; 160
    4a30:	bc 4f       	sbci	r27, 0xFC	; 252
    4a32:	a3 0f       	add	r26, r19
    4a34:	b1 1d       	adc	r27, r1
    4a36:	2c 93       	st	X, r18
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	f3 cf       	rjmp	.-26     	; 0x4a22 <twi_transmit+0x20>
    4a3c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    4a40:	68 0f       	add	r22, r24
    4a42:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <twi_txBufferLength>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	08 95       	ret
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	08 95       	ret
    4a4e:	82 e0       	ldi	r24, 0x02	; 2
    4a50:	08 95       	ret

00004a52 <twi_attachSlaveRxEvent>:
    4a52:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <twi_onSlaveReceive+0x1>
    4a56:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_onSlaveReceive>
    4a5a:	08 95       	ret

00004a5c <twi_attachSlaveTxEvent>:
    4a5c:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <twi_onSlaveTransmit+0x1>
    4a60:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_onSlaveTransmit>
    4a64:	08 95       	ret

00004a66 <twi_releaseBus>:
    4a66:	85 ec       	ldi	r24, 0xC5	; 197
    4a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4a6c:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    4a70:	08 95       	ret

00004a72 <twi_handleTimeout>:
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	91 e0       	ldi	r25, 0x01	; 1
    4a78:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <twi_timed_out_flag>
    4a7c:	88 23       	and	r24, r24
    4a7e:	61 f0       	breq	.+24     	; 0x4a98 <twi_handleTimeout+0x26>
    4a80:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4a84:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4a88:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <twi_disable>
    4a8c:	0e 94 c2 24 	call	0x4984	; 0x4984 <twi_init>
    4a90:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4a94:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	08 95       	ret

00004a9e <twi_writeTo>:
    4a9e:	4f 92       	push	r4
    4aa0:	5f 92       	push	r5
    4aa2:	6f 92       	push	r6
    4aa4:	7f 92       	push	r7
    4aa6:	8f 92       	push	r8
    4aa8:	9f 92       	push	r9
    4aaa:	af 92       	push	r10
    4aac:	bf 92       	push	r11
    4aae:	cf 92       	push	r12
    4ab0:	df 92       	push	r13
    4ab2:	ef 92       	push	r14
    4ab4:	ff 92       	push	r15
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	41 32       	cpi	r20, 0x21	; 33
    4ac0:	08 f0       	brcs	.+2      	; 0x4ac4 <twi_writeTo+0x26>
    4ac2:	c6 c0       	rjmp	.+396    	; 0x4c50 <twi_writeTo+0x1b2>
    4ac4:	12 2f       	mov	r17, r18
    4ac6:	f4 2e       	mov	r15, r20
    4ac8:	d7 2e       	mov	r13, r23
    4aca:	e6 2e       	mov	r14, r22
    4acc:	d8 2f       	mov	r29, r24
    4ace:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4ad2:	4b 01       	movw	r8, r22
    4ad4:	5c 01       	movw	r10, r24
    4ad6:	c0 91 af 03 	lds	r28, 0x03AF	; 0x8003af <twi_state>
    4ada:	cc 23       	and	r28, r28
    4adc:	11 f1       	breq	.+68     	; 0x4b22 <twi_writeTo+0x84>
    4ade:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4ae2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4ae6:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4aea:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4aee:	89 2b       	or	r24, r25
    4af0:	8a 2b       	or	r24, r26
    4af2:	8b 2b       	or	r24, r27
    4af4:	81 f3       	breq	.-32     	; 0x4ad6 <twi_writeTo+0x38>
    4af6:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4afa:	40 90 a8 03 	lds	r4, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4afe:	50 90 a9 03 	lds	r5, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4b02:	60 90 aa 03 	lds	r6, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4b06:	70 90 ab 03 	lds	r7, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	88 19       	sub	r24, r8
    4b10:	99 09       	sbc	r25, r9
    4b12:	aa 09       	sbc	r26, r10
    4b14:	bb 09       	sbc	r27, r11
    4b16:	48 16       	cp	r4, r24
    4b18:	59 06       	cpc	r5, r25
    4b1a:	6a 06       	cpc	r6, r26
    4b1c:	7b 06       	cpc	r7, r27
    4b1e:	d8 f6       	brcc	.-74     	; 0x4ad6 <twi_writeTo+0x38>
    4b20:	83 c0       	rjmp	.+262    	; 0x4c28 <twi_writeTo+0x18a>
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
    4b28:	00 93 ad 03 	sts	0x03AD, r16	; 0x8003ad <twi_sendStop>
    4b2c:	8f ef       	ldi	r24, 0xFF	; 255
    4b2e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
    4b32:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <twi_masterBufferIndex>
    4b36:	f0 92 80 03 	sts	0x0380, r15	; 0x800380 <twi_masterBufferLength>
    4b3a:	9e 2d       	mov	r25, r14
    4b3c:	a2 e8       	ldi	r26, 0x82	; 130
    4b3e:	b3 e0       	ldi	r27, 0x03	; 3
    4b40:	ee 2d       	mov	r30, r14
    4b42:	fd 2d       	mov	r31, r13
    4b44:	8e 2f       	mov	r24, r30
    4b46:	89 1b       	sub	r24, r25
    4b48:	8f 15       	cp	r24, r15
    4b4a:	18 f4       	brcc	.+6      	; 0x4b52 <twi_writeTo+0xb4>
    4b4c:	81 91       	ld	r24, Z+
    4b4e:	8d 93       	st	X+, r24
    4b50:	f9 cf       	rjmp	.-14     	; 0x4b44 <twi_writeTo+0xa6>
    4b52:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <twi_slarw>
    4b56:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <twi_slarw>
    4b5a:	dd 0f       	add	r29, r29
    4b5c:	d9 2b       	or	r29, r25
    4b5e:	d0 93 ae 03 	sts	0x03AE, r29	; 0x8003ae <twi_slarw>
    4b62:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_inRepStart>
    4b66:	81 30       	cpi	r24, 0x01	; 1
    4b68:	89 f5       	brne	.+98     	; 0x4bcc <twi_writeTo+0x12e>
    4b6a:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_inRepStart>
    4b6e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4b72:	6b 01       	movw	r12, r22
    4b74:	7c 01       	movw	r14, r24
    4b76:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_slarw>
    4b7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4b7e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4b82:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4b86:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4b8a:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4b8e:	89 2b       	or	r24, r25
    4b90:	8a 2b       	or	r24, r26
    4b92:	8b 2b       	or	r24, r27
    4b94:	a9 f0       	breq	.+42     	; 0x4bc0 <twi_writeTo+0x122>
    4b96:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4b9a:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4b9e:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4ba2:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4ba6:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	8c 19       	sub	r24, r12
    4bb0:	9d 09       	sbc	r25, r13
    4bb2:	ae 09       	sbc	r26, r14
    4bb4:	bf 09       	sbc	r27, r15
    4bb6:	88 16       	cp	r8, r24
    4bb8:	99 06       	cpc	r9, r25
    4bba:	aa 06       	cpc	r10, r26
    4bbc:	bb 06       	cpc	r11, r27
    4bbe:	a0 f1       	brcs	.+104    	; 0x4c28 <twi_writeTo+0x18a>
    4bc0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4bc4:	83 fd       	sbrc	r24, 3
    4bc6:	d7 cf       	rjmp	.-82     	; 0x4b76 <twi_writeTo+0xd8>
    4bc8:	85 ec       	ldi	r24, 0xC5	; 197
    4bca:	01 c0       	rjmp	.+2      	; 0x4bce <twi_writeTo+0x130>
    4bcc:	85 ee       	ldi	r24, 0xE5	; 229
    4bce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4bd2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4bd6:	6b 01       	movw	r12, r22
    4bd8:	7c 01       	movw	r14, r24
    4bda:	11 23       	and	r17, r17
    4bdc:	59 f1       	breq	.+86     	; 0x4c34 <twi_writeTo+0x196>
    4bde:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <twi_state>
    4be2:	82 30       	cpi	r24, 0x02	; 2
    4be4:	39 f5       	brne	.+78     	; 0x4c34 <twi_writeTo+0x196>
    4be6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4bea:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4bee:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4bf2:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4bf6:	89 2b       	or	r24, r25
    4bf8:	8a 2b       	or	r24, r26
    4bfa:	8b 2b       	or	r24, r27
    4bfc:	71 f3       	breq	.-36     	; 0x4bda <twi_writeTo+0x13c>
    4bfe:	0e 94 63 10 	call	0x20c6	; 0x20c6 <micros>
    4c02:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4c06:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4c0a:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4c0e:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	8c 19       	sub	r24, r12
    4c18:	9d 09       	sbc	r25, r13
    4c1a:	ae 09       	sbc	r26, r14
    4c1c:	bf 09       	sbc	r27, r15
    4c1e:	88 16       	cp	r8, r24
    4c20:	99 06       	cpc	r9, r25
    4c22:	aa 06       	cpc	r10, r26
    4c24:	bb 06       	cpc	r11, r27
    4c26:	c8 f6       	brcc	.-78     	; 0x4bda <twi_writeTo+0x13c>
    4c28:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    4c2c:	0e 94 39 25 	call	0x4a72	; 0x4a72 <twi_handleTimeout>
    4c30:	c5 e0       	ldi	r28, 0x05	; 5
    4c32:	13 c0       	rjmp	.+38     	; 0x4c5a <twi_writeTo+0x1bc>
    4c34:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    4c38:	8f 3f       	cpi	r24, 0xFF	; 255
    4c3a:	79 f0       	breq	.+30     	; 0x4c5a <twi_writeTo+0x1bc>
    4c3c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    4c40:	80 32       	cpi	r24, 0x20	; 32
    4c42:	41 f0       	breq	.+16     	; 0x4c54 <twi_writeTo+0x1b6>
    4c44:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    4c48:	80 33       	cpi	r24, 0x30	; 48
    4c4a:	31 f0       	breq	.+12     	; 0x4c58 <twi_writeTo+0x1ba>
    4c4c:	c4 e0       	ldi	r28, 0x04	; 4
    4c4e:	05 c0       	rjmp	.+10     	; 0x4c5a <twi_writeTo+0x1bc>
    4c50:	c1 e0       	ldi	r28, 0x01	; 1
    4c52:	03 c0       	rjmp	.+6      	; 0x4c5a <twi_writeTo+0x1bc>
    4c54:	c2 e0       	ldi	r28, 0x02	; 2
    4c56:	01 c0       	rjmp	.+2      	; 0x4c5a <twi_writeTo+0x1bc>
    4c58:	c3 e0       	ldi	r28, 0x03	; 3
    4c5a:	8c 2f       	mov	r24, r28
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	1f 91       	pop	r17
    4c62:	0f 91       	pop	r16
    4c64:	ff 90       	pop	r15
    4c66:	ef 90       	pop	r14
    4c68:	df 90       	pop	r13
    4c6a:	cf 90       	pop	r12
    4c6c:	bf 90       	pop	r11
    4c6e:	af 90       	pop	r10
    4c70:	9f 90       	pop	r9
    4c72:	8f 90       	pop	r8
    4c74:	7f 90       	pop	r7
    4c76:	6f 90       	pop	r6
    4c78:	5f 90       	pop	r5
    4c7a:	4f 90       	pop	r4
    4c7c:	08 95       	ret

00004c7e <twi_stop>:
    4c7e:	85 ed       	ldi	r24, 0xD5	; 213
    4c80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4c84:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4c88:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4c8c:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4c90:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4c94:	07 96       	adiw	r24, 0x07	; 7
    4c96:	a1 1d       	adc	r26, r1
    4c98:	b1 1d       	adc	r27, r1
    4c9a:	23 e0       	ldi	r18, 0x03	; 3
    4c9c:	b6 95       	lsr	r27
    4c9e:	a7 95       	ror	r26
    4ca0:	97 95       	ror	r25
    4ca2:	87 95       	ror	r24
    4ca4:	2a 95       	dec	r18
    4ca6:	d1 f7       	brne	.-12     	; 0x4c9c <twi_stop+0x1e>
    4ca8:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4cac:	24 ff       	sbrs	r18, 4
    4cae:	1c c0       	rjmp	.+56     	; 0x4ce8 <twi_stop+0x6a>
    4cb0:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <twi_timeout_us>
    4cb4:	50 91 a9 03 	lds	r21, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    4cb8:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    4cbc:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    4cc0:	45 2b       	or	r20, r21
    4cc2:	46 2b       	or	r20, r22
    4cc4:	47 2b       	or	r20, r23
    4cc6:	81 f3       	breq	.-32     	; 0x4ca8 <twi_stop+0x2a>
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	a1 05       	cpc	r26, r1
    4ccc:	b1 05       	cpc	r27, r1
    4cce:	41 f0       	breq	.+16     	; 0x4ce0 <twi_stop+0x62>
    4cd0:	2a e1       	ldi	r18, 0x1A	; 26
    4cd2:	2a 95       	dec	r18
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <twi_stop+0x54>
    4cd6:	00 c0       	rjmp	.+0      	; 0x4cd8 <twi_stop+0x5a>
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	a1 09       	sbc	r26, r1
    4cdc:	b1 09       	sbc	r27, r1
    4cde:	e4 cf       	rjmp	.-56     	; 0x4ca8 <twi_stop+0x2a>
    4ce0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    4ce4:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <twi_handleTimeout>
    4ce8:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    4cec:	08 95       	ret

00004cee <__vector_24>:

ISR(TWI_vect)
{
    4cee:	1f 92       	push	r1
    4cf0:	0f 92       	push	r0
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	0f 92       	push	r0
    4cf6:	11 24       	eor	r1, r1
    4cf8:	2f 93       	push	r18
    4cfa:	3f 93       	push	r19
    4cfc:	4f 93       	push	r20
    4cfe:	5f 93       	push	r21
    4d00:	6f 93       	push	r22
    4d02:	7f 93       	push	r23
    4d04:	8f 93       	push	r24
    4d06:	9f 93       	push	r25
    4d08:	af 93       	push	r26
    4d0a:	bf 93       	push	r27
    4d0c:	ef 93       	push	r30
    4d0e:	ff 93       	push	r31
  switch(TW_STATUS){
    4d10:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4d14:	88 7f       	andi	r24, 0xF8	; 248
    4d16:	80 36       	cpi	r24, 0x60	; 96
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <__vector_24+0x2e>
    4d1a:	9e c0       	rjmp	.+316    	; 0x4e58 <__vector_24+0x16a>
    4d1c:	78 f5       	brcc	.+94     	; 0x4d7c <__vector_24+0x8e>
    4d1e:	88 32       	cpi	r24, 0x28	; 40
    4d20:	09 f4       	brne	.+2      	; 0x4d24 <__vector_24+0x36>
    4d22:	5d c0       	rjmp	.+186    	; 0x4dde <__vector_24+0xf0>
    4d24:	90 f4       	brcc	.+36     	; 0x4d4a <__vector_24+0x5c>
    4d26:	80 31       	cpi	r24, 0x10	; 16
    4d28:	09 f4       	brne	.+2      	; 0x4d2c <__vector_24+0x3e>
    4d2a:	56 c0       	rjmp	.+172    	; 0x4dd8 <__vector_24+0xea>
    4d2c:	38 f4       	brcc	.+14     	; 0x4d3c <__vector_24+0x4e>
    4d2e:	88 23       	and	r24, r24
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <__vector_24+0x46>
    4d32:	f5 c0       	rjmp	.+490    	; 0x4f1e <__vector_24+0x230>
    4d34:	88 30       	cpi	r24, 0x08	; 8
    4d36:	09 f4       	brne	.+2      	; 0x4d3a <__vector_24+0x4c>
    4d38:	4f c0       	rjmp	.+158    	; 0x4dd8 <__vector_24+0xea>
    4d3a:	f5 c0       	rjmp	.+490    	; 0x4f26 <__vector_24+0x238>
    4d3c:	88 31       	cpi	r24, 0x18	; 24
    4d3e:	09 f4       	brne	.+2      	; 0x4d42 <__vector_24+0x54>
    4d40:	4e c0       	rjmp	.+156    	; 0x4dde <__vector_24+0xf0>
    4d42:	80 32       	cpi	r24, 0x20	; 32
    4d44:	09 f4       	brne	.+2      	; 0x4d48 <__vector_24+0x5a>
    4d46:	5f c0       	rjmp	.+190    	; 0x4e06 <__vector_24+0x118>
    4d48:	ee c0       	rjmp	.+476    	; 0x4f26 <__vector_24+0x238>
    4d4a:	80 34       	cpi	r24, 0x40	; 64
    4d4c:	09 f4       	brne	.+2      	; 0x4d50 <__vector_24+0x62>
    4d4e:	6a c0       	rjmp	.+212    	; 0x4e24 <__vector_24+0x136>
    4d50:	58 f4       	brcc	.+22     	; 0x4d68 <__vector_24+0x7a>
    4d52:	80 33       	cpi	r24, 0x30	; 48
    4d54:	09 f4       	brne	.+2      	; 0x4d58 <__vector_24+0x6a>
    4d56:	57 c0       	rjmp	.+174    	; 0x4e06 <__vector_24+0x118>
    4d58:	88 33       	cpi	r24, 0x38	; 56
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <__vector_24+0x70>
    4d5c:	e4 c0       	rjmp	.+456    	; 0x4f26 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4d5e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
      twi_releaseBus();
    4d62:	0e 94 33 25 	call	0x4a66	; 0x4a66 <twi_releaseBus>
      break;
    4d66:	df c0       	rjmp	.+446    	; 0x4f26 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4d68:	80 35       	cpi	r24, 0x50	; 80
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <__vector_24+0x80>
    4d6c:	4f c0       	rjmp	.+158    	; 0x4e0c <__vector_24+0x11e>
    4d6e:	88 35       	cpi	r24, 0x58	; 88
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <__vector_24+0x86>
    4d72:	5d c0       	rjmp	.+186    	; 0x4e2e <__vector_24+0x140>
    4d74:	88 34       	cpi	r24, 0x48	; 72
    4d76:	09 f0       	breq	.+2      	; 0x4d7a <__vector_24+0x8c>
    4d78:	d6 c0       	rjmp	.+428    	; 0x4f26 <__vector_24+0x238>
    4d7a:	d3 c0       	rjmp	.+422    	; 0x4f22 <__vector_24+0x234>
    4d7c:	88 39       	cpi	r24, 0x98	; 152
    4d7e:	09 f4       	brne	.+2      	; 0x4d82 <__vector_24+0x94>
    4d80:	c4 c0       	rjmp	.+392    	; 0x4f0a <__vector_24+0x21c>
    4d82:	a8 f4       	brcc	.+42     	; 0x4dae <__vector_24+0xc0>
    4d84:	88 37       	cpi	r24, 0x78	; 120
    4d86:	09 f4       	brne	.+2      	; 0x4d8a <__vector_24+0x9c>
    4d88:	67 c0       	rjmp	.+206    	; 0x4e58 <__vector_24+0x16a>
    4d8a:	38 f4       	brcc	.+14     	; 0x4d9a <__vector_24+0xac>
    4d8c:	88 36       	cpi	r24, 0x68	; 104
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <__vector_24+0xa4>
    4d90:	63 c0       	rjmp	.+198    	; 0x4e58 <__vector_24+0x16a>
    4d92:	80 37       	cpi	r24, 0x70	; 112
    4d94:	09 f4       	brne	.+2      	; 0x4d98 <__vector_24+0xaa>
    4d96:	60 c0       	rjmp	.+192    	; 0x4e58 <__vector_24+0x16a>
    4d98:	c6 c0       	rjmp	.+396    	; 0x4f26 <__vector_24+0x238>
    4d9a:	88 38       	cpi	r24, 0x88	; 136
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <__vector_24+0xb2>
    4d9e:	b5 c0       	rjmp	.+362    	; 0x4f0a <__vector_24+0x21c>
    4da0:	80 39       	cpi	r24, 0x90	; 144
    4da2:	09 f4       	brne	.+2      	; 0x4da6 <__vector_24+0xb8>
    4da4:	5f c0       	rjmp	.+190    	; 0x4e64 <__vector_24+0x176>
    4da6:	80 38       	cpi	r24, 0x80	; 128
    4da8:	09 f0       	breq	.+2      	; 0x4dac <__vector_24+0xbe>
    4daa:	bd c0       	rjmp	.+378    	; 0x4f26 <__vector_24+0x238>
    4dac:	5b c0       	rjmp	.+182    	; 0x4e64 <__vector_24+0x176>
    4dae:	80 3b       	cpi	r24, 0xB0	; 176
    4db0:	09 f4       	brne	.+2      	; 0x4db4 <__vector_24+0xc6>
    4db2:	83 c0       	rjmp	.+262    	; 0x4eba <__vector_24+0x1cc>
    4db4:	38 f4       	brcc	.+14     	; 0x4dc4 <__vector_24+0xd6>
    4db6:	80 3a       	cpi	r24, 0xA0	; 160
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <__vector_24+0xce>
    4dba:	66 c0       	rjmp	.+204    	; 0x4e88 <__vector_24+0x19a>
    4dbc:	88 3a       	cpi	r24, 0xA8	; 168
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <__vector_24+0xd4>
    4dc0:	7c c0       	rjmp	.+248    	; 0x4eba <__vector_24+0x1cc>
    4dc2:	b1 c0       	rjmp	.+354    	; 0x4f26 <__vector_24+0x238>
    4dc4:	80 3c       	cpi	r24, 0xC0	; 192
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <__vector_24+0xdc>
    4dc8:	a4 c0       	rjmp	.+328    	; 0x4f12 <__vector_24+0x224>
    4dca:	88 3c       	cpi	r24, 0xC8	; 200
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <__vector_24+0xe2>
    4dce:	a1 c0       	rjmp	.+322    	; 0x4f12 <__vector_24+0x224>
    4dd0:	88 3b       	cpi	r24, 0xB8	; 184
    4dd2:	09 f4       	brne	.+2      	; 0x4dd6 <__vector_24+0xe8>
    4dd4:	87 c0       	rjmp	.+270    	; 0x4ee4 <__vector_24+0x1f6>
    4dd6:	a7 c0       	rjmp	.+334    	; 0x4f26 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4dd8:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_slarw>
    4ddc:	10 c0       	rjmp	.+32     	; 0x4dfe <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4dde:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <twi_masterBufferIndex>
    4de2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <twi_masterBufferLength>
    4de6:	98 17       	cp	r25, r24
    4de8:	70 f5       	brcc	.+92     	; 0x4e46 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4dea:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	8e 0f       	add	r24, r30
    4df2:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	ee 57       	subi	r30, 0x7E	; 126
    4dfa:	fc 4f       	sbci	r31, 0xFC	; 252
    4dfc:	80 81       	ld	r24, Z
    4dfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4e02:	85 ec       	ldi	r24, 0xC5	; 197
    4e04:	83 c0       	rjmp	.+262    	; 0x4f0c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4e06:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
    4e0a:	8b c0       	rjmp	.+278    	; 0x4f22 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e0c:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	8e 0f       	add	r24, r30
    4e14:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    4e18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	ee 57       	subi	r30, 0x7E	; 126
    4e20:	fc 4f       	sbci	r31, 0xFC	; 252
    4e22:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e24:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <twi_masterBufferIndex>
    4e28:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <twi_masterBufferLength>
    4e2c:	6b c0       	rjmp	.+214    	; 0x4f04 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e2e:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	8e 0f       	add	r24, r30
    4e36:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    4e3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4e3e:	f0 e0       	ldi	r31, 0x00	; 0
    4e40:	ee 57       	subi	r30, 0x7E	; 126
    4e42:	fc 4f       	sbci	r31, 0xFC	; 252
    4e44:	80 83       	st	Z, r24
      if (twi_sendStop){
    4e46:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_sendStop>
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	6a c0       	rjmp	.+212    	; 0x4f22 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4e54:	84 ea       	ldi	r24, 0xA4	; 164
    4e56:	5e c0       	rjmp	.+188    	; 0x4f14 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4e58:	83 e0       	ldi	r24, 0x03	; 3
    4e5a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4e5e:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_rxBufferIndex>
    4e62:	cf cf       	rjmp	.-98     	; 0x4e02 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e64:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_rxBufferIndex>
    4e68:	80 32       	cpi	r24, 0x20	; 32
    4e6a:	08 f0       	brcs	.+2      	; 0x4e6e <__vector_24+0x180>
    4e6c:	4e c0       	rjmp	.+156    	; 0x4f0a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4e6e:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_rxBufferIndex>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	8e 0f       	add	r24, r30
    4e76:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_rxBufferIndex>
    4e7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	e2 5c       	subi	r30, 0xC2	; 194
    4e82:	fc 4f       	sbci	r31, 0xFC	; 252
    4e84:	80 83       	st	Z, r24
    4e86:	bd cf       	rjmp	.-134    	; 0x4e02 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4e88:	0e 94 33 25 	call	0x4a66	; 0x4a66 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e8c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_rxBufferIndex>
    4e90:	80 32       	cpi	r24, 0x20	; 32
    4e92:	30 f4       	brcc	.+12     	; 0x4ea0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4e94:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_rxBufferIndex>
    4e98:	f0 e0       	ldi	r31, 0x00	; 0
    4e9a:	e2 5c       	subi	r30, 0xC2	; 194
    4e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    4e9e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4ea0:	60 91 3d 03 	lds	r22, 0x033D	; 0x80033d <twi_rxBufferIndex>
    4ea4:	70 e0       	ldi	r23, 0x00	; 0
    4ea6:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <twi_onSlaveReceive>
    4eaa:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <twi_onSlaveReceive+0x1>
    4eae:	8e e3       	ldi	r24, 0x3E	; 62
    4eb0:	93 e0       	ldi	r25, 0x03	; 3
    4eb2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4eb4:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_rxBufferIndex>
      break;
    4eb8:	36 c0       	rjmp	.+108    	; 0x4f26 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4eba:	84 e0       	ldi	r24, 0x04	; 4
    4ebc:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4ec0:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4ec4:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4ec8:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <twi_onSlaveTransmit>
    4ecc:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <twi_onSlaveTransmit+0x1>
    4ed0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4ed2:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	05 c0       	rjmp	.+10     	; 0x4ee4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4ee0:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4ee4:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <twi_txBufferIndex>
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	8e 0f       	add	r24, r30
    4eec:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <twi_txBufferIndex>
    4ef0:	f0 e0       	ldi	r31, 0x00	; 0
    4ef2:	e0 5a       	subi	r30, 0xA0	; 160
    4ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ef6:	80 81       	ld	r24, Z
    4ef8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4efc:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <twi_txBufferIndex>
    4f00:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    4f04:	98 17       	cp	r25, r24
    4f06:	08 f4       	brcc	.+2      	; 0x4f0a <__vector_24+0x21c>
    4f08:	7c cf       	rjmp	.-264    	; 0x4e02 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4f0a:	85 e8       	ldi	r24, 0x85	; 133
    4f0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4f10:	0a c0       	rjmp	.+20     	; 0x4f26 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f12:	85 ec       	ldi	r24, 0xC5	; 197
    4f14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4f18:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
      break;
    4f1c:	04 c0       	rjmp	.+8      	; 0x4f26 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4f1e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <twi_error>
      twi_stop();
    4f22:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <twi_stop>
      break;
  }
}
    4f26:	ff 91       	pop	r31
    4f28:	ef 91       	pop	r30
    4f2a:	bf 91       	pop	r27
    4f2c:	af 91       	pop	r26
    4f2e:	9f 91       	pop	r25
    4f30:	8f 91       	pop	r24
    4f32:	7f 91       	pop	r23
    4f34:	6f 91       	pop	r22
    4f36:	5f 91       	pop	r21
    4f38:	4f 91       	pop	r20
    4f3a:	3f 91       	pop	r19
    4f3c:	2f 91       	pop	r18
    4f3e:	0f 90       	pop	r0
    4f40:	0f be       	out	0x3f, r0	; 63
    4f42:	0f 90       	pop	r0
    4f44:	1f 90       	pop	r1
    4f46:	18 95       	reti

00004f48 <__subsf3>:
    4f48:	50 58       	subi	r21, 0x80	; 128

00004f4a <__addsf3>:
    4f4a:	bb 27       	eor	r27, r27
    4f4c:	aa 27       	eor	r26, r26
    4f4e:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__addsf3x>
    4f52:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_round>
    4f56:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_pscA>
    4f5a:	38 f0       	brcs	.+14     	; 0x4f6a <__addsf3+0x20>
    4f5c:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_pscB>
    4f60:	20 f0       	brcs	.+8      	; 0x4f6a <__addsf3+0x20>
    4f62:	39 f4       	brne	.+14     	; 0x4f72 <__addsf3+0x28>
    4f64:	9f 3f       	cpi	r25, 0xFF	; 255
    4f66:	19 f4       	brne	.+6      	; 0x4f6e <__addsf3+0x24>
    4f68:	26 f4       	brtc	.+8      	; 0x4f72 <__addsf3+0x28>
    4f6a:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_nan>
    4f6e:	0e f4       	brtc	.+2      	; 0x4f72 <__addsf3+0x28>
    4f70:	e0 95       	com	r30
    4f72:	e7 fb       	bst	r30, 7
    4f74:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_inf>

00004f78 <__addsf3x>:
    4f78:	e9 2f       	mov	r30, r25
    4f7a:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_split3>
    4f7e:	58 f3       	brcs	.-42     	; 0x4f56 <__addsf3+0xc>
    4f80:	ba 17       	cp	r27, r26
    4f82:	62 07       	cpc	r22, r18
    4f84:	73 07       	cpc	r23, r19
    4f86:	84 07       	cpc	r24, r20
    4f88:	95 07       	cpc	r25, r21
    4f8a:	20 f0       	brcs	.+8      	; 0x4f94 <__addsf3x+0x1c>
    4f8c:	79 f4       	brne	.+30     	; 0x4fac <__addsf3x+0x34>
    4f8e:	a6 f5       	brtc	.+104    	; 0x4ff8 <__addsf3x+0x80>
    4f90:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_zero>
    4f94:	0e f4       	brtc	.+2      	; 0x4f98 <__addsf3x+0x20>
    4f96:	e0 95       	com	r30
    4f98:	0b 2e       	mov	r0, r27
    4f9a:	ba 2f       	mov	r27, r26
    4f9c:	a0 2d       	mov	r26, r0
    4f9e:	0b 01       	movw	r0, r22
    4fa0:	b9 01       	movw	r22, r18
    4fa2:	90 01       	movw	r18, r0
    4fa4:	0c 01       	movw	r0, r24
    4fa6:	ca 01       	movw	r24, r20
    4fa8:	a0 01       	movw	r20, r0
    4faa:	11 24       	eor	r1, r1
    4fac:	ff 27       	eor	r31, r31
    4fae:	59 1b       	sub	r21, r25
    4fb0:	99 f0       	breq	.+38     	; 0x4fd8 <__addsf3x+0x60>
    4fb2:	59 3f       	cpi	r21, 0xF9	; 249
    4fb4:	50 f4       	brcc	.+20     	; 0x4fca <__addsf3x+0x52>
    4fb6:	50 3e       	cpi	r21, 0xE0	; 224
    4fb8:	68 f1       	brcs	.+90     	; 0x5014 <__addsf3x+0x9c>
    4fba:	1a 16       	cp	r1, r26
    4fbc:	f0 40       	sbci	r31, 0x00	; 0
    4fbe:	a2 2f       	mov	r26, r18
    4fc0:	23 2f       	mov	r18, r19
    4fc2:	34 2f       	mov	r19, r20
    4fc4:	44 27       	eor	r20, r20
    4fc6:	58 5f       	subi	r21, 0xF8	; 248
    4fc8:	f3 cf       	rjmp	.-26     	; 0x4fb0 <__addsf3x+0x38>
    4fca:	46 95       	lsr	r20
    4fcc:	37 95       	ror	r19
    4fce:	27 95       	ror	r18
    4fd0:	a7 95       	ror	r26
    4fd2:	f0 40       	sbci	r31, 0x00	; 0
    4fd4:	53 95       	inc	r21
    4fd6:	c9 f7       	brne	.-14     	; 0x4fca <__addsf3x+0x52>
    4fd8:	7e f4       	brtc	.+30     	; 0x4ff8 <__addsf3x+0x80>
    4fda:	1f 16       	cp	r1, r31
    4fdc:	ba 0b       	sbc	r27, r26
    4fde:	62 0b       	sbc	r22, r18
    4fe0:	73 0b       	sbc	r23, r19
    4fe2:	84 0b       	sbc	r24, r20
    4fe4:	ba f0       	brmi	.+46     	; 0x5014 <__addsf3x+0x9c>
    4fe6:	91 50       	subi	r25, 0x01	; 1
    4fe8:	a1 f0       	breq	.+40     	; 0x5012 <__addsf3x+0x9a>
    4fea:	ff 0f       	add	r31, r31
    4fec:	bb 1f       	adc	r27, r27
    4fee:	66 1f       	adc	r22, r22
    4ff0:	77 1f       	adc	r23, r23
    4ff2:	88 1f       	adc	r24, r24
    4ff4:	c2 f7       	brpl	.-16     	; 0x4fe6 <__addsf3x+0x6e>
    4ff6:	0e c0       	rjmp	.+28     	; 0x5014 <__addsf3x+0x9c>
    4ff8:	ba 0f       	add	r27, r26
    4ffa:	62 1f       	adc	r22, r18
    4ffc:	73 1f       	adc	r23, r19
    4ffe:	84 1f       	adc	r24, r20
    5000:	48 f4       	brcc	.+18     	; 0x5014 <__addsf3x+0x9c>
    5002:	87 95       	ror	r24
    5004:	77 95       	ror	r23
    5006:	67 95       	ror	r22
    5008:	b7 95       	ror	r27
    500a:	f7 95       	ror	r31
    500c:	9e 3f       	cpi	r25, 0xFE	; 254
    500e:	08 f0       	brcs	.+2      	; 0x5012 <__addsf3x+0x9a>
    5010:	b0 cf       	rjmp	.-160    	; 0x4f72 <__addsf3+0x28>
    5012:	93 95       	inc	r25
    5014:	88 0f       	add	r24, r24
    5016:	08 f0       	brcs	.+2      	; 0x501a <__addsf3x+0xa2>
    5018:	99 27       	eor	r25, r25
    501a:	ee 0f       	add	r30, r30
    501c:	97 95       	ror	r25
    501e:	87 95       	ror	r24
    5020:	08 95       	ret

00005022 <__cmpsf2>:
    5022:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_cmp>
    5026:	08 f4       	brcc	.+2      	; 0x502a <__cmpsf2+0x8>
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	08 95       	ret

0000502c <__fixunssfsi>:
    502c:	0e 94 27 0c 	call	0x184e	; 0x184e <__fp_splitA>
    5030:	88 f0       	brcs	.+34     	; 0x5054 <__fixunssfsi+0x28>
    5032:	9f 57       	subi	r25, 0x7F	; 127
    5034:	98 f0       	brcs	.+38     	; 0x505c <__fixunssfsi+0x30>
    5036:	b9 2f       	mov	r27, r25
    5038:	99 27       	eor	r25, r25
    503a:	b7 51       	subi	r27, 0x17	; 23
    503c:	b0 f0       	brcs	.+44     	; 0x506a <__fixunssfsi+0x3e>
    503e:	e1 f0       	breq	.+56     	; 0x5078 <__fixunssfsi+0x4c>
    5040:	66 0f       	add	r22, r22
    5042:	77 1f       	adc	r23, r23
    5044:	88 1f       	adc	r24, r24
    5046:	99 1f       	adc	r25, r25
    5048:	1a f0       	brmi	.+6      	; 0x5050 <__fixunssfsi+0x24>
    504a:	ba 95       	dec	r27
    504c:	c9 f7       	brne	.-14     	; 0x5040 <__fixunssfsi+0x14>
    504e:	14 c0       	rjmp	.+40     	; 0x5078 <__fixunssfsi+0x4c>
    5050:	b1 30       	cpi	r27, 0x01	; 1
    5052:	91 f0       	breq	.+36     	; 0x5078 <__fixunssfsi+0x4c>
    5054:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_zero>
    5058:	b1 e0       	ldi	r27, 0x01	; 1
    505a:	08 95       	ret
    505c:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_zero>
    5060:	67 2f       	mov	r22, r23
    5062:	78 2f       	mov	r23, r24
    5064:	88 27       	eor	r24, r24
    5066:	b8 5f       	subi	r27, 0xF8	; 248
    5068:	39 f0       	breq	.+14     	; 0x5078 <__fixunssfsi+0x4c>
    506a:	b9 3f       	cpi	r27, 0xF9	; 249
    506c:	cc f3       	brlt	.-14     	; 0x5060 <__fixunssfsi+0x34>
    506e:	86 95       	lsr	r24
    5070:	77 95       	ror	r23
    5072:	67 95       	ror	r22
    5074:	b3 95       	inc	r27
    5076:	d9 f7       	brne	.-10     	; 0x506e <__fixunssfsi+0x42>
    5078:	3e f4       	brtc	.+14     	; 0x5088 <__fixunssfsi+0x5c>
    507a:	90 95       	com	r25
    507c:	80 95       	com	r24
    507e:	70 95       	com	r23
    5080:	61 95       	neg	r22
    5082:	7f 4f       	sbci	r23, 0xFF	; 255
    5084:	8f 4f       	sbci	r24, 0xFF	; 255
    5086:	9f 4f       	sbci	r25, 0xFF	; 255
    5088:	08 95       	ret

0000508a <__fp_cmp>:
    508a:	99 0f       	add	r25, r25
    508c:	00 08       	sbc	r0, r0
    508e:	55 0f       	add	r21, r21
    5090:	aa 0b       	sbc	r26, r26
    5092:	e0 e8       	ldi	r30, 0x80	; 128
    5094:	fe ef       	ldi	r31, 0xFE	; 254
    5096:	16 16       	cp	r1, r22
    5098:	17 06       	cpc	r1, r23
    509a:	e8 07       	cpc	r30, r24
    509c:	f9 07       	cpc	r31, r25
    509e:	c0 f0       	brcs	.+48     	; 0x50d0 <__fp_cmp+0x46>
    50a0:	12 16       	cp	r1, r18
    50a2:	13 06       	cpc	r1, r19
    50a4:	e4 07       	cpc	r30, r20
    50a6:	f5 07       	cpc	r31, r21
    50a8:	98 f0       	brcs	.+38     	; 0x50d0 <__fp_cmp+0x46>
    50aa:	62 1b       	sub	r22, r18
    50ac:	73 0b       	sbc	r23, r19
    50ae:	84 0b       	sbc	r24, r20
    50b0:	95 0b       	sbc	r25, r21
    50b2:	39 f4       	brne	.+14     	; 0x50c2 <__fp_cmp+0x38>
    50b4:	0a 26       	eor	r0, r26
    50b6:	61 f0       	breq	.+24     	; 0x50d0 <__fp_cmp+0x46>
    50b8:	23 2b       	or	r18, r19
    50ba:	24 2b       	or	r18, r20
    50bc:	25 2b       	or	r18, r21
    50be:	21 f4       	brne	.+8      	; 0x50c8 <__fp_cmp+0x3e>
    50c0:	08 95       	ret
    50c2:	0a 26       	eor	r0, r26
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <__fp_cmp+0x3e>
    50c6:	a1 40       	sbci	r26, 0x01	; 1
    50c8:	a6 95       	lsr	r26
    50ca:	8f ef       	ldi	r24, 0xFF	; 255
    50cc:	81 1d       	adc	r24, r1
    50ce:	81 1d       	adc	r24, r1
    50d0:	08 95       	ret

000050d2 <__gesf2>:
    50d2:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_cmp>
    50d6:	08 f4       	brcc	.+2      	; 0x50da <__gesf2+0x8>
    50d8:	8f ef       	ldi	r24, 0xFF	; 255
    50da:	08 95       	ret

000050dc <__mulsf3>:
    50dc:	0e 94 81 28 	call	0x5102	; 0x5102 <__mulsf3x>
    50e0:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_round>
    50e4:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_pscA>
    50e8:	38 f0       	brcs	.+14     	; 0x50f8 <__mulsf3+0x1c>
    50ea:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_pscB>
    50ee:	20 f0       	brcs	.+8      	; 0x50f8 <__mulsf3+0x1c>
    50f0:	95 23       	and	r25, r21
    50f2:	11 f0       	breq	.+4      	; 0x50f8 <__mulsf3+0x1c>
    50f4:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_inf>
    50f8:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__fp_nan>
    50fc:	11 24       	eor	r1, r1
    50fe:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_szero>

00005102 <__mulsf3x>:
    5102:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_split3>
    5106:	70 f3       	brcs	.-36     	; 0x50e4 <__mulsf3+0x8>

00005108 <__mulsf3_pse>:
    5108:	95 9f       	mul	r25, r21
    510a:	c1 f3       	breq	.-16     	; 0x50fc <__mulsf3+0x20>
    510c:	95 0f       	add	r25, r21
    510e:	50 e0       	ldi	r21, 0x00	; 0
    5110:	55 1f       	adc	r21, r21
    5112:	62 9f       	mul	r22, r18
    5114:	f0 01       	movw	r30, r0
    5116:	72 9f       	mul	r23, r18
    5118:	bb 27       	eor	r27, r27
    511a:	f0 0d       	add	r31, r0
    511c:	b1 1d       	adc	r27, r1
    511e:	63 9f       	mul	r22, r19
    5120:	aa 27       	eor	r26, r26
    5122:	f0 0d       	add	r31, r0
    5124:	b1 1d       	adc	r27, r1
    5126:	aa 1f       	adc	r26, r26
    5128:	64 9f       	mul	r22, r20
    512a:	66 27       	eor	r22, r22
    512c:	b0 0d       	add	r27, r0
    512e:	a1 1d       	adc	r26, r1
    5130:	66 1f       	adc	r22, r22
    5132:	82 9f       	mul	r24, r18
    5134:	22 27       	eor	r18, r18
    5136:	b0 0d       	add	r27, r0
    5138:	a1 1d       	adc	r26, r1
    513a:	62 1f       	adc	r22, r18
    513c:	73 9f       	mul	r23, r19
    513e:	b0 0d       	add	r27, r0
    5140:	a1 1d       	adc	r26, r1
    5142:	62 1f       	adc	r22, r18
    5144:	83 9f       	mul	r24, r19
    5146:	a0 0d       	add	r26, r0
    5148:	61 1d       	adc	r22, r1
    514a:	22 1f       	adc	r18, r18
    514c:	74 9f       	mul	r23, r20
    514e:	33 27       	eor	r19, r19
    5150:	a0 0d       	add	r26, r0
    5152:	61 1d       	adc	r22, r1
    5154:	23 1f       	adc	r18, r19
    5156:	84 9f       	mul	r24, r20
    5158:	60 0d       	add	r22, r0
    515a:	21 1d       	adc	r18, r1
    515c:	82 2f       	mov	r24, r18
    515e:	76 2f       	mov	r23, r22
    5160:	6a 2f       	mov	r22, r26
    5162:	11 24       	eor	r1, r1
    5164:	9f 57       	subi	r25, 0x7F	; 127
    5166:	50 40       	sbci	r21, 0x00	; 0
    5168:	9a f0       	brmi	.+38     	; 0x5190 <__mulsf3_pse+0x88>
    516a:	f1 f0       	breq	.+60     	; 0x51a8 <__mulsf3_pse+0xa0>
    516c:	88 23       	and	r24, r24
    516e:	4a f0       	brmi	.+18     	; 0x5182 <__mulsf3_pse+0x7a>
    5170:	ee 0f       	add	r30, r30
    5172:	ff 1f       	adc	r31, r31
    5174:	bb 1f       	adc	r27, r27
    5176:	66 1f       	adc	r22, r22
    5178:	77 1f       	adc	r23, r23
    517a:	88 1f       	adc	r24, r24
    517c:	91 50       	subi	r25, 0x01	; 1
    517e:	50 40       	sbci	r21, 0x00	; 0
    5180:	a9 f7       	brne	.-22     	; 0x516c <__mulsf3_pse+0x64>
    5182:	9e 3f       	cpi	r25, 0xFE	; 254
    5184:	51 05       	cpc	r21, r1
    5186:	80 f0       	brcs	.+32     	; 0x51a8 <__mulsf3_pse+0xa0>
    5188:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__fp_inf>
    518c:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_szero>
    5190:	5f 3f       	cpi	r21, 0xFF	; 255
    5192:	e4 f3       	brlt	.-8      	; 0x518c <__mulsf3_pse+0x84>
    5194:	98 3e       	cpi	r25, 0xE8	; 232
    5196:	d4 f3       	brlt	.-12     	; 0x518c <__mulsf3_pse+0x84>
    5198:	86 95       	lsr	r24
    519a:	77 95       	ror	r23
    519c:	67 95       	ror	r22
    519e:	b7 95       	ror	r27
    51a0:	f7 95       	ror	r31
    51a2:	e7 95       	ror	r30
    51a4:	9f 5f       	subi	r25, 0xFF	; 255
    51a6:	c1 f7       	brne	.-16     	; 0x5198 <__mulsf3_pse+0x90>
    51a8:	fe 2b       	or	r31, r30
    51aa:	88 0f       	add	r24, r24
    51ac:	91 1d       	adc	r25, r1
    51ae:	96 95       	lsr	r25
    51b0:	87 95       	ror	r24
    51b2:	97 f9       	bld	r25, 7
    51b4:	08 95       	ret

000051b6 <__unordsf2>:
    51b6:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_cmp>
    51ba:	88 0b       	sbc	r24, r24
    51bc:	99 0b       	sbc	r25, r25
    51be:	08 95       	ret

000051c0 <__udivmodsi4>:
    51c0:	a1 e2       	ldi	r26, 0x21	; 33
    51c2:	1a 2e       	mov	r1, r26
    51c4:	aa 1b       	sub	r26, r26
    51c6:	bb 1b       	sub	r27, r27
    51c8:	fd 01       	movw	r30, r26
    51ca:	0d c0       	rjmp	.+26     	; 0x51e6 <__udivmodsi4_ep>

000051cc <__udivmodsi4_loop>:
    51cc:	aa 1f       	adc	r26, r26
    51ce:	bb 1f       	adc	r27, r27
    51d0:	ee 1f       	adc	r30, r30
    51d2:	ff 1f       	adc	r31, r31
    51d4:	a2 17       	cp	r26, r18
    51d6:	b3 07       	cpc	r27, r19
    51d8:	e4 07       	cpc	r30, r20
    51da:	f5 07       	cpc	r31, r21
    51dc:	20 f0       	brcs	.+8      	; 0x51e6 <__udivmodsi4_ep>
    51de:	a2 1b       	sub	r26, r18
    51e0:	b3 0b       	sbc	r27, r19
    51e2:	e4 0b       	sbc	r30, r20
    51e4:	f5 0b       	sbc	r31, r21

000051e6 <__udivmodsi4_ep>:
    51e6:	66 1f       	adc	r22, r22
    51e8:	77 1f       	adc	r23, r23
    51ea:	88 1f       	adc	r24, r24
    51ec:	99 1f       	adc	r25, r25
    51ee:	1a 94       	dec	r1
    51f0:	69 f7       	brne	.-38     	; 0x51cc <__udivmodsi4_loop>
    51f2:	60 95       	com	r22
    51f4:	70 95       	com	r23
    51f6:	80 95       	com	r24
    51f8:	90 95       	com	r25
    51fa:	9b 01       	movw	r18, r22
    51fc:	ac 01       	movw	r20, r24
    51fe:	bd 01       	movw	r22, r26
    5200:	cf 01       	movw	r24, r30
    5202:	08 95       	ret

00005204 <__divmodsi4>:
    5204:	05 2e       	mov	r0, r21
    5206:	97 fb       	bst	r25, 7
    5208:	1e f4       	brtc	.+6      	; 0x5210 <__divmodsi4+0xc>
    520a:	00 94       	com	r0
    520c:	0e 94 19 29 	call	0x5232	; 0x5232 <__negsi2>
    5210:	57 fd       	sbrc	r21, 7
    5212:	07 d0       	rcall	.+14     	; 0x5222 <__divmodsi4_neg2>
    5214:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <__udivmodsi4>
    5218:	07 fc       	sbrc	r0, 7
    521a:	03 d0       	rcall	.+6      	; 0x5222 <__divmodsi4_neg2>
    521c:	4e f4       	brtc	.+18     	; 0x5230 <__divmodsi4_exit>
    521e:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__negsi2>

00005222 <__divmodsi4_neg2>:
    5222:	50 95       	com	r21
    5224:	40 95       	com	r20
    5226:	30 95       	com	r19
    5228:	21 95       	neg	r18
    522a:	3f 4f       	sbci	r19, 0xFF	; 255
    522c:	4f 4f       	sbci	r20, 0xFF	; 255
    522e:	5f 4f       	sbci	r21, 0xFF	; 255

00005230 <__divmodsi4_exit>:
    5230:	08 95       	ret

00005232 <__negsi2>:
    5232:	90 95       	com	r25
    5234:	80 95       	com	r24
    5236:	70 95       	com	r23
    5238:	61 95       	neg	r22
    523a:	7f 4f       	sbci	r23, 0xFF	; 255
    523c:	8f 4f       	sbci	r24, 0xFF	; 255
    523e:	9f 4f       	sbci	r25, 0xFF	; 255
    5240:	08 95       	ret

00005242 <__umulhisi3>:
    5242:	a2 9f       	mul	r26, r18
    5244:	b0 01       	movw	r22, r0
    5246:	b3 9f       	mul	r27, r19
    5248:	c0 01       	movw	r24, r0
    524a:	a3 9f       	mul	r26, r19
    524c:	70 0d       	add	r23, r0
    524e:	81 1d       	adc	r24, r1
    5250:	11 24       	eor	r1, r1
    5252:	91 1d       	adc	r25, r1
    5254:	b2 9f       	mul	r27, r18
    5256:	70 0d       	add	r23, r0
    5258:	81 1d       	adc	r24, r1
    525a:	11 24       	eor	r1, r1
    525c:	91 1d       	adc	r25, r1
    525e:	08 95       	ret

00005260 <__muluhisi3>:
    5260:	0e 94 21 29 	call	0x5242	; 0x5242 <__umulhisi3>
    5264:	a5 9f       	mul	r26, r21
    5266:	90 0d       	add	r25, r0
    5268:	b4 9f       	mul	r27, r20
    526a:	90 0d       	add	r25, r0
    526c:	a4 9f       	mul	r26, r20
    526e:	80 0d       	add	r24, r0
    5270:	91 1d       	adc	r25, r1
    5272:	11 24       	eor	r1, r1
    5274:	08 95       	ret

00005276 <__tablejump2__>:
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	05 90       	lpm	r0, Z+
    527c:	f4 91       	lpm	r31, Z
    527e:	e0 2d       	mov	r30, r0
    5280:	09 94       	ijmp

00005282 <malloc>:
    5282:	0f 93       	push	r16
    5284:	1f 93       	push	r17
    5286:	cf 93       	push	r28
    5288:	df 93       	push	r29
    528a:	82 30       	cpi	r24, 0x02	; 2
    528c:	91 05       	cpc	r25, r1
    528e:	10 f4       	brcc	.+4      	; 0x5294 <malloc+0x12>
    5290:	82 e0       	ldi	r24, 0x02	; 2
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <__flp>
    5298:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <__flp+0x1>
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	a0 e0       	ldi	r26, 0x00	; 0
    52a2:	b0 e0       	ldi	r27, 0x00	; 0
    52a4:	30 97       	sbiw	r30, 0x00	; 0
    52a6:	19 f1       	breq	.+70     	; 0x52ee <malloc+0x6c>
    52a8:	40 81       	ld	r20, Z
    52aa:	51 81       	ldd	r21, Z+1	; 0x01
    52ac:	02 81       	ldd	r16, Z+2	; 0x02
    52ae:	13 81       	ldd	r17, Z+3	; 0x03
    52b0:	48 17       	cp	r20, r24
    52b2:	59 07       	cpc	r21, r25
    52b4:	c8 f0       	brcs	.+50     	; 0x52e8 <malloc+0x66>
    52b6:	84 17       	cp	r24, r20
    52b8:	95 07       	cpc	r25, r21
    52ba:	69 f4       	brne	.+26     	; 0x52d6 <malloc+0x54>
    52bc:	10 97       	sbiw	r26, 0x00	; 0
    52be:	31 f0       	breq	.+12     	; 0x52cc <malloc+0x4a>
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	0c 93       	st	X, r16
    52c4:	12 97       	sbiw	r26, 0x02	; 2
    52c6:	13 96       	adiw	r26, 0x03	; 3
    52c8:	1c 93       	st	X, r17
    52ca:	27 c0       	rjmp	.+78     	; 0x531a <malloc+0x98>
    52cc:	00 93 b2 03 	sts	0x03B2, r16	; 0x8003b2 <__flp>
    52d0:	10 93 b3 03 	sts	0x03B3, r17	; 0x8003b3 <__flp+0x1>
    52d4:	22 c0       	rjmp	.+68     	; 0x531a <malloc+0x98>
    52d6:	21 15       	cp	r18, r1
    52d8:	31 05       	cpc	r19, r1
    52da:	19 f0       	breq	.+6      	; 0x52e2 <malloc+0x60>
    52dc:	42 17       	cp	r20, r18
    52de:	53 07       	cpc	r21, r19
    52e0:	18 f4       	brcc	.+6      	; 0x52e8 <malloc+0x66>
    52e2:	9a 01       	movw	r18, r20
    52e4:	bd 01       	movw	r22, r26
    52e6:	ef 01       	movw	r28, r30
    52e8:	df 01       	movw	r26, r30
    52ea:	f8 01       	movw	r30, r16
    52ec:	db cf       	rjmp	.-74     	; 0x52a4 <malloc+0x22>
    52ee:	21 15       	cp	r18, r1
    52f0:	31 05       	cpc	r19, r1
    52f2:	f9 f0       	breq	.+62     	; 0x5332 <malloc+0xb0>
    52f4:	28 1b       	sub	r18, r24
    52f6:	39 0b       	sbc	r19, r25
    52f8:	24 30       	cpi	r18, 0x04	; 4
    52fa:	31 05       	cpc	r19, r1
    52fc:	80 f4       	brcc	.+32     	; 0x531e <malloc+0x9c>
    52fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5300:	9b 81       	ldd	r25, Y+3	; 0x03
    5302:	61 15       	cp	r22, r1
    5304:	71 05       	cpc	r23, r1
    5306:	21 f0       	breq	.+8      	; 0x5310 <malloc+0x8e>
    5308:	fb 01       	movw	r30, r22
    530a:	93 83       	std	Z+3, r25	; 0x03
    530c:	82 83       	std	Z+2, r24	; 0x02
    530e:	04 c0       	rjmp	.+8      	; 0x5318 <malloc+0x96>
    5310:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <__flp+0x1>
    5314:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <__flp>
    5318:	fe 01       	movw	r30, r28
    531a:	32 96       	adiw	r30, 0x02	; 2
    531c:	44 c0       	rjmp	.+136    	; 0x53a6 <malloc+0x124>
    531e:	fe 01       	movw	r30, r28
    5320:	e2 0f       	add	r30, r18
    5322:	f3 1f       	adc	r31, r19
    5324:	81 93       	st	Z+, r24
    5326:	91 93       	st	Z+, r25
    5328:	22 50       	subi	r18, 0x02	; 2
    532a:	31 09       	sbc	r19, r1
    532c:	39 83       	std	Y+1, r19	; 0x01
    532e:	28 83       	st	Y, r18
    5330:	3a c0       	rjmp	.+116    	; 0x53a6 <malloc+0x124>
    5332:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    5336:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    533a:	23 2b       	or	r18, r19
    533c:	41 f4       	brne	.+16     	; 0x534e <malloc+0xcc>
    533e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5342:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5346:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <__brkval+0x1>
    534a:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <__brkval>
    534e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5352:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5356:	21 15       	cp	r18, r1
    5358:	31 05       	cpc	r19, r1
    535a:	41 f4       	brne	.+16     	; 0x536c <malloc+0xea>
    535c:	2d b7       	in	r18, 0x3d	; 61
    535e:	3e b7       	in	r19, 0x3e	; 62
    5360:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5364:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5368:	24 1b       	sub	r18, r20
    536a:	35 0b       	sbc	r19, r21
    536c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <__brkval>
    5370:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <__brkval+0x1>
    5374:	e2 17       	cp	r30, r18
    5376:	f3 07       	cpc	r31, r19
    5378:	a0 f4       	brcc	.+40     	; 0x53a2 <malloc+0x120>
    537a:	2e 1b       	sub	r18, r30
    537c:	3f 0b       	sbc	r19, r31
    537e:	28 17       	cp	r18, r24
    5380:	39 07       	cpc	r19, r25
    5382:	78 f0       	brcs	.+30     	; 0x53a2 <malloc+0x120>
    5384:	ac 01       	movw	r20, r24
    5386:	4e 5f       	subi	r20, 0xFE	; 254
    5388:	5f 4f       	sbci	r21, 0xFF	; 255
    538a:	24 17       	cp	r18, r20
    538c:	35 07       	cpc	r19, r21
    538e:	48 f0       	brcs	.+18     	; 0x53a2 <malloc+0x120>
    5390:	4e 0f       	add	r20, r30
    5392:	5f 1f       	adc	r21, r31
    5394:	50 93 b1 03 	sts	0x03B1, r21	; 0x8003b1 <__brkval+0x1>
    5398:	40 93 b0 03 	sts	0x03B0, r20	; 0x8003b0 <__brkval>
    539c:	81 93       	st	Z+, r24
    539e:	91 93       	st	Z+, r25
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <malloc+0x124>
    53a2:	e0 e0       	ldi	r30, 0x00	; 0
    53a4:	f0 e0       	ldi	r31, 0x00	; 0
    53a6:	cf 01       	movw	r24, r30
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	1f 91       	pop	r17
    53ae:	0f 91       	pop	r16
    53b0:	08 95       	ret

000053b2 <free>:
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	09 f4       	brne	.+2      	; 0x53bc <free+0xa>
    53ba:	81 c0       	rjmp	.+258    	; 0x54be <free+0x10c>
    53bc:	fc 01       	movw	r30, r24
    53be:	32 97       	sbiw	r30, 0x02	; 2
    53c0:	13 82       	std	Z+3, r1	; 0x03
    53c2:	12 82       	std	Z+2, r1	; 0x02
    53c4:	a0 91 b2 03 	lds	r26, 0x03B2	; 0x8003b2 <__flp>
    53c8:	b0 91 b3 03 	lds	r27, 0x03B3	; 0x8003b3 <__flp+0x1>
    53cc:	10 97       	sbiw	r26, 0x00	; 0
    53ce:	81 f4       	brne	.+32     	; 0x53f0 <free+0x3e>
    53d0:	20 81       	ld	r18, Z
    53d2:	31 81       	ldd	r19, Z+1	; 0x01
    53d4:	82 0f       	add	r24, r18
    53d6:	93 1f       	adc	r25, r19
    53d8:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    53dc:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    53e0:	28 17       	cp	r18, r24
    53e2:	39 07       	cpc	r19, r25
    53e4:	51 f5       	brne	.+84     	; 0x543a <free+0x88>
    53e6:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <__brkval+0x1>
    53ea:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <__brkval>
    53ee:	67 c0       	rjmp	.+206    	; 0x54be <free+0x10c>
    53f0:	ed 01       	movw	r28, r26
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	ce 17       	cp	r28, r30
    53f8:	df 07       	cpc	r29, r31
    53fa:	40 f4       	brcc	.+16     	; 0x540c <free+0x5a>
    53fc:	4a 81       	ldd	r20, Y+2	; 0x02
    53fe:	5b 81       	ldd	r21, Y+3	; 0x03
    5400:	9e 01       	movw	r18, r28
    5402:	41 15       	cp	r20, r1
    5404:	51 05       	cpc	r21, r1
    5406:	f1 f0       	breq	.+60     	; 0x5444 <free+0x92>
    5408:	ea 01       	movw	r28, r20
    540a:	f5 cf       	rjmp	.-22     	; 0x53f6 <free+0x44>
    540c:	d3 83       	std	Z+3, r29	; 0x03
    540e:	c2 83       	std	Z+2, r28	; 0x02
    5410:	40 81       	ld	r20, Z
    5412:	51 81       	ldd	r21, Z+1	; 0x01
    5414:	84 0f       	add	r24, r20
    5416:	95 1f       	adc	r25, r21
    5418:	c8 17       	cp	r28, r24
    541a:	d9 07       	cpc	r29, r25
    541c:	59 f4       	brne	.+22     	; 0x5434 <free+0x82>
    541e:	88 81       	ld	r24, Y
    5420:	99 81       	ldd	r25, Y+1	; 0x01
    5422:	84 0f       	add	r24, r20
    5424:	95 1f       	adc	r25, r21
    5426:	02 96       	adiw	r24, 0x02	; 2
    5428:	91 83       	std	Z+1, r25	; 0x01
    542a:	80 83       	st	Z, r24
    542c:	8a 81       	ldd	r24, Y+2	; 0x02
    542e:	9b 81       	ldd	r25, Y+3	; 0x03
    5430:	93 83       	std	Z+3, r25	; 0x03
    5432:	82 83       	std	Z+2, r24	; 0x02
    5434:	21 15       	cp	r18, r1
    5436:	31 05       	cpc	r19, r1
    5438:	29 f4       	brne	.+10     	; 0x5444 <free+0x92>
    543a:	f0 93 b3 03 	sts	0x03B3, r31	; 0x8003b3 <__flp+0x1>
    543e:	e0 93 b2 03 	sts	0x03B2, r30	; 0x8003b2 <__flp>
    5442:	3d c0       	rjmp	.+122    	; 0x54be <free+0x10c>
    5444:	e9 01       	movw	r28, r18
    5446:	fb 83       	std	Y+3, r31	; 0x03
    5448:	ea 83       	std	Y+2, r30	; 0x02
    544a:	49 91       	ld	r20, Y+
    544c:	59 91       	ld	r21, Y+
    544e:	c4 0f       	add	r28, r20
    5450:	d5 1f       	adc	r29, r21
    5452:	ec 17       	cp	r30, r28
    5454:	fd 07       	cpc	r31, r29
    5456:	61 f4       	brne	.+24     	; 0x5470 <free+0xbe>
    5458:	80 81       	ld	r24, Z
    545a:	91 81       	ldd	r25, Z+1	; 0x01
    545c:	84 0f       	add	r24, r20
    545e:	95 1f       	adc	r25, r21
    5460:	02 96       	adiw	r24, 0x02	; 2
    5462:	e9 01       	movw	r28, r18
    5464:	99 83       	std	Y+1, r25	; 0x01
    5466:	88 83       	st	Y, r24
    5468:	82 81       	ldd	r24, Z+2	; 0x02
    546a:	93 81       	ldd	r25, Z+3	; 0x03
    546c:	9b 83       	std	Y+3, r25	; 0x03
    546e:	8a 83       	std	Y+2, r24	; 0x02
    5470:	e0 e0       	ldi	r30, 0x00	; 0
    5472:	f0 e0       	ldi	r31, 0x00	; 0
    5474:	12 96       	adiw	r26, 0x02	; 2
    5476:	8d 91       	ld	r24, X+
    5478:	9c 91       	ld	r25, X
    547a:	13 97       	sbiw	r26, 0x03	; 3
    547c:	00 97       	sbiw	r24, 0x00	; 0
    547e:	19 f0       	breq	.+6      	; 0x5486 <free+0xd4>
    5480:	fd 01       	movw	r30, r26
    5482:	dc 01       	movw	r26, r24
    5484:	f7 cf       	rjmp	.-18     	; 0x5474 <free+0xc2>
    5486:	8d 91       	ld	r24, X+
    5488:	9c 91       	ld	r25, X
    548a:	11 97       	sbiw	r26, 0x01	; 1
    548c:	9d 01       	movw	r18, r26
    548e:	2e 5f       	subi	r18, 0xFE	; 254
    5490:	3f 4f       	sbci	r19, 0xFF	; 255
    5492:	82 0f       	add	r24, r18
    5494:	93 1f       	adc	r25, r19
    5496:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    549a:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    549e:	28 17       	cp	r18, r24
    54a0:	39 07       	cpc	r19, r25
    54a2:	69 f4       	brne	.+26     	; 0x54be <free+0x10c>
    54a4:	30 97       	sbiw	r30, 0x00	; 0
    54a6:	29 f4       	brne	.+10     	; 0x54b2 <free+0x100>
    54a8:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <__flp+0x1>
    54ac:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <__flp>
    54b0:	02 c0       	rjmp	.+4      	; 0x54b6 <free+0x104>
    54b2:	13 82       	std	Z+3, r1	; 0x03
    54b4:	12 82       	std	Z+2, r1	; 0x02
    54b6:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <__brkval+0x1>
    54ba:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <__brkval>
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	08 95       	ret

000054c4 <random_r>:
    54c4:	8f 92       	push	r8
    54c6:	9f 92       	push	r9
    54c8:	af 92       	push	r10
    54ca:	bf 92       	push	r11
    54cc:	cf 92       	push	r12
    54ce:	df 92       	push	r13
    54d0:	ef 92       	push	r14
    54d2:	ff 92       	push	r15
    54d4:	cf 93       	push	r28
    54d6:	df 93       	push	r29
    54d8:	ec 01       	movw	r28, r24
    54da:	68 81       	ld	r22, Y
    54dc:	79 81       	ldd	r23, Y+1	; 0x01
    54de:	8a 81       	ldd	r24, Y+2	; 0x02
    54e0:	9b 81       	ldd	r25, Y+3	; 0x03
    54e2:	61 15       	cp	r22, r1
    54e4:	71 05       	cpc	r23, r1
    54e6:	81 05       	cpc	r24, r1
    54e8:	91 05       	cpc	r25, r1
    54ea:	21 f4       	brne	.+8      	; 0x54f4 <random_r+0x30>
    54ec:	64 e2       	ldi	r22, 0x24	; 36
    54ee:	79 ed       	ldi	r23, 0xD9	; 217
    54f0:	8b e5       	ldi	r24, 0x5B	; 91
    54f2:	97 e0       	ldi	r25, 0x07	; 7
    54f4:	2d e1       	ldi	r18, 0x1D	; 29
    54f6:	33 ef       	ldi	r19, 0xF3	; 243
    54f8:	41 e0       	ldi	r20, 0x01	; 1
    54fa:	50 e0       	ldi	r21, 0x00	; 0
    54fc:	0e 94 02 29 	call	0x5204	; 0x5204 <__divmodsi4>
    5500:	49 01       	movw	r8, r18
    5502:	5a 01       	movw	r10, r20
    5504:	9b 01       	movw	r18, r22
    5506:	ac 01       	movw	r20, r24
    5508:	a7 ea       	ldi	r26, 0xA7	; 167
    550a:	b1 e4       	ldi	r27, 0x41	; 65
    550c:	0e 94 30 29 	call	0x5260	; 0x5260 <__muluhisi3>
    5510:	6b 01       	movw	r12, r22
    5512:	7c 01       	movw	r14, r24
    5514:	ac ee       	ldi	r26, 0xEC	; 236
    5516:	b4 ef       	ldi	r27, 0xF4	; 244
    5518:	a5 01       	movw	r20, r10
    551a:	94 01       	movw	r18, r8
    551c:	0e 94 13 2b 	call	0x5626	; 0x5626 <__mulohisi3>
    5520:	dc 01       	movw	r26, r24
    5522:	cb 01       	movw	r24, r22
    5524:	8c 0d       	add	r24, r12
    5526:	9d 1d       	adc	r25, r13
    5528:	ae 1d       	adc	r26, r14
    552a:	bf 1d       	adc	r27, r15
    552c:	b7 ff       	sbrs	r27, 7
    552e:	03 c0       	rjmp	.+6      	; 0x5536 <random_r+0x72>
    5530:	01 97       	sbiw	r24, 0x01	; 1
    5532:	a1 09       	sbc	r26, r1
    5534:	b0 48       	sbci	r27, 0x80	; 128
    5536:	88 83       	st	Y, r24
    5538:	99 83       	std	Y+1, r25	; 0x01
    553a:	aa 83       	std	Y+2, r26	; 0x02
    553c:	bb 83       	std	Y+3, r27	; 0x03
    553e:	bc 01       	movw	r22, r24
    5540:	cd 01       	movw	r24, r26
    5542:	9f 77       	andi	r25, 0x7F	; 127
    5544:	df 91       	pop	r29
    5546:	cf 91       	pop	r28
    5548:	ff 90       	pop	r15
    554a:	ef 90       	pop	r14
    554c:	df 90       	pop	r13
    554e:	cf 90       	pop	r12
    5550:	bf 90       	pop	r11
    5552:	af 90       	pop	r10
    5554:	9f 90       	pop	r9
    5556:	8f 90       	pop	r8
    5558:	08 95       	ret

0000555a <random>:
    555a:	8f 92       	push	r8
    555c:	9f 92       	push	r9
    555e:	af 92       	push	r10
    5560:	bf 92       	push	r11
    5562:	cf 92       	push	r12
    5564:	df 92       	push	r13
    5566:	ef 92       	push	r14
    5568:	ff 92       	push	r15
    556a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    556e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    5572:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    5576:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    557a:	61 15       	cp	r22, r1
    557c:	71 05       	cpc	r23, r1
    557e:	81 05       	cpc	r24, r1
    5580:	91 05       	cpc	r25, r1
    5582:	21 f4       	brne	.+8      	; 0x558c <random+0x32>
    5584:	64 e2       	ldi	r22, 0x24	; 36
    5586:	79 ed       	ldi	r23, 0xD9	; 217
    5588:	8b e5       	ldi	r24, 0x5B	; 91
    558a:	97 e0       	ldi	r25, 0x07	; 7
    558c:	2d e1       	ldi	r18, 0x1D	; 29
    558e:	33 ef       	ldi	r19, 0xF3	; 243
    5590:	41 e0       	ldi	r20, 0x01	; 1
    5592:	50 e0       	ldi	r21, 0x00	; 0
    5594:	0e 94 02 29 	call	0x5204	; 0x5204 <__divmodsi4>
    5598:	49 01       	movw	r8, r18
    559a:	5a 01       	movw	r10, r20
    559c:	9b 01       	movw	r18, r22
    559e:	ac 01       	movw	r20, r24
    55a0:	a7 ea       	ldi	r26, 0xA7	; 167
    55a2:	b1 e4       	ldi	r27, 0x41	; 65
    55a4:	0e 94 30 29 	call	0x5260	; 0x5260 <__muluhisi3>
    55a8:	6b 01       	movw	r12, r22
    55aa:	7c 01       	movw	r14, r24
    55ac:	ac ee       	ldi	r26, 0xEC	; 236
    55ae:	b4 ef       	ldi	r27, 0xF4	; 244
    55b0:	a5 01       	movw	r20, r10
    55b2:	94 01       	movw	r18, r8
    55b4:	0e 94 13 2b 	call	0x5626	; 0x5626 <__mulohisi3>
    55b8:	dc 01       	movw	r26, r24
    55ba:	cb 01       	movw	r24, r22
    55bc:	8c 0d       	add	r24, r12
    55be:	9d 1d       	adc	r25, r13
    55c0:	ae 1d       	adc	r26, r14
    55c2:	bf 1d       	adc	r27, r15
    55c4:	b7 ff       	sbrs	r27, 7
    55c6:	03 c0       	rjmp	.+6      	; 0x55ce <random+0x74>
    55c8:	01 97       	sbiw	r24, 0x01	; 1
    55ca:	a1 09       	sbc	r26, r1
    55cc:	b0 48       	sbci	r27, 0x80	; 128
    55ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    55d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    55d6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    55da:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    55de:	bc 01       	movw	r22, r24
    55e0:	cd 01       	movw	r24, r26
    55e2:	9f 77       	andi	r25, 0x7F	; 127
    55e4:	ff 90       	pop	r15
    55e6:	ef 90       	pop	r14
    55e8:	df 90       	pop	r13
    55ea:	cf 90       	pop	r12
    55ec:	bf 90       	pop	r11
    55ee:	af 90       	pop	r10
    55f0:	9f 90       	pop	r9
    55f2:	8f 90       	pop	r8
    55f4:	08 95       	ret

000055f6 <srandom>:
    55f6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    55fa:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    55fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    5602:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    5606:	08 95       	ret

00005608 <abort>:
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	f8 94       	cli
    560e:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__do_global_dtors>

00005612 <memset>:
    5612:	dc 01       	movw	r26, r24
    5614:	01 c0       	rjmp	.+2      	; 0x5618 <memset+0x6>
    5616:	6d 93       	st	X+, r22
    5618:	41 50       	subi	r20, 0x01	; 1
    561a:	50 40       	sbci	r21, 0x00	; 0
    561c:	e0 f7       	brcc	.-8      	; 0x5616 <memset+0x4>
    561e:	08 95       	ret

00005620 <__mulshisi3>:
    5620:	b7 ff       	sbrs	r27, 7
    5622:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__muluhisi3>

00005626 <__mulohisi3>:
    5626:	0e 94 30 29 	call	0x5260	; 0x5260 <__muluhisi3>
    562a:	82 1b       	sub	r24, r18
    562c:	93 0b       	sbc	r25, r19
    562e:	08 95       	ret

00005630 <__do_global_dtors>:
    5630:	15 e0       	ldi	r17, 0x05	; 5
    5632:	cc e7       	ldi	r28, 0x7C	; 124
    5634:	d5 e0       	ldi	r29, 0x05	; 5
    5636:	04 c0       	rjmp	.+8      	; 0x5640 <__do_global_dtors+0x10>
    5638:	fe 01       	movw	r30, r28
    563a:	0e 94 3b 29 	call	0x5276	; 0x5276 <__tablejump2__>
    563e:	21 96       	adiw	r28, 0x01	; 1
    5640:	cd 37       	cpi	r28, 0x7D	; 125
    5642:	d1 07       	cpc	r29, r17
    5644:	c9 f7       	brne	.-14     	; 0x5638 <__do_global_dtors+0x8>
    5646:	f8 94       	cli

00005648 <__stop_program>:
    5648:	ff cf       	rjmp	.-2      	; 0x5648 <__stop_program>
