
integrationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000048d0  00004964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e9  00800196  00800196  000049fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000192c5  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003931  00000000  00000000  0001e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f89  00000000  00000000  0002202a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b34  00000000  00000000  00028fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005302  00000000  00000000  0002bae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000156ec  00000000  00000000  00030dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb8  00000000  00000000  000464d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__dtors_end>
       4:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
       8:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
       c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      10:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      14:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      18:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      1c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      20:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      24:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      28:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      2c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      30:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      34:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      38:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      3c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      40:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_16>
      44:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      48:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_18>
      4c:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_19>
      50:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      54:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      58:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      5c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>
      60:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__vector_24>
      64:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	64 69       	ori	r22, 0x94	; 148
      6a:	73 63       	ori	r23, 0x33	; 51
      6c:	6f 6e       	ori	r22, 0xEF	; 239
      6e:	6e 65       	ori	r22, 0x5E	; 94
      70:	63 74       	andi	r22, 0x43	; 67
      72:	65 64       	ori	r22, 0x45	; 69
	...

00000075 <_ZZ4loopE3__c_0>:
      75:	72 69 67 68 74 20 63 6f 6e 6e 65 63 74 65 64 00     right connected.

00000085 <_ZZ4loopE3__c>:
      85:	6c 65 66 74 20 63 6f 6e 6e 65 63 74 65 64 00        left connected.

00000094 <_ZZ5setupE3__c>:
      94:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
      a4:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <digital_pin_to_bit_mask_PGM>:
      c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d2:	04 08 10 20                                         ... 

000000d6 <digital_pin_to_port_PGM>:
      d6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e6:	03 03 03 03                                         ....

000000ea <port_to_input_PGM>:
      ea:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f4 <port_to_output_PGM>:
      f4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fe <port_to_mode_PGM>:
      fe:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000108 <_ZL4font>:
     108:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     118:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     128:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     138:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     148:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     158:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     168:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     178:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     188:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     198:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1a8:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1b8:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1c8:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1d8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1e8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1f8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     208:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     218:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     228:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     238:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     248:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     258:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     268:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     278:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     288:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     298:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2a8:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2b8:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2c8:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2d8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2e8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2f8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     308:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     318:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     328:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     338:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     348:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     358:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     368:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     378:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     388:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     398:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3a8:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3b8:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3c8:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3d8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3e8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3f8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     408:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     418:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     428:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     438:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     448:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     458:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     468:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     478:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     488:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     498:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4a8:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4b8:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4c8:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4d8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4e8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4f8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     508:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     518:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     528:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     538:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     548:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     558:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     568:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     578:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     588:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     598:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5a8:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5b8:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5c8:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5d8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5e8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5f8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000608 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     608:	22 00 ff 21 00                                      "..!.

0000060d <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     60d:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000615 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     615:	00 80 c0 e0 f0 f8 fc fe                             ........

0000061d <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     61d:	db 40 a4 a6 2e af                                   .@....

00000623 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     623:	20 00 a1 c8                                          ...

00000627 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     627:	d3 00 40 8d                                         ..@.

0000062b <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     62b:	ae d5 80 a8                                         ....

0000062f <_ZL12splash2_data>:
     62f:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     63f:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     64f:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     66b:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     67b:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     68b:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     69b:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6ab:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     6bb:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6cb:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     6db:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     6eb:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     6fb:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     70b:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     71b:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     72b:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     73b:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     74b:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     75b:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     76b:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     77b:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     78b:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     79b:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7ab:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     7c3:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     7d3:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     7e3:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     7f3:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     803:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

0000080f <_ZL12splash1_data>:
     80f:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     81f:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     82f:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     83f:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     84f:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     85f:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     877:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     887:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     897:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8a7:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8b7:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     8c7:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     8d7:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     8e7:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     8f7:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     907:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     917:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     927:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     937:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     947:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     957:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     967:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     977:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     987:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     99f:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9b7:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     9c7:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     9d7:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     9e7:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     9f7:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a07:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a17:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a27:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a37:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a47:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a57:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a67:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     a77:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     a87:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     a97:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     aa7:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     ab7:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     ac7:	ff fd 6b 5b db 6a fd c0 00                          ..k[.j...

00000ad0 <__ctors_start>:
     ad0:	2a 08       	sbc	r2, r10
     ad2:	08 0a       	sbc	r0, r24
     ad4:	3a 1f       	adc	r19, r26

00000ad6 <__ctors_end>:
     ad6:	5e 08       	sbc	r5, r14

00000ad8 <__dtors_end>:
     ad8:	11 24       	eor	r1, r1
     ada:	1f be       	out	0x3f, r1	; 63
     adc:	cf ef       	ldi	r28, 0xFF	; 255
     ade:	d8 e0       	ldi	r29, 0x08	; 8
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	cd bf       	out	0x3d, r28	; 61

00000ae4 <__do_copy_data>:
     ae4:	11 e0       	ldi	r17, 0x01	; 1
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b1 e0       	ldi	r27, 0x01	; 1
     aea:	e0 ed       	ldi	r30, 0xD0	; 208
     aec:	f8 e4       	ldi	r31, 0x48	; 72
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__do_copy_data+0x10>
     af0:	05 90       	lpm	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	a6 39       	cpi	r26, 0x96	; 150
     af6:	b1 07       	cpc	r27, r17
     af8:	d9 f7       	brne	.-10     	; 0xaf0 <__do_copy_data+0xc>

00000afa <__do_clear_bss>:
     afa:	23 e0       	ldi	r18, 0x03	; 3
     afc:	a6 e9       	ldi	r26, 0x96	; 150
     afe:	b1 e0       	ldi	r27, 0x01	; 1
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <.do_clear_bss_start>

00000b02 <.do_clear_bss_loop>:
     b02:	1d 92       	st	X+, r1

00000b04 <.do_clear_bss_start>:
     b04:	af 37       	cpi	r26, 0x7F	; 127
     b06:	b2 07       	cpc	r27, r18
     b08:	e1 f7       	brne	.-8      	; 0xb02 <.do_clear_bss_loop>

00000b0a <__do_global_ctors>:
     b0a:	15 e0       	ldi	r17, 0x05	; 5
     b0c:	cb e6       	ldi	r28, 0x6B	; 107
     b0e:	d5 e0       	ldi	r29, 0x05	; 5
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <__do_global_ctors+0x10>
     b12:	21 97       	sbiw	r28, 0x01	; 1
     b14:	fe 01       	movw	r30, r28
     b16:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__tablejump2__>
     b1a:	c8 36       	cpi	r28, 0x68	; 104
     b1c:	d1 07       	cpc	r29, r17
     b1e:	c9 f7       	brne	.-14     	; 0xb12 <__do_global_ctors+0x8>
     b20:	0e 94 36 0a 	call	0x146c	; 0x146c <main>
     b24:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__do_global_dtors>

00000b28 <__bad_interrupt>:
     b28:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b2c <setup>:
bool	currentlyLoading = false;
bool	waitingForDisconnect = false;
uint8_t loadingBarPos = 0;

void setup() 
{
     b2c:	0f 93       	push	r16
	//GPIO INIT
	pinMode(13, OUTPUT);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	8d e0       	ldi	r24, 0x0D	; 13
     b32:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
	pinMode(SIG_R2, INPUT_PULLUP);
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
	pinMode(SIG_R3, OUTPUT);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	87 e0       	ldi	r24, 0x07	; 7
     b42:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
	digitalWrite(SIG_R3, LOW);
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	87 e0       	ldi	r24, 0x07	; 7
     b4a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
	
	pinMode(SIG_L2, OUTPUT);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
	digitalWrite(SIG_L2, LOW);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
	pinMode(SIG_L3, INPUT_PULLUP);
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b66:	26 e0       	ldi	r18, 0x06	; 6
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	55 e2       	ldi	r21, 0x25	; 37
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN14HardwareSerial5beginEmh>
	
	//SERIAL INIT
	Serial.begin(9600);
  
	//NEOPIXEL INIT
	pixels.begin();
     b78:	81 ef       	ldi	r24, 0xF1	; 241
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 97 13 	call	0x272e	; 0x272e <_ZN17Adafruit_NeoPixel5beginEv>

	//DISPLAY INIT
	if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
     b80:	01 e0       	ldi	r16, 0x01	; 1
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	4c e3       	ldi	r20, 0x3C	; 60
     b86:	62 e0       	ldi	r22, 0x02	; 2
     b88:	81 eb       	ldi	r24, 0xB1	; 177
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 93 19 	call	0x3326	; 0x3326 <_ZN16Adafruit_SSD13065beginEhhbb>
     b90:	81 11       	cpse	r24, r1
     b92:	06 c0       	rjmp	.+12     	; 0xba0 <setup+0x74>
	{
	Serial.println(F("SSD1306 allocation failed"));
     b94:	64 e9       	ldi	r22, 0x94	; 148
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}

	//OLED INIT
	display.setTextSize(1); // Draw 2X-scale text
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	81 eb       	ldi	r24, 0xB1	; 177
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <display+0x13>
     bb2:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <display+0x12>
     bb6:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <display+0x11>
     bba:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <display+0x10>
	display.setTextColor(SSD1306_WHITE);
}
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <_Z11neopix_idlev>:
}


//FUNCTION DECLARATION
void neopix_idle()
{
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
	static uint32_t ts_slowIdle = 0;
	if(millis() - ts_slowIdle > 100)	//SLOW DOWN
     bca:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     bce:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <__data_end>
     bd2:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <__data_end+0x1>
     bd6:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <__data_end+0x2>
     bda:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <__data_end+0x3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	80 1b       	sub	r24, r16
     be4:	91 0b       	sbc	r25, r17
     be6:	a2 0b       	sbc	r26, r18
     be8:	b3 0b       	sbc	r27, r19
     bea:	85 36       	cpi	r24, 0x65	; 101
     bec:	91 05       	cpc	r25, r1
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	78 f1       	brcs	.+94     	; 0xc52 <_Z11neopix_idlev+0x90>
	{
		ts_slowIdle = millis();
     bf4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     bf8:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <__data_end>
     bfc:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <__data_end+0x1>
     c00:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end+0x2>
     c04:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x3>
		pixels.clear(); // Set all pixel colors to 'off'
     c08:	81 ef       	ldi	r24, 0xF1	; 241
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN17Adafruit_NeoPixel5clearEv>
		for(int i=0; i<16; i++)
     c10:	c0 e0       	ldi	r28, 0x00	; 0
     c12:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pixels.setPixelColor(i, pixels.Color(0,0, random(0,10)));
     c14:	2a e0       	ldi	r18, 0x0A	; 10
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	cb 01       	movw	r24, r22
     c22:	0e 94 ef 0c 	call	0x19de	; 0x19de <_Z6randomll>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	33 27       	eor	r19, r19
     c2c:	44 27       	eor	r20, r20
     c2e:	55 27       	eor	r21, r21
     c30:	be 01       	movw	r22, r28
     c32:	81 ef       	ldi	r24, 0xF1	; 241
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
	static uint32_t ts_slowIdle = 0;
	if(millis() - ts_slowIdle > 100)	//SLOW DOWN
	{
		ts_slowIdle = millis();
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	c0 31       	cpi	r28, 0x10	; 16
     c3e:	d1 05       	cpc	r29, r1
     c40:	49 f7       	brne	.-46     	; 0xc14 <_Z11neopix_idlev+0x52>
		{
			pixels.setPixelColor(i, pixels.Color(0,0, random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
     c42:	81 ef       	ldi	r24, 0xF1	; 241
     c44:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
		pixels.clear(); // Set all pixel colors to 'off'
		for(int i=0; i<16; i++)
		{
			pixels.setPixelColor(i, pixels.Color(0,0, random(0,10)));
		}
		pixels.show();   // Send the updated pixel colors to the hardware.	
     c4e:	0c 94 19 14 	jmp	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>
	}
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <_Z14neopix_successv>:

void neopix_success()
{
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
	pixels.clear(); // Set all pixel colors to 'off'
     c6a:	81 ef       	ldi	r24, 0xF1	; 241
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN17Adafruit_NeoPixel5clearEv>
	for(int i=0; i<16; i++)
     c72:	c0 e0       	ldi	r28, 0x00	; 0
     c74:	d0 e0       	ldi	r29, 0x00	; 0
	{
		pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
     c76:	2a e0       	ldi	r18, 0x0A	; 10
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	cb 01       	movw	r24, r22
     c84:	0e 94 ef 0c 	call	0x19de	; 0x19de <_Z6randomll>
     c88:	16 2f       	mov	r17, r22
     c8a:	2a e0       	ldi	r18, 0x0A	; 10
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	cb 01       	movw	r24, r22
     c98:	0e 94 ef 0c 	call	0x19de	; 0x19de <_Z6randomll>
     c9c:	6b 01       	movw	r12, r22
     c9e:	7c 01       	movw	r14, r24
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	cb 01       	movw	r24, r22
     cae:	0e 94 ef 0c 	call	0x19de	; 0x19de <_Z6randomll>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	99 27       	eor	r25, r25
     cb8:	aa 27       	eor	r26, r26
     cba:	bb 27       	eor	r27, r27
     cbc:	dc 01       	movw	r26, r24
     cbe:	99 27       	eor	r25, r25
     cc0:	88 27       	eor	r24, r24
     cc2:	dd 24       	eor	r13, r13
     cc4:	ee 24       	eor	r14, r14
     cc6:	ff 24       	eor	r15, r15
     cc8:	fe 2c       	mov	r15, r14
     cca:	ed 2c       	mov	r14, r13
     ccc:	dc 2c       	mov	r13, r12
     cce:	cc 24       	eor	r12, r12
     cd0:	8c 29       	or	r24, r12
     cd2:	9d 29       	or	r25, r13
     cd4:	ae 29       	or	r26, r14
     cd6:	bf 29       	or	r27, r15
     cd8:	9c 01       	movw	r18, r24
     cda:	ad 01       	movw	r20, r26
     cdc:	21 2b       	or	r18, r17
     cde:	be 01       	movw	r22, r28
     ce0:	81 ef       	ldi	r24, 0xF1	; 241
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
}

void neopix_success()
{
	pixels.clear(); // Set all pixel colors to 'off'
	for(int i=0; i<16; i++)
     ce8:	21 96       	adiw	r28, 0x01	; 1
     cea:	c0 31       	cpi	r28, 0x10	; 16
     cec:	d1 05       	cpc	r29, r1
     cee:	19 f6       	brne	.-122    	; 0xc76 <_Z14neopix_successv+0x1a>
	{
		pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
	}
	pixels.show();   // Send the updated pixel colors to the hardware.
     cf0:	81 ef       	ldi	r24, 0xF1	; 241
     cf2:	91 e0       	ldi	r25, 0x01	; 1
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
	pixels.clear(); // Set all pixel colors to 'off'
	for(int i=0; i<16; i++)
	{
		pixels.setPixelColor(i, pixels.Color(random(0,10), random(0,10), random(0,10)));
	}
	pixels.show();   // Send the updated pixel colors to the hardware.
     d02:	0c 94 19 14 	jmp	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>

00000d06 <_Z19neopix_connectRightv>:
}

void neopix_connectRight()
{
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
	for(int i=0; i<8; i++)
     d0e:	c0 e0       	ldi	r28, 0x00	; 0
     d10:	d0 e0       	ldi	r29, 0x00	; 0
	{
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
     d12:	08 e0       	ldi	r16, 0x08	; 8
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	ba 01       	movw	r22, r20
     d20:	81 ef       	ldi	r24, 0xF1	; 241
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	be 01       	movw	r22, r28
     d32:	81 ef       	ldi	r24, 0xF1	; 241
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
     d3a:	81 ef       	ldi	r24, 0xF1	; 241
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>
		delay(25);
     d42:	69 e1       	ldi	r22, 0x19	; 25
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <delay>
	pixels.show();   // Send the updated pixel colors to the hardware.
}

void neopix_connectRight()
{
	for(int i=0; i<8; i++)
     d4e:	21 96       	adiw	r28, 0x01	; 1
     d50:	c8 30       	cpi	r28, 0x08	; 8
     d52:	d1 05       	cpc	r29, r1
     d54:	f1 f6       	brne	.-68     	; 0xd12 <_Z19neopix_connectRightv+0xc>
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
		pixels.setPixelColor(i, pixels.Color(10,0,0) );
		pixels.show();
		delay(25);
	}	
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <_Z18neopix_connectLeftv>:

void neopix_connectLeft()
{
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	c7 e0       	ldi	r28, 0x07	; 7
     d6a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<8; i++)
	{
		pixels.fill(pixels.Color(0,0,0), 0, 8);	//clear top row
     d6c:	08 e0       	ldi	r16, 0x08	; 8
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	ba 01       	movw	r22, r20
     d7a:	81 ef       	ldi	r24, 0xF1	; 241
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(7-i, pixels.Color(10,0,0) );
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4a e0       	ldi	r20, 0x0A	; 10
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	be 01       	movw	r22, r28
     d8c:	81 ef       	ldi	r24, 0xF1	; 241
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
     d94:	81 ef       	ldi	r24, 0xF1	; 241
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>
		delay(25);
     d9c:	69 e1       	ldi	r22, 0x19	; 25
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <delay>
     da8:	21 97       	sbiw	r28, 0x01	; 1
     daa:	00 f7       	brcc	.-64     	; 0xd6c <_Z18neopix_connectLeftv+0xc>
	}
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <_Z19incrementLoadingBarv>:

uint32_t ts_loadingStartTime = 0;
uint32_t ts_loadingNextIncrement = 0;
void incrementLoadingBar()
{
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
	if(currentlyLoading == false)
     dba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <currentlyLoading>
     dbe:	81 11       	cpse	r24, r1
     dc0:	33 c0       	rjmp	.+102    	; 0xe28 <_Z19incrementLoadingBarv+0x72>
	{
		currentlyLoading = true;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <currentlyLoading>
		ts_loadingStartTime = millis();
     dc8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     dcc:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <ts_loadingStartTime>
     dd0:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <ts_loadingStartTime+0x1>
     dd4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <ts_loadingStartTime+0x2>
     dd8:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <ts_loadingStartTime+0x3>
		ts_loadingNextIncrement = ts_loadingStartTime + 1000;
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	88 51       	subi	r24, 0x18	; 24
     de2:	9c 4f       	sbci	r25, 0xFC	; 252
     de4:	af 4f       	sbci	r26, 0xFF	; 255
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <ts_loadingNextIncrement>
     dec:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <ts_loadingNextIncrement+0x1>
     df0:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <ts_loadingNextIncrement+0x2>
     df4:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <ts_loadingNextIncrement+0x3>
		pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
     df8:	0f e0       	ldi	r16, 0x0F	; 15
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	28 e0       	ldi	r18, 0x08	; 8
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	ba 01       	movw	r22, r20
     e06:	81 ef       	ldi	r24, 0xF1	; 241
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN17Adafruit_NeoPixel4fillEmjj>
		pixels.setPixelColor(15, pixels.Color(10,0,10) );
     e0e:	2a e0       	ldi	r18, 0x0A	; 10
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	a9 01       	movw	r20, r18
     e14:	6f e0       	ldi	r22, 0x0F	; 15
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	81 ef       	ldi	r24, 0xF1	; 241
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
		pixels.show();
     e20:	81 ef       	ldi	r24, 0xF1	; 241
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>
	}
	
	if(	millis() > ts_loadingNextIncrement)
     e28:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     e2c:	00 91 a6 01 	lds	r16, 0x01A6	; 0x8001a6 <ts_loadingNextIncrement>
     e30:	10 91 a7 01 	lds	r17, 0x01A7	; 0x8001a7 <ts_loadingNextIncrement+0x1>
     e34:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <ts_loadingNextIncrement+0x2>
     e38:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <ts_loadingNextIncrement+0x3>
     e3c:	06 17       	cp	r16, r22
     e3e:	17 07       	cpc	r17, r23
     e40:	28 07       	cpc	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	d8 f5       	brcc	.+118    	; 0xebc <_Z19incrementLoadingBarv+0x106>
	{
		if(loadingBarPos < 8)
     e46:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <loadingBarPos>
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	a0 f5       	brcc	.+104    	; 0xeb6 <_Z19incrementLoadingBarv+0x100>
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
     e4e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	88 51       	subi	r24, 0x18	; 24
     e58:	9c 4f       	sbci	r25, 0xFC	; 252
     e5a:	af 4f       	sbci	r26, 0xFF	; 255
     e5c:	bf 4f       	sbci	r27, 0xFF	; 255
     e5e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <ts_loadingNextIncrement>
     e62:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <ts_loadingNextIncrement+0x1>
     e66:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <ts_loadingNextIncrement+0x2>
     e6a:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <ts_loadingNextIncrement+0x3>
			loadingBarPos++;
     e6e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <loadingBarPos>
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <loadingBarPos>
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
     e78:	0f e0       	ldi	r16, 0x0F	; 15
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	28 e0       	ldi	r18, 0x08	; 8
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	ba 01       	movw	r22, r20
     e86:	81 ef       	ldi	r24, 0xF1	; 241
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.fill( pixels.Color(10,0,10), 15-loadingBarPos+1, loadingBarPos);
     e8e:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <loadingBarPos>
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	20 e1       	ldi	r18, 0x10	; 16
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	20 1b       	sub	r18, r16
     e9a:	31 0b       	sbc	r19, r17
     e9c:	4a e0       	ldi	r20, 0x0A	; 10
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	ba 01       	movw	r22, r20
     ea2:	81 ef       	ldi	r24, 0xF1	; 241
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN17Adafruit_NeoPixel4fillEmjj>
			pixels.show();
     eaa:	81 ef       	ldi	r24, 0xF1	; 241
     eac:	91 e0       	ldi	r25, 0x01	; 1
		else
		{
			waitingForDisconnect = true;
		}
	}
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
		{
			ts_loadingNextIncrement = millis() + 1000;	//next increment is in 1 seconds
			loadingBarPos++;
			pixels.fill( pixels.Color(0,0,0), 8, 15);	//clear bottom row
			pixels.fill( pixels.Color(10,0,10), 15-loadingBarPos+1, loadingBarPos);
			pixels.show();
     eb2:	0c 94 19 14 	jmp	0x2832	; 0x2832 <_ZN17Adafruit_NeoPixel4showEv>
		}
		else
		{
			waitingForDisconnect = true;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <waitingForDisconnect>
		}
	}
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <loop>:
	display.setTextSize(1); // Draw 2X-scale text
	display.setTextColor(SSD1306_WHITE);
}

void loop() 
{
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
	//NSEC COMMUNICATION
	bool commLeftConnected = false;
	bool commRightConnected = false;
	if(digitalRead(SIG_L3) == LOW) //scan left port
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <digitalRead>
     ed8:	8c 01       	movw	r16, r24
	else
	{
		commLeftConnected = false;
	}
	
	if(digitalRead(SIG_R2) == LOW) //scan right port
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <digitalRead>
     ee0:	ec 01       	movw	r28, r24
		
		
	//--------------------------------------------
	//DEBUG OUTPUT
	static uint32_t ts_uart = 0;
	if(millis() - ts_uart > 100)
     ee2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     ee6:	c0 90 a2 01 	lds	r12, 0x01A2	; 0x8001a2 <_ZZ4loopE7ts_uart>
     eea:	d0 90 a3 01 	lds	r13, 0x01A3	; 0x8001a3 <_ZZ4loopE7ts_uart+0x1>
     eee:	e0 90 a4 01 	lds	r14, 0x01A4	; 0x8001a4 <_ZZ4loopE7ts_uart+0x2>
     ef2:	f0 90 a5 01 	lds	r15, 0x01A5	; 0x8001a5 <_ZZ4loopE7ts_uart+0x3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8c 19       	sub	r24, r12
     efc:	9d 09       	sbc	r25, r13
     efe:	ae 09       	sbc	r26, r14
     f00:	bf 09       	sbc	r27, r15
     f02:	85 36       	cpi	r24, 0x65	; 101
     f04:	91 05       	cpc	r25, r1
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	a0 f0       	brcs	.+40     	; 0xf34 <loop+0x72>
	{
		ts_uart = millis();
     f0c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     f10:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <_ZZ4loopE7ts_uart>
     f14:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <_ZZ4loopE7ts_uart+0x1>
     f18:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <_ZZ4loopE7ts_uart+0x2>
     f1c:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <_ZZ4loopE7ts_uart+0x3>
		Serial.println(millis());	
     f20:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     f24:	ab 01       	movw	r20, r22
     f26:	bc 01       	movw	r22, r24
     f28:	2a e0       	ldi	r18, 0x0A	; 10
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	87 e0       	ldi	r24, 0x07	; 7
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN5Print7printlnEmi>
  
  
	//--------------------------------------------
	//NEOPIXEL UPDATE
	static uint32_t ts_neopix = 0;
	if(millis() - ts_neopix > 10)
     f34:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     f38:	c0 90 9e 01 	lds	r12, 0x019E	; 0x80019e <_ZZ4loopE9ts_neopix>
     f3c:	d0 90 9f 01 	lds	r13, 0x019F	; 0x80019f <_ZZ4loopE9ts_neopix+0x1>
     f40:	e0 90 a0 01 	lds	r14, 0x01A0	; 0x8001a0 <_ZZ4loopE9ts_neopix+0x2>
     f44:	f0 90 a1 01 	lds	r15, 0x01A1	; 0x8001a1 <_ZZ4loopE9ts_neopix+0x3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8c 19       	sub	r24, r12
     f4e:	9d 09       	sbc	r25, r13
     f50:	ae 09       	sbc	r26, r14
     f52:	bf 09       	sbc	r27, r15
     f54:	0b 97       	sbiw	r24, 0x0b	; 11
     f56:	a1 05       	cpc	r26, r1
     f58:	b1 05       	cpc	r27, r1
     f5a:	60 f1       	brcs	.+88     	; 0xfb4 <loop+0xf2>
	{
		ts_neopix = millis();
     f5c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     f60:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_ZZ4loopE9ts_neopix>
     f64:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_ZZ4loopE9ts_neopix+0x1>
     f68:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_ZZ4loopE9ts_neopix+0x2>
     f6c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <_ZZ4loopE9ts_neopix+0x3>
		if(commLeftConnected == true)
     f70:	01 15       	cp	r16, r1
     f72:	11 05       	cpc	r17, r1
     f74:	61 f4       	brne	.+24     	; 0xf8e <loop+0xcc>
		{
			if(waitingForDisconnect == false)
     f76:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <waitingForDisconnect>
     f7a:	81 11       	cpse	r24, r1
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <loop+0xc6>
			{
				incrementLoadingBar();
     f7e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_Z19incrementLoadingBarv>
				neopix_connectLeft();
     f82:	0e 94 b0 06 	call	0xd60	; 0xd60 <_Z18neopix_connectLeftv>
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <loop+0xf2>
			}
			else
				neopix_success();		
     f88:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_Z14neopix_successv>
     f8c:	13 c0       	rjmp	.+38     	; 0xfb4 <loop+0xf2>
				
		}
		else if(commRightConnected == true)
     f8e:	20 97       	sbiw	r28, 0x00	; 0
     f90:	49 f4       	brne	.+18     	; 0xfa4 <loop+0xe2>
		{
			if(waitingForDisconnect == false)
     f92:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <waitingForDisconnect>
     f96:	81 11       	cpse	r24, r1
     f98:	f7 cf       	rjmp	.-18     	; 0xf88 <loop+0xc6>
			{
				neopix_connectRight();
     f9a:	0e 94 83 06 	call	0xd06	; 0xd06 <_Z19neopix_connectRightv>
				incrementLoadingBar();
     f9e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_Z19incrementLoadingBarv>
     fa2:	08 c0       	rjmp	.+16     	; 0xfb4 <loop+0xf2>
			else
				neopix_success();
		}
		else
		{
			neopix_idle();
     fa4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_Z11neopix_idlev>
			waitingForDisconnect = false;	//clear loading bar variables
     fa8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <waitingForDisconnect>
			currentlyLoading = false;
     fac:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <currentlyLoading>
			loadingBarPos = 0;
     fb0:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <loadingBarPos>

	
	//--------------------------------------------
	//DISPLAY UPDATE
	static uint32_t ts_oled = 0;
	if(millis() - ts_oled > 100)
     fb4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     fb8:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <_ZZ4loopE7ts_oled>
     fbc:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <_ZZ4loopE7ts_oled+0x1>
     fc0:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <_ZZ4loopE7ts_oled+0x2>
     fc4:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <_ZZ4loopE7ts_oled+0x3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8c 19       	sub	r24, r12
     fce:	9d 09       	sbc	r25, r13
     fd0:	ae 09       	sbc	r26, r14
     fd2:	bf 09       	sbc	r27, r15
     fd4:	85 36       	cpi	r24, 0x65	; 101
     fd6:	91 05       	cpc	r25, r1
     fd8:	a1 05       	cpc	r26, r1
     fda:	b1 05       	cpc	r27, r1
     fdc:	90 f1       	brcs	.+100    	; 0x1042 <loop+0x180>
	{
		ts_oled = millis();
     fde:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <millis>
     fe2:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <_ZZ4loopE7ts_oled>
     fe6:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <_ZZ4loopE7ts_oled+0x1>
     fea:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZZ4loopE7ts_oled+0x2>
     fee:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZZ4loopE7ts_oled+0x3>
		display.clearDisplay();
     ff2:	81 eb       	ldi	r24, 0xB1	; 177
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     ffa:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <display+0xd>
     ffe:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <display+0xc>
    cursor_y = y;
    1002:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <display+0xf>
    1006:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <display+0xe>
		display.setCursor(0,0);
		if		(commLeftConnected==true)
    100a:	01 2b       	or	r16, r17
    100c:	19 f4       	brne	.+6      	; 0x1014 <loop+0x152>
			display.println(F("left connected"));
    100e:	65 e8       	ldi	r22, 0x85	; 133
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <loop+0x160>
		else if (commRightConnected==true)
    1014:	cd 2b       	or	r28, r29
    1016:	19 f4       	brne	.+6      	; 0x101e <loop+0x15c>
			display.println(F("right connected"));
    1018:	65 e7       	ldi	r22, 0x75	; 117
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <loop+0x160>
		else
			display.println(F("disconnected"));
    101e:	68 e6       	ldi	r22, 0x68	; 104
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	81 eb       	ldi	r24, 0xB1	; 177
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN5Print7printlnEPK19__FlashStringHelper>
		display.display();	
    102a:	81 eb       	ldi	r24, 0xB1	; 177
    102c:	91 e0       	ldi	r25, 0x01	; 1
	}
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
			display.println(F("left connected"));
		else if (commRightConnected==true)
			display.println(F("right connected"));
		else
			display.println(F("disconnected"));
		display.display();	
    103e:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <_ZN16Adafruit_SSD13067displayEv>
	}
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	08 95       	ret

00001054 <_GLOBAL__sub_I_pixels>:
		else
		{
			waitingForDisconnect = true;
		}
	}
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
#include <Adafruit_SSD1306.h>

//NEOPIXEL DECLARATION
#define PIN			9
#define NUMPIXELS	16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    1066:	22 e5       	ldi	r18, 0x52	; 82
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	49 e0       	ldi	r20, 0x09	; 9
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	60 e1       	ldi	r22, 0x10	; 16
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	81 ef       	ldi	r24, 0xF1	; 241
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <_ZN17Adafruit_NeoPixelC1Ejij>
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    107a:	80 ea       	ldi	r24, 0xA0	; 160
    107c:	88 2e       	mov	r8, r24
    107e:	86 e8       	ldi	r24, 0x86	; 134
    1080:	98 2e       	mov	r9, r24
    1082:	aa 24       	eor	r10, r10
    1084:	a3 94       	inc	r10
    1086:	b1 2c       	mov	r11, r1
    1088:	90 e8       	ldi	r25, 0x80	; 128
    108a:	c9 2e       	mov	r12, r25
    108c:	9a e1       	ldi	r25, 0x1A	; 26
    108e:	d9 2e       	mov	r13, r25
    1090:	96 e0       	ldi	r25, 0x06	; 6
    1092:	e9 2e       	mov	r14, r25
    1094:	f1 2c       	mov	r15, r1
    1096:	0f ef       	ldi	r16, 0xFF	; 255
    1098:	21 eb       	ldi	r18, 0xB1	; 177
    109a:	32 e0       	ldi	r19, 0x02	; 2
    109c:	40 e2       	ldi	r20, 0x20	; 32
    109e:	60 e8       	ldi	r22, 0x80	; 128
    10a0:	81 eb       	ldi	r24, 0xB1	; 177
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
		else
		{
			waitingForDisconnect = true;
		}
	}
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	08 95       	ret

000010bc <_GLOBAL__sub_D_pixels>:
//OLED DECLARATIONS
#define SCREEN_WIDTH	128 // OLED display width, in pixels
#define SCREEN_HEIGHT	32 // OLED display height, in pixels
#define OLED_RESET		-1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS	0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    10bc:	81 eb       	ldi	r24, 0xB1	; 177
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN16Adafruit_SSD1306D1Ev>
#include <Adafruit_SSD1306.h>

//NEOPIXEL DECLARATION
#define PIN			9
#define NUMPIXELS	16
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    10c4:	81 ef       	ldi	r24, 0xF1	; 241
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0c 94 84 13 	jmp	0x2708	; 0x2708 <_ZN17Adafruit_NeoPixelD1Ev>

000010cc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10cc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    10ce:	91 8d       	ldd	r25, Z+25	; 0x19
    10d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    10d2:	89 2f       	mov	r24, r25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	80 5c       	subi	r24, 0xC0	; 192
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	82 1b       	sub	r24, r18
    10dc:	91 09       	sbc	r25, r1
}
    10de:	8f 73       	andi	r24, 0x3F	; 63
    10e0:	99 27       	eor	r25, r25
    10e2:	08 95       	ret

000010e4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    10e4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    10e6:	91 8d       	ldd	r25, Z+25	; 0x19
    10e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    10ea:	98 17       	cp	r25, r24
    10ec:	31 f0       	breq	.+12     	; 0x10fa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    10ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f0:	e8 0f       	add	r30, r24
    10f2:	f1 1d       	adc	r31, r1
    10f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    10fe:	08 95       	ret

00001100 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1100:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1102:	91 8d       	ldd	r25, Z+25	; 0x19
    1104:	82 8d       	ldd	r24, Z+26	; 0x1a
    1106:	98 17       	cp	r25, r24
    1108:	61 f0       	breq	.+24     	; 0x1122 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    110a:	82 8d       	ldd	r24, Z+26	; 0x1a
    110c:	df 01       	movw	r26, r30
    110e:	a8 0f       	add	r26, r24
    1110:	b1 1d       	adc	r27, r1
    1112:	5d 96       	adiw	r26, 0x1d	; 29
    1114:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1116:	92 8d       	ldd	r25, Z+26	; 0x1a
    1118:	9f 5f       	subi	r25, 0xFF	; 255
    111a:	9f 73       	andi	r25, 0x3F	; 63
    111c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1126:	08 95       	ret

00001128 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1128:	fc 01       	movw	r30, r24
    112a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    112c:	44 8d       	ldd	r20, Z+28	; 0x1c
    112e:	25 2f       	mov	r18, r21
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	84 2f       	mov	r24, r20
    1134:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1136:	82 1b       	sub	r24, r18
    1138:	93 0b       	sbc	r25, r19
    113a:	54 17       	cp	r21, r20
    113c:	10 f0       	brcs	.+4      	; 0x1142 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    113e:	cf 96       	adiw	r24, 0x3f	; 63
    1140:	08 95       	ret
  return tail - head - 1;
    1142:	01 97       	sbiw	r24, 0x01	; 1
}
    1144:	08 95       	ret

00001146 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1146:	8e ef       	ldi	r24, 0xFE	; 254
    1148:	99 e0       	ldi	r25, 0x09	; 9
    114a:	89 2b       	or	r24, r25
    114c:	49 f0       	breq	.+18     	; 0x1160 <_Z14serialEventRunv+0x1a>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	89 2b       	or	r24, r25
    1154:	29 f0       	breq	.+10     	; 0x1160 <_Z14serialEventRunv+0x1a>
    1156:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z17Serial0_availablev>
    115a:	81 11       	cpse	r24, r1
    115c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1160:	08 95       	ret

00001162 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1162:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1164:	84 8d       	ldd	r24, Z+28	; 0x1c
    1166:	df 01       	movw	r26, r30
    1168:	a8 0f       	add	r26, r24
    116a:	b1 1d       	adc	r27, r1
    116c:	a3 5a       	subi	r26, 0xA3	; 163
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1172:	84 8d       	ldd	r24, Z+28	; 0x1c
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	8f 73       	andi	r24, 0x3F	; 63
    117a:	99 27       	eor	r25, r25
    117c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    117e:	a6 89       	ldd	r26, Z+22	; 0x16
    1180:	b7 89       	ldd	r27, Z+23	; 0x17
    1182:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1184:	a0 89       	ldd	r26, Z+16	; 0x10
    1186:	b1 89       	ldd	r27, Z+17	; 0x11
    1188:	8c 91       	ld	r24, X
    118a:	83 70       	andi	r24, 0x03	; 3
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1190:	93 8d       	ldd	r25, Z+27	; 0x1b
    1192:	84 8d       	ldd	r24, Z+28	; 0x1c
    1194:	98 13       	cpse	r25, r24
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1198:	02 88       	ldd	r0, Z+18	; 0x12
    119a:	f3 89       	ldd	r31, Z+19	; 0x13
    119c:	e0 2d       	mov	r30, r0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7d       	andi	r24, 0xDF	; 223
    11a2:	80 83       	st	Z, r24
    11a4:	08 95       	ret

000011a6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	ec 01       	movw	r28, r24
  _written = true;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    11b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11bc:	98 13       	cpse	r25, r24
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <_ZN14HardwareSerial5writeEh+0x24>
    11c0:	e8 89       	ldd	r30, Y+16	; 0x10
    11c2:	f9 89       	ldd	r31, Y+17	; 0x11
    11c4:	80 81       	ld	r24, Z
    11c6:	85 fd       	sbrc	r24, 5
    11c8:	26 c0       	rjmp	.+76     	; 0x1216 <_ZN14HardwareSerial5writeEh+0x70>
    11ca:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    11cc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	0f 5f       	subi	r16, 0xFF	; 255
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	0f 73       	andi	r16, 0x3F	; 63
    11d6:	11 27       	eor	r17, r17
    11d8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    11da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11dc:	e8 12       	cpse	r14, r24
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	07 fc       	sbrc	r0, 7
    11e4:	fa cf       	rjmp	.-12     	; 0x11da <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11e6:	e8 89       	ldd	r30, Y+16	; 0x10
    11e8:	f9 89       	ldd	r31, Y+17	; 0x11
    11ea:	80 81       	ld	r24, Z
    11ec:	85 ff       	sbrs	r24, 5
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    11f0:	ce 01       	movw	r24, r28
    11f2:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11f6:	f1 cf       	rjmp	.-30     	; 0x11da <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11fa:	fe 01       	movw	r30, r28
    11fc:	e8 0f       	add	r30, r24
    11fe:	f1 1d       	adc	r31, r1
    1200:	e3 5a       	subi	r30, 0xA3	; 163
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1206:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1208:	f8 94       	cli
    _tx_buffer_head = i;
    120a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    120c:	ea 89       	ldd	r30, Y+18	; 0x12
    120e:	fb 89       	ldd	r31, Y+19	; 0x13
    1210:	80 81       	ld	r24, Z
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	0a c0       	rjmp	.+20     	; 0x122a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1216:	9f b7       	in	r25, 0x3f	; 63
    1218:	f8 94       	cli
      *_udr = c;
    121a:	ee 89       	ldd	r30, Y+22	; 0x16
    121c:	ff 89       	ldd	r31, Y+23	; 0x17
    121e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1220:	e8 89       	ldd	r30, Y+16	; 0x10
    1222:	f9 89       	ldd	r31, Y+17	; 0x11
    1224:	80 81       	ld	r24, Z
    1226:	83 70       	andi	r24, 0x03	; 3
    1228:	80 64       	ori	r24, 0x40	; 64
    122a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    122c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1246:	88 8d       	ldd	r24, Y+24	; 0x18
    1248:	88 23       	and	r24, r24
    124a:	c9 f0       	breq	.+50     	; 0x127e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    124c:	ea 89       	ldd	r30, Y+18	; 0x12
    124e:	fb 89       	ldd	r31, Y+19	; 0x13
    1250:	80 81       	ld	r24, Z
    1252:	85 fd       	sbrc	r24, 5
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <_ZN14HardwareSerial5flushEv+0x20>
    1256:	a8 89       	ldd	r26, Y+16	; 0x10
    1258:	b9 89       	ldd	r27, Y+17	; 0x11
    125a:	8c 91       	ld	r24, X
    125c:	86 fd       	sbrc	r24, 6
    125e:	0f c0       	rjmp	.+30     	; 0x127e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	07 fc       	sbrc	r0, 7
    1264:	f5 cf       	rjmp	.-22     	; 0x1250 <_ZN14HardwareSerial5flushEv+0x10>
    1266:	80 81       	ld	r24, Z
    1268:	85 ff       	sbrs	r24, 5
    126a:	f2 cf       	rjmp	.-28     	; 0x1250 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    126c:	a8 89       	ldd	r26, Y+16	; 0x10
    126e:	b9 89       	ldd	r27, Y+17	; 0x11
    1270:	8c 91       	ld	r24, X
    1272:	85 ff       	sbrs	r24, 5
    1274:	ed cf       	rjmp	.-38     	; 0x1250 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1276:	ce 01       	movw	r24, r28
    1278:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    127c:	e7 cf       	rjmp	.-50     	; 0x124c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	6a 01       	movw	r12, r20
    1296:	7b 01       	movw	r14, r22
    1298:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    129a:	60 e8       	ldi	r22, 0x80	; 128
    129c:	74 e8       	ldi	r23, 0x84	; 132
    129e:	8e e1       	ldi	r24, 0x1E	; 30
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a7 01       	movw	r20, r14
    12a4:	96 01       	movw	r18, r12
    12a6:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodsi4>
    12aa:	da 01       	movw	r26, r20
    12ac:	c9 01       	movw	r24, r18
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	a1 09       	sbc	r26, r1
    12b2:	b1 09       	sbc	r27, r1
    12b4:	b6 95       	lsr	r27
    12b6:	a7 95       	ror	r26
    12b8:	97 95       	ror	r25
    12ba:	87 95       	ror	r24
    12bc:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    12be:	e8 89       	ldd	r30, Y+16	; 0x10
    12c0:	f9 89       	ldd	r31, Y+17	; 0x11
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12c6:	21 15       	cp	r18, r1
    12c8:	80 e1       	ldi	r24, 0x10	; 16
    12ca:	38 07       	cpc	r19, r24
    12cc:	a8 f0       	brcs	.+42     	; 0x12f8 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    12ce:	e8 89       	ldd	r30, Y+16	; 0x10
    12d0:	f9 89       	ldd	r31, Y+17	; 0x11
    12d2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    12d4:	60 e4       	ldi	r22, 0x40	; 64
    12d6:	72 e4       	ldi	r23, 0x42	; 66
    12d8:	8f e0       	ldi	r24, 0x0F	; 15
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a7 01       	movw	r20, r14
    12de:	96 01       	movw	r18, r12
    12e0:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodsi4>
    12e4:	da 01       	movw	r26, r20
    12e6:	c9 01       	movw	r24, r18
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	a1 09       	sbc	r26, r1
    12ec:	b1 09       	sbc	r27, r1
    12ee:	b6 95       	lsr	r27
    12f0:	a7 95       	ror	r26
    12f2:	97 95       	ror	r25
    12f4:	87 95       	ror	r24
    12f6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    12f8:	ec 85       	ldd	r30, Y+12	; 0x0c
    12fa:	fd 85       	ldd	r31, Y+13	; 0x0d
    12fc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    12fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1300:	ff 85       	ldd	r31, Y+15	; 0x0f
    1302:	20 83       	st	Z, r18

  _written = false;
    1304:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1306:	ec 89       	ldd	r30, Y+20	; 0x14
    1308:	fd 89       	ldd	r31, Y+21	; 0x15
    130a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    130c:	ea 89       	ldd	r30, Y+18	; 0x12
    130e:	fb 89       	ldd	r31, Y+19	; 0x13
    1310:	80 81       	ld	r24, Z
    1312:	80 61       	ori	r24, 0x10	; 16
    1314:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1316:	ea 89       	ldd	r30, Y+18	; 0x12
    1318:	fb 89       	ldd	r31, Y+19	; 0x13
    131a:	80 81       	ld	r24, Z
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1320:	ea 89       	ldd	r30, Y+18	; 0x12
    1322:	fb 89       	ldd	r31, Y+19	; 0x13
    1324:	80 81       	ld	r24, Z
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    132a:	ea 89       	ldd	r30, Y+18	; 0x12
    132c:	fb 89       	ldd	r31, Y+19	; 0x13
    132e:	80 81       	ld	r24, Z
    1330:	8f 7d       	andi	r24, 0xDF	; 223
    1332:	80 83       	st	Z, r24
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	08 95       	ret

00001344 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	08 95       	ret

0000134a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    134a:	08 95       	ret

0000134c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1360:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <Serial+0x10>
    1364:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <Serial+0x11>
    1368:	80 81       	ld	r24, Z
    136a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <Serial+0x16>
    136e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <Serial+0x17>
    1372:	82 fd       	sbrc	r24, 2
    1374:	12 c0       	rjmp	.+36     	; 0x139a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1376:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1378:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Serial+0x19>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1380:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <Serial+0x1a>
    1384:	82 17       	cp	r24, r18
    1386:	51 f0       	breq	.+20     	; 0x139c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1388:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <Serial+0x19>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	e9 5f       	subi	r30, 0xF9	; 249
    1390:	fd 4f       	sbci	r31, 0xFD	; 253
    1392:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1394:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Serial+0x19>
    1398:	01 c0       	rjmp	.+2      	; 0x139c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    139a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    13d2:	87 e0       	ldi	r24, 0x07	; 7
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13fc:	87 e0       	ldi	r24, 0x07	; 7
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 66 08 	call	0x10cc	; 0x10cc <_ZN14HardwareSerial9availableEv>
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	89 2b       	or	r24, r25
    1408:	09 f4       	brne	.+2      	; 0x140c <_Z17Serial0_availablev+0x10>
    140a:	20 e0       	ldi	r18, 0x00	; 0
}
    140c:	82 2f       	mov	r24, r18
    140e:	08 95       	ret

00001410 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1410:	e7 e0       	ldi	r30, 0x07	; 7
    1412:	f2 e0       	ldi	r31, 0x02	; 2
    1414:	13 82       	std	Z+3, r1	; 0x03
    1416:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1418:	88 ee       	ldi	r24, 0xE8	; 232
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	84 83       	std	Z+4, r24	; 0x04
    1422:	95 83       	std	Z+5, r25	; 0x05
    1424:	a6 83       	std	Z+6, r26	; 0x06
    1426:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1428:	8e e0       	ldi	r24, 0x0E	; 14
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24
    1430:	85 ec       	ldi	r24, 0xC5	; 197
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	95 87       	std	Z+13, r25	; 0x0d
    1436:	84 87       	std	Z+12, r24	; 0x0c
    1438:	84 ec       	ldi	r24, 0xC4	; 196
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	97 87       	std	Z+15, r25	; 0x0f
    143e:	86 87       	std	Z+14, r24	; 0x0e
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	91 8b       	std	Z+17, r25	; 0x11
    1446:	80 8b       	std	Z+16, r24	; 0x10
    1448:	81 ec       	ldi	r24, 0xC1	; 193
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	93 8b       	std	Z+19, r25	; 0x13
    144e:	82 8b       	std	Z+18, r24	; 0x12
    1450:	82 ec       	ldi	r24, 0xC2	; 194
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	95 8b       	std	Z+21, r25	; 0x15
    1456:	84 8b       	std	Z+20, r24	; 0x14
    1458:	86 ec       	ldi	r24, 0xC6	; 198
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	97 8b       	std	Z+23, r25	; 0x17
    145e:	86 8b       	std	Z+22, r24	; 0x16
    1460:	11 8e       	std	Z+25, r1	; 0x19
    1462:	12 8e       	std	Z+26, r1	; 0x1a
    1464:	13 8e       	std	Z+27, r1	; 0x1b
    1466:	14 8e       	std	Z+28, r1	; 0x1c
    1468:	08 95       	ret

0000146a <initVariant>:
    146a:	08 95       	ret

0000146c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    146c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <init>

	initVariant();
    1470:	0e 94 35 0a 	call	0x146a	; 0x146a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1474:	0e 94 96 05 	call	0xb2c	; 0xb2c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1478:	c3 ea       	ldi	r28, 0xA3	; 163
    147a:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    147c:	0e 94 61 07 	call	0xec2	; 0xec2 <loop>
		if (serialEventRun) serialEventRun();
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	e1 f3       	breq	.-8      	; 0x147c <main+0x10>
    1484:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z14serialEventRunv>
    1488:	f9 cf       	rjmp	.-14     	; 0x147c <main+0x10>

0000148a <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	6c 01       	movw	r12, r24
    149c:	7a 01       	movw	r14, r20
    149e:	8b 01       	movw	r16, r22
    14a0:	c0 e0       	ldi	r28, 0x00	; 0
    14a2:	d0 e0       	ldi	r29, 0x00	; 0
    14a4:	ce 15       	cp	r28, r14
    14a6:	df 05       	cpc	r29, r15
    14a8:	81 f0       	breq	.+32     	; 0x14ca <_ZN5Print5writeEPKhj+0x40>
    14aa:	d8 01       	movw	r26, r16
    14ac:	6d 91       	ld	r22, X+
    14ae:	8d 01       	movw	r16, r26
    14b0:	d6 01       	movw	r26, r12
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	01 90       	ld	r0, Z+
    14b8:	f0 81       	ld	r31, Z
    14ba:	e0 2d       	mov	r30, r0
    14bc:	c6 01       	movw	r24, r12
    14be:	09 95       	icall
    14c0:	89 2b       	or	r24, r25
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <_ZN5Print5writeEPKhj+0x3e>
    14c4:	21 96       	adiw	r28, 0x01	; 1
    14c6:	ee cf       	rjmp	.-36     	; 0x14a4 <_ZN5Print5writeEPKhj+0x1a>
    14c8:	7e 01       	movw	r14, r28
    14ca:	c7 01       	movw	r24, r14
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	08 95       	ret

000014de <_ZN5Print5writeEPKc>:
    14de:	61 15       	cp	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	79 f0       	breq	.+30     	; 0x1502 <_ZN5Print5writeEPKc+0x24>
    14e4:	fb 01       	movw	r30, r22
    14e6:	01 90       	ld	r0, Z+
    14e8:	00 20       	and	r0, r0
    14ea:	e9 f7       	brne	.-6      	; 0x14e6 <_ZN5Print5writeEPKc+0x8>
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	af 01       	movw	r20, r30
    14f0:	46 1b       	sub	r20, r22
    14f2:	57 0b       	sbc	r21, r23
    14f4:	dc 01       	movw	r26, r24
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	02 80       	ldd	r0, Z+2	; 0x02
    14fc:	f3 81       	ldd	r31, Z+3	; 0x03
    14fe:	e0 2d       	mov	r30, r0
    1500:	09 94       	ijmp
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	08 95       	ret

00001508 <_ZN5Print5printEPK19__FlashStringHelper>:
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	8c 01       	movw	r16, r24
    1516:	7b 01       	movw	r14, r22
    1518:	c0 e0       	ldi	r28, 0x00	; 0
    151a:	d0 e0       	ldi	r29, 0x00	; 0
    151c:	f7 01       	movw	r30, r14
    151e:	ec 0f       	add	r30, r28
    1520:	fd 1f       	adc	r31, r29
    1522:	64 91       	lpm	r22, Z
    1524:	66 23       	and	r22, r22
    1526:	61 f0       	breq	.+24     	; 0x1540 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1528:	d8 01       	movw	r26, r16
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	01 90       	ld	r0, Z+
    1530:	f0 81       	ld	r31, Z
    1532:	e0 2d       	mov	r30, r0
    1534:	c8 01       	movw	r24, r16
    1536:	09 95       	icall
    1538:	89 2b       	or	r24, r25
    153a:	11 f0       	breq	.+4      	; 0x1540 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    153c:	21 96       	adiw	r28, 0x01	; 1
    153e:	ee cf       	rjmp	.-36     	; 0x151c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1540:	ce 01       	movw	r24, r28
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	08 95       	ret

00001550 <_ZN5Print7printlnEv>:
    1550:	6c e1       	ldi	r22, 0x1C	; 28
    1552:	71 e0       	ldi	r23, 0x01	; 1
    1554:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <_ZN5Print5writeEPKc>

00001558 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN5Print5printEPK19__FlashStringHelper>
    1566:	8c 01       	movw	r16, r24
    1568:	ce 01       	movw	r24, r28
    156a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print7printlnEv>
    156e:	80 0f       	add	r24, r16
    1570:	91 1f       	adc	r25, r17
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <_ZN5Print11printNumberEmh>:
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	a1 97       	sbiw	r28, 0x21	; 33
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	7c 01       	movw	r14, r24
    15a2:	fa 01       	movw	r30, r20
    15a4:	cb 01       	movw	r24, r22
    15a6:	19 a2       	std	Y+33, r1	; 0x21
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <_ZN5Print11printNumberEmh+0x32>
    15ac:	2a e0       	ldi	r18, 0x0A	; 10
    15ae:	8e 01       	movw	r16, r28
    15b0:	0f 5d       	subi	r16, 0xDF	; 223
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	82 2e       	mov	r8, r18
    15b6:	91 2c       	mov	r9, r1
    15b8:	a1 2c       	mov	r10, r1
    15ba:	b1 2c       	mov	r11, r1
    15bc:	bf 01       	movw	r22, r30
    15be:	a5 01       	movw	r20, r10
    15c0:	94 01       	movw	r18, r8
    15c2:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodsi4>
    15c6:	f9 01       	movw	r30, r18
    15c8:	ca 01       	movw	r24, r20
    15ca:	01 50       	subi	r16, 0x01	; 1
    15cc:	11 09       	sbc	r17, r1
    15ce:	6a 30       	cpi	r22, 0x0A	; 10
    15d0:	10 f4       	brcc	.+4      	; 0x15d6 <_ZN5Print11printNumberEmh+0x5a>
    15d2:	60 5d       	subi	r22, 0xD0	; 208
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <_ZN5Print11printNumberEmh+0x5c>
    15d6:	69 5c       	subi	r22, 0xC9	; 201
    15d8:	d8 01       	movw	r26, r16
    15da:	6c 93       	st	X, r22
    15dc:	23 2b       	or	r18, r19
    15de:	24 2b       	or	r18, r20
    15e0:	25 2b       	or	r18, r21
    15e2:	61 f7       	brne	.-40     	; 0x15bc <_ZN5Print11printNumberEmh+0x40>
    15e4:	b8 01       	movw	r22, r16
    15e6:	c7 01       	movw	r24, r14
    15e8:	0e 94 6f 0a 	call	0x14de	; 0x14de <_ZN5Print5writeEPKc>
    15ec:	a1 96       	adiw	r28, 0x21	; 33
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	08 95       	ret

0000160e <_ZN5Print5printEmi>:
    160e:	21 15       	cp	r18, r1
    1610:	31 05       	cpc	r19, r1
    1612:	41 f4       	brne	.+16     	; 0x1624 <_ZN5Print5printEmi+0x16>
    1614:	dc 01       	movw	r26, r24
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	01 90       	ld	r0, Z+
    161c:	f0 81       	ld	r31, Z
    161e:	e0 2d       	mov	r30, r0
    1620:	64 2f       	mov	r22, r20
    1622:	09 94       	ijmp
    1624:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_ZN5Print11printNumberEmh>

00001628 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1632:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN5Print5printEmi>
    1636:	8c 01       	movw	r16, r24
  n += println();
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print7printlnEv>
  return n;
}
    163e:	80 0f       	add	r24, r16
    1640:	91 1f       	adc	r25, r17
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	8f 93       	push	r24
    165c:	9f 93       	push	r25
    165e:	af 93       	push	r26
    1660:	bf 93       	push	r27
    1662:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <timer0_millis>
    1666:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <timer0_millis+0x1>
    166a:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <timer0_millis+0x2>
    166e:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <timer0_millis+0x3>
    1672:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <timer0_fract>
    1676:	26 e0       	ldi	r18, 0x06	; 6
    1678:	23 0f       	add	r18, r19
    167a:	2d 37       	cpi	r18, 0x7D	; 125
    167c:	20 f4       	brcc	.+8      	; 0x1686 <__vector_16+0x3a>
    167e:	02 96       	adiw	r24, 0x02	; 2
    1680:	a1 1d       	adc	r26, r1
    1682:	b1 1d       	adc	r27, r1
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <__vector_16+0x44>
    1686:	29 e8       	ldi	r18, 0x89	; 137
    1688:	23 0f       	add	r18, r19
    168a:	03 96       	adiw	r24, 0x03	; 3
    168c:	a1 1d       	adc	r26, r1
    168e:	b1 1d       	adc	r27, r1
    1690:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <timer0_fract>
    1694:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <timer0_millis>
    1698:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <timer0_millis+0x1>
    169c:	a0 93 a7 02 	sts	0x02A7, r26	; 0x8002a7 <timer0_millis+0x2>
    16a0:	b0 93 a8 02 	sts	0x02A8, r27	; 0x8002a8 <timer0_millis+0x3>
    16a4:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_overflow_count>
    16a8:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_overflow_count+0x1>
    16ac:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <timer0_overflow_count+0x2>
    16b0:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <timer0_overflow_count+0x3>
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	a1 1d       	adc	r26, r1
    16b8:	b1 1d       	adc	r27, r1
    16ba:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <timer0_overflow_count>
    16be:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <timer0_overflow_count+0x1>
    16c2:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <timer0_overflow_count+0x2>
    16c6:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <timer0_overflow_count+0x3>
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <millis>:
    16e0:	2f b7       	in	r18, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <timer0_millis>
    16e8:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <timer0_millis+0x1>
    16ec:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <timer0_millis+0x2>
    16f0:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <timer0_millis+0x3>
    16f4:	2f bf       	out	0x3f, r18	; 63
    16f6:	08 95       	ret

000016f8 <micros>:
    16f8:	3f b7       	in	r19, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_overflow_count>
    1700:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_overflow_count+0x1>
    1704:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <timer0_overflow_count+0x2>
    1708:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <timer0_overflow_count+0x3>
    170c:	26 b5       	in	r18, 0x26	; 38
    170e:	a8 9b       	sbis	0x15, 0	; 21
    1710:	05 c0       	rjmp	.+10     	; 0x171c <micros+0x24>
    1712:	2f 3f       	cpi	r18, 0xFF	; 255
    1714:	19 f0       	breq	.+6      	; 0x171c <micros+0x24>
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	a1 1d       	adc	r26, r1
    171a:	b1 1d       	adc	r27, r1
    171c:	3f bf       	out	0x3f, r19	; 63
    171e:	ba 2f       	mov	r27, r26
    1720:	a9 2f       	mov	r26, r25
    1722:	98 2f       	mov	r25, r24
    1724:	88 27       	eor	r24, r24
    1726:	82 0f       	add	r24, r18
    1728:	91 1d       	adc	r25, r1
    172a:	a1 1d       	adc	r26, r1
    172c:	b1 1d       	adc	r27, r1
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	43 e0       	ldi	r20, 0x03	; 3
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	4a 95       	dec	r20
    173e:	d1 f7       	brne	.-12     	; 0x1734 <micros+0x3c>
    1740:	08 95       	ret

00001742 <delay>:
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	6b 01       	movw	r12, r22
    1754:	7c 01       	movw	r14, r24
    1756:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    175a:	4b 01       	movw	r8, r22
    175c:	5c 01       	movw	r10, r24
    175e:	c1 14       	cp	r12, r1
    1760:	d1 04       	cpc	r13, r1
    1762:	e1 04       	cpc	r14, r1
    1764:	f1 04       	cpc	r15, r1
    1766:	01 f1       	breq	.+64     	; 0x17a8 <delay+0x66>
    1768:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <yield>
    176c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	88 19       	sub	r24, r8
    1776:	99 09       	sbc	r25, r9
    1778:	aa 09       	sbc	r26, r10
    177a:	bb 09       	sbc	r27, r11
    177c:	88 3e       	cpi	r24, 0xE8	; 232
    177e:	93 40       	sbci	r25, 0x03	; 3
    1780:	a1 05       	cpc	r26, r1
    1782:	b1 05       	cpc	r27, r1
    1784:	60 f3       	brcs	.-40     	; 0x175e <delay+0x1c>
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	c2 1a       	sub	r12, r18
    178a:	d1 08       	sbc	r13, r1
    178c:	e1 08       	sbc	r14, r1
    178e:	f1 08       	sbc	r15, r1
    1790:	88 ee       	ldi	r24, 0xE8	; 232
    1792:	88 0e       	add	r8, r24
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	98 1e       	adc	r9, r24
    1798:	a1 1c       	adc	r10, r1
    179a:	b1 1c       	adc	r11, r1
    179c:	c1 14       	cp	r12, r1
    179e:	d1 04       	cpc	r13, r1
    17a0:	e1 04       	cpc	r14, r1
    17a2:	f1 04       	cpc	r15, r1
    17a4:	19 f7       	brne	.-58     	; 0x176c <delay+0x2a>
    17a6:	db cf       	rjmp	.-74     	; 0x175e <delay+0x1c>
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	08 95       	ret

000017ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17bc:	84 b5       	in	r24, 0x24	; 36
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17c2:	84 b5       	in	r24, 0x24	; 36
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17c8:	85 b5       	in	r24, 0x25	; 37
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17ce:	85 b5       	in	r24, 0x25	; 37
    17d0:	81 60       	ori	r24, 0x01	; 1
    17d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17d4:	ee e6       	ldi	r30, 0x6E	; 110
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17de:	e1 e8       	ldi	r30, 0x81	; 129
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17e4:	80 81       	ld	r24, Z
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    17ea:	80 81       	ld	r24, Z
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    17f0:	e0 e8       	ldi	r30, 0x80	; 128
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	81 60       	ori	r24, 0x01	; 1
    17f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    17fa:	e1 eb       	ldi	r30, 0xB1	; 177
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	84 60       	ori	r24, 0x04	; 4
    1802:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1804:	e0 eb       	ldi	r30, 0xB0	; 176
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    180e:	ea e7       	ldi	r30, 0x7A	; 122
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1818:	80 81       	ld	r24, Z
    181a:	82 60       	ori	r24, 0x02	; 2
    181c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    181e:	80 81       	ld	r24, Z
    1820:	8e 7f       	andi	r24, 0xFE	; 254
    1822:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1824:	80 81       	ld	r24, Z
    1826:	80 68       	ori	r24, 0x80	; 128
    1828:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    182a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    182e:	08 95       	ret

00001830 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	81 f0       	breq	.+32     	; 0x1854 <turnOffPWM+0x24>
    1834:	28 f4       	brcc	.+10     	; 0x1840 <turnOffPWM+0x10>
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	99 f0       	breq	.+38     	; 0x1860 <turnOffPWM+0x30>
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	a1 f0       	breq	.+40     	; 0x1866 <turnOffPWM+0x36>
    183e:	08 95       	ret
    1840:	87 30       	cpi	r24, 0x07	; 7
    1842:	a9 f0       	breq	.+42     	; 0x186e <turnOffPWM+0x3e>
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	b9 f0       	breq	.+46     	; 0x1876 <turnOffPWM+0x46>
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	d1 f4       	brne	.+52     	; 0x1880 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    184c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1850:	8f 7d       	andi	r24, 0xDF	; 223
    1852:	03 c0       	rjmp	.+6      	; 0x185a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1854:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1858:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    185a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    185e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1860:	84 b5       	in	r24, 0x24	; 36
    1862:	8f 77       	andi	r24, 0x7F	; 127
    1864:	02 c0       	rjmp	.+4      	; 0x186a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1866:	84 b5       	in	r24, 0x24	; 36
    1868:	8f 7d       	andi	r24, 0xDF	; 223
    186a:	84 bd       	out	0x24, r24	; 36
    186c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    186e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1872:	8f 77       	andi	r24, 0x7F	; 127
    1874:	03 c0       	rjmp	.+6      	; 0x187c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1876:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    187a:	8f 7d       	andi	r24, 0xDF	; 223
    187c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1880:	08 95       	ret

00001882 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	ee 53       	subi	r30, 0x3E	; 62
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1890:	fc 01       	movw	r30, r24
    1892:	ea 52       	subi	r30, 0x2A	; 42
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1898:	88 23       	and	r24, r24
    189a:	61 f1       	breq	.+88     	; 0x18f4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 50       	subi	r30, 0x02	; 2
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	c5 91       	lpm	r28, Z+
    18aa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    18ac:	fc 01       	movw	r30, r24
    18ae:	ec 50       	subi	r30, 0x0C	; 12
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	a5 91       	lpm	r26, Z+
    18b4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    18b6:	61 11       	cpse	r22, r1
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    18ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18bc:	f8 94       	cli
		*reg &= ~bit;
    18be:	88 81       	ld	r24, Y
    18c0:	20 95       	com	r18
    18c2:	82 23       	and	r24, r18
    18c4:	88 83       	st	Y, r24
		*out &= ~bit;
    18c6:	ec 91       	ld	r30, X
    18c8:	2e 23       	and	r18, r30
    18ca:	0b c0       	rjmp	.+22     	; 0x18e2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18cc:	62 30       	cpi	r22, 0x02	; 2
    18ce:	61 f4       	brne	.+24     	; 0x18e8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    18d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18d2:	f8 94       	cli
		*reg &= ~bit;
    18d4:	88 81       	ld	r24, Y
    18d6:	32 2f       	mov	r19, r18
    18d8:	30 95       	com	r19
    18da:	83 23       	and	r24, r19
    18dc:	88 83       	st	Y, r24
		*out |= bit;
    18de:	ec 91       	ld	r30, X
    18e0:	2e 2b       	or	r18, r30
    18e2:	2c 93       	st	X, r18
		SREG = oldSREG;
    18e4:	9f bf       	out	0x3f, r25	; 63
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18e8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18ea:	f8 94       	cli
		*reg |= bit;
    18ec:	e8 81       	ld	r30, Y
    18ee:	2e 2b       	or	r18, r30
    18f0:	28 83       	st	Y, r18
		SREG = oldSREG;
    18f2:	8f bf       	out	0x3f, r24	; 63
	}
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f9 01       	movw	r30, r18
    1906:	e2 55       	subi	r30, 0x52	; 82
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    190c:	f9 01       	movw	r30, r18
    190e:	ee 53       	subi	r30, 0x3E	; 62
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1914:	f9 01       	movw	r30, r18
    1916:	ea 52       	subi	r30, 0x2A	; 42
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    191c:	cc 23       	and	r28, r28
    191e:	c1 f0       	breq	.+48     	; 0x1950 <digitalWrite+0x56>
    1920:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1922:	81 11       	cpse	r24, r1
    1924:	0e 94 18 0c 	call	0x1830	; 0x1830 <turnOffPWM>

	out = portOutputRegister(port);
    1928:	ec 2f       	mov	r30, r28
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	ec 50       	subi	r30, 0x0C	; 12
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	a5 91       	lpm	r26, Z+
    1936:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1938:	9f b7       	in	r25, 0x3f	; 63
	cli();
    193a:	f8 94       	cli

	if (val == LOW) {
    193c:	11 11       	cpse	r17, r1
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <digitalWrite+0x4e>
		*out &= ~bit;
    1940:	8c 91       	ld	r24, X
    1942:	d0 95       	com	r29
    1944:	d8 23       	and	r29, r24
    1946:	02 c0       	rjmp	.+4      	; 0x194c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1948:	ec 91       	ld	r30, X
    194a:	de 2b       	or	r29, r30
    194c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    194e:	9f bf       	out	0x3f, r25	; 63
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	08 95       	ret

00001958 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	f9 01       	movw	r30, r18
    1962:	e2 55       	subi	r30, 0x52	; 82
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1968:	f9 01       	movw	r30, r18
    196a:	ee 53       	subi	r30, 0x3E	; 62
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1970:	f9 01       	movw	r30, r18
    1972:	ea 52       	subi	r30, 0x2A	; 42
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1978:	cc 23       	and	r28, r28
    197a:	91 f0       	breq	.+36     	; 0x19a0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    197c:	81 11       	cpse	r24, r1
    197e:	0e 94 18 0c 	call	0x1830	; 0x1830 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1982:	ec 2f       	mov	r30, r28
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	ee 0f       	add	r30, r30
    1988:	ff 1f       	adc	r31, r31
    198a:	e6 51       	subi	r30, 0x16	; 22
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	a5 91       	lpm	r26, Z+
    1990:	b4 91       	lpm	r27, Z
    1992:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1994:	ed 23       	and	r30, r29
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	21 f4       	brne	.+8      	; 0x19a4 <digitalRead+0x4c>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <digitalRead+0x4c>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
  if (howbig == 0) {
    19b2:	61 15       	cp	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	81 05       	cpc	r24, r1
    19b8:	91 05       	cpc	r25, r1
    19ba:	49 f0       	breq	.+18     	; 0x19ce <_Z6randoml+0x24>
    19bc:	6b 01       	movw	r12, r22
    19be:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    19c0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <random>
    19c4:	a7 01       	movw	r20, r14
    19c6:	96 01       	movw	r18, r12
    19c8:	0e 94 45 22 	call	0x448a	; 0x448a <__divmodsi4>
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	08 95       	ret

000019de <_Z6randomll>:

long random(long howsmall, long howbig)
{
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
  if (howsmall >= howbig) {
    19ea:	62 17       	cp	r22, r18
    19ec:	73 07       	cpc	r23, r19
    19ee:	84 07       	cpc	r24, r20
    19f0:	95 07       	cpc	r25, r21
    19f2:	84 f4       	brge	.+32     	; 0x1a14 <_Z6randomll+0x36>
    19f4:	89 01       	movw	r16, r18
    19f6:	9a 01       	movw	r18, r20
    19f8:	6b 01       	movw	r12, r22
    19fa:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    19fc:	c9 01       	movw	r24, r18
    19fe:	b8 01       	movw	r22, r16
    1a00:	6c 19       	sub	r22, r12
    1a02:	7d 09       	sbc	r23, r13
    1a04:	8e 09       	sbc	r24, r14
    1a06:	9f 09       	sbc	r25, r15
    1a08:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_Z6randoml>
    1a0c:	6c 0d       	add	r22, r12
    1a0e:	7d 1d       	adc	r23, r13
    1a10:	8e 1d       	adc	r24, r14
    1a12:	9f 1d       	adc	r25, r15
}
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	08 95       	ret

00001a22 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1a22:	2f 92       	push	r2
    1a24:	3f 92       	push	r3
    1a26:	4f 92       	push	r4
    1a28:	5f 92       	push	r5
    1a2a:	6f 92       	push	r6
    1a2c:	7f 92       	push	r7
    1a2e:	8f 92       	push	r8
    1a30:	9f 92       	push	r9
    1a32:	af 92       	push	r10
    1a34:	bf 92       	push	r11
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	2c 01       	movw	r4, r24
    1a52:	7e 83       	std	Y+6, r23	; 0x06
    1a54:	6d 83       	std	Y+5, r22	; 0x05
    1a56:	6a 01       	movw	r12, r20
    1a58:	59 01       	movw	r10, r18
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	fc 82       	std	Y+4, r15	; 0x04
    1a5e:	eb 82       	std	Y+3, r14	; 0x03
    1a60:	48 01       	movw	r8, r16
    1a62:	84 1a       	sub	r8, r20
    1a64:	95 0a       	sbc	r9, r21
    1a66:	97 fe       	sbrs	r9, 7
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    1a6a:	91 94       	neg	r9
    1a6c:	81 94       	neg	r8
    1a6e:	91 08       	sbc	r9, r1
    1a70:	35 01       	movw	r6, r10
    1a72:	2d 81       	ldd	r18, Y+5	; 0x05
    1a74:	3e 81       	ldd	r19, Y+6	; 0x06
    1a76:	62 1a       	sub	r6, r18
    1a78:	73 0a       	sbc	r7, r19
    1a7a:	77 fe       	sbrs	r7, 7
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    1a7e:	71 94       	neg	r7
    1a80:	61 94       	neg	r6
    1a82:	71 08       	sbc	r7, r1
    1a84:	68 14       	cp	r6, r8
    1a86:	79 04       	cpc	r7, r9
    1a88:	5c f4       	brge	.+22     	; 0x1aa0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    1a8a:	3a 2d       	mov	r19, r10
    1a8c:	2b 2d       	mov	r18, r11
    1a8e:	5c 01       	movw	r10, r24
    1a90:	83 2f       	mov	r24, r19
    1a92:	92 2f       	mov	r25, r18
    1a94:	3d 81       	ldd	r19, Y+5	; 0x05
    1a96:	2e 81       	ldd	r18, Y+6	; 0x06
    1a98:	de 82       	std	Y+6, r13	; 0x06
    1a9a:	cd 82       	std	Y+5, r12	; 0x05
    1a9c:	c3 2e       	mov	r12, r19
    1a9e:	d2 2e       	mov	r13, r18
    1aa0:	ad 81       	ldd	r26, Y+5	; 0x05
    1aa2:	be 81       	ldd	r27, Y+6	; 0x06
    1aa4:	aa 16       	cp	r10, r26
    1aa6:	bb 06       	cpc	r11, r27
    1aa8:	5c f4       	brge	.+22     	; 0x1ac0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    1aaa:	3c 2d       	mov	r19, r12
    1aac:	2d 2d       	mov	r18, r13
    1aae:	6c 01       	movw	r12, r24
    1ab0:	83 2f       	mov	r24, r19
    1ab2:	92 2f       	mov	r25, r18
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab8:	be 82       	std	Y+6, r11	; 0x06
    1aba:	ad 82       	std	Y+5, r10	; 0x05
    1abc:	a3 2e       	mov	r10, r19
    1abe:	b2 2e       	mov	r11, r18
    1ac0:	85 01       	movw	r16, r10
    1ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac6:	02 1b       	sub	r16, r18
    1ac8:	13 0b       	sbc	r17, r19
    1aca:	1c 01       	movw	r2, r24
    1acc:	2c 18       	sub	r2, r12
    1ace:	3d 08       	sbc	r3, r13
    1ad0:	37 fe       	sbrs	r3, 7
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    1ad4:	31 94       	neg	r3
    1ad6:	21 94       	neg	r2
    1ad8:	31 08       	sbc	r3, r1
    1ada:	78 01       	movw	r14, r16
    1adc:	17 ff       	sbrs	r17, 7
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	e3 1a       	sub	r14, r19
    1ae4:	f3 0a       	sbc	r15, r19
    1ae6:	f5 94       	asr	r15
    1ae8:	e7 94       	ror	r14
    1aea:	c8 16       	cp	r12, r24
    1aec:	d9 06       	cpc	r13, r25
    1aee:	2c f0       	brlt	.+10     	; 0x1afa <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    1afa:	a1 e0       	ldi	r26, 0x01	; 1
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ba 83       	std	Y+2, r27	; 0x02
    1b00:	a9 83       	std	Y+1, r26	; 0x01
    1b02:	2d 81       	ldd	r18, Y+5	; 0x05
    1b04:	3e 81       	ldd	r19, Y+6	; 0x06
    1b06:	a2 16       	cp	r10, r18
    1b08:	b3 06       	cpc	r11, r19
    1b0a:	24 f1       	brlt	.+72     	; 0x1b54 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    1b0c:	d2 01       	movw	r26, r4
    1b0e:	ed 91       	ld	r30, X+
    1b10:	fc 91       	ld	r31, X
    1b12:	04 84       	ldd	r0, Z+12	; 0x0c
    1b14:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b16:	e0 2d       	mov	r30, r0
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	68 14       	cp	r6, r8
    1b1e:	79 04       	cpc	r7, r9
    1b20:	24 f4       	brge	.+8      	; 0x1b2a <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    1b22:	4d 81       	ldd	r20, Y+5	; 0x05
    1b24:	5e 81       	ldd	r21, Y+6	; 0x06
    1b26:	b6 01       	movw	r22, r12
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    1b2a:	a6 01       	movw	r20, r12
    1b2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b30:	c2 01       	movw	r24, r4
    1b32:	09 95       	icall
    1b34:	e2 18       	sub	r14, r2
    1b36:	f3 08       	sbc	r15, r3
    1b38:	f7 fe       	sbrs	r15, 7
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    1b3c:	29 81       	ldd	r18, Y+1	; 0x01
    1b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b40:	c2 0e       	add	r12, r18
    1b42:	d3 1e       	adc	r13, r19
    1b44:	e0 0e       	add	r14, r16
    1b46:	f1 1e       	adc	r15, r17
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	d7 cf       	rjmp	.-82     	; 0x1b02 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    1b54:	26 96       	adiw	r28, 0x06	; 6
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	9f 90       	pop	r9
    1b76:	8f 90       	pop	r8
    1b78:	7f 90       	pop	r7
    1b7a:	6f 90       	pop	r6
    1b7c:	5f 90       	pop	r5
    1b7e:	4f 90       	pop	r4
    1b80:	3f 90       	pop	r3
    1b82:	2f 90       	pop	r2
    1b84:	08 95       	ret

00001b86 <_ZN12Adafruit_GFX10writePixelEiij>:
    1b86:	dc 01       	movw	r26, r24
    1b88:	ed 91       	ld	r30, X+
    1b8a:	fc 91       	ld	r31, X
    1b8c:	00 84       	ldd	r0, Z+8	; 0x08
    1b8e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b90:	e0 2d       	mov	r30, r0
    1b92:	09 94       	ijmp

00001b94 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	dc 01       	movw	r26, r24
    1b9a:	ed 91       	ld	r30, X+
    1b9c:	fc 91       	ld	r31, X
    1b9e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1ba0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	09 95       	icall
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	ed 91       	ld	r30, X+
    1bb4:	fc 91       	ld	r31, X
    1bb6:	06 8c       	ldd	r0, Z+30	; 0x1e
    1bb8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	09 95       	icall
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

00001bc4 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	dc 01       	movw	r26, r24
    1bce:	ed 91       	ld	r30, X+
    1bd0:	fc 91       	ld	r31, X
    1bd2:	00 a0       	ldd	r0, Z+32	; 0x20
    1bd4:	f1 a1       	ldd	r31, Z+33	; 0x21
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	09 95       	icall
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <_ZN12Adafruit_GFX10startWriteEv>:
    1be4:	08 95       	ret

00001be6 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1be6:	8f 92       	push	r8
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	5b 01       	movw	r10, r22
    1c02:	4a 01       	movw	r8, r20
    1c04:	69 01       	movw	r12, r18
    1c06:	78 01       	movw	r14, r16
    1c08:	e8 81       	ld	r30, Y
    1c0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0c:	02 84       	ldd	r0, Z+10	; 0x0a
    1c0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c10:	e0 2d       	mov	r30, r0
    1c12:	09 95       	icall
    1c14:	c8 0c       	add	r12, r8
    1c16:	d9 1c       	adc	r13, r9
    1c18:	86 01       	movw	r16, r12
    1c1a:	01 50       	subi	r16, 0x01	; 1
    1c1c:	11 09       	sbc	r17, r1
    1c1e:	e8 81       	ld	r30, Y
    1c20:	f9 81       	ldd	r31, Y+1	; 0x01
    1c22:	04 88       	ldd	r0, Z+20	; 0x14
    1c24:	f5 89       	ldd	r31, Z+21	; 0x15
    1c26:	e0 2d       	mov	r30, r0
    1c28:	95 01       	movw	r18, r10
    1c2a:	a4 01       	movw	r20, r8
    1c2c:	b5 01       	movw	r22, r10
    1c2e:	ce 01       	movw	r24, r28
    1c30:	09 95       	icall
    1c32:	e8 81       	ld	r30, Y
    1c34:	f9 81       	ldd	r31, Y+1	; 0x01
    1c36:	06 88       	ldd	r0, Z+22	; 0x16
    1c38:	f7 89       	ldd	r31, Z+23	; 0x17
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	09 94       	ijmp

00001c58 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    1c58:	8f 92       	push	r8
    1c5a:	9f 92       	push	r9
    1c5c:	af 92       	push	r10
    1c5e:	bf 92       	push	r11
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
    1c72:	5b 01       	movw	r10, r22
    1c74:	4a 01       	movw	r8, r20
    1c76:	69 01       	movw	r12, r18
    1c78:	e8 81       	ld	r30, Y
    1c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7c:	02 84       	ldd	r0, Z+10	; 0x0a
    1c7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c80:	e0 2d       	mov	r30, r0
    1c82:	09 95       	icall
    1c84:	95 01       	movw	r18, r10
    1c86:	2c 0d       	add	r18, r12
    1c88:	3d 1d       	adc	r19, r13
    1c8a:	21 50       	subi	r18, 0x01	; 1
    1c8c:	31 09       	sbc	r19, r1
    1c8e:	e8 81       	ld	r30, Y
    1c90:	f9 81       	ldd	r31, Y+1	; 0x01
    1c92:	04 88       	ldd	r0, Z+20	; 0x14
    1c94:	f5 89       	ldd	r31, Z+21	; 0x15
    1c96:	e0 2d       	mov	r30, r0
    1c98:	78 01       	movw	r14, r16
    1c9a:	84 01       	movw	r16, r8
    1c9c:	a4 01       	movw	r20, r8
    1c9e:	b5 01       	movw	r22, r10
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	09 95       	icall
    1ca4:	e8 81       	ld	r30, Y
    1ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca8:	06 88       	ldd	r0, Z+22	; 0x16
    1caa:	f7 89       	ldd	r31, Z+23	; 0x17
    1cac:	e0 2d       	mov	r30, r0
    1cae:	ce 01       	movw	r24, r28
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	af 90       	pop	r10
    1cc4:	9f 90       	pop	r9
    1cc6:	8f 90       	pop	r8
    1cc8:	09 94       	ijmp

00001cca <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1cca:	4f 92       	push	r4
    1ccc:	5f 92       	push	r5
    1cce:	6f 92       	push	r6
    1cd0:	7f 92       	push	r7
    1cd2:	8f 92       	push	r8
    1cd4:	9f 92       	push	r9
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	6c 01       	movw	r12, r24
    1cec:	2b 01       	movw	r4, r22
    1cee:	5a 01       	movw	r10, r20
    1cf0:	39 01       	movw	r6, r18
    1cf2:	48 01       	movw	r8, r16
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	02 84       	ldd	r0, Z+10	; 0x0a
    1cfc:	f3 85       	ldd	r31, Z+11	; 0x0b
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	09 95       	icall
    1d02:	e2 01       	movw	r28, r4
    1d04:	64 0c       	add	r6, r4
    1d06:	75 1c       	adc	r7, r5
    1d08:	d6 01       	movw	r26, r12
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	c6 15       	cp	r28, r6
    1d10:	d7 05       	cpc	r29, r7
    1d12:	5c f4       	brge	.+22     	; 0x1d2a <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1d14:	00 88       	ldd	r0, Z+16	; 0x10
    1d16:	f1 89       	ldd	r31, Z+17	; 0x11
    1d18:	e0 2d       	mov	r30, r0
    1d1a:	87 01       	movw	r16, r14
    1d1c:	94 01       	movw	r18, r8
    1d1e:	a5 01       	movw	r20, r10
    1d20:	be 01       	movw	r22, r28
    1d22:	c6 01       	movw	r24, r12
    1d24:	09 95       	icall
    1d26:	21 96       	adiw	r28, 0x01	; 1
    1d28:	ef cf       	rjmp	.-34     	; 0x1d08 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    1d2a:	06 88       	ldd	r0, Z+22	; 0x16
    1d2c:	f7 89       	ldd	r31, Z+23	; 0x17
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	c6 01       	movw	r24, r12
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	af 90       	pop	r10
    1d46:	9f 90       	pop	r9
    1d48:	8f 90       	pop	r8
    1d4a:	7f 90       	pop	r7
    1d4c:	6f 90       	pop	r6
    1d4e:	5f 90       	pop	r5
    1d50:	4f 90       	pop	r4
    1d52:	09 94       	ijmp

00001d54 <_ZN12Adafruit_GFX10fillScreenEj>:
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	1a 96       	adiw	r26, 0x0a	; 10
    1d60:	0d 91       	ld	r16, X+
    1d62:	1c 91       	ld	r17, X
    1d64:	1b 97       	sbiw	r26, 0x0b	; 11
    1d66:	18 96       	adiw	r26, 0x08	; 8
    1d68:	2d 91       	ld	r18, X+
    1d6a:	3c 91       	ld	r19, X
    1d6c:	19 97       	sbiw	r26, 0x09	; 9
    1d6e:	ed 91       	ld	r30, X+
    1d70:	fc 91       	ld	r31, X
    1d72:	00 a0       	ldd	r0, Z+32	; 0x20
    1d74:	f1 a1       	ldd	r31, Z+33	; 0x21
    1d76:	e0 2d       	mov	r30, r0
    1d78:	7b 01       	movw	r14, r22
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	09 95       	icall
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	08 95       	ret

00001d8e <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	4c 01       	movw	r8, r24
    1da8:	6b 01       	movw	r12, r22
    1daa:	5a 01       	movw	r10, r20
    1dac:	e9 01       	movw	r28, r18
    1dae:	dc 01       	movw	r26, r24
    1db0:	ed 91       	ld	r30, X+
    1db2:	fc 91       	ld	r31, X
    1db4:	62 17       	cp	r22, r18
    1db6:	73 07       	cpc	r23, r19
    1db8:	81 f4       	brne	.+32     	; 0x1dda <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1dba:	04 17       	cp	r16, r20
    1dbc:	15 07       	cpc	r17, r21
    1dbe:	24 f4       	brge	.+8      	; 0x1dc8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1dc0:	8b 2d       	mov	r24, r11
    1dc2:	58 01       	movw	r10, r16
    1dc4:	04 2f       	mov	r16, r20
    1dc6:	18 2f       	mov	r17, r24
    1dc8:	0a 19       	sub	r16, r10
    1dca:	1b 09       	sbc	r17, r11
    1dcc:	98 01       	movw	r18, r16
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	04 8c       	ldd	r0, Z+28	; 0x1c
    1dd4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	12 c0       	rjmp	.+36     	; 0x1dfe <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1dda:	40 17       	cp	r20, r16
    1ddc:	51 07       	cpc	r21, r17
    1dde:	09 f5       	brne	.+66     	; 0x1e22 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1de0:	26 17       	cp	r18, r22
    1de2:	37 07       	cpc	r19, r23
    1de4:	24 f4       	brge	.+8      	; 0x1dee <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1de6:	8d 2d       	mov	r24, r13
    1de8:	69 01       	movw	r12, r18
    1dea:	c6 2f       	mov	r28, r22
    1dec:	d8 2f       	mov	r29, r24
    1dee:	9e 01       	movw	r18, r28
    1df0:	2c 19       	sub	r18, r12
    1df2:	3d 09       	sbc	r19, r13
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	06 8c       	ldd	r0, Z+30	; 0x1e
    1dfa:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	87 01       	movw	r16, r14
    1e00:	a5 01       	movw	r20, r10
    1e02:	b6 01       	movw	r22, r12
    1e04:	c4 01       	movw	r24, r8
    1e06:	09 95       	icall
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	08 95       	ret
    1e22:	02 84       	ldd	r0, Z+10	; 0x0a
    1e24:	f3 85       	ldd	r31, Z+11	; 0x0b
    1e26:	e0 2d       	mov	r30, r0
    1e28:	09 95       	icall
    1e2a:	d4 01       	movw	r26, r8
    1e2c:	ed 91       	ld	r30, X+
    1e2e:	fc 91       	ld	r31, X
    1e30:	04 88       	ldd	r0, Z+20	; 0x14
    1e32:	f5 89       	ldd	r31, Z+21	; 0x15
    1e34:	e0 2d       	mov	r30, r0
    1e36:	9e 01       	movw	r18, r28
    1e38:	a5 01       	movw	r20, r10
    1e3a:	b6 01       	movw	r22, r12
    1e3c:	c4 01       	movw	r24, r8
    1e3e:	09 95       	icall
    1e40:	d4 01       	movw	r26, r8
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	06 88       	ldd	r0, Z+22	; 0x16
    1e48:	f7 89       	ldd	r31, Z+23	; 0x17
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	c4 01       	movw	r24, r8
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	bf 90       	pop	r11
    1e60:	af 90       	pop	r10
    1e62:	9f 90       	pop	r9
    1e64:	8f 90       	pop	r8
    1e66:	09 94       	ijmp

00001e68 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1e68:	6f 92       	push	r6
    1e6a:	7f 92       	push	r7
    1e6c:	8f 92       	push	r8
    1e6e:	9f 92       	push	r9
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ec 01       	movw	r28, r24
    1e86:	4b 01       	movw	r8, r22
    1e88:	5a 01       	movw	r10, r20
    1e8a:	69 01       	movw	r12, r18
    1e8c:	38 01       	movw	r6, r16
    1e8e:	e8 81       	ld	r30, Y
    1e90:	f9 81       	ldd	r31, Y+1	; 0x01
    1e92:	02 84       	ldd	r0, Z+10	; 0x0a
    1e94:	f3 85       	ldd	r31, Z+11	; 0x0b
    1e96:	e0 2d       	mov	r30, r0
    1e98:	09 95       	icall
    1e9a:	e8 81       	ld	r30, Y
    1e9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9e:	02 88       	ldd	r0, Z+18	; 0x12
    1ea0:	f3 89       	ldd	r31, Z+19	; 0x13
    1ea2:	e0 2d       	mov	r30, r0
    1ea4:	87 01       	movw	r16, r14
    1ea6:	96 01       	movw	r18, r12
    1ea8:	a5 01       	movw	r20, r10
    1eaa:	b4 01       	movw	r22, r8
    1eac:	ce 01       	movw	r24, r28
    1eae:	09 95       	icall
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	46 0d       	add	r20, r6
    1eb4:	57 1d       	adc	r21, r7
    1eb6:	41 50       	subi	r20, 0x01	; 1
    1eb8:	51 09       	sbc	r21, r1
    1eba:	e8 81       	ld	r30, Y
    1ebc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ebe:	02 88       	ldd	r0, Z+18	; 0x12
    1ec0:	f3 89       	ldd	r31, Z+19	; 0x13
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	96 01       	movw	r18, r12
    1ec6:	b4 01       	movw	r22, r8
    1ec8:	ce 01       	movw	r24, r28
    1eca:	09 95       	icall
    1ecc:	e8 81       	ld	r30, Y
    1ece:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed0:	00 88       	ldd	r0, Z+16	; 0x10
    1ed2:	f1 89       	ldd	r31, Z+17	; 0x11
    1ed4:	e0 2d       	mov	r30, r0
    1ed6:	93 01       	movw	r18, r6
    1ed8:	a5 01       	movw	r20, r10
    1eda:	b4 01       	movw	r22, r8
    1edc:	ce 01       	movw	r24, r28
    1ede:	09 95       	icall
    1ee0:	c8 0c       	add	r12, r8
    1ee2:	d9 1c       	adc	r13, r9
    1ee4:	b6 01       	movw	r22, r12
    1ee6:	61 50       	subi	r22, 0x01	; 1
    1ee8:	71 09       	sbc	r23, r1
    1eea:	e8 81       	ld	r30, Y
    1eec:	f9 81       	ldd	r31, Y+1	; 0x01
    1eee:	00 88       	ldd	r0, Z+16	; 0x10
    1ef0:	f1 89       	ldd	r31, Z+17	; 0x11
    1ef2:	e0 2d       	mov	r30, r0
    1ef4:	93 01       	movw	r18, r6
    1ef6:	a5 01       	movw	r20, r10
    1ef8:	ce 01       	movw	r24, r28
    1efa:	09 95       	icall
    1efc:	e8 81       	ld	r30, Y
    1efe:	f9 81       	ldd	r31, Y+1	; 0x01
    1f00:	06 88       	ldd	r0, Z+22	; 0x16
    1f02:	f7 89       	ldd	r31, Z+23	; 0x17
    1f04:	e0 2d       	mov	r30, r0
    1f06:	ce 01       	movw	r24, r28
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	09 94       	ijmp

00001f26 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1f26:	08 95       	ret

00001f28 <_ZN12Adafruit_GFX11setRotationEh>:
    1f28:	fc 01       	movw	r30, r24
    1f2a:	63 70       	andi	r22, 0x03	; 3
    1f2c:	66 8b       	std	Z+22, r22	; 0x16
    1f2e:	84 81       	ldd	r24, Z+4	; 0x04
    1f30:	95 81       	ldd	r25, Z+5	; 0x05
    1f32:	26 81       	ldd	r18, Z+6	; 0x06
    1f34:	37 81       	ldd	r19, Z+7	; 0x07
    1f36:	61 30       	cpi	r22, 0x01	; 1
    1f38:	39 f0       	breq	.+14     	; 0x1f48 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1f3a:	63 30       	cpi	r22, 0x03	; 3
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1f3e:	91 87       	std	Z+9, r25	; 0x09
    1f40:	80 87       	std	Z+8, r24	; 0x08
    1f42:	33 87       	std	Z+11, r19	; 0x0b
    1f44:	22 87       	std	Z+10, r18	; 0x0a
    1f46:	08 95       	ret
    1f48:	31 87       	std	Z+9, r19	; 0x09
    1f4a:	20 87       	std	Z+8, r18	; 0x08
    1f4c:	93 87       	std	Z+11, r25	; 0x0b
    1f4e:	82 87       	std	Z+10, r24	; 0x0a
    1f50:	08 95       	ret

00001f52 <_ZN12Adafruit_GFXC1Eii>:
    1f52:	fc 01       	movw	r30, r24
    1f54:	13 82       	std	Z+3, r1	; 0x03
    1f56:	12 82       	std	Z+2, r1	; 0x02
    1f58:	8f e2       	ldi	r24, 0x2F	; 47
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	75 83       	std	Z+5, r23	; 0x05
    1f62:	64 83       	std	Z+4, r22	; 0x04
    1f64:	57 83       	std	Z+7, r21	; 0x07
    1f66:	46 83       	std	Z+6, r20	; 0x06
    1f68:	71 87       	std	Z+9, r23	; 0x09
    1f6a:	60 87       	std	Z+8, r22	; 0x08
    1f6c:	53 87       	std	Z+11, r21	; 0x0b
    1f6e:	42 87       	std	Z+10, r20	; 0x0a
    1f70:	16 8a       	std	Z+22, r1	; 0x16
    1f72:	15 86       	std	Z+13, r1	; 0x0d
    1f74:	14 86       	std	Z+12, r1	; 0x0c
    1f76:	17 86       	std	Z+15, r1	; 0x0f
    1f78:	16 86       	std	Z+14, r1	; 0x0e
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	85 8b       	std	Z+21, r24	; 0x15
    1f7e:	84 8b       	std	Z+20, r24	; 0x14
    1f80:	2f ef       	ldi	r18, 0xFF	; 255
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	33 8b       	std	Z+19, r19	; 0x13
    1f86:	22 8b       	std	Z+18, r18	; 0x12
    1f88:	31 8b       	std	Z+17, r19	; 0x11
    1f8a:	20 8b       	std	Z+16, r18	; 0x10
    1f8c:	87 8b       	std	Z+23, r24	; 0x17
    1f8e:	10 8e       	std	Z+24, r1	; 0x18
    1f90:	12 8e       	std	Z+26, r1	; 0x1a
    1f92:	11 8e       	std	Z+25, r1	; 0x19
    1f94:	08 95       	ret

00001f96 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    1f96:	3f 92       	push	r3
    1f98:	4f 92       	push	r4
    1f9a:	5f 92       	push	r5
    1f9c:	6f 92       	push	r6
    1f9e:	7f 92       	push	r7
    1fa0:	8f 92       	push	r8
    1fa2:	9f 92       	push	r9
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	2a 97       	sbiw	r28, 0x0a	; 10
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	5c 01       	movw	r10, r24
    1fca:	7e 83       	std	Y+6, r23	; 0x06
    1fcc:	6d 83       	std	Y+5, r22	; 0x05
    1fce:	58 87       	std	Y+8, r21	; 0x08
    1fd0:	4f 83       	std	Y+7, r20	; 0x07
    1fd2:	29 01       	movw	r4, r18
    1fd4:	37 01       	movw	r6, r14
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	ed 91       	ld	r30, X+
    1fda:	fc 91       	ld	r31, X
    1fdc:	02 84       	ldd	r0, Z+10	; 0x0a
    1fde:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fe0:	e0 2d       	mov	r30, r0
    1fe2:	09 95       	icall
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	07 96       	adiw	r24, 0x07	; 7
    1fe8:	97 fd       	sbrc	r25, 7
    1fea:	07 96       	adiw	r24, 0x07	; 7
    1fec:	9c 01       	movw	r18, r24
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	35 95       	asr	r19
    1ff2:	27 95       	ror	r18
    1ff4:	9a 95       	dec	r25
    1ff6:	e1 f7       	brne	.-8      	; 0x1ff0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    1ff8:	3a 83       	std	Y+2, r19	; 0x02
    1ffa:	29 83       	std	Y+1, r18	; 0x01
    1ffc:	81 2c       	mov	r8, r1
    1ffe:	91 2c       	mov	r9, r1
    2000:	e1 2c       	mov	r14, r1
    2002:	f1 2c       	mov	r15, r1
    2004:	31 2c       	mov	r3, r1
    2006:	8f 81       	ldd	r24, Y+7	; 0x07
    2008:	98 85       	ldd	r25, Y+8	; 0x08
    200a:	8e 0d       	add	r24, r14
    200c:	9f 1d       	adc	r25, r15
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
    2012:	e6 14       	cp	r14, r6
    2014:	f7 04       	cpc	r15, r7
    2016:	0c f0       	brlt	.+2      	; 0x201a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    2018:	3d c0       	rjmp	.+122    	; 0x2094 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    201a:	1a 86       	std	Y+10, r1	; 0x0a
    201c:	19 86       	std	Y+9, r1	; 0x09
    201e:	a9 85       	ldd	r26, Y+9	; 0x09
    2020:	ba 85       	ldd	r27, Y+10	; 0x0a
    2022:	a0 17       	cp	r26, r16
    2024:	b1 07       	cpc	r27, r17
    2026:	74 f5       	brge	.+92     	; 0x2084 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    2028:	cd 01       	movw	r24, r26
    202a:	87 70       	andi	r24, 0x07	; 7
    202c:	99 27       	eor	r25, r25
    202e:	89 2b       	or	r24, r25
    2030:	11 f0       	breq	.+4      	; 0x2036 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    2032:	33 0c       	add	r3, r3
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    2036:	e9 85       	ldd	r30, Y+9	; 0x09
    2038:	fa 85       	ldd	r31, Y+10	; 0x0a
    203a:	f7 fd       	sbrc	r31, 7
    203c:	37 96       	adiw	r30, 0x07	; 7
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	f5 95       	asr	r31
    2042:	e7 95       	ror	r30
    2044:	8a 95       	dec	r24
    2046:	e1 f7       	brne	.-8      	; 0x2040 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    2048:	e8 0d       	add	r30, r8
    204a:	f9 1d       	adc	r31, r9
    204c:	e4 0d       	add	r30, r4
    204e:	f5 1d       	adc	r31, r5
    2050:	34 90       	lpm	r3, Z
    2052:	37 fe       	sbrs	r3, 7
    2054:	11 c0       	rjmp	.+34     	; 0x2078 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    2056:	d5 01       	movw	r26, r10
    2058:	ed 91       	ld	r30, X+
    205a:	fc 91       	ld	r31, X
    205c:	04 84       	ldd	r0, Z+12	; 0x0c
    205e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2060:	e0 2d       	mov	r30, r0
    2062:	96 01       	movw	r18, r12
    2064:	4b 81       	ldd	r20, Y+3	; 0x03
    2066:	5c 81       	ldd	r21, Y+4	; 0x04
    2068:	6d 81       	ldd	r22, Y+5	; 0x05
    206a:	7e 81       	ldd	r23, Y+6	; 0x06
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	68 0f       	add	r22, r24
    2072:	79 1f       	adc	r23, r25
    2074:	c5 01       	movw	r24, r10
    2076:	09 95       	icall
    2078:	a9 85       	ldd	r26, Y+9	; 0x09
    207a:	ba 85       	ldd	r27, Y+10	; 0x0a
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	ba 87       	std	Y+10, r27	; 0x0a
    2080:	a9 87       	std	Y+9, r26	; 0x09
    2082:	cd cf       	rjmp	.-102    	; 0x201e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    2084:	bf ef       	ldi	r27, 0xFF	; 255
    2086:	eb 1a       	sub	r14, r27
    2088:	fb 0a       	sbc	r15, r27
    208a:	29 81       	ldd	r18, Y+1	; 0x01
    208c:	3a 81       	ldd	r19, Y+2	; 0x02
    208e:	82 0e       	add	r8, r18
    2090:	93 1e       	adc	r9, r19
    2092:	b9 cf       	rjmp	.-142    	; 0x2006 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    2094:	d5 01       	movw	r26, r10
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	06 88       	ldd	r0, Z+22	; 0x16
    209c:	f7 89       	ldd	r31, Z+23	; 0x17
    209e:	e0 2d       	mov	r30, r0
    20a0:	c5 01       	movw	r24, r10
    20a2:	2a 96       	adiw	r28, 0x0a	; 10
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	7f 90       	pop	r7
    20c8:	6f 90       	pop	r6
    20ca:	5f 90       	pop	r5
    20cc:	4f 90       	pop	r4
    20ce:	3f 90       	pop	r3
    20d0:	09 94       	ijmp

000020d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    20d2:	2f 92       	push	r2
    20d4:	3f 92       	push	r3
    20d6:	4f 92       	push	r4
    20d8:	5f 92       	push	r5
    20da:	6f 92       	push	r6
    20dc:	7f 92       	push	r7
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	6b 97       	sbiw	r28, 0x1b	; 27
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	9b 8f       	std	Y+27, r25	; 0x1b
    2108:	8a 8f       	std	Y+26, r24	; 0x1a
    210a:	2b 01       	movw	r4, r22
    210c:	5a 83       	std	Y+2, r21	; 0x02
    210e:	49 83       	std	Y+1, r20	; 0x01
    2110:	d2 2e       	mov	r13, r18
    2112:	19 87       	std	Y+9, r17	; 0x09
    2114:	08 87       	std	Y+8, r16	; 0x08
    2116:	47 01       	movw	r8, r14
    2118:	ab 82       	std	Y+3, r10	; 0x03
    211a:	dc 01       	movw	r26, r24
    211c:	59 96       	adiw	r26, 0x19	; 25
    211e:	2d 91       	ld	r18, X+
    2120:	3c 91       	ld	r19, X
    2122:	5a 97       	sbiw	r26, 0x1a	; 26
    2124:	21 15       	cp	r18, r1
    2126:	31 05       	cpc	r19, r1
    2128:	09 f0       	breq	.+2      	; 0x212c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    212a:	00 c1       	rjmp	.+512    	; 0x232c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    212c:	18 96       	adiw	r26, 0x08	; 8
    212e:	8d 91       	ld	r24, X+
    2130:	9c 91       	ld	r25, X
    2132:	19 97       	sbiw	r26, 0x09	; 9
    2134:	68 17       	cp	r22, r24
    2136:	79 07       	cpc	r23, r25
    2138:	0c f0       	brlt	.+2      	; 0x213c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    213a:	e7 c1       	rjmp	.+974    	; 0x250a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    213c:	1a 96       	adiw	r26, 0x0a	; 10
    213e:	8d 91       	ld	r24, X+
    2140:	9c 91       	ld	r25, X
    2142:	1b 97       	sbiw	r26, 0x0b	; 11
    2144:	48 17       	cp	r20, r24
    2146:	59 07       	cpc	r21, r25
    2148:	0c f0       	brlt	.+2      	; 0x214c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    214a:	df c1       	rjmp	.+958    	; 0x250a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    214c:	2c 2c       	mov	r2, r12
    214e:	31 2c       	mov	r3, r1
    2150:	fb 01       	movw	r30, r22
    2152:	26 e0       	ldi	r18, 0x06	; 6
    2154:	c2 9e       	mul	r12, r18
    2156:	e0 0d       	add	r30, r0
    2158:	f1 1d       	adc	r31, r1
    215a:	11 24       	eor	r1, r1
    215c:	fd 87       	std	Y+13, r31	; 0x0d
    215e:	ec 87       	std	Y+12, r30	; 0x0c
    2160:	1e 16       	cp	r1, r30
    2162:	1f 06       	cpc	r1, r31
    2164:	0c f0       	brlt	.+2      	; 0x2168 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    2166:	d1 c1       	rjmp	.+930    	; 0x250a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2168:	4a 2d       	mov	r20, r10
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	5b 87       	std	Y+11, r21	; 0x0b
    216e:	4a 87       	std	Y+10, r20	; 0x0a
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	44 0f       	add	r20, r20
    2174:	55 1f       	adc	r21, r21
    2176:	8a 95       	dec	r24
    2178:	e1 f7       	brne	.-8      	; 0x2172 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    217a:	5f 87       	std	Y+15, r21	; 0x0f
    217c:	4e 87       	std	Y+14, r20	; 0x0e
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	84 0f       	add	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	18 16       	cp	r1, r24
    2188:	19 06       	cpc	r1, r25
    218a:	0c f0       	brlt	.+2      	; 0x218e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    218c:	be c1       	rjmp	.+892    	; 0x250a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    218e:	58 96       	adiw	r26, 0x18	; 24
    2190:	8c 91       	ld	r24, X
    2192:	81 11       	cpse	r24, r1
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2196:	6f ea       	ldi	r22, 0xAF	; 175
    2198:	6d 15       	cp	r22, r13
    219a:	08 f4       	brcc	.+2      	; 0x219e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    219c:	d3 94       	inc	r13
    219e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21a0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21a2:	ed 91       	ld	r30, X+
    21a4:	fc 91       	ld	r31, X
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	02 84       	ldd	r0, Z+10	; 0x0a
    21aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    21ac:	e0 2d       	mov	r30, r0
    21ae:	cd 01       	movw	r24, r26
    21b0:	09 95       	icall
    21b2:	b5 e0       	ldi	r27, 0x05	; 5
    21b4:	db 9e       	mul	r13, r27
    21b6:	c0 01       	movw	r24, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	ec 2d       	mov	r30, r12
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	f9 8b       	std	Y+17, r31	; 0x11
    21c0:	e8 8b       	std	Y+16, r30	; 0x10
    21c2:	92 01       	movw	r18, r4
    21c4:	2b 5f       	subi	r18, 0xFB	; 251
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	3b 8b       	std	Y+19, r19	; 0x13
    21ca:	2a 8b       	std	Y+18, r18	; 0x12
    21cc:	32 01       	movw	r6, r4
    21ce:	5d 82       	std	Y+5, r5	; 0x05
    21d0:	4c 82       	std	Y+4, r4	; 0x04
    21d2:	ac 01       	movw	r20, r24
    21d4:	44 19       	sub	r20, r4
    21d6:	55 09       	sbc	r21, r5
    21d8:	5d 8b       	std	Y+21, r21	; 0x15
    21da:	4c 8b       	std	Y+20, r20	; 0x14
    21dc:	7b 81       	ldd	r23, Y+3	; 0x03
    21de:	67 2f       	mov	r22, r23
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	7f 8b       	std	Y+23, r23	; 0x17
    21e4:	6e 8b       	std	Y+22, r22	; 0x16
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	08 96       	adiw	r24, 0x08	; 8
    21ec:	99 8f       	std	Y+25, r25	; 0x19
    21ee:	88 8f       	std	Y+24, r24	; 0x18
    21f0:	ec 89       	ldd	r30, Y+20	; 0x14
    21f2:	fd 89       	ldd	r31, Y+21	; 0x15
    21f4:	e6 0d       	add	r30, r6
    21f6:	f7 1d       	adc	r31, r7
    21f8:	e8 5f       	subi	r30, 0xF8	; 248
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	d4 90       	lpm	r13, Z
    21fe:	a9 81       	ldd	r26, Y+1	; 0x01
    2200:	ba 81       	ldd	r27, Y+2	; 0x02
    2202:	bf 83       	std	Y+7, r27	; 0x07
    2204:	ae 83       	std	Y+6, r26	; 0x06
    2206:	5d 01       	movw	r10, r26
    2208:	d0 fe       	sbrs	r13, 0
    220a:	16 c0       	rjmp	.+44     	; 0x2238 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    220c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    220e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	b1 e0       	ldi	r27, 0x01	; 1
    2216:	cb 12       	cpse	r12, r27
    2218:	09 c0       	rjmp	.+18     	; 0x222c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	21 30       	cpi	r18, 0x01	; 1
    221e:	31 f4       	brne	.+12     	; 0x222c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2220:	04 84       	ldd	r0, Z+12	; 0x0c
    2222:	f5 85       	ldd	r31, Z+13	; 0x0d
    2224:	e0 2d       	mov	r30, r0
    2226:	28 85       	ldd	r18, Y+8	; 0x08
    2228:	39 85       	ldd	r19, Y+9	; 0x09
    222a:	19 c0       	rjmp	.+50     	; 0x225e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    222c:	06 84       	ldd	r0, Z+14	; 0x0e
    222e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2230:	e0 2d       	mov	r30, r0
    2232:	e8 84       	ldd	r14, Y+8	; 0x08
    2234:	f9 84       	ldd	r15, Y+9	; 0x09
    2236:	1d c0       	rjmp	.+58     	; 0x2272 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    2238:	48 85       	ldd	r20, Y+8	; 0x08
    223a:	59 85       	ldd	r21, Y+9	; 0x09
    223c:	48 15       	cp	r20, r8
    223e:	59 05       	cpc	r21, r9
    2240:	11 f1       	breq	.+68     	; 0x2286 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2242:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2244:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	b1 e0       	ldi	r27, 0x01	; 1
    224c:	cb 12       	cpse	r12, r27
    224e:	0d c0       	rjmp	.+26     	; 0x226a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	21 30       	cpi	r18, 0x01	; 1
    2254:	51 f4       	brne	.+20     	; 0x226a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2256:	04 84       	ldd	r0, Z+12	; 0x0c
    2258:	f5 85       	ldd	r31, Z+13	; 0x0d
    225a:	e0 2d       	mov	r30, r0
    225c:	94 01       	movw	r18, r8
    225e:	a5 01       	movw	r20, r10
    2260:	b3 01       	movw	r22, r6
    2262:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2264:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2266:	09 95       	icall
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    226a:	06 84       	ldd	r0, Z+14	; 0x0e
    226c:	f7 85       	ldd	r31, Z+15	; 0x0f
    226e:	e0 2d       	mov	r30, r0
    2270:	74 01       	movw	r14, r8
    2272:	0a 85       	ldd	r16, Y+10	; 0x0a
    2274:	1b 85       	ldd	r17, Y+11	; 0x0b
    2276:	91 01       	movw	r18, r2
    2278:	4e 81       	ldd	r20, Y+6	; 0x06
    227a:	5f 81       	ldd	r21, Y+7	; 0x07
    227c:	6c 81       	ldd	r22, Y+4	; 0x04
    227e:	7d 81       	ldd	r23, Y+5	; 0x05
    2280:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2282:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2284:	09 95       	icall
    2286:	d6 94       	lsr	r13
    2288:	4e 81       	ldd	r20, Y+6	; 0x06
    228a:	5f 81       	ldd	r21, Y+7	; 0x07
    228c:	6e 89       	ldd	r22, Y+22	; 0x16
    228e:	7f 89       	ldd	r23, Y+23	; 0x17
    2290:	46 0f       	add	r20, r22
    2292:	57 1f       	adc	r21, r23
    2294:	5f 83       	std	Y+7, r21	; 0x07
    2296:	4e 83       	std	Y+6, r20	; 0x06
    2298:	7f ef       	ldi	r23, 0xFF	; 255
    229a:	a7 1a       	sub	r10, r23
    229c:	b7 0a       	sbc	r11, r23
    229e:	88 8d       	ldd	r24, Y+24	; 0x18
    22a0:	99 8d       	ldd	r25, Y+25	; 0x19
    22a2:	a8 16       	cp	r10, r24
    22a4:	b9 06       	cpc	r11, r25
    22a6:	09 f0       	breq	.+2      	; 0x22aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    22a8:	af cf       	rjmp	.-162    	; 0x2208 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    22aa:	ac 81       	ldd	r26, Y+4	; 0x04
    22ac:	bd 81       	ldd	r27, Y+5	; 0x05
    22ae:	e8 89       	ldd	r30, Y+16	; 0x10
    22b0:	f9 89       	ldd	r31, Y+17	; 0x11
    22b2:	ae 0f       	add	r26, r30
    22b4:	bf 1f       	adc	r27, r31
    22b6:	bd 83       	std	Y+5, r27	; 0x05
    22b8:	ac 83       	std	Y+4, r26	; 0x04
    22ba:	ff ef       	ldi	r31, 0xFF	; 255
    22bc:	6f 1a       	sub	r6, r31
    22be:	7f 0a       	sbc	r7, r31
    22c0:	2a 89       	ldd	r18, Y+18	; 0x12
    22c2:	3b 89       	ldd	r19, Y+19	; 0x13
    22c4:	62 16       	cp	r6, r18
    22c6:	73 06       	cpc	r7, r19
    22c8:	09 f0       	breq	.+2      	; 0x22cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    22ca:	92 cf       	rjmp	.-220    	; 0x21f0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    22cc:	48 85       	ldd	r20, Y+8	; 0x08
    22ce:	59 85       	ldd	r21, Y+9	; 0x09
    22d0:	48 15       	cp	r20, r8
    22d2:	59 05       	cpc	r21, r9
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    22d6:	f7 c0       	rjmp	.+494    	; 0x24c6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    22d8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    22da:	bb 8d       	ldd	r27, Y+27	; 0x1b
    22dc:	ed 91       	ld	r30, X+
    22de:	fc 91       	ld	r31, X
    22e0:	b1 e0       	ldi	r27, 0x01	; 1
    22e2:	cb 12       	cpse	r12, r27
    22e4:	12 c0       	rjmp	.+36     	; 0x230a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    22e6:	2b 81       	ldd	r18, Y+3	; 0x03
    22e8:	21 30       	cpi	r18, 0x01	; 1
    22ea:	79 f4       	brne	.+30     	; 0x230a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    22ec:	b2 01       	movw	r22, r4
    22ee:	6b 5f       	subi	r22, 0xFB	; 251
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255
    22f2:	00 88       	ldd	r0, Z+16	; 0x10
    22f4:	f1 89       	ldd	r31, Z+17	; 0x11
    22f6:	e0 2d       	mov	r30, r0
    22f8:	84 01       	movw	r16, r8
    22fa:	28 e0       	ldi	r18, 0x08	; 8
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	49 81       	ldd	r20, Y+1	; 0x01
    2300:	5a 81       	ldd	r21, Y+2	; 0x02
    2302:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2304:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2306:	09 95       	icall
    2308:	de c0       	rjmp	.+444    	; 0x24c6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    230a:	6c 85       	ldd	r22, Y+12	; 0x0c
    230c:	7d 85       	ldd	r23, Y+13	; 0x0d
    230e:	62 19       	sub	r22, r2
    2310:	73 09       	sbc	r23, r3
    2312:	06 84       	ldd	r0, Z+14	; 0x0e
    2314:	f7 85       	ldd	r31, Z+15	; 0x0f
    2316:	e0 2d       	mov	r30, r0
    2318:	74 01       	movw	r14, r8
    231a:	0e 85       	ldd	r16, Y+14	; 0x0e
    231c:	1f 85       	ldd	r17, Y+15	; 0x0f
    231e:	91 01       	movw	r18, r2
    2320:	49 81       	ldd	r20, Y+1	; 0x01
    2322:	5a 81       	ldd	r21, Y+2	; 0x02
    2324:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2326:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2328:	09 95       	icall
    232a:	cd c0       	rjmp	.+410    	; 0x24c6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    232c:	f9 01       	movw	r30, r18
    232e:	34 96       	adiw	r30, 0x04	; 4
    2330:	e4 91       	lpm	r30, Z
    2332:	de 1a       	sub	r13, r30
    2334:	f9 01       	movw	r30, r18
    2336:	32 96       	adiw	r30, 0x02	; 2
    2338:	85 91       	lpm	r24, Z+
    233a:	94 91       	lpm	r25, Z
    233c:	b7 e0       	ldi	r27, 0x07	; 7
    233e:	db 9e       	mul	r13, r27
    2340:	80 0d       	add	r24, r0
    2342:	91 1d       	adc	r25, r1
    2344:	11 24       	eor	r1, r1
    2346:	f9 01       	movw	r30, r18
    2348:	25 91       	lpm	r18, Z+
    234a:	34 91       	lpm	r19, Z
    234c:	39 8b       	std	Y+17, r19	; 0x11
    234e:	28 8b       	std	Y+16, r18	; 0x10
    2350:	fc 01       	movw	r30, r24
    2352:	25 90       	lpm	r2, Z+
    2354:	34 90       	lpm	r3, Z
    2356:	fc 01       	movw	r30, r24
    2358:	32 96       	adiw	r30, 0x02	; 2
    235a:	74 90       	lpm	r7, Z
    235c:	31 96       	adiw	r30, 0x01	; 1
    235e:	a4 90       	lpm	r10, Z
    2360:	32 96       	adiw	r30, 0x02	; 2
    2362:	94 90       	lpm	r9, Z
    2364:	31 96       	adiw	r30, 0x01	; 1
    2366:	b4 90       	lpm	r11, Z
    2368:	31 e0       	ldi	r19, 0x01	; 1
    236a:	3c 15       	cp	r19, r12
    236c:	18 f0       	brcs	.+6      	; 0x2374 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    236e:	4b 81       	ldd	r20, Y+3	; 0x03
    2370:	42 30       	cpi	r20, 0x02	; 2
    2372:	68 f0       	brcs	.+26     	; 0x238e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    2374:	69 2d       	mov	r22, r9
    2376:	09 2c       	mov	r0, r9
    2378:	00 0c       	add	r0, r0
    237a:	77 0b       	sbc	r23, r23
    237c:	7d 83       	std	Y+5, r23	; 0x05
    237e:	6c 83       	std	Y+4, r22	; 0x04
    2380:	8b 2d       	mov	r24, r11
    2382:	0b 2c       	mov	r0, r11
    2384:	00 0c       	add	r0, r0
    2386:	99 0b       	sbc	r25, r25
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	8e 83       	std	Y+6, r24	; 0x06
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    238e:	1f 82       	std	Y+7, r1	; 0x07
    2390:	1e 82       	std	Y+6, r1	; 0x06
    2392:	1d 82       	std	Y+5, r1	; 0x05
    2394:	1c 82       	std	Y+4, r1	; 0x04
    2396:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2398:	bb 8d       	ldd	r27, Y+27	; 0x1b
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	11 97       	sbiw	r26, 0x01	; 1
    23a0:	02 84       	ldd	r0, Z+10	; 0x0a
    23a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    23a4:	e0 2d       	mov	r30, r0
    23a6:	cd 01       	movw	r24, r26
    23a8:	09 95       	icall
    23aa:	61 2c       	mov	r6, r1
    23ac:	d1 2c       	mov	r13, r1
    23ae:	81 2c       	mov	r8, r1
    23b0:	fb 81       	ldd	r31, Y+3	; 0x03
    23b2:	ef 2f       	mov	r30, r31
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	fb 87       	std	Y+11, r31	; 0x0b
    23b8:	ea 87       	std	Y+10, r30	; 0x0a
    23ba:	2c 2d       	mov	r18, r12
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3d 87       	std	Y+13, r19	; 0x0d
    23c0:	2c 87       	std	Y+12, r18	; 0x0c
    23c2:	49 81       	ldd	r20, Y+1	; 0x01
    23c4:	5a 81       	ldd	r21, Y+2	; 0x02
    23c6:	4b 0d       	add	r20, r11
    23c8:	51 1d       	adc	r21, r1
    23ca:	b7 fc       	sbrc	r11, 7
    23cc:	5a 95       	dec	r21
    23ce:	5d 8b       	std	Y+21, r21	; 0x15
    23d0:	4c 8b       	std	Y+20, r20	; 0x14
    23d2:	b2 01       	movw	r22, r4
    23d4:	69 0d       	add	r22, r9
    23d6:	71 1d       	adc	r23, r1
    23d8:	97 fc       	sbrc	r9, 7
    23da:	7a 95       	dec	r23
    23dc:	7f 8b       	std	Y+23, r23	; 0x17
    23de:	6e 8b       	std	Y+22, r22	; 0x16
    23e0:	8a 14       	cp	r8, r10
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    23e4:	70 c0       	rjmp	.+224    	; 0x24c6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    23e6:	28 2d       	mov	r18, r8
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4e 81       	ldd	r20, Y+6	; 0x06
    23ec:	5f 81       	ldd	r21, Y+7	; 0x07
    23ee:	42 0f       	add	r20, r18
    23f0:	53 1f       	adc	r21, r19
    23f2:	aa 85       	ldd	r26, Y+10	; 0x0a
    23f4:	bb 85       	ldd	r27, Y+11	; 0x0b
    23f6:	a4 9f       	mul	r26, r20
    23f8:	c0 01       	movw	r24, r0
    23fa:	a5 9f       	mul	r26, r21
    23fc:	90 0d       	add	r25, r0
    23fe:	b4 9f       	mul	r27, r20
    2400:	90 0d       	add	r25, r0
    2402:	11 24       	eor	r1, r1
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	e8 0f       	add	r30, r24
    240a:	f9 1f       	adc	r31, r25
    240c:	ff 87       	std	Y+15, r31	; 0x0f
    240e:	ee 87       	std	Y+14, r30	; 0x0e
    2410:	86 2d       	mov	r24, r6
    2412:	91 2c       	mov	r9, r1
    2414:	4c 89       	ldd	r20, Y+20	; 0x14
    2416:	5d 89       	ldd	r21, Y+21	; 0x15
    2418:	42 0f       	add	r20, r18
    241a:	53 1f       	adc	r21, r19
    241c:	5b 8b       	std	Y+19, r21	; 0x13
    241e:	4a 8b       	std	Y+18, r20	; 0x12
    2420:	97 14       	cp	r9, r7
    2422:	08 f0       	brcs	.+2      	; 0x2426 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    2424:	4d c0       	rjmp	.+154    	; 0x24c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    2426:	bb 24       	eor	r11, r11
    2428:	b3 94       	inc	r11
    242a:	b8 0e       	add	r11, r24
    242c:	87 70       	andi	r24, 0x07	; 7
    242e:	41 f4       	brne	.+16     	; 0x2440 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    2430:	c1 01       	movw	r24, r2
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	e8 89       	ldd	r30, Y+16	; 0x10
    2436:	f9 89       	ldd	r31, Y+17	; 0x11
    2438:	e2 0d       	add	r30, r2
    243a:	f3 1d       	adc	r31, r3
    243c:	d4 90       	lpm	r13, Z
    243e:	1c 01       	movw	r2, r24
    2440:	d7 fe       	sbrs	r13, 7
    2442:	3a c0       	rjmp	.+116    	; 0x24b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2444:	51 e0       	ldi	r21, 0x01	; 1
    2446:	c5 12       	cpse	r12, r21
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    244a:	6b 81       	ldd	r22, Y+3	; 0x03
    244c:	61 30       	cpi	r22, 0x01	; 1
    244e:	99 f4       	brne	.+38     	; 0x2476 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2450:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2452:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2454:	ed 91       	ld	r30, X+
    2456:	fc 91       	ld	r31, X
    2458:	11 97       	sbiw	r26, 0x01	; 1
    245a:	04 84       	ldd	r0, Z+12	; 0x0c
    245c:	f5 85       	ldd	r31, Z+13	; 0x0d
    245e:	e0 2d       	mov	r30, r0
    2460:	28 85       	ldd	r18, Y+8	; 0x08
    2462:	39 85       	ldd	r19, Y+9	; 0x09
    2464:	4a 89       	ldd	r20, Y+18	; 0x12
    2466:	5b 89       	ldd	r21, Y+19	; 0x13
    2468:	6e 89       	ldd	r22, Y+22	; 0x16
    246a:	7f 89       	ldd	r23, Y+23	; 0x17
    246c:	69 0d       	add	r22, r9
    246e:	71 1d       	adc	r23, r1
    2470:	cd 01       	movw	r24, r26
    2472:	09 95       	icall
    2474:	21 c0       	rjmp	.+66     	; 0x24b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	9d 81       	ldd	r25, Y+5	; 0x05
    247a:	89 0d       	add	r24, r9
    247c:	91 1d       	adc	r25, r1
    247e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2480:	fd 85       	ldd	r31, Y+13	; 0x0d
    2482:	8e 9f       	mul	r24, r30
    2484:	b0 01       	movw	r22, r0
    2486:	8f 9f       	mul	r24, r31
    2488:	70 0d       	add	r23, r0
    248a:	9e 9f       	mul	r25, r30
    248c:	70 0d       	add	r23, r0
    248e:	11 24       	eor	r1, r1
    2490:	64 0d       	add	r22, r4
    2492:	75 1d       	adc	r23, r5
    2494:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2496:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2498:	ed 91       	ld	r30, X+
    249a:	fc 91       	ld	r31, X
    249c:	11 97       	sbiw	r26, 0x01	; 1
    249e:	06 84       	ldd	r0, Z+14	; 0x0e
    24a0:	f7 85       	ldd	r31, Z+15	; 0x0f
    24a2:	e0 2d       	mov	r30, r0
    24a4:	e8 84       	ldd	r14, Y+8	; 0x08
    24a6:	f9 84       	ldd	r15, Y+9	; 0x09
    24a8:	0a 85       	ldd	r16, Y+10	; 0x0a
    24aa:	1b 85       	ldd	r17, Y+11	; 0x0b
    24ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    24ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    24b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    24b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    24b4:	cd 01       	movw	r24, r26
    24b6:	09 95       	icall
    24b8:	dd 0c       	add	r13, r13
    24ba:	93 94       	inc	r9
    24bc:	8b 2d       	mov	r24, r11
    24be:	b0 cf       	rjmp	.-160    	; 0x2420 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    24c0:	67 0c       	add	r6, r7
    24c2:	83 94       	inc	r8
    24c4:	8d cf       	rjmp	.-230    	; 0x23e0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    24c6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    24c8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	11 97       	sbiw	r26, 0x01	; 1
    24d0:	06 88       	ldd	r0, Z+22	; 0x16
    24d2:	f7 89       	ldd	r31, Z+23	; 0x17
    24d4:	e0 2d       	mov	r30, r0
    24d6:	cd 01       	movw	r24, r26
    24d8:	6b 96       	adiw	r28, 0x1b	; 27
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	df 90       	pop	r13
    24f2:	cf 90       	pop	r12
    24f4:	bf 90       	pop	r11
    24f6:	af 90       	pop	r10
    24f8:	9f 90       	pop	r9
    24fa:	8f 90       	pop	r8
    24fc:	7f 90       	pop	r7
    24fe:	6f 90       	pop	r6
    2500:	5f 90       	pop	r5
    2502:	4f 90       	pop	r4
    2504:	3f 90       	pop	r3
    2506:	2f 90       	pop	r2
    2508:	09 94       	ijmp
    250a:	6b 96       	adiw	r28, 0x1b	; 27
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	7f 90       	pop	r7
    2530:	6f 90       	pop	r6
    2532:	5f 90       	pop	r5
    2534:	4f 90       	pop	r4
    2536:	3f 90       	pop	r3
    2538:	2f 90       	pop	r2
    253a:	08 95       	ret

0000253c <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    253c:	8f 92       	push	r8
    253e:	9f 92       	push	r9
    2540:	af 92       	push	r10
    2542:	cf 92       	push	r12
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	ec 01       	movw	r28, r24
    2552:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    2554:	89 8d       	ldd	r24, Y+25	; 0x19
    2556:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	09 f0       	breq	.+2      	; 0x255e <_ZN12Adafruit_GFX5writeEh+0x22>
    255c:	42 c0       	rjmp	.+132    	; 0x25e2 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    255e:	6a 30       	cpi	r22, 0x0A	; 10
    2560:	59 f4       	brne	.+22     	; 0x2578 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    2562:	1d 86       	std	Y+13, r1	; 0x0d
    2564:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    2566:	2d 89       	ldd	r18, Y+21	; 0x15
    2568:	8e 85       	ldd	r24, Y+14	; 0x0e
    256a:	9f 85       	ldd	r25, Y+15	; 0x0f
    256c:	38 e0       	ldi	r19, 0x08	; 8
    256e:	23 9f       	mul	r18, r19
    2570:	80 0d       	add	r24, r0
    2572:	91 1d       	adc	r25, r1
    2574:	11 24       	eor	r1, r1
    2576:	43 c0       	rjmp	.+134    	; 0x25fe <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    2578:	6d 30       	cpi	r22, 0x0D	; 13
    257a:	09 f4       	brne	.+2      	; 0x257e <_ZN12Adafruit_GFX5writeEh+0x42>
    257c:	aa c0       	rjmp	.+340    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	88 23       	and	r24, r24
    2582:	c9 f0       	breq	.+50     	; 0x25b6 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2584:	3c 89       	ldd	r19, Y+20	; 0x14
    2586:	8c 85       	ldd	r24, Y+12	; 0x0c
    2588:	9d 85       	ldd	r25, Y+13	; 0x0d
    258a:	46 e0       	ldi	r20, 0x06	; 6
    258c:	34 9f       	mul	r19, r20
    258e:	80 0d       	add	r24, r0
    2590:	91 1d       	adc	r25, r1
    2592:	11 24       	eor	r1, r1
    2594:	48 85       	ldd	r20, Y+8	; 0x08
    2596:	59 85       	ldd	r21, Y+9	; 0x09
    2598:	48 17       	cp	r20, r24
    259a:	59 07       	cpc	r21, r25
    259c:	64 f4       	brge	.+24     	; 0x25b6 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    259e:	1d 86       	std	Y+13, r1	; 0x0d
    25a0:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    25a2:	3d 89       	ldd	r19, Y+21	; 0x15
    25a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a8:	48 e0       	ldi	r20, 0x08	; 8
    25aa:	34 9f       	mul	r19, r20
    25ac:	80 0d       	add	r24, r0
    25ae:	91 1d       	adc	r25, r1
    25b0:	11 24       	eor	r1, r1
    25b2:	9f 87       	std	Y+15, r25	; 0x0f
    25b4:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    25b6:	ea 88       	ldd	r14, Y+18	; 0x12
    25b8:	fb 88       	ldd	r15, Y+19	; 0x13
    25ba:	08 89       	ldd	r16, Y+16	; 0x10
    25bc:	19 89       	ldd	r17, Y+17	; 0x11
    25be:	4e 85       	ldd	r20, Y+14	; 0x0e
    25c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    25c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    25c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    25c6:	ad 88       	ldd	r10, Y+21	; 0x15
    25c8:	cc 88       	ldd	r12, Y+20	; 0x14
    25ca:	ce 01       	movw	r24, r28
    25cc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    25d0:	2c 89       	ldd	r18, Y+20	; 0x14
    25d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    25d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d6:	36 e0       	ldi	r19, 0x06	; 6
    25d8:	23 9f       	mul	r18, r19
    25da:	80 0d       	add	r24, r0
    25dc:	91 1d       	adc	r25, r1
    25de:	11 24       	eor	r1, r1
    25e0:	3e c0       	rjmp	.+124    	; 0x265e <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    25e2:	6a 30       	cpi	r22, 0x0A	; 10
    25e4:	79 f4       	brne	.+30     	; 0x2604 <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    25e6:	1d 86       	std	Y+13, r1	; 0x0d
    25e8:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    25ea:	2d 89       	ldd	r18, Y+21	; 0x15
    25ec:	fc 01       	movw	r30, r24
    25ee:	38 96       	adiw	r30, 0x08	; 8
    25f0:	e4 91       	lpm	r30, Z
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f6:	2e 9f       	mul	r18, r30
    25f8:	80 0d       	add	r24, r0
    25fa:	91 1d       	adc	r25, r1
    25fc:	11 24       	eor	r1, r1
    25fe:	9f 87       	std	Y+15, r25	; 0x0f
    2600:	8e 87       	std	Y+14, r24	; 0x0e
    2602:	67 c0       	rjmp	.+206    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    2604:	6d 30       	cpi	r22, 0x0D	; 13
    2606:	09 f4       	brne	.+2      	; 0x260a <_ZN12Adafruit_GFX5writeEh+0xce>
    2608:	64 c0       	rjmp	.+200    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    260a:	fc 01       	movw	r30, r24
    260c:	34 96       	adiw	r30, 0x04	; 4
    260e:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2610:	63 17       	cp	r22, r19
    2612:	08 f4       	brcc	.+2      	; 0x2616 <_ZN12Adafruit_GFX5writeEh+0xda>
    2614:	5e c0       	rjmp	.+188    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
    2616:	32 96       	adiw	r30, 0x02	; 2
    2618:	e4 91       	lpm	r30, Z
    261a:	e6 17       	cp	r30, r22
    261c:	08 f4       	brcc	.+2      	; 0x2620 <_ZN12Adafruit_GFX5writeEh+0xe4>
    261e:	59 c0       	rjmp	.+178    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    2620:	46 2f       	mov	r20, r22
    2622:	43 1b       	sub	r20, r19
    2624:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2626:	fc 01       	movw	r30, r24
    2628:	32 96       	adiw	r30, 0x02	; 2
    262a:	85 90       	lpm	r8, Z+
    262c:	94 90       	lpm	r9, Z
    262e:	47 e0       	ldi	r20, 0x07	; 7
    2630:	34 9f       	mul	r19, r20
    2632:	80 0c       	add	r8, r0
    2634:	91 1c       	adc	r9, r1
    2636:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    2638:	f4 01       	movw	r30, r8
    263a:	32 96       	adiw	r30, 0x02	; 2
    263c:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    263e:	31 96       	adiw	r30, 0x01	; 1
    2640:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2642:	33 23       	and	r19, r19
    2644:	11 f0       	breq	.+4      	; 0x264a <_ZN12Adafruit_GFX5writeEh+0x10e>
    2646:	e1 11       	cpse	r30, r1
    2648:	0d c0       	rjmp	.+26     	; 0x2664 <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    264a:	f4 01       	movw	r30, r8
    264c:	34 96       	adiw	r30, 0x04	; 4
    264e:	e4 91       	lpm	r30, Z
    2650:	2c 89       	ldd	r18, Y+20	; 0x14
    2652:	8c 85       	ldd	r24, Y+12	; 0x0c
    2654:	9d 85       	ldd	r25, Y+13	; 0x0d
    2656:	e2 9f       	mul	r30, r18
    2658:	80 0d       	add	r24, r0
    265a:	91 1d       	adc	r25, r1
    265c:	11 24       	eor	r1, r1
    265e:	9d 87       	std	Y+13, r25	; 0x0d
    2660:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2662:	37 c0       	rjmp	.+110    	; 0x26d2 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2664:	f4 01       	movw	r30, r8
    2666:	35 96       	adiw	r30, 0x05	; 5
    2668:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    266a:	5f 89       	ldd	r21, Y+23	; 0x17
    266c:	55 23       	and	r21, r21
    266e:	19 f1       	breq	.+70     	; 0x26b6 <_ZN12Adafruit_GFX5writeEh+0x17a>
    2670:	5c 89       	ldd	r21, Y+20	; 0x14
    2672:	e3 2f       	mov	r30, r19
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	e4 0f       	add	r30, r20
    2678:	f1 1d       	adc	r31, r1
    267a:	47 fd       	sbrc	r20, 7
    267c:	fa 95       	dec	r31
    267e:	5e 9f       	mul	r21, r30
    2680:	b0 01       	movw	r22, r0
    2682:	5f 9f       	mul	r21, r31
    2684:	70 0d       	add	r23, r0
    2686:	11 24       	eor	r1, r1
    2688:	4c 85       	ldd	r20, Y+12	; 0x0c
    268a:	5d 85       	ldd	r21, Y+13	; 0x0d
    268c:	46 0f       	add	r20, r22
    268e:	57 1f       	adc	r21, r23
    2690:	68 85       	ldd	r22, Y+8	; 0x08
    2692:	79 85       	ldd	r23, Y+9	; 0x09
    2694:	64 17       	cp	r22, r20
    2696:	75 07       	cpc	r23, r21
    2698:	74 f4       	brge	.+28     	; 0x26b6 <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    269a:	1d 86       	std	Y+13, r1	; 0x0d
    269c:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    269e:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    26a0:	fc 01       	movw	r30, r24
    26a2:	38 96       	adiw	r30, 0x08	; 8
    26a4:	e4 91       	lpm	r30, Z
    26a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26aa:	3e 9f       	mul	r19, r30
    26ac:	80 0d       	add	r24, r0
    26ae:	91 1d       	adc	r25, r1
    26b0:	11 24       	eor	r1, r1
    26b2:	9f 87       	std	Y+15, r25	; 0x0f
    26b4:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    26b6:	ea 88       	ldd	r14, Y+18	; 0x12
    26b8:	fb 88       	ldd	r15, Y+19	; 0x13
    26ba:	08 89       	ldd	r16, Y+16	; 0x10
    26bc:	19 89       	ldd	r17, Y+17	; 0x11
    26be:	4e 85       	ldd	r20, Y+14	; 0x0e
    26c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    26c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26c6:	ad 88       	ldd	r10, Y+21	; 0x15
    26c8:	cc 88       	ldd	r12, Y+20	; 0x14
    26ca:	ce 01       	movw	r24, r28
    26cc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    26d0:	bc cf       	rjmp	.-136    	; 0x264a <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	cf 90       	pop	r12
    26e4:	af 90       	pop	r10
    26e6:	9f 90       	pop	r9
    26e8:	8f 90       	pop	r8
    26ea:	08 95       	ret

000026ec <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    26ec:	61 11       	cpse	r22, r1
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	fc 01       	movw	r30, r24
    26f4:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    26f6:	41 11       	cpse	r20, r1
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	fc 01       	movw	r30, r24
    26fe:	45 8b       	std	Z+21, r20	; 0x15
    2700:	08 95       	ret

00002702 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    2702:	46 2f       	mov	r20, r22
    2704:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <_ZN12Adafruit_GFX11setTextSizeEhh>

00002708 <_ZN17Adafruit_NeoPixelD1Ev>:

/*!
  @brief   Retrieve the last-set brightness value for the strip.
  @return  Brightness value: 0 = minimum (off), 255 = maximum.
*/
uint8_t Adafruit_NeoPixel::getBrightness(void) const { return brightness - 1; }
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	ec 01       	movw	r28, r24
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 1c 23 	call	0x4638	; 0x4638 <free>
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	97 fd       	sbrc	r25, 7
    271c:	05 c0       	rjmp	.+10     	; 0x2728 <_ZN17Adafruit_NeoPixelD1Ev+0x20>
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <pinMode>
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	08 95       	ret

0000272e <_ZN17Adafruit_NeoPixel5beginEv>:
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	ec 01       	movw	r28, r24
    2734:	8e 81       	ldd	r24, Y+6	; 0x06
    2736:	9f 81       	ldd	r25, Y+7	; 0x07
    2738:	97 fd       	sbrc	r25, 7
    273a:	07 c0       	rjmp	.+14     	; 0x274a <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <_ZN17Adafruit_NeoPixel12updateLengthEj>:
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	ec 01       	movw	r28, r24
    2762:	7b 01       	movw	r14, r22
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	0e 94 1c 23 	call	0x4638	; 0x4638 <free>
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2770:	98 17       	cp	r25, r24
    2772:	19 f0       	breq	.+6      	; 0x277a <_ZN17Adafruit_NeoPixel12updateLengthEj+0x26>
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	02 c0       	rjmp	.+4      	; 0x277e <_ZN17Adafruit_NeoPixel12updateLengthEj+0x2a>
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	8e 9d       	mul	r24, r14
    2780:	80 01       	movw	r16, r0
    2782:	8f 9d       	mul	r24, r15
    2784:	10 0d       	add	r17, r0
    2786:	9e 9d       	mul	r25, r14
    2788:	10 0d       	add	r17, r0
    278a:	11 24       	eor	r1, r1
    278c:	1d 83       	std	Y+5, r17	; 0x05
    278e:	0c 83       	std	Y+4, r16	; 0x04
    2790:	c8 01       	movw	r24, r16
    2792:	0e 94 84 22 	call	0x4508	; 0x4508 <malloc>
    2796:	9a 87       	std	Y+10, r25	; 0x0a
    2798:	89 87       	std	Y+9, r24	; 0x09
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	41 f0       	breq	.+16     	; 0x27ae <_ZN17Adafruit_NeoPixel12updateLengthEj+0x5a>
    279e:	a8 01       	movw	r20, r16
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	0e 94 4c 24 	call	0x4898	; 0x4898 <memset>
    27a8:	fb 82       	std	Y+3, r15	; 0x03
    27aa:	ea 82       	std	Y+2, r14	; 0x02
    27ac:	04 c0       	rjmp	.+8      	; 0x27b6 <_ZN17Adafruit_NeoPixel12updateLengthEj+0x62>
    27ae:	1d 82       	std	Y+5, r1	; 0x05
    27b0:	1c 82       	std	Y+4, r1	; 0x04
    27b2:	1b 82       	std	Y+3, r1	; 0x03
    27b4:	1a 82       	std	Y+2, r1	; 0x02
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	08 95       	ret

000027c4 <_ZN17Adafruit_NeoPixel10updateTypeEj>:
    27c4:	fc 01       	movw	r30, r24
    27c6:	31 e0       	ldi	r19, 0x01	; 1
    27c8:	96 85       	ldd	r25, Z+14	; 0x0e
    27ca:	83 85       	ldd	r24, Z+11	; 0x0b
    27cc:	98 13       	cpse	r25, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	cb 01       	movw	r24, r22
    27d2:	26 e0       	ldi	r18, 0x06	; 6
    27d4:	96 95       	lsr	r25
    27d6:	87 95       	ror	r24
    27d8:	2a 95       	dec	r18
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x10>
    27dc:	28 2f       	mov	r18, r24
    27de:	23 70       	andi	r18, 0x03	; 3
    27e0:	26 87       	std	Z+14, r18	; 0x0e
    27e2:	cb 01       	movw	r24, r22
    27e4:	44 e0       	ldi	r20, 0x04	; 4
    27e6:	96 95       	lsr	r25
    27e8:	87 95       	ror	r24
    27ea:	4a 95       	dec	r20
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x22>
    27ee:	83 70       	andi	r24, 0x03	; 3
    27f0:	83 87       	std	Z+11, r24	; 0x0b
    27f2:	ab 01       	movw	r20, r22
    27f4:	56 95       	lsr	r21
    27f6:	47 95       	ror	r20
    27f8:	56 95       	lsr	r21
    27fa:	47 95       	ror	r20
    27fc:	43 70       	andi	r20, 0x03	; 3
    27fe:	44 87       	std	Z+12, r20	; 0x0c
    2800:	96 2f       	mov	r25, r22
    2802:	93 70       	andi	r25, 0x03	; 3
    2804:	95 87       	std	Z+13, r25	; 0x0d
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	6f 3f       	cpi	r22, 0xFF	; 255
    280a:	71 05       	cpc	r23, r1
    280c:	11 f0       	breq	.+4      	; 0x2812 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    280e:	08 f0       	brcs	.+2      	; 0x2812 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x4e>
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	90 83       	st	Z, r25
    2814:	41 85       	ldd	r20, Z+9	; 0x09
    2816:	52 85       	ldd	r21, Z+10	; 0x0a
    2818:	45 2b       	or	r20, r21
    281a:	51 f0       	breq	.+20     	; 0x2830 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	28 13       	cpse	r18, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	39 17       	cp	r19, r25
    2824:	29 f0       	breq	.+10     	; 0x2830 <_ZN17Adafruit_NeoPixel10updateTypeEj+0x6c>
    2826:	62 81       	ldd	r22, Z+2	; 0x02
    2828:	73 81       	ldd	r23, Z+3	; 0x03
    282a:	cf 01       	movw	r24, r30
    282c:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    2830:	08 95       	ret

00002832 <_ZN17Adafruit_NeoPixel4showEv>:
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	29 97       	sbiw	r28, 0x09	; 9
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	8c 01       	movw	r16, r24
    2854:	dc 01       	movw	r26, r24
    2856:	19 96       	adiw	r26, 0x09	; 9
    2858:	8d 91       	ld	r24, X+
    285a:	9c 91       	ld	r25, X
    285c:	1a 97       	sbiw	r26, 0x0a	; 10
    285e:	89 2b       	or	r24, r25
    2860:	09 f4       	brne	.+2      	; 0x2864 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    2862:	8f c1       	rjmp	.+798    	; 0x2b82 <nextbyte20+0x30>
    2864:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    2868:	f8 01       	movw	r30, r16
    286a:	c7 84       	ldd	r12, Z+15	; 0x0f
    286c:	d0 88       	ldd	r13, Z+16	; 0x10
    286e:	e1 88       	ldd	r14, Z+17	; 0x11
    2870:	f2 88       	ldd	r15, Z+18	; 0x12
    2872:	6c 15       	cp	r22, r12
    2874:	7d 05       	cpc	r23, r13
    2876:	8e 05       	cpc	r24, r14
    2878:	9f 05       	cpc	r25, r15
    287a:	20 f4       	brcc	.+8      	; 0x2884 <_ZN17Adafruit_NeoPixel4showEv+0x52>
    287c:	67 87       	std	Z+15, r22	; 0x0f
    287e:	70 8b       	std	Z+16, r23	; 0x10
    2880:	81 8b       	std	Z+17, r24	; 0x11
    2882:	92 8b       	std	Z+18, r25	; 0x12
    2884:	f8 01       	movw	r30, r16
    2886:	c7 84       	ldd	r12, Z+15	; 0x0f
    2888:	d0 88       	ldd	r13, Z+16	; 0x10
    288a:	e1 88       	ldd	r14, Z+17	; 0x11
    288c:	f2 88       	ldd	r15, Z+18	; 0x12
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8c 19       	sub	r24, r12
    2894:	9d 09       	sbc	r25, r13
    2896:	ae 09       	sbc	r26, r14
    2898:	bf 09       	sbc	r27, r15
    289a:	8c 32       	cpi	r24, 0x2C	; 44
    289c:	91 40       	sbci	r25, 0x01	; 1
    289e:	a1 05       	cpc	r26, r1
    28a0:	b1 05       	cpc	r27, r1
    28a2:	00 f3       	brcs	.-64     	; 0x2864 <_ZN17Adafruit_NeoPixel4showEv+0x32>
    28a4:	f8 94       	cli
    28a6:	d8 01       	movw	r26, r16
    28a8:	14 96       	adiw	r26, 0x04	; 4
    28aa:	8d 91       	ld	r24, X+
    28ac:	9c 91       	ld	r25, X
    28ae:	15 97       	sbiw	r26, 0x05	; 5
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	19 96       	adiw	r26, 0x09	; 9
    28b6:	0d 90       	ld	r0, X+
    28b8:	bc 91       	ld	r27, X
    28ba:	a0 2d       	mov	r26, r0
    28bc:	7d 01       	movw	r14, r26
    28be:	ef ef       	ldi	r30, 0xFF	; 255
    28c0:	ee 1a       	sub	r14, r30
    28c2:	fe 0a       	sbc	r15, r30
    28c4:	8c 91       	ld	r24, X
    28c6:	89 87       	std	Y+9, r24	; 0x09
    28c8:	d8 01       	movw	r26, r16
    28ca:	8c 91       	ld	r24, X
    28cc:	53 96       	adiw	r26, 0x13	; 19
    28ce:	0d 90       	ld	r0, X+
    28d0:	bc 91       	ld	r27, X
    28d2:	a0 2d       	mov	r26, r0
    28d4:	88 23       	and	r24, r24
    28d6:	09 f4       	brne	.+2      	; 0x28da <_ZN17Adafruit_NeoPixel4showEv+0xa8>
    28d8:	1a c1       	rjmp	.+564    	; 0x2b0e <headC+0x88>
    28da:	1d 82       	std	Y+5, r1	; 0x05
    28dc:	ab 32       	cpi	r26, 0x2B	; 43
    28de:	b1 05       	cpc	r27, r1
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
    28e2:	59 c0       	rjmp	.+178    	; 0x2996 <headD+0x82>
    28e4:	9b b1       	in	r25, 0x0b	; 11
    28e6:	f8 01       	movw	r30, r16
    28e8:	85 89       	ldd	r24, Z+21	; 0x15
    28ea:	98 2b       	or	r25, r24
    28ec:	98 87       	std	Y+8, r25	; 0x08
    28ee:	9b b1       	in	r25, 0x0b	; 11
    28f0:	80 95       	com	r24
    28f2:	89 23       	and	r24, r25
    28f4:	8f 83       	std	Y+7, r24	; 0x07
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	8e 83       	std	Y+6, r24	; 0x06
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	87 ff       	sbrs	r24, 7
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <_ZN17Adafruit_NeoPixel4showEv+0xd2>
    2900:	88 85       	ldd	r24, Y+8	; 0x08
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	58 85       	ldd	r21, Y+8	; 0x08
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	49 85       	ldd	r20, Y+9	; 0x09
    290a:	3e 81       	ldd	r19, Y+6	; 0x06
    290c:	2d 81       	ldd	r18, Y+5	; 0x05
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	d7 01       	movw	r26, r14

00002914 <headD>:
    2914:	5b b9       	out	0x0b, r21	; 11
    2916:	26 2f       	mov	r18, r22
    2918:	3b b9       	out	0x0b, r19	; 11
    291a:	00 c0       	rjmp	.+0      	; 0x291c <headD+0x8>
    291c:	46 fd       	sbrc	r20, 6
    291e:	25 2f       	mov	r18, r21
    2920:	6b b9       	out	0x0b, r22	; 11
    2922:	00 c0       	rjmp	.+0      	; 0x2924 <headD+0x10>
    2924:	5b b9       	out	0x0b, r21	; 11
    2926:	36 2f       	mov	r19, r22
    2928:	2b b9       	out	0x0b, r18	; 11
    292a:	00 c0       	rjmp	.+0      	; 0x292c <headD+0x18>
    292c:	45 fd       	sbrc	r20, 5
    292e:	35 2f       	mov	r19, r21
    2930:	6b b9       	out	0x0b, r22	; 11
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <headD+0x20>
    2934:	5b b9       	out	0x0b, r21	; 11
    2936:	26 2f       	mov	r18, r22
    2938:	3b b9       	out	0x0b, r19	; 11
    293a:	00 c0       	rjmp	.+0      	; 0x293c <headD+0x28>
    293c:	44 fd       	sbrc	r20, 4
    293e:	25 2f       	mov	r18, r21
    2940:	6b b9       	out	0x0b, r22	; 11
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <headD+0x30>
    2944:	5b b9       	out	0x0b, r21	; 11
    2946:	36 2f       	mov	r19, r22
    2948:	2b b9       	out	0x0b, r18	; 11
    294a:	00 c0       	rjmp	.+0      	; 0x294c <headD+0x38>
    294c:	43 fd       	sbrc	r20, 3
    294e:	35 2f       	mov	r19, r21
    2950:	6b b9       	out	0x0b, r22	; 11
    2952:	00 c0       	rjmp	.+0      	; 0x2954 <headD+0x40>
    2954:	5b b9       	out	0x0b, r21	; 11
    2956:	26 2f       	mov	r18, r22
    2958:	3b b9       	out	0x0b, r19	; 11
    295a:	00 c0       	rjmp	.+0      	; 0x295c <headD+0x48>
    295c:	42 fd       	sbrc	r20, 2
    295e:	25 2f       	mov	r18, r21
    2960:	6b b9       	out	0x0b, r22	; 11
    2962:	00 c0       	rjmp	.+0      	; 0x2964 <headD+0x50>
    2964:	5b b9       	out	0x0b, r21	; 11
    2966:	36 2f       	mov	r19, r22
    2968:	2b b9       	out	0x0b, r18	; 11
    296a:	00 c0       	rjmp	.+0      	; 0x296c <headD+0x58>
    296c:	41 fd       	sbrc	r20, 1
    296e:	35 2f       	mov	r19, r21
    2970:	6b b9       	out	0x0b, r22	; 11
    2972:	00 c0       	rjmp	.+0      	; 0x2974 <headD+0x60>
    2974:	5b b9       	out	0x0b, r21	; 11
    2976:	26 2f       	mov	r18, r22
    2978:	3b b9       	out	0x0b, r19	; 11
    297a:	00 c0       	rjmp	.+0      	; 0x297c <headD+0x68>
    297c:	40 fd       	sbrc	r20, 0
    297e:	25 2f       	mov	r18, r21
    2980:	6b b9       	out	0x0b, r22	; 11
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	5b b9       	out	0x0b, r21	; 11
    2986:	36 2f       	mov	r19, r22
    2988:	2b b9       	out	0x0b, r18	; 11
    298a:	4d 91       	ld	r20, X+
    298c:	47 fd       	sbrc	r20, 7
    298e:	35 2f       	mov	r19, r21
    2990:	6b b9       	out	0x0b, r22	; 11
    2992:	01 f6       	brne	.-128    	; 0x2914 <headD>
    2994:	b8 c0       	rjmp	.+368    	; 0x2b06 <headC+0x80>
    2996:	a5 32       	cpi	r26, 0x25	; 37
    2998:	b1 05       	cpc	r27, r1
    299a:	09 f0       	breq	.+2      	; 0x299e <headD+0x8a>
    299c:	59 c0       	rjmp	.+178    	; 0x2a50 <headB+0x82>
    299e:	95 b1       	in	r25, 0x05	; 5
    29a0:	f8 01       	movw	r30, r16
    29a2:	85 89       	ldd	r24, Z+21	; 0x15
    29a4:	98 2b       	or	r25, r24
    29a6:	98 87       	std	Y+8, r25	; 0x08
    29a8:	95 b1       	in	r25, 0x05	; 5
    29aa:	80 95       	com	r24
    29ac:	89 23       	and	r24, r25
    29ae:	8f 83       	std	Y+7, r24	; 0x07
    29b0:	8f 81       	ldd	r24, Y+7	; 0x07
    29b2:	8e 83       	std	Y+6, r24	; 0x06
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	87 ff       	sbrs	r24, 7
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <headD+0xaa>
    29ba:	88 85       	ldd	r24, Y+8	; 0x08
    29bc:	8e 83       	std	Y+6, r24	; 0x06
    29be:	58 85       	ldd	r21, Y+8	; 0x08
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	49 85       	ldd	r20, Y+9	; 0x09
    29c4:	3e 81       	ldd	r19, Y+6	; 0x06
    29c6:	2d 81       	ldd	r18, Y+5	; 0x05
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	d7 01       	movw	r26, r14

000029ce <headB>:
    29ce:	55 b9       	out	0x05, r21	; 5
    29d0:	26 2f       	mov	r18, r22
    29d2:	35 b9       	out	0x05, r19	; 5
    29d4:	00 c0       	rjmp	.+0      	; 0x29d6 <headB+0x8>
    29d6:	46 fd       	sbrc	r20, 6
    29d8:	25 2f       	mov	r18, r21
    29da:	65 b9       	out	0x05, r22	; 5
    29dc:	00 c0       	rjmp	.+0      	; 0x29de <headB+0x10>
    29de:	55 b9       	out	0x05, r21	; 5
    29e0:	36 2f       	mov	r19, r22
    29e2:	25 b9       	out	0x05, r18	; 5
    29e4:	00 c0       	rjmp	.+0      	; 0x29e6 <headB+0x18>
    29e6:	45 fd       	sbrc	r20, 5
    29e8:	35 2f       	mov	r19, r21
    29ea:	65 b9       	out	0x05, r22	; 5
    29ec:	00 c0       	rjmp	.+0      	; 0x29ee <headB+0x20>
    29ee:	55 b9       	out	0x05, r21	; 5
    29f0:	26 2f       	mov	r18, r22
    29f2:	35 b9       	out	0x05, r19	; 5
    29f4:	00 c0       	rjmp	.+0      	; 0x29f6 <headB+0x28>
    29f6:	44 fd       	sbrc	r20, 4
    29f8:	25 2f       	mov	r18, r21
    29fa:	65 b9       	out	0x05, r22	; 5
    29fc:	00 c0       	rjmp	.+0      	; 0x29fe <headB+0x30>
    29fe:	55 b9       	out	0x05, r21	; 5
    2a00:	36 2f       	mov	r19, r22
    2a02:	25 b9       	out	0x05, r18	; 5
    2a04:	00 c0       	rjmp	.+0      	; 0x2a06 <headB+0x38>
    2a06:	43 fd       	sbrc	r20, 3
    2a08:	35 2f       	mov	r19, r21
    2a0a:	65 b9       	out	0x05, r22	; 5
    2a0c:	00 c0       	rjmp	.+0      	; 0x2a0e <headB+0x40>
    2a0e:	55 b9       	out	0x05, r21	; 5
    2a10:	26 2f       	mov	r18, r22
    2a12:	35 b9       	out	0x05, r19	; 5
    2a14:	00 c0       	rjmp	.+0      	; 0x2a16 <headB+0x48>
    2a16:	42 fd       	sbrc	r20, 2
    2a18:	25 2f       	mov	r18, r21
    2a1a:	65 b9       	out	0x05, r22	; 5
    2a1c:	00 c0       	rjmp	.+0      	; 0x2a1e <headB+0x50>
    2a1e:	55 b9       	out	0x05, r21	; 5
    2a20:	36 2f       	mov	r19, r22
    2a22:	25 b9       	out	0x05, r18	; 5
    2a24:	00 c0       	rjmp	.+0      	; 0x2a26 <headB+0x58>
    2a26:	41 fd       	sbrc	r20, 1
    2a28:	35 2f       	mov	r19, r21
    2a2a:	65 b9       	out	0x05, r22	; 5
    2a2c:	00 c0       	rjmp	.+0      	; 0x2a2e <headB+0x60>
    2a2e:	55 b9       	out	0x05, r21	; 5
    2a30:	26 2f       	mov	r18, r22
    2a32:	35 b9       	out	0x05, r19	; 5
    2a34:	00 c0       	rjmp	.+0      	; 0x2a36 <headB+0x68>
    2a36:	40 fd       	sbrc	r20, 0
    2a38:	25 2f       	mov	r18, r21
    2a3a:	65 b9       	out	0x05, r22	; 5
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	55 b9       	out	0x05, r21	; 5
    2a40:	36 2f       	mov	r19, r22
    2a42:	25 b9       	out	0x05, r18	; 5
    2a44:	4d 91       	ld	r20, X+
    2a46:	47 fd       	sbrc	r20, 7
    2a48:	35 2f       	mov	r19, r21
    2a4a:	65 b9       	out	0x05, r22	; 5
    2a4c:	01 f6       	brne	.-128    	; 0x29ce <headB>
    2a4e:	5b c0       	rjmp	.+182    	; 0x2b06 <headC+0x80>
    2a50:	98 97       	sbiw	r26, 0x28	; 40
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <headB+0x88>
    2a54:	8c c0       	rjmp	.+280    	; 0x2b6e <nextbyte20+0x1c>
    2a56:	98 b1       	in	r25, 0x08	; 8
    2a58:	f8 01       	movw	r30, r16
    2a5a:	85 89       	ldd	r24, Z+21	; 0x15
    2a5c:	98 2b       	or	r25, r24
    2a5e:	98 87       	std	Y+8, r25	; 0x08
    2a60:	98 b1       	in	r25, 0x08	; 8
    2a62:	80 95       	com	r24
    2a64:	89 23       	and	r24, r25
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	8f 81       	ldd	r24, Y+7	; 0x07
    2a6a:	8e 83       	std	Y+6, r24	; 0x06
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	87 ff       	sbrs	r24, 7
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <headB+0xa8>
    2a72:	88 85       	ldd	r24, Y+8	; 0x08
    2a74:	8e 83       	std	Y+6, r24	; 0x06
    2a76:	58 85       	ldd	r21, Y+8	; 0x08
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	49 85       	ldd	r20, Y+9	; 0x09
    2a7c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a7e:	2d 81       	ldd	r18, Y+5	; 0x05
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	d7 01       	movw	r26, r14

00002a86 <headC>:
    2a86:	58 b9       	out	0x08, r21	; 8
    2a88:	26 2f       	mov	r18, r22
    2a8a:	38 b9       	out	0x08, r19	; 8
    2a8c:	00 c0       	rjmp	.+0      	; 0x2a8e <headC+0x8>
    2a8e:	46 fd       	sbrc	r20, 6
    2a90:	25 2f       	mov	r18, r21
    2a92:	68 b9       	out	0x08, r22	; 8
    2a94:	00 c0       	rjmp	.+0      	; 0x2a96 <headC+0x10>
    2a96:	58 b9       	out	0x08, r21	; 8
    2a98:	36 2f       	mov	r19, r22
    2a9a:	28 b9       	out	0x08, r18	; 8
    2a9c:	00 c0       	rjmp	.+0      	; 0x2a9e <headC+0x18>
    2a9e:	45 fd       	sbrc	r20, 5
    2aa0:	35 2f       	mov	r19, r21
    2aa2:	68 b9       	out	0x08, r22	; 8
    2aa4:	00 c0       	rjmp	.+0      	; 0x2aa6 <headC+0x20>
    2aa6:	58 b9       	out	0x08, r21	; 8
    2aa8:	26 2f       	mov	r18, r22
    2aaa:	38 b9       	out	0x08, r19	; 8
    2aac:	00 c0       	rjmp	.+0      	; 0x2aae <headC+0x28>
    2aae:	44 fd       	sbrc	r20, 4
    2ab0:	25 2f       	mov	r18, r21
    2ab2:	68 b9       	out	0x08, r22	; 8
    2ab4:	00 c0       	rjmp	.+0      	; 0x2ab6 <headC+0x30>
    2ab6:	58 b9       	out	0x08, r21	; 8
    2ab8:	36 2f       	mov	r19, r22
    2aba:	28 b9       	out	0x08, r18	; 8
    2abc:	00 c0       	rjmp	.+0      	; 0x2abe <headC+0x38>
    2abe:	43 fd       	sbrc	r20, 3
    2ac0:	35 2f       	mov	r19, r21
    2ac2:	68 b9       	out	0x08, r22	; 8
    2ac4:	00 c0       	rjmp	.+0      	; 0x2ac6 <headC+0x40>
    2ac6:	58 b9       	out	0x08, r21	; 8
    2ac8:	26 2f       	mov	r18, r22
    2aca:	38 b9       	out	0x08, r19	; 8
    2acc:	00 c0       	rjmp	.+0      	; 0x2ace <headC+0x48>
    2ace:	42 fd       	sbrc	r20, 2
    2ad0:	25 2f       	mov	r18, r21
    2ad2:	68 b9       	out	0x08, r22	; 8
    2ad4:	00 c0       	rjmp	.+0      	; 0x2ad6 <headC+0x50>
    2ad6:	58 b9       	out	0x08, r21	; 8
    2ad8:	36 2f       	mov	r19, r22
    2ada:	28 b9       	out	0x08, r18	; 8
    2adc:	00 c0       	rjmp	.+0      	; 0x2ade <headC+0x58>
    2ade:	41 fd       	sbrc	r20, 1
    2ae0:	35 2f       	mov	r19, r21
    2ae2:	68 b9       	out	0x08, r22	; 8
    2ae4:	00 c0       	rjmp	.+0      	; 0x2ae6 <headC+0x60>
    2ae6:	58 b9       	out	0x08, r21	; 8
    2ae8:	26 2f       	mov	r18, r22
    2aea:	38 b9       	out	0x08, r19	; 8
    2aec:	00 c0       	rjmp	.+0      	; 0x2aee <headC+0x68>
    2aee:	40 fd       	sbrc	r20, 0
    2af0:	25 2f       	mov	r18, r21
    2af2:	68 b9       	out	0x08, r22	; 8
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	58 b9       	out	0x08, r21	; 8
    2af8:	36 2f       	mov	r19, r22
    2afa:	28 b9       	out	0x08, r18	; 8
    2afc:	4d 91       	ld	r20, X+
    2afe:	47 fd       	sbrc	r20, 7
    2b00:	35 2f       	mov	r19, r21
    2b02:	68 b9       	out	0x08, r22	; 8
    2b04:	01 f6       	brne	.-128    	; 0x2a86 <headC>
    2b06:	49 87       	std	Y+9, r20	; 0x09
    2b08:	3e 83       	std	Y+6, r19	; 0x06
    2b0a:	2d 83       	std	Y+5, r18	; 0x05
    2b0c:	2e c0       	rjmp	.+92     	; 0x2b6a <nextbyte20+0x18>
    2b0e:	9c 91       	ld	r25, X
    2b10:	f8 01       	movw	r30, r16
    2b12:	85 89       	ldd	r24, Z+21	; 0x15
    2b14:	98 2b       	or	r25, r24
    2b16:	98 87       	std	Y+8, r25	; 0x08
    2b18:	9c 91       	ld	r25, X
    2b1a:	80 95       	com	r24
    2b1c:	89 23       	and	r24, r25
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
    2b20:	8f 81       	ldd	r24, Y+7	; 0x07
    2b22:	8c 83       	std	Y+4, r24	; 0x04
    2b24:	88 e0       	ldi	r24, 0x08	; 8
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	58 85       	ldd	r21, Y+8	; 0x08
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	49 85       	ldd	r20, Y+9	; 0x09
    2b2e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b30:	2c 81       	ldd	r18, Y+4	; 0x04
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	f7 01       	movw	r30, r14

00002b38 <head20>:
    2b38:	5c 93       	st	X, r21
    2b3a:	47 fd       	sbrc	r20, 7
    2b3c:	25 2f       	mov	r18, r21
    2b3e:	2c 93       	st	X, r18
    2b40:	26 2f       	mov	r18, r22
    2b42:	3a 95       	dec	r19
    2b44:	31 f0       	breq	.+12     	; 0x2b52 <nextbyte20>
    2b46:	44 1f       	adc	r20, r20
    2b48:	6c 93       	st	X, r22
    2b4a:	00 c0       	rjmp	.+0      	; 0x2b4c <head20+0x14>
    2b4c:	00 c0       	rjmp	.+0      	; 0x2b4e <head20+0x16>
    2b4e:	00 c0       	rjmp	.+0      	; 0x2b50 <head20+0x18>
    2b50:	f3 cf       	rjmp	.-26     	; 0x2b38 <head20>

00002b52 <nextbyte20>:
    2b52:	6c 93       	st	X, r22
    2b54:	00 00       	nop
    2b56:	38 e0       	ldi	r19, 0x08	; 8
    2b58:	41 91       	ld	r20, Z+
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	69 f7       	brne	.-38     	; 0x2b38 <head20>
    2b5e:	f8 01       	movw	r30, r16
    2b60:	b4 8b       	std	Z+20, r27	; 0x14
    2b62:	a3 8b       	std	Z+19, r26	; 0x13
    2b64:	49 87       	std	Y+9, r20	; 0x09
    2b66:	3b 83       	std	Y+3, r19	; 0x03
    2b68:	2c 83       	std	Y+4, r18	; 0x04
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	78 94       	sei
    2b70:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    2b74:	d8 01       	movw	r26, r16
    2b76:	1f 96       	adiw	r26, 0x0f	; 15
    2b78:	6d 93       	st	X+, r22
    2b7a:	7d 93       	st	X+, r23
    2b7c:	8d 93       	st	X+, r24
    2b7e:	9c 93       	st	X, r25
    2b80:	52 97       	sbiw	r26, 0x12	; 18
    2b82:	29 96       	adiw	r28, 0x09	; 9
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	ff 90       	pop	r15
    2b98:	ef 90       	pop	r14
    2b9a:	df 90       	pop	r13
    2b9c:	cf 90       	pop	r12
    2b9e:	08 95       	ret

00002ba0 <_ZN17Adafruit_NeoPixel6setPinEi>:
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	ec 01       	movw	r28, r24
    2baa:	16 2f       	mov	r17, r22
    2bac:	07 2f       	mov	r16, r23
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	88 23       	and	r24, r24
    2bb2:	39 f0       	breq	.+14     	; 0x2bc2 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    2bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb8:	97 fd       	sbrc	r25, 7
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <_ZN17Adafruit_NeoPixel6setPinEi+0x22>
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    2bc2:	1e 83       	std	Y+6, r17	; 0x06
    2bc4:	0f 83       	std	Y+7, r16	; 0x07
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	88 23       	and	r24, r24
    2bca:	41 f0       	breq	.+16     	; 0x2bdc <_ZN17Adafruit_NeoPixel6setPinEi+0x3c>
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	81 2f       	mov	r24, r17
    2bd0:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	81 2f       	mov	r24, r17
    2bd8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    2bdc:	81 2f       	mov	r24, r17
    2bde:	90 2f       	mov	r25, r16
    2be0:	fc 01       	movw	r30, r24
    2be2:	ea 52       	subi	r30, 0x2A	; 42
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	e4 91       	lpm	r30, Z
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	ec 50       	subi	r30, 0x0C	; 12
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	25 91       	lpm	r18, Z+
    2bf4:	34 91       	lpm	r19, Z
    2bf6:	3c 8b       	std	Y+20, r19	; 0x14
    2bf8:	2b 8b       	std	Y+19, r18	; 0x13
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	ee 53       	subi	r30, 0x3E	; 62
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	e4 91       	lpm	r30, Z
    2c02:	ed 8b       	std	Y+21, r30	; 0x15
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	08 95       	ret

00002c0e <_ZN17Adafruit_NeoPixelC1Ejij>:
    2c0e:	ef 92       	push	r14
    2c10:	ff 92       	push	r15
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	ec 01       	movw	r28, r24
    2c1c:	7b 01       	movw	r14, r22
    2c1e:	8a 01       	movw	r16, r20
    2c20:	19 82       	std	Y+1, r1	; 0x01
    2c22:	18 86       	std	Y+8, r1	; 0x08
    2c24:	1a 86       	std	Y+10, r1	; 0x0a
    2c26:	19 86       	std	Y+9, r1	; 0x09
    2c28:	1f 86       	std	Y+15, r1	; 0x0f
    2c2a:	18 8a       	std	Y+16, r1	; 0x10
    2c2c:	19 8a       	std	Y+17, r1	; 0x11
    2c2e:	1a 8a       	std	Y+18, r1	; 0x12
    2c30:	b9 01       	movw	r22, r18
    2c32:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_ZN17Adafruit_NeoPixel10updateTypeEj>
    2c36:	b7 01       	movw	r22, r14
    2c38:	ce 01       	movw	r24, r28
    2c3a:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN17Adafruit_NeoPixel12updateLengthEj>
    2c3e:	b8 01       	movw	r22, r16
    2c40:	ce 01       	movw	r24, r28
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <_ZN17Adafruit_NeoPixel6setPinEi>

00002c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>:
    2c52:	7f 92       	push	r7
    2c54:	8f 92       	push	r8
    2c56:	9f 92       	push	r9
    2c58:	af 92       	push	r10
    2c5a:	bf 92       	push	r11
    2c5c:	cf 92       	push	r12
    2c5e:	df 92       	push	r13
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	68 17       	cp	r22, r24
    2c74:	79 07       	cpc	r23, r25
    2c76:	08 f0       	brcs	.+2      	; 0x2c7a <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x28>
    2c78:	53 c0       	rjmp	.+166    	; 0x2d20 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xce>
    2c7a:	4a 01       	movw	r8, r20
    2c7c:	aa 24       	eor	r10, r10
    2c7e:	bb 24       	eor	r11, r11
    2c80:	78 2c       	mov	r7, r8
    2c82:	c3 2e       	mov	r12, r19
    2c84:	d4 2e       	mov	r13, r20
    2c86:	e5 2e       	mov	r14, r21
    2c88:	ff 24       	eor	r15, r15
    2c8a:	bc 2d       	mov	r27, r12
    2c8c:	a2 2f       	mov	r26, r18
    2c8e:	80 85       	ldd	r24, Z+8	; 0x08
    2c90:	88 23       	and	r24, r24
    2c92:	61 f0       	breq	.+24     	; 0x2cac <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x5a>
    2c94:	88 9e       	mul	r8, r24
    2c96:	40 01       	movw	r8, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	79 2c       	mov	r7, r9
    2c9c:	8c 9d       	mul	r24, r12
    2c9e:	60 01       	movw	r12, r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	bd 2d       	mov	r27, r13
    2ca4:	82 9f       	mul	r24, r18
    2ca6:	70 01       	movw	r14, r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	af 2d       	mov	r26, r15
    2cac:	96 85       	ldd	r25, Z+14	; 0x0e
    2cae:	d3 85       	ldd	r29, Z+11	; 0x0b
    2cb0:	e1 84       	ldd	r14, Z+9	; 0x09
    2cb2:	f2 84       	ldd	r15, Z+10	; 0x0a
    2cb4:	9d 13       	cpse	r25, r29
    2cb6:	08 c0       	rjmp	.+16     	; 0x2cc8 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x76>
    2cb8:	cb 01       	movw	r24, r22
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	68 0f       	add	r22, r24
    2cc0:	79 1f       	adc	r23, r25
    2cc2:	6e 0d       	add	r22, r14
    2cc4:	7f 1d       	adc	r23, r15
    2cc6:	1c c0       	rjmp	.+56     	; 0x2d00 <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xae>
    2cc8:	66 0f       	add	r22, r22
    2cca:	77 1f       	adc	r23, r23
    2ccc:	66 0f       	add	r22, r22
    2cce:	77 1f       	adc	r23, r23
    2cd0:	6e 0d       	add	r22, r14
    2cd2:	7f 1d       	adc	r23, r15
    2cd4:	05 2f       	mov	r16, r21
    2cd6:	11 27       	eor	r17, r17
    2cd8:	22 27       	eor	r18, r18
    2cda:	33 27       	eor	r19, r19
    2cdc:	7b 01       	movw	r14, r22
    2cde:	e9 0e       	add	r14, r25
    2ce0:	f1 1c       	adc	r15, r1
    2ce2:	81 11       	cpse	r24, r1
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0x98>
    2ce6:	20 2f       	mov	r18, r16
    2ce8:	09 c0       	rjmp	.+18     	; 0x2cfc <_ZN17Adafruit_NeoPixel13setPixelColorEjm+0xaa>
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	80 9f       	mul	r24, r16
    2cee:	60 01       	movw	r12, r0
    2cf0:	81 9f       	mul	r24, r17
    2cf2:	d0 0c       	add	r13, r0
    2cf4:	90 9f       	mul	r25, r16
    2cf6:	d0 0c       	add	r13, r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	2d 2d       	mov	r18, r13
    2cfc:	e7 01       	movw	r28, r14
    2cfe:	28 83       	st	Y, r18
    2d00:	83 85       	ldd	r24, Z+11	; 0x0b
    2d02:	9b 01       	movw	r18, r22
    2d04:	28 0f       	add	r18, r24
    2d06:	31 1d       	adc	r19, r1
    2d08:	e9 01       	movw	r28, r18
    2d0a:	78 82       	st	Y, r7
    2d0c:	84 85       	ldd	r24, Z+12	; 0x0c
    2d0e:	eb 01       	movw	r28, r22
    2d10:	c8 0f       	add	r28, r24
    2d12:	d1 1d       	adc	r29, r1
    2d14:	b8 83       	st	Y, r27
    2d16:	85 85       	ldd	r24, Z+13	; 0x0d
    2d18:	fb 01       	movw	r30, r22
    2d1a:	e8 0f       	add	r30, r24
    2d1c:	f1 1d       	adc	r31, r1
    2d1e:	a0 83       	st	Z, r26
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	7f 90       	pop	r7
    2d3a:	08 95       	ret

00002d3c <_ZN17Adafruit_NeoPixel4fillEmjj>:
    2d3c:	8f 92       	push	r8
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	6c 01       	movw	r12, r24
    2d56:	4a 01       	movw	r8, r20
    2d58:	5b 01       	movw	r10, r22
    2d5a:	e9 01       	movw	r28, r18
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e2 80       	ldd	r14, Z+2	; 0x02
    2d60:	f3 80       	ldd	r15, Z+3	; 0x03
    2d62:	2e 15       	cp	r18, r14
    2d64:	3f 05       	cpc	r19, r15
    2d66:	a0 f4       	brcc	.+40     	; 0x2d90 <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    2d68:	01 15       	cp	r16, r1
    2d6a:	11 05       	cpc	r17, r1
    2d6c:	31 f0       	breq	.+12     	; 0x2d7a <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    2d6e:	02 0f       	add	r16, r18
    2d70:	13 1f       	adc	r17, r19
    2d72:	0e 15       	cp	r16, r14
    2d74:	1f 05       	cpc	r17, r15
    2d76:	08 f4       	brcc	.+2      	; 0x2d7a <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    2d78:	78 01       	movw	r14, r16
    2d7a:	ce 15       	cp	r28, r14
    2d7c:	df 05       	cpc	r29, r15
    2d7e:	40 f4       	brcc	.+16     	; 0x2d90 <_ZN17Adafruit_NeoPixel4fillEmjj+0x54>
    2d80:	a5 01       	movw	r20, r10
    2d82:	94 01       	movw	r18, r8
    2d84:	be 01       	movw	r22, r28
    2d86:	c6 01       	movw	r24, r12
    2d88:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN17Adafruit_NeoPixel13setPixelColorEjm>
    2d8c:	21 96       	adiw	r28, 0x01	; 1
    2d8e:	f5 cf       	rjmp	.-22     	; 0x2d7a <_ZN17Adafruit_NeoPixel4fillEmjj+0x3e>
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	bf 90       	pop	r11
    2da2:	af 90       	pop	r10
    2da4:	9f 90       	pop	r9
    2da6:	8f 90       	pop	r8
    2da8:	08 95       	ret

00002daa <_ZN17Adafruit_NeoPixel5clearEv>:

/*!
  @brief   Fill the whole NeoPixel strip with 0 / black / off.
*/
void Adafruit_NeoPixel::clear(void) { memset(pixels, 0, numBytes); }
    2daa:	fc 01       	movw	r30, r24
    2dac:	44 81       	ldd	r20, Z+4	; 0x04
    2dae:	55 81       	ldd	r21, Z+5	; 0x05
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	81 85       	ldd	r24, Z+9	; 0x09
    2db6:	92 85       	ldd	r25, Z+10	; 0x0a
    2db8:	0c 94 4c 24 	jmp	0x4898	; 0x4898 <memset>

00002dbc <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	77 fd       	sbrc	r23, 7
    2dc0:	b9 c0       	rjmp	.+370    	; 0x2f34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2dc2:	80 85       	ldd	r24, Z+8	; 0x08
    2dc4:	91 85       	ldd	r25, Z+9	; 0x09
    2dc6:	68 17       	cp	r22, r24
    2dc8:	79 07       	cpc	r23, r25
    2dca:	0c f0       	brlt	.+2      	; 0x2dce <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    2dcc:	b3 c0       	rjmp	.+358    	; 0x2f34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2dce:	57 fd       	sbrc	r21, 7
    2dd0:	b1 c0       	rjmp	.+354    	; 0x2f34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2dd2:	82 85       	ldd	r24, Z+10	; 0x0a
    2dd4:	93 85       	ldd	r25, Z+11	; 0x0b
    2dd6:	48 17       	cp	r20, r24
    2dd8:	59 07       	cpc	r21, r25
    2dda:	0c f0       	brlt	.+2      	; 0x2dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    2ddc:	08 95       	ret
    2dde:	86 89       	ldd	r24, Z+22	; 0x16
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	79 f4       	brne	.+30     	; 0x2e02 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    2de4:	84 81       	ldd	r24, Z+4	; 0x04
    2de6:	95 81       	ldd	r25, Z+5	; 0x05
    2de8:	dc 01       	movw	r26, r24
    2dea:	a6 1b       	sub	r26, r22
    2dec:	b7 0b       	sbc	r27, r23
    2dee:	bd 01       	movw	r22, r26
    2df0:	61 50       	subi	r22, 0x01	; 1
    2df2:	71 09       	sbc	r23, r1
    2df4:	86 81       	ldd	r24, Z+6	; 0x06
    2df6:	97 81       	ldd	r25, Z+7	; 0x07
    2df8:	dc 01       	movw	r26, r24
    2dfa:	a4 1b       	sub	r26, r20
    2dfc:	b5 0b       	sbc	r27, r21
    2dfe:	ad 01       	movw	r20, r26
    2e00:	0e c0       	rjmp	.+28     	; 0x2e1e <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    2e02:	83 30       	cpi	r24, 0x03	; 3
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    2e06:	84 c0       	rjmp	.+264    	; 0x2f10 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    2e08:	64 27       	eor	r22, r20
    2e0a:	75 27       	eor	r23, r21
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	86 27       	eor	r24, r22
    2e10:	97 27       	eor	r25, r23
    2e12:	68 27       	eor	r22, r24
    2e14:	79 27       	eor	r23, r25
    2e16:	46 81       	ldd	r20, Z+6	; 0x06
    2e18:	57 81       	ldd	r21, Z+7	; 0x07
    2e1a:	48 1b       	sub	r20, r24
    2e1c:	59 0b       	sbc	r21, r25
    2e1e:	41 50       	subi	r20, 0x01	; 1
    2e20:	51 09       	sbc	r21, r1
    2e22:	21 30       	cpi	r18, 0x01	; 1
    2e24:	31 05       	cpc	r19, r1
    2e26:	31 f0       	breq	.+12     	; 0x2e34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    2e28:	48 f1       	brcs	.+82     	; 0x2e7c <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    2e2a:	22 30       	cpi	r18, 0x02	; 2
    2e2c:	31 05       	cpc	r19, r1
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    2e30:	4a c0       	rjmp	.+148    	; 0x2ec6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    2e32:	08 95       	ret
    2e34:	ca 01       	movw	r24, r20
    2e36:	57 fd       	sbrc	r21, 7
    2e38:	07 96       	adiw	r24, 0x07	; 7
    2e3a:	9c 01       	movw	r18, r24
    2e3c:	a3 e0       	ldi	r26, 0x03	; 3
    2e3e:	35 95       	asr	r19
    2e40:	27 95       	ror	r18
    2e42:	aa 95       	dec	r26
    2e44:	e1 f7       	brne	.-8      	; 0x2e3e <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    2e46:	a4 81       	ldd	r26, Z+4	; 0x04
    2e48:	b5 81       	ldd	r27, Z+5	; 0x05
    2e4a:	2a 9f       	mul	r18, r26
    2e4c:	c0 01       	movw	r24, r0
    2e4e:	2b 9f       	mul	r18, r27
    2e50:	90 0d       	add	r25, r0
    2e52:	3a 9f       	mul	r19, r26
    2e54:	90 0d       	add	r25, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	68 0f       	add	r22, r24
    2e5a:	79 1f       	adc	r23, r25
    2e5c:	07 8c       	ldd	r0, Z+31	; 0x1f
    2e5e:	f0 a1       	ldd	r31, Z+32	; 0x20
    2e60:	e0 2d       	mov	r30, r0
    2e62:	e6 0f       	add	r30, r22
    2e64:	f7 1f       	adc	r31, r23
    2e66:	47 70       	andi	r20, 0x07	; 7
    2e68:	55 27       	eor	r21, r21
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    2e70:	88 0f       	add	r24, r24
    2e72:	4a 95       	dec	r20
    2e74:	ea f7       	brpl	.-6      	; 0x2e70 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    2e76:	90 81       	ld	r25, Z
    2e78:	89 2b       	or	r24, r25
    2e7a:	48 c0       	rjmp	.+144    	; 0x2f0c <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2e7c:	ca 01       	movw	r24, r20
    2e7e:	57 fd       	sbrc	r21, 7
    2e80:	07 96       	adiw	r24, 0x07	; 7
    2e82:	9c 01       	movw	r18, r24
    2e84:	93 e0       	ldi	r25, 0x03	; 3
    2e86:	35 95       	asr	r19
    2e88:	27 95       	ror	r18
    2e8a:	9a 95       	dec	r25
    2e8c:	e1 f7       	brne	.-8      	; 0x2e86 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    2e8e:	a4 81       	ldd	r26, Z+4	; 0x04
    2e90:	b5 81       	ldd	r27, Z+5	; 0x05
    2e92:	2a 9f       	mul	r18, r26
    2e94:	c0 01       	movw	r24, r0
    2e96:	2b 9f       	mul	r18, r27
    2e98:	90 0d       	add	r25, r0
    2e9a:	3a 9f       	mul	r19, r26
    2e9c:	90 0d       	add	r25, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	68 0f       	add	r22, r24
    2ea2:	79 1f       	adc	r23, r25
    2ea4:	07 8c       	ldd	r0, Z+31	; 0x1f
    2ea6:	f0 a1       	ldd	r31, Z+32	; 0x20
    2ea8:	e0 2d       	mov	r30, r0
    2eaa:	e6 0f       	add	r30, r22
    2eac:	f7 1f       	adc	r31, r23
    2eae:	47 70       	andi	r20, 0x07	; 7
    2eb0:	55 27       	eor	r21, r21
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    2eb8:	88 0f       	add	r24, r24
    2eba:	4a 95       	dec	r20
    2ebc:	ea f7       	brpl	.-6      	; 0x2eb8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    2ebe:	80 95       	com	r24
    2ec0:	90 81       	ld	r25, Z
    2ec2:	89 23       	and	r24, r25
    2ec4:	23 c0       	rjmp	.+70     	; 0x2f0c <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2ec6:	ca 01       	movw	r24, r20
    2ec8:	57 fd       	sbrc	r21, 7
    2eca:	07 96       	adiw	r24, 0x07	; 7
    2ecc:	9c 01       	movw	r18, r24
    2ece:	83 e0       	ldi	r24, 0x03	; 3
    2ed0:	35 95       	asr	r19
    2ed2:	27 95       	ror	r18
    2ed4:	8a 95       	dec	r24
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    2ed8:	a4 81       	ldd	r26, Z+4	; 0x04
    2eda:	b5 81       	ldd	r27, Z+5	; 0x05
    2edc:	2a 9f       	mul	r18, r26
    2ede:	c0 01       	movw	r24, r0
    2ee0:	2b 9f       	mul	r18, r27
    2ee2:	90 0d       	add	r25, r0
    2ee4:	3a 9f       	mul	r19, r26
    2ee6:	90 0d       	add	r25, r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	68 0f       	add	r22, r24
    2eec:	79 1f       	adc	r23, r25
    2eee:	07 8c       	ldd	r0, Z+31	; 0x1f
    2ef0:	f0 a1       	ldd	r31, Z+32	; 0x20
    2ef2:	e0 2d       	mov	r30, r0
    2ef4:	e6 0f       	add	r30, r22
    2ef6:	f7 1f       	adc	r31, r23
    2ef8:	47 70       	andi	r20, 0x07	; 7
    2efa:	55 27       	eor	r21, r21
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    2f02:	88 0f       	add	r24, r24
    2f04:	4a 95       	dec	r20
    2f06:	ea f7       	brpl	.-6      	; 0x2f02 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    2f08:	90 81       	ld	r25, Z
    2f0a:	89 27       	eor	r24, r25
    2f0c:	80 83       	st	Z, r24
    2f0e:	08 95       	ret
    2f10:	81 30       	cpi	r24, 0x01	; 1
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    2f14:	86 cf       	rjmp	.-244    	; 0x2e22 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    2f16:	64 27       	eor	r22, r20
    2f18:	75 27       	eor	r23, r21
    2f1a:	46 27       	eor	r20, r22
    2f1c:	57 27       	eor	r21, r23
    2f1e:	64 27       	eor	r22, r20
    2f20:	75 27       	eor	r23, r21
    2f22:	84 81       	ldd	r24, Z+4	; 0x04
    2f24:	95 81       	ldd	r25, Z+5	; 0x05
    2f26:	dc 01       	movw	r26, r24
    2f28:	a6 1b       	sub	r26, r22
    2f2a:	b7 0b       	sbc	r27, r23
    2f2c:	bd 01       	movw	r22, r26
    2f2e:	61 50       	subi	r22, 0x01	; 1
    2f30:	71 09       	sbc	r23, r1
    2f32:	77 cf       	rjmp	.-274    	; 0x2e22 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    2f34:	08 95       	ret

00002f36 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2f36:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <_ZN8SPIClass13interruptModeE>
    2f3a:	22 23       	and	r18, r18
    2f3c:	99 f0       	breq	.+38     	; 0x2f64 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2f3e:	4f b7       	in	r20, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <_ZN8SPIClass13interruptModeE>
    2f46:	21 30       	cpi	r18, 0x01	; 1
    2f48:	59 f4       	brne	.+22     	; 0x2f60 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2f4a:	2d b3       	in	r18, 0x1d	; 29
    2f4c:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <_ZN8SPIClass13interruptSaveE>
    2f50:	3d b3       	in	r19, 0x1d	; 29
    2f52:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <_ZN8SPIClass13interruptMaskE>
    2f56:	20 95       	com	r18
    2f58:	23 23       	and	r18, r19
    2f5a:	2d bb       	out	0x1d, r18	; 29
    2f5c:	4f bf       	out	0x3f, r20	; 63
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2f60:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <_ZN8SPIClass13interruptSaveE>
    2f64:	8c bd       	out	0x2c, r24	; 44
    2f66:	9d bd       	out	0x2d, r25	; 45
    2f68:	08 95       	ret

00002f6a <_ZN8SPIClass8transferEh>:
    2f6a:	8e bd       	out	0x2e, r24	; 46
    2f6c:	00 00       	nop
    2f6e:	0d b4       	in	r0, 0x2d	; 45
    2f70:	07 fe       	sbrs	r0, 7
    2f72:	fd cf       	rjmp	.-6      	; 0x2f6e <_ZN8SPIClass8transferEh+0x4>
    2f74:	8e b5       	in	r24, 0x2e	; 46
    2f76:	08 95       	ret

00002f78 <_ZN8SPIClass14endTransactionEv>:
    2f78:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZN8SPIClass13interruptModeE>
    2f7c:	88 23       	and	r24, r24
    2f7e:	61 f0       	breq	.+24     	; 0x2f98 <_ZN8SPIClass14endTransactionEv+0x20>
    2f80:	9f b7       	in	r25, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <_ZN8SPIClass13interruptModeE>
    2f88:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZN8SPIClass13interruptSaveE>
    2f8c:	21 30       	cpi	r18, 0x01	; 1
    2f8e:	19 f4       	brne	.+6      	; 0x2f96 <_ZN8SPIClass14endTransactionEv+0x1e>
    2f90:	8d bb       	out	0x1d, r24	; 29
    2f92:	9f bf       	out	0x3f, r25	; 63
    2f94:	08 95       	ret
    2f96:	8f bf       	out	0x3f, r24	; 63
    2f98:	08 95       	ret

00002f9a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    2f9a:	4f 92       	push	r4
    2f9c:	5f 92       	push	r5
    2f9e:	6f 92       	push	r6
    2fa0:	7f 92       	push	r7
    2fa2:	8f 92       	push	r8
    2fa4:	9f 92       	push	r9
    2fa6:	af 92       	push	r10
    2fa8:	bf 92       	push	r11
    2faa:	cf 92       	push	r12
    2fac:	df 92       	push	r13
    2fae:	ef 92       	push	r14
    2fb0:	ff 92       	push	r15
    2fb2:	0f 93       	push	r16
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	3c 01       	movw	r6, r24
    2fbe:	29 01       	movw	r4, r18
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <_ZN12Adafruit_GFXC1Eii>
    2fc8:	8b e5       	ldi	r24, 0x5B	; 91
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	f3 01       	movw	r30, r6
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	14 8e       	std	Z+28, r1	; 0x1c
    2fd4:	13 8e       	std	Z+27, r1	; 0x1b
    2fd6:	41 14       	cp	r4, r1
    2fd8:	51 04       	cpc	r5, r1
    2fda:	11 f0       	breq	.+4      	; 0x2fe0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x46>
    2fdc:	c2 01       	movw	r24, r4
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x4a>
    2fe0:	81 eb       	ldi	r24, 0xB1	; 177
    2fe2:	92 e0       	ldi	r25, 0x02	; 2
    2fe4:	f3 01       	movw	r30, r6
    2fe6:	96 8f       	std	Z+30, r25	; 0x1e
    2fe8:	85 8f       	std	Z+29, r24	; 0x1d
    2fea:	10 a2       	std	Z+32, r1	; 0x20
    2fec:	17 8e       	std	Z+31, r1	; 0x1f
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	84 a3       	std	Z+36, r24	; 0x24
    2ff2:	85 a3       	std	Z+37, r24	; 0x25
    2ff4:	86 a3       	std	Z+38, r24	; 0x26
    2ff6:	87 a3       	std	Z+39, r24	; 0x27
    2ff8:	00 a7       	std	Z+40, r16	; 0x28
    2ffa:	c5 aa       	std	Z+53, r12	; 0x35
    2ffc:	d6 aa       	std	Z+54, r13	; 0x36
    2ffe:	e7 aa       	std	Z+55, r14	; 0x37
    3000:	f0 ae       	std	Z+56, r15	; 0x38
    3002:	81 ae       	std	Z+57, r8	; 0x39
    3004:	92 ae       	std	Z+58, r9	; 0x3a
    3006:	a3 ae       	std	Z+59, r10	; 0x3b
    3008:	b4 ae       	std	Z+60, r11	; 0x3c
    300a:	80 e5       	ldi	r24, 0x50	; 80
    300c:	86 af       	std	Z+62, r24	; 0x3e
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	87 af       	std	Z+63, r24	; 0x3f
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
    3020:	bf 90       	pop	r11
    3022:	af 90       	pop	r10
    3024:	9f 90       	pop	r9
    3026:	8f 90       	pop	r8
    3028:	7f 90       	pop	r7
    302a:	6f 90       	pop	r6
    302c:	5f 90       	pop	r5
    302e:	4f 90       	pop	r4
    3030:	08 95       	ret

00003032 <_ZN16Adafruit_SSD1306D1Ev>:
    3032:	2b e5       	ldi	r18, 0x5B	; 91
    3034:	31 e0       	ldi	r19, 0x01	; 1
    3036:	fc 01       	movw	r30, r24
    3038:	31 83       	std	Z+1, r19	; 0x01
    303a:	20 83       	st	Z, r18
    303c:	87 8d       	ldd	r24, Z+31	; 0x1f
    303e:	90 a1       	ldd	r25, Z+32	; 0x20
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	11 f0       	breq	.+4      	; 0x3048 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    3044:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <free>
    3048:	08 95       	ret

0000304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    304a:	1f 93       	push	r17
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	fc 01       	movw	r30, r24
    3052:	85 8d       	ldd	r24, Z+29	; 0x1d
    3054:	96 8d       	ldd	r25, Z+30	; 0x1e
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	19 f1       	breq	.+70     	; 0x30a0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    305a:	16 2f       	mov	r17, r22
    305c:	ef 01       	movw	r28, r30
    305e:	61 a1       	ldd	r22, Z+33	; 0x21
    3060:	06 2e       	mov	r0, r22
    3062:	00 0c       	add	r0, r0
    3064:	77 0b       	sbc	r23, r23
    3066:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN7TwoWire17beginTransmissionEi>
    306a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    306c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    306e:	dc 01       	movw	r26, r24
    3070:	ed 91       	ld	r30, X+
    3072:	fc 91       	ld	r31, X
    3074:	01 90       	ld	r0, Z+
    3076:	f0 81       	ld	r31, Z
    3078:	e0 2d       	mov	r30, r0
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	09 95       	icall
    307e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3082:	dc 01       	movw	r26, r24
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	01 90       	ld	r0, Z+
    308a:	f0 81       	ld	r31, Z
    308c:	e0 2d       	mov	r30, r0
    308e:	61 2f       	mov	r22, r17
    3090:	09 95       	icall
    3092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <_ZN7TwoWire15endTransmissionEv>
    30a0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    30a2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    30a4:	9c 91       	ld	r25, X
    30a6:	83 a9       	ldd	r24, Z+51	; 0x33
    30a8:	80 95       	com	r24
    30aa:	89 23       	and	r24, r25
    30ac:	8c 93       	st	X, r24
    30ae:	83 8d       	ldd	r24, Z+27	; 0x1b
    30b0:	94 8d       	ldd	r25, Z+28	; 0x1c
    30b2:	89 2b       	or	r24, r25
    30b4:	31 f0       	breq	.+12     	; 0x30c2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    30b6:	86 2f       	mov	r24, r22
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <_ZN8SPIClass8transferEh>
    30c2:	28 e0       	ldi	r18, 0x08	; 8
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	80 e8       	ldi	r24, 0x80	; 128
    30c8:	a1 a5       	ldd	r26, Z+41	; 0x29
    30ca:	b2 a5       	ldd	r27, Z+42	; 0x2a
    30cc:	91 a9       	ldd	r25, Z+49	; 0x31
    30ce:	46 2f       	mov	r20, r22
    30d0:	48 23       	and	r20, r24
    30d2:	19 f0       	breq	.+6      	; 0x30da <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    30d4:	4c 91       	ld	r20, X
    30d6:	94 2b       	or	r25, r20
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    30da:	4c 91       	ld	r20, X
    30dc:	90 95       	com	r25
    30de:	94 23       	and	r25, r20
    30e0:	9c 93       	st	X, r25
    30e2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    30e4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    30e6:	4c 91       	ld	r20, X
    30e8:	92 a9       	ldd	r25, Z+50	; 0x32
    30ea:	94 2b       	or	r25, r20
    30ec:	9c 93       	st	X, r25
    30ee:	a3 a5       	ldd	r26, Z+43	; 0x2b
    30f0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    30f2:	4c 91       	ld	r20, X
    30f4:	92 a9       	ldd	r25, Z+50	; 0x32
    30f6:	90 95       	com	r25
    30f8:	94 23       	and	r25, r20
    30fa:	9c 93       	st	X, r25
    30fc:	86 95       	lsr	r24
    30fe:	21 50       	subi	r18, 0x01	; 1
    3100:	31 09       	sbc	r19, r1
    3102:	11 f7       	brne	.-60     	; 0x30c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	1f 91       	pop	r17
    310a:	08 95       	ret

0000310c <_ZN16Adafruit_SSD130613invertDisplayEb>:
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	ec 01       	movw	r28, r24
    3114:	16 2f       	mov	r17, r22
    3116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3118:	9e 8d       	ldd	r25, Y+30	; 0x1e
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	39 f0       	breq	.+14     	; 0x312c <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    311e:	4d a9       	ldd	r20, Y+53	; 0x35
    3120:	5e a9       	ldd	r21, Y+54	; 0x36
    3122:	6f a9       	ldd	r22, Y+55	; 0x37
    3124:	78 ad       	ldd	r23, Y+56	; 0x38
    3126:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    312a:	0f c0       	rjmp	.+30     	; 0x314a <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    312c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    312e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3130:	89 2b       	or	r24, r25
    3132:	21 f0       	breq	.+8      	; 0x313c <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    3134:	8e ad       	ldd	r24, Y+62	; 0x3e
    3136:	9f ad       	ldd	r25, Y+63	; 0x3f
    3138:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN8SPIClass16beginTransactionE11SPISettings>
    313c:	ef a5       	ldd	r30, Y+47	; 0x2f
    313e:	f8 a9       	ldd	r31, Y+48	; 0x30
    3140:	90 81       	ld	r25, Z
    3142:	8c a9       	ldd	r24, Y+52	; 0x34
    3144:	80 95       	com	r24
    3146:	89 23       	and	r24, r25
    3148:	80 83       	st	Z, r24
    314a:	11 11       	cpse	r17, r1
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    314e:	66 ea       	ldi	r22, 0xA6	; 166
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    3152:	67 ea       	ldi	r22, 0xA7	; 167
    3154:	ce 01       	movw	r24, r28
    3156:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    315a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	49 f0       	breq	.+18     	; 0x3174 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    3162:	49 ad       	ldd	r20, Y+57	; 0x39
    3164:	5a ad       	ldd	r21, Y+58	; 0x3a
    3166:	6b ad       	ldd	r22, Y+59	; 0x3b
    3168:	7c ad       	ldd	r23, Y+60	; 0x3c
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    3174:	ef a5       	ldd	r30, Y+47	; 0x2f
    3176:	f8 a9       	ldd	r31, Y+48	; 0x30
    3178:	90 81       	ld	r25, Z
    317a:	8c a9       	ldd	r24, Y+52	; 0x34
    317c:	89 2b       	or	r24, r25
    317e:	80 83       	st	Z, r24
    3180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3184:	89 2b       	or	r24, r25
    3186:	29 f0       	breq	.+10     	; 0x3192 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_ZN8SPIClass14endTransactionEv>
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	08 95       	ret

0000319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    319a:	bf 92       	push	r11
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	ec 01       	movw	r28, r24
    31ae:	b6 2e       	mov	r11, r22
    31b0:	07 2f       	mov	r16, r23
    31b2:	14 2f       	mov	r17, r20
    31b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	09 f4       	brne	.+2      	; 0x31be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    31bc:	52 c0       	rjmp	.+164    	; 0x3262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    31be:	69 a1       	ldd	r22, Y+33	; 0x21
    31c0:	06 2e       	mov	r0, r22
    31c2:	00 0c       	add	r0, r0
    31c4:	77 0b       	sbc	r23, r23
    31c6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN7TwoWire17beginTransmissionEi>
    31ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ce:	dc 01       	movw	r26, r24
    31d0:	ed 91       	ld	r30, X+
    31d2:	fc 91       	ld	r31, X
    31d4:	01 90       	ld	r0, Z+
    31d6:	f0 81       	ld	r31, Z
    31d8:	e0 2d       	mov	r30, r0
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	09 95       	icall
    31de:	cb 2c       	mov	r12, r11
    31e0:	d0 2e       	mov	r13, r16
    31e2:	ee 24       	eor	r14, r14
    31e4:	e3 94       	inc	r14
    31e6:	f1 2c       	mov	r15, r1
    31e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ec:	11 23       	and	r17, r17
    31ee:	71 f1       	breq	.+92     	; 0x324c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    31f0:	b0 e2       	ldi	r27, 0x20	; 32
    31f2:	eb 16       	cp	r14, r27
    31f4:	f1 04       	cpc	r15, r1
    31f6:	b8 f0       	brcs	.+46     	; 0x3226 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    31f8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN7TwoWire15endTransmissionEv>
    31fc:	69 a1       	ldd	r22, Y+33	; 0x21
    31fe:	06 2e       	mov	r0, r22
    3200:	00 0c       	add	r0, r0
    3202:	77 0b       	sbc	r23, r23
    3204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3206:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3208:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN7TwoWire17beginTransmissionEi>
    320c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3210:	dc 01       	movw	r26, r24
    3212:	ed 91       	ld	r30, X+
    3214:	fc 91       	ld	r31, X
    3216:	01 90       	ld	r0, Z+
    3218:	f0 81       	ld	r31, Z
    321a:	e0 2d       	mov	r30, r0
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	09 95       	icall
    3220:	ee 24       	eor	r14, r14
    3222:	e3 94       	inc	r14
    3224:	f1 2c       	mov	r15, r1
    3226:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3228:	9e 8d       	ldd	r25, Y+30	; 0x1e
    322a:	f6 01       	movw	r30, r12
    322c:	64 91       	lpm	r22, Z
    322e:	dc 01       	movw	r26, r24
    3230:	ed 91       	ld	r30, X+
    3232:	fc 91       	ld	r31, X
    3234:	01 90       	ld	r0, Z+
    3236:	f0 81       	ld	r31, Z
    3238:	e0 2d       	mov	r30, r0
    323a:	09 95       	icall
    323c:	bf ef       	ldi	r27, 0xFF	; 255
    323e:	eb 1a       	sub	r14, r27
    3240:	fb 0a       	sbc	r15, r27
    3242:	11 50       	subi	r17, 0x01	; 1
    3244:	f6 01       	movw	r30, r12
    3246:	31 96       	adiw	r30, 0x01	; 1
    3248:	6f 01       	movw	r12, r30
    324a:	ce cf       	rjmp	.-100    	; 0x31e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	df 90       	pop	r13
    325a:	cf 90       	pop	r12
    325c:	bf 90       	pop	r11
    325e:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <_ZN7TwoWire15endTransmissionEv>
    3262:	ed a5       	ldd	r30, Y+45	; 0x2d
    3264:	fe a5       	ldd	r31, Y+46	; 0x2e
    3266:	90 81       	ld	r25, Z
    3268:	8b a9       	ldd	r24, Y+51	; 0x33
    326a:	80 95       	com	r24
    326c:	89 23       	and	r24, r25
    326e:	80 83       	st	Z, r24
    3270:	e6 2e       	mov	r14, r22
    3272:	f7 2e       	mov	r15, r23
    3274:	11 23       	and	r17, r17
    3276:	79 f1       	breq	.+94     	; 0x32d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    3278:	f7 01       	movw	r30, r14
    327a:	84 91       	lpm	r24, Z
    327c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    327e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3280:	23 2b       	or	r18, r19
    3282:	39 f0       	breq	.+14     	; 0x3292 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    3284:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN8SPIClass8transferEh>
    3288:	11 50       	subi	r17, 0x01	; 1
    328a:	c7 01       	movw	r24, r14
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	7c 01       	movw	r14, r24
    3290:	f1 cf       	rjmp	.-30     	; 0x3274 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    3292:	28 e0       	ldi	r18, 0x08	; 8
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e8       	ldi	r20, 0x80	; 128
    3298:	e9 a5       	ldd	r30, Y+41	; 0x29
    329a:	fa a5       	ldd	r31, Y+42	; 0x2a
    329c:	99 a9       	ldd	r25, Y+49	; 0x31
    329e:	58 2f       	mov	r21, r24
    32a0:	54 23       	and	r21, r20
    32a2:	19 f0       	breq	.+6      	; 0x32aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    32a4:	50 81       	ld	r21, Z
    32a6:	95 2b       	or	r25, r21
    32a8:	03 c0       	rjmp	.+6      	; 0x32b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    32aa:	50 81       	ld	r21, Z
    32ac:	90 95       	com	r25
    32ae:	95 23       	and	r25, r21
    32b0:	90 83       	st	Z, r25
    32b2:	eb a5       	ldd	r30, Y+43	; 0x2b
    32b4:	fc a5       	ldd	r31, Y+44	; 0x2c
    32b6:	50 81       	ld	r21, Z
    32b8:	9a a9       	ldd	r25, Y+50	; 0x32
    32ba:	95 2b       	or	r25, r21
    32bc:	90 83       	st	Z, r25
    32be:	eb a5       	ldd	r30, Y+43	; 0x2b
    32c0:	fc a5       	ldd	r31, Y+44	; 0x2c
    32c2:	50 81       	ld	r21, Z
    32c4:	9a a9       	ldd	r25, Y+50	; 0x32
    32c6:	90 95       	com	r25
    32c8:	95 23       	and	r25, r21
    32ca:	90 83       	st	Z, r25
    32cc:	46 95       	lsr	r20
    32ce:	21 50       	subi	r18, 0x01	; 1
    32d0:	31 09       	sbc	r19, r1
    32d2:	11 f7       	brne	.-60     	; 0x3298 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    32d4:	d9 cf       	rjmp	.-78     	; 0x3288 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	1f 91       	pop	r17
    32dc:	0f 91       	pop	r16
    32de:	ff 90       	pop	r15
    32e0:	ef 90       	pop	r14
    32e2:	df 90       	pop	r13
    32e4:	cf 90       	pop	r12
    32e6:	bf 90       	pop	r11
    32e8:	08 95       	ret

000032ea <_ZN16Adafruit_SSD130612clearDisplayEv>:
    32ea:	fc 01       	movw	r30, r24
    32ec:	86 81       	ldd	r24, Z+6	; 0x06
    32ee:	97 81       	ldd	r25, Z+7	; 0x07
    32f0:	9c 01       	movw	r18, r24
    32f2:	29 5f       	subi	r18, 0xF9	; 249
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	37 ff       	sbrs	r19, 7
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    32fa:	29 5f       	subi	r18, 0xF9	; 249
    32fc:	3f 4f       	sbci	r19, 0xFF	; 255
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	35 95       	asr	r19
    3302:	27 95       	ror	r18
    3304:	8a 95       	dec	r24
    3306:	e1 f7       	brne	.-8      	; 0x3300 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    3308:	84 81       	ldd	r24, Z+4	; 0x04
    330a:	95 81       	ldd	r25, Z+5	; 0x05
    330c:	28 9f       	mul	r18, r24
    330e:	a0 01       	movw	r20, r0
    3310:	29 9f       	mul	r18, r25
    3312:	50 0d       	add	r21, r0
    3314:	38 9f       	mul	r19, r24
    3316:	50 0d       	add	r21, r0
    3318:	11 24       	eor	r1, r1
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	87 8d       	ldd	r24, Z+31	; 0x1f
    3320:	90 a1       	ldd	r25, Z+32	; 0x20
    3322:	0c 94 4c 24 	jmp	0x4898	; 0x4898 <memset>

00003326 <_ZN16Adafruit_SSD13065beginEhhbb>:
    3326:	8f 92       	push	r8
    3328:	9f 92       	push	r9
    332a:	af 92       	push	r10
    332c:	bf 92       	push	r11
    332e:	cf 92       	push	r12
    3330:	df 92       	push	r13
    3332:	ef 92       	push	r14
    3334:	ff 92       	push	r15
    3336:	0f 93       	push	r16
    3338:	1f 93       	push	r17
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	ec 01       	movw	r28, r24
    3340:	86 2e       	mov	r8, r22
    3342:	b4 2e       	mov	r11, r20
    3344:	a2 2e       	mov	r10, r18
    3346:	90 2e       	mov	r9, r16
    3348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    334a:	98 a1       	ldd	r25, Y+32	; 0x20
    334c:	89 2b       	or	r24, r25
    334e:	e9 f4       	brne	.+58     	; 0x338a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    3350:	2e 81       	ldd	r18, Y+6	; 0x06
    3352:	3f 81       	ldd	r19, Y+7	; 0x07
    3354:	c9 01       	movw	r24, r18
    3356:	07 96       	adiw	r24, 0x07	; 7
    3358:	97 fd       	sbrc	r25, 7
    335a:	07 96       	adiw	r24, 0x07	; 7
    335c:	23 e0       	ldi	r18, 0x03	; 3
    335e:	95 95       	asr	r25
    3360:	87 95       	ror	r24
    3362:	2a 95       	dec	r18
    3364:	e1 f7       	brne	.-8      	; 0x335e <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    3366:	2c 81       	ldd	r18, Y+4	; 0x04
    3368:	3d 81       	ldd	r19, Y+5	; 0x05
    336a:	ac 01       	movw	r20, r24
    336c:	42 9f       	mul	r20, r18
    336e:	c0 01       	movw	r24, r0
    3370:	43 9f       	mul	r20, r19
    3372:	90 0d       	add	r25, r0
    3374:	52 9f       	mul	r21, r18
    3376:	90 0d       	add	r25, r0
    3378:	11 24       	eor	r1, r1
    337a:	0e 94 84 22 	call	0x4508	; 0x4508 <malloc>
    337e:	98 a3       	std	Y+32, r25	; 0x20
    3380:	8f 8f       	std	Y+31, r24	; 0x1f
    3382:	89 2b       	or	r24, r25
    3384:	11 f4       	brne	.+4      	; 0x338a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	92 c1       	rjmp	.+804    	; 0x36ae <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    338a:	ce 01       	movw	r24, r28
    338c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16Adafruit_SSD130612clearDisplayEv>
    3390:	8e 81       	ldd	r24, Y+6	; 0x06
    3392:	9f 81       	ldd	r25, Y+7	; 0x07
    3394:	6c 81       	ldd	r22, Y+4	; 0x04
    3396:	7d 81       	ldd	r23, Y+5	; 0x05
    3398:	81 32       	cpi	r24, 0x21	; 33
    339a:	91 05       	cpc	r25, r1
    339c:	e4 f0       	brlt	.+56     	; 0x33d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    339e:	ac 01       	movw	r20, r24
    33a0:	40 54       	subi	r20, 0x40	; 64
    33a2:	51 09       	sbc	r21, r1
    33a4:	57 ff       	sbrs	r21, 7
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    33a8:	4f 5f       	subi	r20, 0xFF	; 255
    33aa:	5f 4f       	sbci	r21, 0xFF	; 255
    33ac:	55 95       	asr	r21
    33ae:	47 95       	ror	r20
    33b0:	62 55       	subi	r22, 0x52	; 82
    33b2:	71 09       	sbc	r23, r1
    33b4:	77 ff       	sbrs	r23, 7
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    33b8:	6f 5f       	subi	r22, 0xFF	; 255
    33ba:	7f 4f       	sbci	r23, 0xFF	; 255
    33bc:	75 95       	asr	r23
    33be:	67 95       	ror	r22
    33c0:	cc 24       	eor	r12, r12
    33c2:	c3 94       	inc	r12
    33c4:	d1 2c       	mov	r13, r1
    33c6:	80 e4       	ldi	r24, 0x40	; 64
    33c8:	e8 2e       	mov	r14, r24
    33ca:	f1 2c       	mov	r15, r1
    33cc:	02 e5       	ldi	r16, 0x52	; 82
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	2f e0       	ldi	r18, 0x0F	; 15
    33d2:	38 e0       	ldi	r19, 0x08	; 8
    33d4:	1b c0       	rjmp	.+54     	; 0x340c <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    33d6:	ac 01       	movw	r20, r24
    33d8:	40 52       	subi	r20, 0x20	; 32
    33da:	51 09       	sbc	r21, r1
    33dc:	57 ff       	sbrs	r21, 7
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    33e0:	4f 5f       	subi	r20, 0xFF	; 255
    33e2:	5f 4f       	sbci	r21, 0xFF	; 255
    33e4:	55 95       	asr	r21
    33e6:	47 95       	ror	r20
    33e8:	63 57       	subi	r22, 0x73	; 115
    33ea:	71 09       	sbc	r23, r1
    33ec:	77 ff       	sbrs	r23, 7
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    33f0:	6f 5f       	subi	r22, 0xFF	; 255
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	75 95       	asr	r23
    33f6:	67 95       	ror	r22
    33f8:	cc 24       	eor	r12, r12
    33fa:	c3 94       	inc	r12
    33fc:	d1 2c       	mov	r13, r1
    33fe:	a0 e2       	ldi	r26, 0x20	; 32
    3400:	ea 2e       	mov	r14, r26
    3402:	f1 2c       	mov	r15, r1
    3404:	03 e7       	ldi	r16, 0x73	; 115
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	2f e2       	ldi	r18, 0x2F	; 47
    340a:	36 e0       	ldi	r19, 0x06	; 6
    340c:	ce 01       	movw	r24, r28
    340e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    3412:	8a a2       	std	Y+34, r8	; 0x22
    3414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	99 f0       	breq	.+38     	; 0x3442 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    341c:	b1 10       	cpse	r11, r1
    341e:	07 c0       	rjmp	.+14     	; 0x342e <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    3420:	2e 81       	ldd	r18, Y+6	; 0x06
    3422:	3f 81       	ldd	r19, Y+7	; 0x07
    3424:	20 32       	cpi	r18, 0x20	; 32
    3426:	31 05       	cpc	r19, r1
    3428:	21 f4       	brne	.+8      	; 0x3432 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    342a:	2c e3       	ldi	r18, 0x3C	; 60
    342c:	03 c0       	rjmp	.+6      	; 0x3434 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    342e:	2b 2d       	mov	r18, r11
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    3432:	2d e3       	ldi	r18, 0x3D	; 61
    3434:	29 a3       	std	Y+33, r18	; 0x21
    3436:	99 20       	and	r9, r9
    3438:	09 f4       	brne	.+2      	; 0x343c <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    343a:	36 c1       	rjmp	.+620    	; 0x36a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    343c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <_ZN7TwoWire5beginEv>
    3440:	79 c0       	rjmp	.+242    	; 0x3534 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    3442:	61 e0       	ldi	r22, 0x01	; 1
    3444:	8e a1       	ldd	r24, Y+38	; 0x26
    3446:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    344a:	61 e0       	ldi	r22, 0x01	; 1
    344c:	8f a1       	ldd	r24, Y+39	; 0x27
    344e:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    3452:	8e a1       	ldd	r24, Y+38	; 0x26
    3454:	08 2e       	mov	r0, r24
    3456:	00 0c       	add	r0, r0
    3458:	99 0b       	sbc	r25, r25
    345a:	fc 01       	movw	r30, r24
    345c:	ea 52       	subi	r30, 0x2A	; 42
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	e4 91       	lpm	r30, Z
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	ec 50       	subi	r30, 0x0C	; 12
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	25 91       	lpm	r18, Z+
    346e:	34 91       	lpm	r19, Z
    3470:	3e a7       	std	Y+46, r19	; 0x2e
    3472:	2d a7       	std	Y+45, r18	; 0x2d
    3474:	fc 01       	movw	r30, r24
    3476:	ee 53       	subi	r30, 0x3E	; 62
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	e4 91       	lpm	r30, Z
    347c:	eb ab       	std	Y+51, r30	; 0x33
    347e:	8f a1       	ldd	r24, Y+39	; 0x27
    3480:	08 2e       	mov	r0, r24
    3482:	00 0c       	add	r0, r0
    3484:	99 0b       	sbc	r25, r25
    3486:	fc 01       	movw	r30, r24
    3488:	ea 52       	subi	r30, 0x2A	; 42
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	e4 91       	lpm	r30, Z
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	ec 50       	subi	r30, 0x0C	; 12
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	a5 91       	lpm	r26, Z+
    349a:	b4 91       	lpm	r27, Z
    349c:	b8 ab       	std	Y+48, r27	; 0x30
    349e:	af a7       	std	Y+47, r26	; 0x2f
    34a0:	fc 01       	movw	r30, r24
    34a2:	ee 53       	subi	r30, 0x3E	; 62
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	e4 91       	lpm	r30, Z
    34a8:	ec ab       	std	Y+52, r30	; 0x34
    34aa:	8c 91       	ld	r24, X
    34ac:	e8 2b       	or	r30, r24
    34ae:	ec 93       	st	X, r30
    34b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b4:	89 2b       	or	r24, r25
    34b6:	31 f0       	breq	.+12     	; 0x34c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    34b8:	99 20       	and	r9, r9
    34ba:	09 f4       	brne	.+2      	; 0x34be <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    34bc:	3b c0       	rjmp	.+118    	; 0x3534 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    34be:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN8SPIClass5beginEv>
    34c2:	38 c0       	rjmp	.+112    	; 0x3534 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    34c4:	61 e0       	ldi	r22, 0x01	; 1
    34c6:	8c a1       	ldd	r24, Y+36	; 0x24
    34c8:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    34d4:	8c a1       	ldd	r24, Y+36	; 0x24
    34d6:	08 2e       	mov	r0, r24
    34d8:	00 0c       	add	r0, r0
    34da:	99 0b       	sbc	r25, r25
    34dc:	fc 01       	movw	r30, r24
    34de:	ea 52       	subi	r30, 0x2A	; 42
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	e4 91       	lpm	r30, Z
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	ec 50       	subi	r30, 0x0C	; 12
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	25 91       	lpm	r18, Z+
    34f0:	34 91       	lpm	r19, Z
    34f2:	3a a7       	std	Y+42, r19	; 0x2a
    34f4:	29 a7       	std	Y+41, r18	; 0x29
    34f6:	fc 01       	movw	r30, r24
    34f8:	ee 53       	subi	r30, 0x3E	; 62
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	e4 91       	lpm	r30, Z
    34fe:	e9 ab       	std	Y+49, r30	; 0x31
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	08 2e       	mov	r0, r24
    3504:	00 0c       	add	r0, r0
    3506:	99 0b       	sbc	r25, r25
    3508:	fc 01       	movw	r30, r24
    350a:	ea 52       	subi	r30, 0x2A	; 42
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	e4 91       	lpm	r30, Z
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	ec 50       	subi	r30, 0x0C	; 12
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	a5 91       	lpm	r26, Z+
    351c:	b4 91       	lpm	r27, Z
    351e:	bc a7       	std	Y+44, r27	; 0x2c
    3520:	ab a7       	std	Y+43, r26	; 0x2b
    3522:	fc 01       	movw	r30, r24
    3524:	ee 53       	subi	r30, 0x3E	; 62
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	e4 91       	lpm	r30, Z
    352a:	ea ab       	std	Y+50, r30	; 0x32
    352c:	8c 91       	ld	r24, X
    352e:	e0 95       	com	r30
    3530:	e8 23       	and	r30, r24
    3532:	ec 93       	st	X, r30
    3534:	aa 20       	and	r10, r10
    3536:	f1 f0       	breq	.+60     	; 0x3574 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    3538:	88 a5       	ldd	r24, Y+40	; 0x28
    353a:	87 fd       	sbrc	r24, 7
    353c:	1b c0       	rjmp	.+54     	; 0x3574 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	88 a5       	ldd	r24, Y+40	; 0x28
    3548:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 a1 0b 	call	0x1742	; 0x1742 <delay>
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	88 a5       	ldd	r24, Y+40	; 0x28
    355c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    3560:	6a e0       	ldi	r22, 0x0A	; 10
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0e 94 a1 0b 	call	0x1742	; 0x1742 <delay>
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	88 a5       	ldd	r24, Y+40	; 0x28
    3570:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    3574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3576:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	39 f0       	breq	.+14     	; 0x358a <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    357c:	4d a9       	ldd	r20, Y+53	; 0x35
    357e:	5e a9       	ldd	r21, Y+54	; 0x36
    3580:	6f a9       	ldd	r22, Y+55	; 0x37
    3582:	78 ad       	ldd	r23, Y+56	; 0x38
    3584:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    3588:	0f c0       	rjmp	.+30     	; 0x35a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    358a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358e:	89 2b       	or	r24, r25
    3590:	21 f0       	breq	.+8      	; 0x359a <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    3592:	8e ad       	ldd	r24, Y+62	; 0x3e
    3594:	9f ad       	ldd	r25, Y+63	; 0x3f
    3596:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN8SPIClass16beginTransactionE11SPISettings>
    359a:	ef a5       	ldd	r30, Y+47	; 0x2f
    359c:	f8 a9       	ldd	r31, Y+48	; 0x30
    359e:	90 81       	ld	r25, Z
    35a0:	8c a9       	ldd	r24, Y+52	; 0x34
    35a2:	80 95       	com	r24
    35a4:	89 23       	and	r24, r25
    35a6:	80 83       	st	Z, r24
    35a8:	44 e0       	ldi	r20, 0x04	; 4
    35aa:	6b e2       	ldi	r22, 0x2B	; 43
    35ac:	76 e0       	ldi	r23, 0x06	; 6
    35ae:	ce 01       	movw	r24, r28
    35b0:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    35b4:	6e 81       	ldd	r22, Y+6	; 0x06
    35b6:	61 50       	subi	r22, 0x01	; 1
    35b8:	ce 01       	movw	r24, r28
    35ba:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    35be:	44 e0       	ldi	r20, 0x04	; 4
    35c0:	67 e2       	ldi	r22, 0x27	; 39
    35c2:	76 e0       	ldi	r23, 0x06	; 6
    35c4:	ce 01       	movw	r24, r28
    35c6:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    35ca:	8a a1       	ldd	r24, Y+34	; 0x22
    35cc:	81 30       	cpi	r24, 0x01	; 1
    35ce:	11 f4       	brne	.+4      	; 0x35d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    35d0:	60 e1       	ldi	r22, 0x10	; 16
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    35d4:	64 e1       	ldi	r22, 0x14	; 20
    35d6:	ce 01       	movw	r24, r28
    35d8:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    35dc:	44 e0       	ldi	r20, 0x04	; 4
    35de:	63 e2       	ldi	r22, 0x23	; 35
    35e0:	76 e0       	ldi	r23, 0x06	; 6
    35e2:	ce 01       	movw	r24, r28
    35e4:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    35e8:	8f e8       	ldi	r24, 0x8F	; 143
    35ea:	8d af       	std	Y+61, r24	; 0x3d
    35ec:	8c 81       	ldd	r24, Y+4	; 0x04
    35ee:	9d 81       	ldd	r25, Y+5	; 0x05
    35f0:	80 38       	cpi	r24, 0x80	; 128
    35f2:	91 05       	cpc	r25, r1
    35f4:	71 f4       	brne	.+28     	; 0x3612 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    35f6:	8e 81       	ldd	r24, Y+6	; 0x06
    35f8:	9f 81       	ldd	r25, Y+7	; 0x07
    35fa:	80 34       	cpi	r24, 0x40	; 64
    35fc:	91 05       	cpc	r25, r1
    35fe:	b9 f4       	brne	.+46     	; 0x362e <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3600:	8a a1       	ldd	r24, Y+34	; 0x22
    3602:	81 30       	cpi	r24, 0x01	; 1
    3604:	11 f4       	brne	.+4      	; 0x360a <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    3606:	8f e9       	ldi	r24, 0x9F	; 159
    3608:	01 c0       	rjmp	.+2      	; 0x360c <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    360a:	8f ec       	ldi	r24, 0xCF	; 207
    360c:	8d af       	std	Y+61, r24	; 0x3d
    360e:	12 e1       	ldi	r17, 0x12	; 18
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    3612:	80 36       	cpi	r24, 0x60	; 96
    3614:	91 05       	cpc	r25, r1
    3616:	59 f4       	brne	.+22     	; 0x362e <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3618:	8e 81       	ldd	r24, Y+6	; 0x06
    361a:	9f 81       	ldd	r25, Y+7	; 0x07
    361c:	40 97       	sbiw	r24, 0x10	; 16
    361e:	39 f4       	brne	.+14     	; 0x362e <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    3620:	8a a1       	ldd	r24, Y+34	; 0x22
    3622:	81 30       	cpi	r24, 0x01	; 1
    3624:	11 f4       	brne	.+4      	; 0x362a <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    3626:	80 e1       	ldi	r24, 0x10	; 16
    3628:	01 c0       	rjmp	.+2      	; 0x362c <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    362a:	8f ea       	ldi	r24, 0xAF	; 175
    362c:	8d af       	std	Y+61, r24	; 0x3d
    362e:	12 e0       	ldi	r17, 0x02	; 2
    3630:	6a ed       	ldi	r22, 0xDA	; 218
    3632:	ce 01       	movw	r24, r28
    3634:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3638:	61 2f       	mov	r22, r17
    363a:	ce 01       	movw	r24, r28
    363c:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3640:	61 e8       	ldi	r22, 0x81	; 129
    3642:	ce 01       	movw	r24, r28
    3644:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3648:	6d ad       	ldd	r22, Y+61	; 0x3d
    364a:	ce 01       	movw	r24, r28
    364c:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3650:	69 ed       	ldi	r22, 0xD9	; 217
    3652:	ce 01       	movw	r24, r28
    3654:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3658:	8a a1       	ldd	r24, Y+34	; 0x22
    365a:	81 30       	cpi	r24, 0x01	; 1
    365c:	11 f4       	brne	.+4      	; 0x3662 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    365e:	62 e2       	ldi	r22, 0x22	; 34
    3660:	01 c0       	rjmp	.+2      	; 0x3664 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    3662:	61 ef       	ldi	r22, 0xF1	; 241
    3664:	ce 01       	movw	r24, r28
    3666:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    366a:	46 e0       	ldi	r20, 0x06	; 6
    366c:	6d e1       	ldi	r22, 0x1D	; 29
    366e:	76 e0       	ldi	r23, 0x06	; 6
    3670:	ce 01       	movw	r24, r28
    3672:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3678:	9e 8d       	ldd	r25, Y+30	; 0x1e
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	39 f0       	breq	.+14     	; 0x368c <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    367e:	49 ad       	ldd	r20, Y+57	; 0x39
    3680:	5a ad       	ldd	r21, Y+58	; 0x3a
    3682:	6b ad       	ldd	r22, Y+59	; 0x3b
    3684:	7c ad       	ldd	r23, Y+60	; 0x3c
    3686:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    368a:	0c c0       	rjmp	.+24     	; 0x36a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    368c:	ef a5       	ldd	r30, Y+47	; 0x2f
    368e:	f8 a9       	ldd	r31, Y+48	; 0x30
    3690:	90 81       	ld	r25, Z
    3692:	8c a9       	ldd	r24, Y+52	; 0x34
    3694:	89 2b       	or	r24, r25
    3696:	80 83       	st	Z, r24
    3698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    369a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369c:	89 2b       	or	r24, r25
    369e:	11 f0       	breq	.+4      	; 0x36a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    36a0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <_ZN8SPIClass14endTransactionEv>
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    36a8:	a1 10       	cpse	r10, r1
    36aa:	46 cf       	rjmp	.-372    	; 0x3538 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    36ac:	67 cf       	rjmp	.-306    	; 0x357c <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
    36be:	bf 90       	pop	r11
    36c0:	af 90       	pop	r10
    36c2:	9f 90       	pop	r9
    36c4:	8f 90       	pop	r8
    36c6:	08 95       	ret

000036c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	dc 01       	movw	r26, r24
    36d2:	57 fd       	sbrc	r21, 7
    36d4:	64 c0       	rjmp	.+200    	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    36d6:	16 96       	adiw	r26, 0x06	; 6
    36d8:	8d 91       	ld	r24, X+
    36da:	9c 91       	ld	r25, X
    36dc:	17 97       	sbiw	r26, 0x07	; 7
    36de:	48 17       	cp	r20, r24
    36e0:	59 07       	cpc	r21, r25
    36e2:	0c f0       	brlt	.+2      	; 0x36e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    36e4:	5c c0       	rjmp	.+184    	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    36e6:	77 ff       	sbrs	r23, 7
    36e8:	04 c0       	rjmp	.+8      	; 0x36f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    36ea:	26 0f       	add	r18, r22
    36ec:	37 1f       	adc	r19, r23
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	14 96       	adiw	r26, 0x04	; 4
    36f4:	cd 91       	ld	r28, X+
    36f6:	dc 91       	ld	r29, X
    36f8:	15 97       	sbiw	r26, 0x05	; 5
    36fa:	cb 01       	movw	r24, r22
    36fc:	82 0f       	add	r24, r18
    36fe:	93 1f       	adc	r25, r19
    3700:	c8 17       	cp	r28, r24
    3702:	d9 07       	cpc	r29, r25
    3704:	1c f4       	brge	.+6      	; 0x370c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    3706:	9e 01       	movw	r18, r28
    3708:	26 1b       	sub	r18, r22
    370a:	37 0b       	sbc	r19, r23
    370c:	12 16       	cp	r1, r18
    370e:	13 06       	cpc	r1, r19
    3710:	0c f0       	brlt	.+2      	; 0x3714 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    3712:	45 c0       	rjmp	.+138    	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3714:	fa 01       	movw	r30, r20
    3716:	57 fd       	sbrc	r21, 7
    3718:	37 96       	adiw	r30, 0x07	; 7
    371a:	cf 01       	movw	r24, r30
    371c:	e3 e0       	ldi	r30, 0x03	; 3
    371e:	95 95       	asr	r25
    3720:	87 95       	ror	r24
    3722:	ea 95       	dec	r30
    3724:	e1 f7       	brne	.-8      	; 0x371e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    3726:	8c 9f       	mul	r24, r28
    3728:	f0 01       	movw	r30, r0
    372a:	8d 9f       	mul	r24, r29
    372c:	f0 0d       	add	r31, r0
    372e:	9c 9f       	mul	r25, r28
    3730:	f0 0d       	add	r31, r0
    3732:	11 24       	eor	r1, r1
    3734:	6e 0f       	add	r22, r30
    3736:	7f 1f       	adc	r23, r31
    3738:	5f 96       	adiw	r26, 0x1f	; 31
    373a:	ed 91       	ld	r30, X+
    373c:	fc 91       	ld	r31, X
    373e:	90 97       	sbiw	r26, 0x20	; 32
    3740:	e6 0f       	add	r30, r22
    3742:	f7 1f       	adc	r31, r23
    3744:	47 70       	andi	r20, 0x07	; 7
    3746:	55 27       	eor	r21, r21
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	01 c0       	rjmp	.+2      	; 0x3750 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    374e:	88 0f       	add	r24, r24
    3750:	4a 95       	dec	r20
    3752:	ea f7       	brpl	.-6      	; 0x374e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    3754:	48 2f       	mov	r20, r24
    3756:	01 30       	cpi	r16, 0x01	; 1
    3758:	11 05       	cpc	r17, r1
    375a:	39 f0       	breq	.+14     	; 0x376a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    375c:	78 f0       	brcs	.+30     	; 0x377c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    375e:	02 30       	cpi	r16, 0x02	; 2
    3760:	11 05       	cpc	r17, r1
    3762:	e9 f4       	brne	.+58     	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3764:	2e 0f       	add	r18, r30
    3766:	3f 1f       	adc	r19, r31
    3768:	13 c0       	rjmp	.+38     	; 0x3790 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    376a:	2e 0f       	add	r18, r30
    376c:	3f 1f       	adc	r19, r31
    376e:	e2 17       	cp	r30, r18
    3770:	f3 07       	cpc	r31, r19
    3772:	a9 f0       	breq	.+42     	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3774:	80 81       	ld	r24, Z
    3776:	84 2b       	or	r24, r20
    3778:	81 93       	st	Z+, r24
    377a:	f9 cf       	rjmp	.-14     	; 0x376e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    377c:	80 95       	com	r24
    377e:	2e 0f       	add	r18, r30
    3780:	3f 1f       	adc	r19, r31
    3782:	e2 17       	cp	r30, r18
    3784:	f3 07       	cpc	r31, r19
    3786:	59 f0       	breq	.+22     	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3788:	90 81       	ld	r25, Z
    378a:	98 23       	and	r25, r24
    378c:	91 93       	st	Z+, r25
    378e:	f9 cf       	rjmp	.-14     	; 0x3782 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    3790:	e2 17       	cp	r30, r18
    3792:	f3 07       	cpc	r31, r19
    3794:	21 f0       	breq	.+8      	; 0x379e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3796:	80 81       	ld	r24, Z
    3798:	84 27       	eor	r24, r20
    379a:	81 93       	st	Z+, r24
    379c:	f9 cf       	rjmp	.-14     	; 0x3790 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	1f 91       	pop	r17
    37a4:	0f 91       	pop	r16
    37a6:	08 95       	ret

000037a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    37a8:	ef 92       	push	r14
    37aa:	ff 92       	push	r15
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	ec 01       	movw	r28, r24
    37b6:	77 fd       	sbrc	r23, 7
    37b8:	a5 c0       	rjmp	.+330    	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    37ba:	ec 80       	ldd	r14, Y+4	; 0x04
    37bc:	fd 80       	ldd	r15, Y+5	; 0x05
    37be:	6e 15       	cp	r22, r14
    37c0:	7f 05       	cpc	r23, r15
    37c2:	0c f0       	brlt	.+2      	; 0x37c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    37c4:	9f c0       	rjmp	.+318    	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    37c6:	57 ff       	sbrs	r21, 7
    37c8:	04 c0       	rjmp	.+8      	; 0x37d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    37ca:	24 0f       	add	r18, r20
    37cc:	35 1f       	adc	r19, r21
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	50 e0       	ldi	r21, 0x00	; 0
    37d2:	8e 81       	ldd	r24, Y+6	; 0x06
    37d4:	9f 81       	ldd	r25, Y+7	; 0x07
    37d6:	fa 01       	movw	r30, r20
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	8e 17       	cp	r24, r30
    37de:	9f 07       	cpc	r25, r31
    37e0:	1c f4       	brge	.+6      	; 0x37e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    37e2:	9c 01       	movw	r18, r24
    37e4:	24 1b       	sub	r18, r20
    37e6:	35 0b       	sbc	r19, r21
    37e8:	12 16       	cp	r1, r18
    37ea:	13 06       	cpc	r1, r19
    37ec:	0c f0       	brlt	.+2      	; 0x37f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    37ee:	8a c0       	rjmp	.+276    	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    37f0:	92 2f       	mov	r25, r18
    37f2:	84 2f       	mov	r24, r20
    37f4:	86 95       	lsr	r24
    37f6:	86 95       	lsr	r24
    37f8:	86 95       	lsr	r24
    37fa:	8e 9d       	mul	r24, r14
    37fc:	d0 01       	movw	r26, r0
    37fe:	8f 9d       	mul	r24, r15
    3800:	b0 0d       	add	r27, r0
    3802:	11 24       	eor	r1, r1
    3804:	6a 0f       	add	r22, r26
    3806:	7b 1f       	adc	r23, r27
    3808:	af 8d       	ldd	r26, Y+31	; 0x1f
    380a:	b8 a1       	ldd	r27, Y+32	; 0x20
    380c:	a6 0f       	add	r26, r22
    380e:	b7 1f       	adc	r27, r23
    3810:	47 70       	andi	r20, 0x07	; 7
    3812:	b1 f1       	breq	.+108    	; 0x3880 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    3814:	88 e0       	ldi	r24, 0x08	; 8
    3816:	84 1b       	sub	r24, r20
    3818:	48 2f       	mov	r20, r24
    381a:	68 2f       	mov	r22, r24
    381c:	70 e0       	ldi	r23, 0x00	; 0
    381e:	fb 01       	movw	r30, r22
    3820:	eb 5e       	subi	r30, 0xEB	; 235
    3822:	f9 4f       	sbci	r31, 0xF9	; 249
    3824:	e4 91       	lpm	r30, Z
    3826:	28 17       	cp	r18, r24
    3828:	98 f4       	brcc	.+38     	; 0x3850 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    382a:	62 1b       	sub	r22, r18
    382c:	71 09       	sbc	r23, r1
    382e:	2f ef       	ldi	r18, 0xFF	; 255
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    3834:	35 95       	asr	r19
    3836:	27 95       	ror	r18
    3838:	6a 95       	dec	r22
    383a:	e2 f7       	brpl	.-8      	; 0x3834 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    383c:	e2 23       	and	r30, r18
    383e:	01 30       	cpi	r16, 0x01	; 1
    3840:	11 05       	cpc	r17, r1
    3842:	49 f0       	breq	.+18     	; 0x3856 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    3844:	78 f0       	brcs	.+30     	; 0x3864 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    3846:	02 30       	cpi	r16, 0x02	; 2
    3848:	11 05       	cpc	r17, r1
    384a:	09 f0       	breq	.+2      	; 0x384e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    384c:	5b c0       	rjmp	.+182    	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    384e:	0e c0       	rjmp	.+28     	; 0x386c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    3850:	01 30       	cpi	r16, 0x01	; 1
    3852:	11 05       	cpc	r17, r1
    3854:	19 f4       	brne	.+6      	; 0x385c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    3856:	8c 91       	ld	r24, X
    3858:	e8 2b       	or	r30, r24
    385a:	0a c0       	rjmp	.+20     	; 0x3870 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    385c:	01 30       	cpi	r16, 0x01	; 1
    385e:	11 05       	cpc	r17, r1
    3860:	08 f0       	brcs	.+2      	; 0x3864 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    3862:	49 c0       	rjmp	.+146    	; 0x38f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    3864:	e0 95       	com	r30
    3866:	8c 91       	ld	r24, X
    3868:	e8 23       	and	r30, r24
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    386c:	8c 91       	ld	r24, X
    386e:	e8 27       	eor	r30, r24
    3870:	ec 93       	st	X, r30
    3872:	94 17       	cp	r25, r20
    3874:	08 f4       	brcc	.+2      	; 0x3878 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    3876:	46 c0       	rjmp	.+140    	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3878:	2c 81       	ldd	r18, Y+4	; 0x04
    387a:	3d 81       	ldd	r19, Y+5	; 0x05
    387c:	a2 0f       	add	r26, r18
    387e:	b3 1f       	adc	r27, r19
    3880:	e9 2f       	mov	r30, r25
    3882:	e4 1b       	sub	r30, r20
    3884:	e8 30       	cpi	r30, 0x08	; 8
    3886:	f8 f0       	brcs	.+62     	; 0x38c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    3888:	02 30       	cpi	r16, 0x02	; 2
    388a:	11 05       	cpc	r17, r1
    388c:	61 f4       	brne	.+24     	; 0x38a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    388e:	8e 2f       	mov	r24, r30
    3890:	9c 91       	ld	r25, X
    3892:	90 95       	com	r25
    3894:	9c 93       	st	X, r25
    3896:	2c 81       	ldd	r18, Y+4	; 0x04
    3898:	3d 81       	ldd	r19, Y+5	; 0x05
    389a:	a2 0f       	add	r26, r18
    389c:	b3 1f       	adc	r27, r19
    389e:	88 50       	subi	r24, 0x08	; 8
    38a0:	88 30       	cpi	r24, 0x08	; 8
    38a2:	b0 f7       	brcc	.-20     	; 0x3890 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	01 15       	cp	r16, r1
    38aa:	11 05       	cpc	r17, r1
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	81 95       	neg	r24
    38b2:	9e 2f       	mov	r25, r30
    38b4:	8c 93       	st	X, r24
    38b6:	2c 81       	ldd	r18, Y+4	; 0x04
    38b8:	3d 81       	ldd	r19, Y+5	; 0x05
    38ba:	a2 0f       	add	r26, r18
    38bc:	b3 1f       	adc	r27, r19
    38be:	98 50       	subi	r25, 0x08	; 8
    38c0:	98 30       	cpi	r25, 0x08	; 8
    38c2:	c0 f7       	brcc	.-16     	; 0x38b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    38c4:	e7 70       	andi	r30, 0x07	; 7
    38c6:	ee 23       	and	r30, r30
    38c8:	e9 f0       	breq	.+58     	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	e3 5f       	subi	r30, 0xF3	; 243
    38ce:	f9 4f       	sbci	r31, 0xF9	; 249
    38d0:	e4 91       	lpm	r30, Z
    38d2:	01 30       	cpi	r16, 0x01	; 1
    38d4:	11 05       	cpc	r17, r1
    38d6:	39 f0       	breq	.+14     	; 0x38e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    38d8:	48 f0       	brcs	.+18     	; 0x38ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    38da:	02 30       	cpi	r16, 0x02	; 2
    38dc:	11 05       	cpc	r17, r1
    38de:	91 f4       	brne	.+36     	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    38e0:	8c 91       	ld	r24, X
    38e2:	e8 27       	eor	r30, r24
    38e4:	06 c0       	rjmp	.+12     	; 0x38f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    38e6:	8c 91       	ld	r24, X
    38e8:	e8 2b       	or	r30, r24
    38ea:	03 c0       	rjmp	.+6      	; 0x38f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    38ec:	e0 95       	com	r30
    38ee:	8c 91       	ld	r24, X
    38f0:	e8 23       	and	r30, r24
    38f2:	ec 93       	st	X, r30
    38f4:	07 c0       	rjmp	.+14     	; 0x3904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    38f6:	02 30       	cpi	r16, 0x02	; 2
    38f8:	11 05       	cpc	r17, r1
    38fa:	09 f4       	brne	.+2      	; 0x38fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    38fc:	b7 cf       	rjmp	.-146    	; 0x386c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    38fe:	ae 0d       	add	r26, r14
    3900:	bf 1d       	adc	r27, r15
    3902:	be cf       	rjmp	.-132    	; 0x3880 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	08 95       	ret

00003912 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	dc 01       	movw	r26, r24
    3918:	56 96       	adiw	r26, 0x16	; 22
    391a:	ec 91       	ld	r30, X
    391c:	56 97       	sbiw	r26, 0x16	; 22
    391e:	e2 30       	cpi	r30, 0x02	; 2
    3920:	61 f0       	breq	.+24     	; 0x393a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    3922:	e3 30       	cpi	r30, 0x03	; 3
    3924:	09 f1       	breq	.+66     	; 0x3968 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    3926:	e1 30       	cpi	r30, 0x01	; 1
    3928:	81 f5       	brne	.+96     	; 0x398a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    392a:	14 96       	adiw	r26, 0x04	; 4
    392c:	ed 91       	ld	r30, X+
    392e:	fc 91       	ld	r31, X
    3930:	15 97       	sbiw	r26, 0x05	; 5
    3932:	e4 1b       	sub	r30, r20
    3934:	f5 0b       	sbc	r31, r21
    3936:	31 97       	sbiw	r30, 0x01	; 1
    3938:	23 c0       	rjmp	.+70     	; 0x3980 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    393a:	dc 01       	movw	r26, r24
    393c:	14 96       	adiw	r26, 0x04	; 4
    393e:	ed 91       	ld	r30, X+
    3940:	fc 91       	ld	r31, X
    3942:	15 97       	sbiw	r26, 0x05	; 5
    3944:	df 01       	movw	r26, r30
    3946:	a6 1b       	sub	r26, r22
    3948:	b7 0b       	sbc	r27, r23
    394a:	bd 01       	movw	r22, r26
    394c:	dc 01       	movw	r26, r24
    394e:	16 96       	adiw	r26, 0x06	; 6
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	17 97       	sbiw	r26, 0x07	; 7
    3956:	df 01       	movw	r26, r30
    3958:	a4 1b       	sub	r26, r20
    395a:	b5 0b       	sbc	r27, r21
    395c:	ad 01       	movw	r20, r26
    395e:	41 50       	subi	r20, 0x01	; 1
    3960:	51 09       	sbc	r21, r1
    3962:	62 1b       	sub	r22, r18
    3964:	73 0b       	sbc	r23, r19
    3966:	11 c0       	rjmp	.+34     	; 0x398a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    3968:	fa 01       	movw	r30, r20
    396a:	dc 01       	movw	r26, r24
    396c:	16 96       	adiw	r26, 0x06	; 6
    396e:	4d 91       	ld	r20, X+
    3970:	5c 91       	ld	r21, X
    3972:	17 97       	sbiw	r26, 0x07	; 7
    3974:	da 01       	movw	r26, r20
    3976:	a6 1b       	sub	r26, r22
    3978:	b7 0b       	sbc	r27, r23
    397a:	bd 01       	movw	r22, r26
    397c:	62 1b       	sub	r22, r18
    397e:	73 0b       	sbc	r23, r19
    3980:	ab 01       	movw	r20, r22
    3982:	bf 01       	movw	r22, r30
    3984:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3988:	02 c0       	rjmp	.+4      	; 0x398e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    398a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	08 95       	ret

00003994 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	dc 01       	movw	r26, r24
    399a:	56 96       	adiw	r26, 0x16	; 22
    399c:	ec 91       	ld	r30, X
    399e:	56 97       	sbiw	r26, 0x16	; 22
    39a0:	e2 30       	cpi	r30, 0x02	; 2
    39a2:	69 f0       	breq	.+26     	; 0x39be <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    39a4:	e3 30       	cpi	r30, 0x03	; 3
    39a6:	11 f1       	breq	.+68     	; 0x39ec <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    39a8:	e1 30       	cpi	r30, 0x01	; 1
    39aa:	89 f5       	brne	.+98     	; 0x3a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    39ac:	14 96       	adiw	r26, 0x04	; 4
    39ae:	ed 91       	ld	r30, X+
    39b0:	fc 91       	ld	r31, X
    39b2:	15 97       	sbiw	r26, 0x05	; 5
    39b4:	e4 1b       	sub	r30, r20
    39b6:	f5 0b       	sbc	r31, r21
    39b8:	e2 1b       	sub	r30, r18
    39ba:	f3 0b       	sbc	r31, r19
    39bc:	23 c0       	rjmp	.+70     	; 0x3a04 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    39be:	dc 01       	movw	r26, r24
    39c0:	14 96       	adiw	r26, 0x04	; 4
    39c2:	ed 91       	ld	r30, X+
    39c4:	fc 91       	ld	r31, X
    39c6:	15 97       	sbiw	r26, 0x05	; 5
    39c8:	df 01       	movw	r26, r30
    39ca:	a6 1b       	sub	r26, r22
    39cc:	b7 0b       	sbc	r27, r23
    39ce:	bd 01       	movw	r22, r26
    39d0:	61 50       	subi	r22, 0x01	; 1
    39d2:	71 09       	sbc	r23, r1
    39d4:	dc 01       	movw	r26, r24
    39d6:	16 96       	adiw	r26, 0x06	; 6
    39d8:	ed 91       	ld	r30, X+
    39da:	fc 91       	ld	r31, X
    39dc:	17 97       	sbiw	r26, 0x07	; 7
    39de:	df 01       	movw	r26, r30
    39e0:	a4 1b       	sub	r26, r20
    39e2:	b5 0b       	sbc	r27, r21
    39e4:	ad 01       	movw	r20, r26
    39e6:	42 1b       	sub	r20, r18
    39e8:	53 0b       	sbc	r21, r19
    39ea:	11 c0       	rjmp	.+34     	; 0x3a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    39ec:	fa 01       	movw	r30, r20
    39ee:	dc 01       	movw	r26, r24
    39f0:	16 96       	adiw	r26, 0x06	; 6
    39f2:	4d 91       	ld	r20, X+
    39f4:	5c 91       	ld	r21, X
    39f6:	17 97       	sbiw	r26, 0x07	; 7
    39f8:	da 01       	movw	r26, r20
    39fa:	a6 1b       	sub	r26, r22
    39fc:	b7 0b       	sbc	r27, r23
    39fe:	bd 01       	movw	r22, r26
    3a00:	61 50       	subi	r22, 0x01	; 1
    3a02:	71 09       	sbc	r23, r1
    3a04:	ab 01       	movw	r20, r22
    3a06:	bf 01       	movw	r22, r30
    3a08:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    3a0e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    3a18:	cf 92       	push	r12
    3a1a:	df 92       	push	r13
    3a1c:	ef 92       	push	r14
    3a1e:	ff 92       	push	r15
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
    3a28:	ec 01       	movw	r28, r24
  TRANSACTION_START
    3a2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	39 f0       	breq	.+14     	; 0x3a40 <_ZN16Adafruit_SSD13067displayEv+0x28>
    3a32:	4d a9       	ldd	r20, Y+53	; 0x35
    3a34:	5e a9       	ldd	r21, Y+54	; 0x36
    3a36:	6f a9       	ldd	r22, Y+55	; 0x37
    3a38:	78 ad       	ldd	r23, Y+56	; 0x38
    3a3a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    3a3e:	0f c0       	rjmp	.+30     	; 0x3a5e <_ZN16Adafruit_SSD13067displayEv+0x46>
    3a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a44:	89 2b       	or	r24, r25
    3a46:	21 f0       	breq	.+8      	; 0x3a50 <_ZN16Adafruit_SSD13067displayEv+0x38>
    3a48:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a4c:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3a50:	ef a5       	ldd	r30, Y+47	; 0x2f
    3a52:	f8 a9       	ldd	r31, Y+48	; 0x30
    3a54:	90 81       	ld	r25, Z
    3a56:	8c a9       	ldd	r24, Y+52	; 0x34
    3a58:	80 95       	com	r24
    3a5a:	89 23       	and	r24, r25
    3a5c:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    3a5e:	45 e0       	ldi	r20, 0x05	; 5
    3a60:	68 e0       	ldi	r22, 0x08	; 8
    3a62:	76 e0       	ldi	r23, 0x06	; 6
    3a64:	ce 01       	movw	r24, r28
    3a66:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    3a6a:	6c 81       	ldd	r22, Y+4	; 0x04
    3a6c:	61 50       	subi	r22, 0x01	; 1
    3a6e:	ce 01       	movw	r24, r28
    3a70:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    3a74:	2e 81       	ldd	r18, Y+6	; 0x06
    3a76:	3f 81       	ldd	r19, Y+7	; 0x07
    3a78:	c9 01       	movw	r24, r18
    3a7a:	07 96       	adiw	r24, 0x07	; 7
    3a7c:	97 fd       	sbrc	r25, 7
    3a7e:	07 96       	adiw	r24, 0x07	; 7
    3a80:	23 e0       	ldi	r18, 0x03	; 3
    3a82:	95 95       	asr	r25
    3a84:	87 95       	ror	r24
    3a86:	2a 95       	dec	r18
    3a88:	e1 f7       	brne	.-8      	; 0x3a82 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    3a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    3a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    3a8e:	82 9f       	mul	r24, r18
    3a90:	70 01       	movw	r14, r0
    3a92:	83 9f       	mul	r24, r19
    3a94:	f0 0c       	add	r15, r0
    3a96:	92 9f       	mul	r25, r18
    3a98:	f0 0c       	add	r15, r0
    3a9a:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    3a9c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3a9e:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    3aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3aa4:	e0 0e       	add	r14, r16
    3aa6:	f1 1e       	adc	r15, r17
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <_ZN16Adafruit_SSD13067displayEv+0x96>
    3aac:	43 c0       	rjmp	.+134    	; 0x3b34 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    3aae:	69 a1       	ldd	r22, Y+33	; 0x21
    3ab0:	06 2e       	mov	r0, r22
    3ab2:	00 0c       	add	r0, r0
    3ab4:	77 0b       	sbc	r23, r23
    3ab6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    3aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3abe:	dc 01       	movw	r26, r24
    3ac0:	ed 91       	ld	r30, X+
    3ac2:	fc 91       	ld	r31, X
    3ac4:	01 90       	ld	r0, Z+
    3ac6:	f0 81       	ld	r31, Z
    3ac8:	e0 2d       	mov	r30, r0
    3aca:	60 e4       	ldi	r22, 0x40	; 64
    3acc:	09 95       	icall
    3ace:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    3ad0:	01 e0       	ldi	r16, 0x01	; 1
    3ad2:	10 e0       	ldi	r17, 0x00	; 0
    3ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    3ad8:	ec 14       	cp	r14, r12
    3ada:	fd 04       	cpc	r15, r13
    3adc:	41 f1       	breq	.+80     	; 0x3b2e <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    3ade:	00 32       	cpi	r16, 0x20	; 32
    3ae0:	11 05       	cpc	r17, r1
    3ae2:	b0 f0       	brcs	.+44     	; 0x3b10 <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    3ae4:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    3ae8:	69 a1       	ldd	r22, Y+33	; 0x21
    3aea:	06 2e       	mov	r0, r22
    3aec:	00 0c       	add	r0, r0
    3aee:	77 0b       	sbc	r23, r23
    3af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3af4:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    3af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3afc:	dc 01       	movw	r26, r24
    3afe:	ed 91       	ld	r30, X+
    3b00:	fc 91       	ld	r31, X
    3b02:	01 90       	ld	r0, Z+
    3b04:	f0 81       	ld	r31, Z
    3b06:	e0 2d       	mov	r30, r0
    3b08:	60 e4       	ldi	r22, 0x40	; 64
    3b0a:	09 95       	icall
        bytesOut = 1;
    3b0c:	01 e0       	ldi	r16, 0x01	; 1
    3b0e:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    3b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b14:	f6 01       	movw	r30, r12
    3b16:	61 91       	ld	r22, Z+
    3b18:	6f 01       	movw	r12, r30
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	ed 91       	ld	r30, X+
    3b1e:	fc 91       	ld	r31, X
    3b20:	01 90       	ld	r0, Z+
    3b22:	f0 81       	ld	r31, Z
    3b24:	e0 2d       	mov	r30, r0
    3b26:	09 95       	icall
      bytesOut++;
    3b28:	0f 5f       	subi	r16, 0xFF	; 255
    3b2a:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    3b2c:	d3 cf       	rjmp	.-90     	; 0x3ad4 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    3b2e:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN7TwoWire15endTransmissionEv>
    3b32:	35 c0       	rjmp	.+106    	; 0x3b9e <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    3b34:	ed a5       	ldd	r30, Y+45	; 0x2d
    3b36:	fe a5       	ldd	r31, Y+46	; 0x2e
    3b38:	90 81       	ld	r25, Z
    3b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b3c:	89 2b       	or	r24, r25
    3b3e:	80 83       	st	Z, r24
    while (count--)
    3b40:	0e 15       	cp	r16, r14
    3b42:	1f 05       	cpc	r17, r15
    3b44:	61 f1       	breq	.+88     	; 0x3b9e <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    3b46:	f8 01       	movw	r30, r16
    3b48:	81 91       	ld	r24, Z+
    3b4a:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3b4c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3b4e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3b50:	23 2b       	or	r18, r19
    3b52:	19 f0       	breq	.+6      	; 0x3b5a <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    3b54:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN8SPIClass8transferEh>
    3b58:	f3 cf       	rjmp	.-26     	; 0x3b40 <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3b5a:	28 e0       	ldi	r18, 0x08	; 8
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e8       	ldi	r20, 0x80	; 128
    3b60:	e9 a5       	ldd	r30, Y+41	; 0x29
    3b62:	fa a5       	ldd	r31, Y+42	; 0x2a
    3b64:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    3b66:	58 2f       	mov	r21, r24
    3b68:	54 23       	and	r21, r20
    3b6a:	19 f0       	breq	.+6      	; 0x3b72 <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    3b6c:	50 81       	ld	r21, Z
    3b6e:	95 2b       	or	r25, r21
    3b70:	03 c0       	rjmp	.+6      	; 0x3b78 <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    3b72:	50 81       	ld	r21, Z
    3b74:	90 95       	com	r25
    3b76:	95 23       	and	r25, r21
    3b78:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    3b7a:	eb a5       	ldd	r30, Y+43	; 0x2b
    3b7c:	fc a5       	ldd	r31, Y+44	; 0x2c
    3b7e:	50 81       	ld	r21, Z
    3b80:	9a a9       	ldd	r25, Y+50	; 0x32
    3b82:	95 2b       	or	r25, r21
    3b84:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    3b86:	eb a5       	ldd	r30, Y+43	; 0x2b
    3b88:	fc a5       	ldd	r31, Y+44	; 0x2c
    3b8a:	50 81       	ld	r21, Z
    3b8c:	9a a9       	ldd	r25, Y+50	; 0x32
    3b8e:	90 95       	com	r25
    3b90:	95 23       	and	r25, r21
    3b92:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    3b94:	46 95       	lsr	r20
    3b96:	21 50       	subi	r18, 0x01	; 1
    3b98:	31 09       	sbc	r19, r1
    3b9a:	11 f7       	brne	.-60     	; 0x3b60 <_ZN16Adafruit_SSD13067displayEv+0x148>
    3b9c:	d1 cf       	rjmp	.-94     	; 0x3b40 <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3b9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ba0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	71 f0       	breq	.+28     	; 0x3bc2 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    3ba6:	49 ad       	ldd	r20, Y+57	; 0x39
    3ba8:	5a ad       	ldd	r21, Y+58	; 0x3a
    3baa:	6b ad       	ldd	r22, Y+59	; 0x3b
    3bac:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	ff 90       	pop	r15
    3bb8:	ef 90       	pop	r14
    3bba:	df 90       	pop	r13
    3bbc:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3bbe:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <_ZN7TwoWire8setClockEm>
    3bc2:	ef a5       	ldd	r30, Y+47	; 0x2f
    3bc4:	f8 a9       	ldd	r31, Y+48	; 0x30
    3bc6:	90 81       	ld	r25, Z
    3bc8:	8c a9       	ldd	r24, Y+52	; 0x34
    3bca:	89 2b       	or	r24, r25
    3bcc:	80 83       	st	Z, r24
    3bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd2:	89 2b       	or	r24, r25
    3bd4:	51 f0       	breq	.+20     	; 0x3bea <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3be6:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	df 90       	pop	r13
    3bf8:	cf 90       	pop	r12
    3bfa:	08 95       	ret

00003bfc <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3bfc:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3bfe:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3c00:	f8 94       	cli
  if (!initialized) {
    3c02:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN8SPIClass11initializedE>
    3c06:	81 11       	cpse	r24, r1
    3c08:	27 c0       	rjmp	.+78     	; 0x3c58 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3c0a:	e0 ee       	ldi	r30, 0xE0	; 224
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3c10:	ec ec       	ldi	r30, 0xCC	; 204
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3c16:	e8 2f       	mov	r30, r24
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	ee 0f       	add	r30, r30
    3c1c:	ff 1f       	adc	r31, r31
    3c1e:	e2 50       	subi	r30, 0x02	; 2
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	a5 91       	lpm	r26, Z+
    3c24:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3c26:	ec 91       	ld	r30, X
    3c28:	e9 23       	and	r30, r25
    3c2a:	21 f4       	brne	.+8      	; 0x3c34 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3c2c:	61 e0       	ldi	r22, 0x01	; 1
    3c2e:	8a e0       	ldi	r24, 0x0A	; 10
    3c30:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	8a e0       	ldi	r24, 0x0A	; 10
    3c38:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3c3c:	8c b5       	in	r24, 0x2c	; 44
    3c3e:	80 61       	ori	r24, 0x10	; 16
    3c40:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3c42:	8c b5       	in	r24, 0x2c	; 44
    3c44:	80 64       	ori	r24, 0x40	; 64
    3c46:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3c48:	61 e0       	ldi	r22, 0x01	; 1
    3c4a:	8d e0       	ldi	r24, 0x0D	; 13
    3c4c:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
    pinMode(MOSI, OUTPUT);
    3c50:	61 e0       	ldi	r22, 0x01	; 1
    3c52:	8b e0       	ldi	r24, 0x0B	; 11
    3c54:	0e 94 41 0c 	call	0x1882	; 0x1882 <pinMode>
  }
  initialized++; // reference count
    3c58:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN8SPIClass11initializedE>
    3c5c:	8f 5f       	subi	r24, 0xFF	; 255
    3c5e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3c62:	cf bf       	out	0x3f, r28	; 63
}
    3c64:	cf 91       	pop	r28
    3c66:	08 95       	ret

00003c68 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3c68:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3c72:	82 1b       	sub	r24, r18
    3c74:	91 09       	sbc	r25, r1
    3c76:	08 95       	ret

00003c78 <_ZN7TwoWire4readEv>:
    3c78:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3c7c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3c80:	98 17       	cp	r25, r24
    3c82:	50 f4       	brcc	.+20     	; 0x3c98 <_ZN7TwoWire4readEv+0x20>
    3c84:	e9 2f       	mov	r30, r25
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	e9 51       	subi	r30, 0x19	; 25
    3c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3c8c:	20 81       	ld	r18, Z
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	9f 5f       	subi	r25, 0xFF	; 255
    3c92:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3c96:	02 c0       	rjmp	.+4      	; 0x3c9c <_ZN7TwoWire4readEv+0x24>
    3c98:	2f ef       	ldi	r18, 0xFF	; 255
    3c9a:	3f ef       	ldi	r19, 0xFF	; 255
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	08 95       	ret

00003ca0 <_ZN7TwoWire4peekEv>:
    3ca0:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3ca4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3ca8:	e8 17       	cp	r30, r24
    3caa:	30 f4       	brcc	.+12     	; 0x3cb8 <_ZN7TwoWire4peekEv+0x18>
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	e9 51       	subi	r30, 0x19	; 25
    3cb0:	fd 4f       	sbci	r31, 0xFD	; 253
    3cb2:	80 81       	ld	r24, Z
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	08 95       	ret
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	9f ef       	ldi	r25, 0xFF	; 255
    3cbc:	08 95       	ret

00003cbe <_ZN7TwoWire5flushEv>:
    3cbe:	08 95       	ret

00003cc0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3cc0:	cf 93       	push	r28
    3cc2:	df 93       	push	r29
    3cc4:	ec 01       	movw	r28, r24
    3cc6:	e0 91 bd 02 	lds	r30, 0x02BD	; 0x8002bd <_ZN7TwoWire14user_onReceiveE>
    3cca:	f0 91 be 02 	lds	r31, 0x02BE	; 0x8002be <_ZN7TwoWire14user_onReceiveE+0x1>
    3cce:	30 97       	sbiw	r30, 0x00	; 0
    3cd0:	f1 f0       	breq	.+60     	; 0x3d0e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3cd2:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3cd6:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3cda:	98 17       	cp	r25, r24
    3cdc:	c0 f0       	brcs	.+48     	; 0x3d0e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	29 2f       	mov	r18, r25
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	26 17       	cp	r18, r22
    3ce6:	37 07       	cpc	r19, r23
    3ce8:	54 f4       	brge	.+20     	; 0x3cfe <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3cea:	de 01       	movw	r26, r28
    3cec:	a2 0f       	add	r26, r18
    3cee:	b3 1f       	adc	r27, r19
    3cf0:	4c 91       	ld	r20, X
    3cf2:	d9 01       	movw	r26, r18
    3cf4:	a9 51       	subi	r26, 0x19	; 25
    3cf6:	bd 4f       	sbci	r27, 0xFD	; 253
    3cf8:	4c 93       	st	X, r20
    3cfa:	9f 5f       	subi	r25, 0xFF	; 255
    3cfc:	f1 cf       	rjmp	.-30     	; 0x3ce0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3cfe:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3d02:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3d06:	cb 01       	movw	r24, r22
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	09 94       	ijmp
    3d0e:	df 91       	pop	r29
    3d10:	cf 91       	pop	r28
    3d12:	08 95       	ret

00003d14 <_ZN7TwoWire16onRequestServiceEv>:
    3d14:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <_ZN7TwoWire14user_onRequestE>
    3d18:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <_ZN7TwoWire14user_onRequestE+0x1>
    3d1c:	30 97       	sbiw	r30, 0x00	; 0
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <_ZN7TwoWire16onRequestServiceEv+0x16>
    3d20:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3d24:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3d28:	09 94       	ijmp
    3d2a:	08 95       	ret

00003d2c <_ZN7TwoWire5writeEPKhj>:
    3d2c:	cf 92       	push	r12
    3d2e:	df 92       	push	r13
    3d30:	ef 92       	push	r14
    3d32:	ff 92       	push	r15
    3d34:	0f 93       	push	r16
    3d36:	1f 93       	push	r17
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	7c 01       	movw	r14, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8a 01       	movw	r16, r20
    3d42:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <_ZN7TwoWire12transmittingE>
    3d46:	22 23       	and	r18, r18
    3d48:	89 f0       	breq	.+34     	; 0x3d6c <_ZN7TwoWire5writeEPKhj+0x40>
    3d4a:	eb 01       	movw	r28, r22
    3d4c:	6b 01       	movw	r12, r22
    3d4e:	c4 0e       	add	r12, r20
    3d50:	d5 1e       	adc	r13, r21
    3d52:	cc 15       	cp	r28, r12
    3d54:	dd 05       	cpc	r29, r13
    3d56:	69 f0       	breq	.+26     	; 0x3d72 <_ZN7TwoWire5writeEPKhj+0x46>
    3d58:	69 91       	ld	r22, Y+
    3d5a:	d7 01       	movw	r26, r14
    3d5c:	ed 91       	ld	r30, X+
    3d5e:	fc 91       	ld	r31, X
    3d60:	01 90       	ld	r0, Z+
    3d62:	f0 81       	ld	r31, Z
    3d64:	e0 2d       	mov	r30, r0
    3d66:	c7 01       	movw	r24, r14
    3d68:	09 95       	icall
    3d6a:	f3 cf       	rjmp	.-26     	; 0x3d52 <_ZN7TwoWire5writeEPKhj+0x26>
    3d6c:	64 2f       	mov	r22, r20
    3d6e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <twi_transmit>
    3d72:	c8 01       	movw	r24, r16
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	1f 91       	pop	r17
    3d7a:	0f 91       	pop	r16
    3d7c:	ff 90       	pop	r15
    3d7e:	ef 90       	pop	r14
    3d80:	df 90       	pop	r13
    3d82:	cf 90       	pop	r12
    3d84:	08 95       	ret

00003d86 <_ZN7TwoWire5writeEh>:
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	1f 92       	push	r1
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	69 83       	std	Y+1, r22	; 0x01
    3d92:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <_ZN7TwoWire12transmittingE>
    3d96:	22 23       	and	r18, r18
    3d98:	d1 f0       	breq	.+52     	; 0x3dce <_ZN7TwoWire5writeEh+0x48>
    3d9a:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3d9e:	20 32       	cpi	r18, 0x20	; 32
    3da0:	40 f0       	brcs	.+16     	; 0x3db2 <_ZN7TwoWire5writeEh+0x2c>
    3da2:	21 e0       	ldi	r18, 0x01	; 1
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	fc 01       	movw	r30, r24
    3da8:	33 83       	std	Z+3, r19	; 0x03
    3daa:	22 83       	std	Z+2, r18	; 0x02
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	15 c0       	rjmp	.+42     	; 0x3ddc <_ZN7TwoWire5writeEh+0x56>
    3db2:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3db6:	e8 2f       	mov	r30, r24
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	ec 53       	subi	r30, 0x3C	; 60
    3dbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3dbe:	99 81       	ldd	r25, Y+1	; 0x01
    3dc0:	90 83       	st	Z, r25
    3dc2:	8f 5f       	subi	r24, 0xFF	; 255
    3dc4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3dc8:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3dcc:	05 c0       	rjmp	.+10     	; 0x3dd8 <_ZN7TwoWire5writeEh+0x52>
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	01 96       	adiw	r24, 0x01	; 1
    3dd4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <twi_transmit>
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	0f 90       	pop	r0
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	08 95       	ret

00003de4 <_ZN7TwoWireC1Ev>:
    3de4:	fc 01       	movw	r30, r24
    3de6:	13 82       	std	Z+3, r1	; 0x03
    3de8:	12 82       	std	Z+2, r1	; 0x02
    3dea:	88 ee       	ldi	r24, 0xE8	; 232
    3dec:	93 e0       	ldi	r25, 0x03	; 3
    3dee:	a0 e0       	ldi	r26, 0x00	; 0
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	84 83       	std	Z+4, r24	; 0x04
    3df4:	95 83       	std	Z+5, r25	; 0x05
    3df6:	a6 83       	std	Z+6, r26	; 0x06
    3df8:	b7 83       	std	Z+7, r27	; 0x07
    3dfa:	87 e8       	ldi	r24, 0x87	; 135
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	08 95       	ret

00003e04 <_ZN7TwoWire5beginEv>:
    3e04:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_ZN7TwoWire13rxBufferIndexE>
    3e08:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire14rxBufferLengthE>
    3e0c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3e10:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3e14:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <twi_init>
    3e18:	8a e8       	ldi	r24, 0x8A	; 138
    3e1a:	9e e1       	ldi	r25, 0x1E	; 30
    3e1c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <twi_attachSlaveTxEvent>
    3e20:	80 e6       	ldi	r24, 0x60	; 96
    3e22:	9e e1       	ldi	r25, 0x1E	; 30
    3e24:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <twi_attachSlaveRxEvent>

00003e28 <_ZN7TwoWire8setClockEm>:
    3e28:	cb 01       	movw	r24, r22
    3e2a:	ba 01       	movw	r22, r20
    3e2c:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <twi_setFrequency>

00003e30 <_ZN7TwoWire17beginTransmissionEh>:
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <_ZN7TwoWire12transmittingE>
    3e36:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <_ZN7TwoWire9txAddressE>
    3e3a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3e3e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3e42:	08 95       	ret

00003e44 <_ZN7TwoWire17beginTransmissionEi>:
    3e44:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <_ZN7TwoWire17beginTransmissionEh>

00003e48 <_ZN7TwoWire15endTransmissionEh>:
    3e48:	0f 93       	push	r16
    3e4a:	06 2f       	mov	r16, r22
    3e4c:	21 e0       	ldi	r18, 0x01	; 1
    3e4e:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3e52:	64 ec       	ldi	r22, 0xC4	; 196
    3e54:	72 e0       	ldi	r23, 0x02	; 2
    3e56:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <_ZN7TwoWire9txAddressE>
    3e5a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <twi_writeTo>
    3e5e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13txBufferIndexE>
    3e62:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN7TwoWire14txBufferLengthE>
    3e66:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_ZN7TwoWire12transmittingE>
    3e6a:	0f 91       	pop	r16
    3e6c:	08 95       	ret

00003e6e <_ZN7TwoWire15endTransmissionEv>:
    3e6e:	61 e0       	ldi	r22, 0x01	; 1
    3e70:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <_ZN7TwoWire15endTransmissionEh>

00003e74 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3e74:	81 eb       	ldi	r24, 0xB1	; 177
    3e76:	92 e0       	ldi	r25, 0x02	; 2
    3e78:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <_ZN7TwoWireC1Ev>

00003e7c <__cxa_pure_virtual>:
    3e7c:	0e 94 47 24 	call	0x488e	; 0x488e <abort>

00003e80 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3e80:	08 95       	ret

00003e82 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    3e82:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <twi_sendStop>
    3e8c:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_inRepStart>
    3e90:	61 e0       	ldi	r22, 0x01	; 1
    3e92:	82 e1       	ldi	r24, 0x12	; 18
    3e94:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    3e98:	61 e0       	ldi	r22, 0x01	; 1
    3e9a:	83 e1       	ldi	r24, 0x13	; 19
    3e9c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    3ea0:	e9 eb       	ldi	r30, 0xB9	; 185
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	8e 7f       	andi	r24, 0xFE	; 254
    3ea8:	80 83       	st	Z, r24
    3eaa:	80 81       	ld	r24, Z
    3eac:	8d 7f       	andi	r24, 0xFD	; 253
    3eae:	80 83       	st	Z, r24
    3eb0:	80 e2       	ldi	r24, 0x20	; 32
    3eb2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3eb6:	85 e4       	ldi	r24, 0x45	; 69
    3eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3ebc:	08 95       	ret

00003ebe <twi_disable>:
    3ebe:	ec eb       	ldi	r30, 0xBC	; 188
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	80 81       	ld	r24, Z
    3ec4:	8a 7b       	andi	r24, 0xBA	; 186
    3ec6:	80 83       	st	Z, r24
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	82 e1       	ldi	r24, 0x12	; 18
    3ecc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <digitalWrite>
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	83 e1       	ldi	r24, 0x13	; 19
    3ed4:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <digitalWrite>

00003ed8 <twi_setFrequency>:
    3ed8:	9b 01       	movw	r18, r22
    3eda:	ac 01       	movw	r20, r24
    3edc:	60 e0       	ldi	r22, 0x00	; 0
    3ede:	72 e1       	ldi	r23, 0x12	; 18
    3ee0:	8a e7       	ldi	r24, 0x7A	; 122
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodsi4>
    3ee8:	da 01       	movw	r26, r20
    3eea:	c9 01       	movw	r24, r18
    3eec:	40 97       	sbiw	r24, 0x10	; 16
    3eee:	a1 09       	sbc	r26, r1
    3ef0:	b1 09       	sbc	r27, r1
    3ef2:	b6 95       	lsr	r27
    3ef4:	a7 95       	ror	r26
    3ef6:	97 95       	ror	r25
    3ef8:	87 95       	ror	r24
    3efa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3efe:	08 95       	ret

00003f00 <twi_transmit>:
    3f00:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <twi_txBufferLength>
    3f04:	26 2f       	mov	r18, r22
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	24 0f       	add	r18, r20
    3f0a:	31 1d       	adc	r19, r1
    3f0c:	21 32       	cpi	r18, 0x21	; 33
    3f0e:	31 05       	cpc	r19, r1
    3f10:	dc f4       	brge	.+54     	; 0x3f48 <twi_transmit+0x48>
    3f12:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <twi_state>
    3f16:	24 30       	cpi	r18, 0x04	; 4
    3f18:	c9 f4       	brne	.+50     	; 0x3f4c <twi_transmit+0x4c>
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	86 17       	cp	r24, r22
    3f22:	58 f4       	brcc	.+22     	; 0x3f3a <twi_transmit+0x3a>
    3f24:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <twi_txBufferLength>
    3f28:	21 91       	ld	r18, Z+
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	a5 5d       	subi	r26, 0xD5	; 213
    3f2e:	bc 4f       	sbci	r27, 0xFC	; 252
    3f30:	a3 0f       	add	r26, r19
    3f32:	b1 1d       	adc	r27, r1
    3f34:	2c 93       	st	X, r18
    3f36:	01 96       	adiw	r24, 0x01	; 1
    3f38:	f3 cf       	rjmp	.-26     	; 0x3f20 <twi_transmit+0x20>
    3f3a:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_txBufferLength>
    3f3e:	68 0f       	add	r22, r24
    3f40:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <twi_txBufferLength>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	08 95       	ret
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	08 95       	ret
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
    3f4e:	08 95       	ret

00003f50 <twi_attachSlaveRxEvent>:
    3f50:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <twi_onSlaveReceive+0x1>
    3f54:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_onSlaveReceive>
    3f58:	08 95       	ret

00003f5a <twi_attachSlaveTxEvent>:
    3f5a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <twi_onSlaveTransmit+0x1>
    3f5e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_onSlaveTransmit>
    3f62:	08 95       	ret

00003f64 <twi_releaseBus>:
    3f64:	85 ec       	ldi	r24, 0xC5	; 197
    3f66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3f6a:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    3f6e:	08 95       	ret

00003f70 <twi_handleTimeout>:
    3f70:	cf 93       	push	r28
    3f72:	df 93       	push	r29
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <twi_timed_out_flag>
    3f7a:	88 23       	and	r24, r24
    3f7c:	61 f0       	breq	.+24     	; 0x3f96 <twi_handleTimeout+0x26>
    3f7e:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3f82:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3f86:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <twi_disable>
    3f8a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <twi_init>
    3f8e:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3f92:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	08 95       	ret

00003f9c <twi_writeTo>:
    3f9c:	4f 92       	push	r4
    3f9e:	5f 92       	push	r5
    3fa0:	6f 92       	push	r6
    3fa2:	7f 92       	push	r7
    3fa4:	8f 92       	push	r8
    3fa6:	9f 92       	push	r9
    3fa8:	af 92       	push	r10
    3faa:	bf 92       	push	r11
    3fac:	cf 92       	push	r12
    3fae:	df 92       	push	r13
    3fb0:	ef 92       	push	r14
    3fb2:	ff 92       	push	r15
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	cf 93       	push	r28
    3fba:	df 93       	push	r29
    3fbc:	41 32       	cpi	r20, 0x21	; 33
    3fbe:	08 f0       	brcs	.+2      	; 0x3fc2 <twi_writeTo+0x26>
    3fc0:	c6 c0       	rjmp	.+396    	; 0x414e <twi_writeTo+0x1b2>
    3fc2:	12 2f       	mov	r17, r18
    3fc4:	f4 2e       	mov	r15, r20
    3fc6:	d7 2e       	mov	r13, r23
    3fc8:	e6 2e       	mov	r14, r22
    3fca:	d8 2f       	mov	r29, r24
    3fcc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    3fd0:	4b 01       	movw	r8, r22
    3fd2:	5c 01       	movw	r10, r24
    3fd4:	c0 91 7a 03 	lds	r28, 0x037A	; 0x80037a <twi_state>
    3fd8:	cc 23       	and	r28, r28
    3fda:	11 f1       	breq	.+68     	; 0x4020 <twi_writeTo+0x84>
    3fdc:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_timeout_us>
    3fe0:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    3fe4:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    3fe8:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    3fec:	89 2b       	or	r24, r25
    3fee:	8a 2b       	or	r24, r26
    3ff0:	8b 2b       	or	r24, r27
    3ff2:	81 f3       	breq	.-32     	; 0x3fd4 <twi_writeTo+0x38>
    3ff4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    3ff8:	40 90 73 03 	lds	r4, 0x0373	; 0x800373 <twi_timeout_us>
    3ffc:	50 90 74 03 	lds	r5, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    4000:	60 90 75 03 	lds	r6, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    4004:	70 90 76 03 	lds	r7, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	88 19       	sub	r24, r8
    400e:	99 09       	sbc	r25, r9
    4010:	aa 09       	sbc	r26, r10
    4012:	bb 09       	sbc	r27, r11
    4014:	48 16       	cp	r4, r24
    4016:	59 06       	cpc	r5, r25
    4018:	6a 06       	cpc	r6, r26
    401a:	7b 06       	cpc	r7, r27
    401c:	d8 f6       	brcc	.-74     	; 0x3fd4 <twi_writeTo+0x38>
    401e:	83 c0       	rjmp	.+262    	; 0x4126 <twi_writeTo+0x18a>
    4020:	82 e0       	ldi	r24, 0x02	; 2
    4022:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <twi_state>
    4026:	00 93 78 03 	sts	0x0378, r16	; 0x800378 <twi_sendStop>
    402a:	8f ef       	ldi	r24, 0xFF	; 255
    402c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_error>
    4030:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_masterBufferIndex>
    4034:	f0 92 4b 03 	sts	0x034B, r15	; 0x80034b <twi_masterBufferLength>
    4038:	9e 2d       	mov	r25, r14
    403a:	ad e4       	ldi	r26, 0x4D	; 77
    403c:	b3 e0       	ldi	r27, 0x03	; 3
    403e:	ee 2d       	mov	r30, r14
    4040:	fd 2d       	mov	r31, r13
    4042:	8e 2f       	mov	r24, r30
    4044:	89 1b       	sub	r24, r25
    4046:	8f 15       	cp	r24, r15
    4048:	18 f4       	brcc	.+6      	; 0x4050 <twi_writeTo+0xb4>
    404a:	81 91       	ld	r24, Z+
    404c:	8d 93       	st	X+, r24
    404e:	f9 cf       	rjmp	.-14     	; 0x4042 <twi_writeTo+0xa6>
    4050:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <twi_slarw>
    4054:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <twi_slarw>
    4058:	dd 0f       	add	r29, r29
    405a:	d9 2b       	or	r29, r25
    405c:	d0 93 79 03 	sts	0x0379, r29	; 0x800379 <twi_slarw>
    4060:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_inRepStart>
    4064:	81 30       	cpi	r24, 0x01	; 1
    4066:	89 f5       	brne	.+98     	; 0x40ca <twi_writeTo+0x12e>
    4068:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_inRepStart>
    406c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    4070:	6b 01       	movw	r12, r22
    4072:	7c 01       	movw	r14, r24
    4074:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <twi_slarw>
    4078:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    407c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_timeout_us>
    4080:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    4084:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    4088:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    408c:	89 2b       	or	r24, r25
    408e:	8a 2b       	or	r24, r26
    4090:	8b 2b       	or	r24, r27
    4092:	a9 f0       	breq	.+42     	; 0x40be <twi_writeTo+0x122>
    4094:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    4098:	80 90 73 03 	lds	r8, 0x0373	; 0x800373 <twi_timeout_us>
    409c:	90 90 74 03 	lds	r9, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    40a0:	a0 90 75 03 	lds	r10, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    40a4:	b0 90 76 03 	lds	r11, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	8c 19       	sub	r24, r12
    40ae:	9d 09       	sbc	r25, r13
    40b0:	ae 09       	sbc	r26, r14
    40b2:	bf 09       	sbc	r27, r15
    40b4:	88 16       	cp	r8, r24
    40b6:	99 06       	cpc	r9, r25
    40b8:	aa 06       	cpc	r10, r26
    40ba:	bb 06       	cpc	r11, r27
    40bc:	a0 f1       	brcs	.+104    	; 0x4126 <twi_writeTo+0x18a>
    40be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    40c2:	83 fd       	sbrc	r24, 3
    40c4:	d7 cf       	rjmp	.-82     	; 0x4074 <twi_writeTo+0xd8>
    40c6:	85 ec       	ldi	r24, 0xC5	; 197
    40c8:	01 c0       	rjmp	.+2      	; 0x40cc <twi_writeTo+0x130>
    40ca:	85 ee       	ldi	r24, 0xE5	; 229
    40cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    40d0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    40d4:	6b 01       	movw	r12, r22
    40d6:	7c 01       	movw	r14, r24
    40d8:	11 23       	and	r17, r17
    40da:	59 f1       	breq	.+86     	; 0x4132 <twi_writeTo+0x196>
    40dc:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <twi_state>
    40e0:	82 30       	cpi	r24, 0x02	; 2
    40e2:	39 f5       	brne	.+78     	; 0x4132 <twi_writeTo+0x196>
    40e4:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_timeout_us>
    40e8:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    40ec:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    40f0:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    40f4:	89 2b       	or	r24, r25
    40f6:	8a 2b       	or	r24, r26
    40f8:	8b 2b       	or	r24, r27
    40fa:	71 f3       	breq	.-36     	; 0x40d8 <twi_writeTo+0x13c>
    40fc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <micros>
    4100:	80 90 73 03 	lds	r8, 0x0373	; 0x800373 <twi_timeout_us>
    4104:	90 90 74 03 	lds	r9, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    4108:	a0 90 75 03 	lds	r10, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    410c:	b0 90 76 03 	lds	r11, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	8c 19       	sub	r24, r12
    4116:	9d 09       	sbc	r25, r13
    4118:	ae 09       	sbc	r26, r14
    411a:	bf 09       	sbc	r27, r15
    411c:	88 16       	cp	r8, r24
    411e:	99 06       	cpc	r9, r25
    4120:	aa 06       	cpc	r10, r26
    4122:	bb 06       	cpc	r11, r27
    4124:	c8 f6       	brcc	.-78     	; 0x40d8 <twi_writeTo+0x13c>
    4126:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_do_reset_on_timeout>
    412a:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <twi_handleTimeout>
    412e:	c5 e0       	ldi	r28, 0x05	; 5
    4130:	13 c0       	rjmp	.+38     	; 0x4158 <twi_writeTo+0x1bc>
    4132:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <twi_error>
    4136:	8f 3f       	cpi	r24, 0xFF	; 255
    4138:	79 f0       	breq	.+30     	; 0x4158 <twi_writeTo+0x1bc>
    413a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <twi_error>
    413e:	80 32       	cpi	r24, 0x20	; 32
    4140:	41 f0       	breq	.+16     	; 0x4152 <twi_writeTo+0x1b6>
    4142:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <twi_error>
    4146:	80 33       	cpi	r24, 0x30	; 48
    4148:	31 f0       	breq	.+12     	; 0x4156 <twi_writeTo+0x1ba>
    414a:	c4 e0       	ldi	r28, 0x04	; 4
    414c:	05 c0       	rjmp	.+10     	; 0x4158 <twi_writeTo+0x1bc>
    414e:	c1 e0       	ldi	r28, 0x01	; 1
    4150:	03 c0       	rjmp	.+6      	; 0x4158 <twi_writeTo+0x1bc>
    4152:	c2 e0       	ldi	r28, 0x02	; 2
    4154:	01 c0       	rjmp	.+2      	; 0x4158 <twi_writeTo+0x1bc>
    4156:	c3 e0       	ldi	r28, 0x03	; 3
    4158:	8c 2f       	mov	r24, r28
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	1f 91       	pop	r17
    4160:	0f 91       	pop	r16
    4162:	ff 90       	pop	r15
    4164:	ef 90       	pop	r14
    4166:	df 90       	pop	r13
    4168:	cf 90       	pop	r12
    416a:	bf 90       	pop	r11
    416c:	af 90       	pop	r10
    416e:	9f 90       	pop	r9
    4170:	8f 90       	pop	r8
    4172:	7f 90       	pop	r7
    4174:	6f 90       	pop	r6
    4176:	5f 90       	pop	r5
    4178:	4f 90       	pop	r4
    417a:	08 95       	ret

0000417c <twi_stop>:
    417c:	85 ed       	ldi	r24, 0xD5	; 213
    417e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4182:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <twi_timeout_us>
    4186:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    418a:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    418e:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    4192:	07 96       	adiw	r24, 0x07	; 7
    4194:	a1 1d       	adc	r26, r1
    4196:	b1 1d       	adc	r27, r1
    4198:	23 e0       	ldi	r18, 0x03	; 3
    419a:	b6 95       	lsr	r27
    419c:	a7 95       	ror	r26
    419e:	97 95       	ror	r25
    41a0:	87 95       	ror	r24
    41a2:	2a 95       	dec	r18
    41a4:	d1 f7       	brne	.-12     	; 0x419a <twi_stop+0x1e>
    41a6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    41aa:	24 ff       	sbrs	r18, 4
    41ac:	1c c0       	rjmp	.+56     	; 0x41e6 <twi_stop+0x6a>
    41ae:	40 91 73 03 	lds	r20, 0x0373	; 0x800373 <twi_timeout_us>
    41b2:	50 91 74 03 	lds	r21, 0x0374	; 0x800374 <twi_timeout_us+0x1>
    41b6:	60 91 75 03 	lds	r22, 0x0375	; 0x800375 <twi_timeout_us+0x2>
    41ba:	70 91 76 03 	lds	r23, 0x0376	; 0x800376 <twi_timeout_us+0x3>
    41be:	45 2b       	or	r20, r21
    41c0:	46 2b       	or	r20, r22
    41c2:	47 2b       	or	r20, r23
    41c4:	81 f3       	breq	.-32     	; 0x41a6 <twi_stop+0x2a>
    41c6:	00 97       	sbiw	r24, 0x00	; 0
    41c8:	a1 05       	cpc	r26, r1
    41ca:	b1 05       	cpc	r27, r1
    41cc:	41 f0       	breq	.+16     	; 0x41de <twi_stop+0x62>
    41ce:	2a e1       	ldi	r18, 0x1A	; 26
    41d0:	2a 95       	dec	r18
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <twi_stop+0x54>
    41d4:	00 c0       	rjmp	.+0      	; 0x41d6 <twi_stop+0x5a>
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	a1 09       	sbc	r26, r1
    41da:	b1 09       	sbc	r27, r1
    41dc:	e4 cf       	rjmp	.-56     	; 0x41a6 <twi_stop+0x2a>
    41de:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <twi_do_reset_on_timeout>
    41e2:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <twi_handleTimeout>
    41e6:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    41ea:	08 95       	ret

000041ec <__vector_24>:

ISR(TWI_vect)
{
    41ec:	1f 92       	push	r1
    41ee:	0f 92       	push	r0
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	0f 92       	push	r0
    41f4:	11 24       	eor	r1, r1
    41f6:	2f 93       	push	r18
    41f8:	3f 93       	push	r19
    41fa:	4f 93       	push	r20
    41fc:	5f 93       	push	r21
    41fe:	6f 93       	push	r22
    4200:	7f 93       	push	r23
    4202:	8f 93       	push	r24
    4204:	9f 93       	push	r25
    4206:	af 93       	push	r26
    4208:	bf 93       	push	r27
    420a:	ef 93       	push	r30
    420c:	ff 93       	push	r31
  switch(TW_STATUS){
    420e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4212:	88 7f       	andi	r24, 0xF8	; 248
    4214:	80 36       	cpi	r24, 0x60	; 96
    4216:	09 f4       	brne	.+2      	; 0x421a <__vector_24+0x2e>
    4218:	9e c0       	rjmp	.+316    	; 0x4356 <__vector_24+0x16a>
    421a:	78 f5       	brcc	.+94     	; 0x427a <__vector_24+0x8e>
    421c:	88 32       	cpi	r24, 0x28	; 40
    421e:	09 f4       	brne	.+2      	; 0x4222 <__vector_24+0x36>
    4220:	5d c0       	rjmp	.+186    	; 0x42dc <__vector_24+0xf0>
    4222:	90 f4       	brcc	.+36     	; 0x4248 <__vector_24+0x5c>
    4224:	80 31       	cpi	r24, 0x10	; 16
    4226:	09 f4       	brne	.+2      	; 0x422a <__vector_24+0x3e>
    4228:	56 c0       	rjmp	.+172    	; 0x42d6 <__vector_24+0xea>
    422a:	38 f4       	brcc	.+14     	; 0x423a <__vector_24+0x4e>
    422c:	88 23       	and	r24, r24
    422e:	09 f4       	brne	.+2      	; 0x4232 <__vector_24+0x46>
    4230:	f5 c0       	rjmp	.+490    	; 0x441c <__vector_24+0x230>
    4232:	88 30       	cpi	r24, 0x08	; 8
    4234:	09 f4       	brne	.+2      	; 0x4238 <__vector_24+0x4c>
    4236:	4f c0       	rjmp	.+158    	; 0x42d6 <__vector_24+0xea>
    4238:	f5 c0       	rjmp	.+490    	; 0x4424 <__vector_24+0x238>
    423a:	88 31       	cpi	r24, 0x18	; 24
    423c:	09 f4       	brne	.+2      	; 0x4240 <__vector_24+0x54>
    423e:	4e c0       	rjmp	.+156    	; 0x42dc <__vector_24+0xf0>
    4240:	80 32       	cpi	r24, 0x20	; 32
    4242:	09 f4       	brne	.+2      	; 0x4246 <__vector_24+0x5a>
    4244:	5f c0       	rjmp	.+190    	; 0x4304 <__vector_24+0x118>
    4246:	ee c0       	rjmp	.+476    	; 0x4424 <__vector_24+0x238>
    4248:	80 34       	cpi	r24, 0x40	; 64
    424a:	09 f4       	brne	.+2      	; 0x424e <__vector_24+0x62>
    424c:	6a c0       	rjmp	.+212    	; 0x4322 <__vector_24+0x136>
    424e:	58 f4       	brcc	.+22     	; 0x4266 <__vector_24+0x7a>
    4250:	80 33       	cpi	r24, 0x30	; 48
    4252:	09 f4       	brne	.+2      	; 0x4256 <__vector_24+0x6a>
    4254:	57 c0       	rjmp	.+174    	; 0x4304 <__vector_24+0x118>
    4256:	88 33       	cpi	r24, 0x38	; 56
    4258:	09 f0       	breq	.+2      	; 0x425c <__vector_24+0x70>
    425a:	e4 c0       	rjmp	.+456    	; 0x4424 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    425c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_error>
      twi_releaseBus();
    4260:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <twi_releaseBus>
      break;
    4264:	df c0       	rjmp	.+446    	; 0x4424 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4266:	80 35       	cpi	r24, 0x50	; 80
    4268:	09 f4       	brne	.+2      	; 0x426c <__vector_24+0x80>
    426a:	4f c0       	rjmp	.+158    	; 0x430a <__vector_24+0x11e>
    426c:	88 35       	cpi	r24, 0x58	; 88
    426e:	09 f4       	brne	.+2      	; 0x4272 <__vector_24+0x86>
    4270:	5d c0       	rjmp	.+186    	; 0x432c <__vector_24+0x140>
    4272:	88 34       	cpi	r24, 0x48	; 72
    4274:	09 f0       	breq	.+2      	; 0x4278 <__vector_24+0x8c>
    4276:	d6 c0       	rjmp	.+428    	; 0x4424 <__vector_24+0x238>
    4278:	d3 c0       	rjmp	.+422    	; 0x4420 <__vector_24+0x234>
    427a:	88 39       	cpi	r24, 0x98	; 152
    427c:	09 f4       	brne	.+2      	; 0x4280 <__vector_24+0x94>
    427e:	c4 c0       	rjmp	.+392    	; 0x4408 <__vector_24+0x21c>
    4280:	a8 f4       	brcc	.+42     	; 0x42ac <__vector_24+0xc0>
    4282:	88 37       	cpi	r24, 0x78	; 120
    4284:	09 f4       	brne	.+2      	; 0x4288 <__vector_24+0x9c>
    4286:	67 c0       	rjmp	.+206    	; 0x4356 <__vector_24+0x16a>
    4288:	38 f4       	brcc	.+14     	; 0x4298 <__vector_24+0xac>
    428a:	88 36       	cpi	r24, 0x68	; 104
    428c:	09 f4       	brne	.+2      	; 0x4290 <__vector_24+0xa4>
    428e:	63 c0       	rjmp	.+198    	; 0x4356 <__vector_24+0x16a>
    4290:	80 37       	cpi	r24, 0x70	; 112
    4292:	09 f4       	brne	.+2      	; 0x4296 <__vector_24+0xaa>
    4294:	60 c0       	rjmp	.+192    	; 0x4356 <__vector_24+0x16a>
    4296:	c6 c0       	rjmp	.+396    	; 0x4424 <__vector_24+0x238>
    4298:	88 38       	cpi	r24, 0x88	; 136
    429a:	09 f4       	brne	.+2      	; 0x429e <__vector_24+0xb2>
    429c:	b5 c0       	rjmp	.+362    	; 0x4408 <__vector_24+0x21c>
    429e:	80 39       	cpi	r24, 0x90	; 144
    42a0:	09 f4       	brne	.+2      	; 0x42a4 <__vector_24+0xb8>
    42a2:	5f c0       	rjmp	.+190    	; 0x4362 <__vector_24+0x176>
    42a4:	80 38       	cpi	r24, 0x80	; 128
    42a6:	09 f0       	breq	.+2      	; 0x42aa <__vector_24+0xbe>
    42a8:	bd c0       	rjmp	.+378    	; 0x4424 <__vector_24+0x238>
    42aa:	5b c0       	rjmp	.+182    	; 0x4362 <__vector_24+0x176>
    42ac:	80 3b       	cpi	r24, 0xB0	; 176
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <__vector_24+0xc6>
    42b0:	83 c0       	rjmp	.+262    	; 0x43b8 <__vector_24+0x1cc>
    42b2:	38 f4       	brcc	.+14     	; 0x42c2 <__vector_24+0xd6>
    42b4:	80 3a       	cpi	r24, 0xA0	; 160
    42b6:	09 f4       	brne	.+2      	; 0x42ba <__vector_24+0xce>
    42b8:	66 c0       	rjmp	.+204    	; 0x4386 <__vector_24+0x19a>
    42ba:	88 3a       	cpi	r24, 0xA8	; 168
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <__vector_24+0xd4>
    42be:	7c c0       	rjmp	.+248    	; 0x43b8 <__vector_24+0x1cc>
    42c0:	b1 c0       	rjmp	.+354    	; 0x4424 <__vector_24+0x238>
    42c2:	80 3c       	cpi	r24, 0xC0	; 192
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <__vector_24+0xdc>
    42c6:	a4 c0       	rjmp	.+328    	; 0x4410 <__vector_24+0x224>
    42c8:	88 3c       	cpi	r24, 0xC8	; 200
    42ca:	09 f4       	brne	.+2      	; 0x42ce <__vector_24+0xe2>
    42cc:	a1 c0       	rjmp	.+322    	; 0x4410 <__vector_24+0x224>
    42ce:	88 3b       	cpi	r24, 0xB8	; 184
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <__vector_24+0xe8>
    42d2:	87 c0       	rjmp	.+270    	; 0x43e2 <__vector_24+0x1f6>
    42d4:	a7 c0       	rjmp	.+334    	; 0x4424 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    42d6:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <twi_slarw>
    42da:	10 c0       	rjmp	.+32     	; 0x42fc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    42dc:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <twi_masterBufferIndex>
    42e0:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_masterBufferLength>
    42e4:	98 17       	cp	r25, r24
    42e6:	70 f5       	brcc	.+92     	; 0x4344 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    42e8:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <twi_masterBufferIndex>
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	8e 0f       	add	r24, r30
    42f0:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_masterBufferIndex>
    42f4:	f0 e0       	ldi	r31, 0x00	; 0
    42f6:	e3 5b       	subi	r30, 0xB3	; 179
    42f8:	fc 4f       	sbci	r31, 0xFC	; 252
    42fa:	80 81       	ld	r24, Z
    42fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4300:	85 ec       	ldi	r24, 0xC5	; 197
    4302:	83 c0       	rjmp	.+262    	; 0x440a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4304:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_error>
    4308:	8b c0       	rjmp	.+278    	; 0x4420 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    430a:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <twi_masterBufferIndex>
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	8e 0f       	add	r24, r30
    4312:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_masterBufferIndex>
    4316:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	e3 5b       	subi	r30, 0xB3	; 179
    431e:	fc 4f       	sbci	r31, 0xFC	; 252
    4320:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4322:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <twi_masterBufferIndex>
    4326:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <twi_masterBufferLength>
    432a:	6b c0       	rjmp	.+214    	; 0x4402 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    432c:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <twi_masterBufferIndex>
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	8e 0f       	add	r24, r30
    4334:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_masterBufferIndex>
    4338:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	e3 5b       	subi	r30, 0xB3	; 179
    4340:	fc 4f       	sbci	r31, 0xFC	; 252
    4342:	80 83       	st	Z, r24
      if (twi_sendStop){
    4344:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <twi_sendStop>
    4348:	81 11       	cpse	r24, r1
    434a:	6a c0       	rjmp	.+212    	; 0x4420 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4352:	84 ea       	ldi	r24, 0xA4	; 164
    4354:	5e c0       	rjmp	.+188    	; 0x4412 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4356:	83 e0       	ldi	r24, 0x03	; 3
    4358:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    435c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_rxBufferIndex>
    4360:	cf cf       	rjmp	.-98     	; 0x4300 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4362:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_rxBufferIndex>
    4366:	80 32       	cpi	r24, 0x20	; 32
    4368:	08 f0       	brcs	.+2      	; 0x436c <__vector_24+0x180>
    436a:	4e c0       	rjmp	.+156    	; 0x4408 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    436c:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <twi_rxBufferIndex>
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	8e 0f       	add	r24, r30
    4374:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <twi_rxBufferIndex>
    4378:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	e7 5f       	subi	r30, 0xF7	; 247
    4380:	fc 4f       	sbci	r31, 0xFC	; 252
    4382:	80 83       	st	Z, r24
    4384:	bd cf       	rjmp	.-134    	; 0x4300 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4386:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    438a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_rxBufferIndex>
    438e:	80 32       	cpi	r24, 0x20	; 32
    4390:	30 f4       	brcc	.+12     	; 0x439e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4392:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <twi_rxBufferIndex>
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	e7 5f       	subi	r30, 0xF7	; 247
    439a:	fc 4f       	sbci	r31, 0xFC	; 252
    439c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    439e:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <twi_rxBufferIndex>
    43a2:	70 e0       	ldi	r23, 0x00	; 0
    43a4:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <twi_onSlaveReceive>
    43a8:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <twi_onSlaveReceive+0x1>
    43ac:	89 e0       	ldi	r24, 0x09	; 9
    43ae:	93 e0       	ldi	r25, 0x03	; 3
    43b0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    43b2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_rxBufferIndex>
      break;
    43b6:	36 c0       	rjmp	.+108    	; 0x4424 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    43b8:	84 e0       	ldi	r24, 0x04	; 4
    43ba:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    43be:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    43c2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    43c6:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <twi_onSlaveTransmit>
    43ca:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <twi_onSlaveTransmit+0x1>
    43ce:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    43d0:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_txBufferLength>
    43d4:	81 11       	cpse	r24, r1
    43d6:	05 c0       	rjmp	.+10     	; 0x43e2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    43de:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    43e2:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <twi_txBufferIndex>
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	8e 0f       	add	r24, r30
    43ea:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <twi_txBufferIndex>
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	e5 5d       	subi	r30, 0xD5	; 213
    43f2:	fc 4f       	sbci	r31, 0xFC	; 252
    43f4:	80 81       	ld	r24, Z
    43f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    43fa:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <twi_txBufferIndex>
    43fe:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_txBufferLength>
    4402:	98 17       	cp	r25, r24
    4404:	08 f4       	brcc	.+2      	; 0x4408 <__vector_24+0x21c>
    4406:	7c cf       	rjmp	.-264    	; 0x4300 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4408:	85 e8       	ldi	r24, 0x85	; 133
    440a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    440e:	0a c0       	rjmp	.+20     	; 0x4424 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4410:	85 ec       	ldi	r24, 0xC5	; 197
    4412:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4416:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
      break;
    441a:	04 c0       	rjmp	.+8      	; 0x4424 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    441c:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_error>
      twi_stop();
    4420:	0e 94 be 20 	call	0x417c	; 0x417c <twi_stop>
      break;
  }
}
    4424:	ff 91       	pop	r31
    4426:	ef 91       	pop	r30
    4428:	bf 91       	pop	r27
    442a:	af 91       	pop	r26
    442c:	9f 91       	pop	r25
    442e:	8f 91       	pop	r24
    4430:	7f 91       	pop	r23
    4432:	6f 91       	pop	r22
    4434:	5f 91       	pop	r21
    4436:	4f 91       	pop	r20
    4438:	3f 91       	pop	r19
    443a:	2f 91       	pop	r18
    443c:	0f 90       	pop	r0
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	0f 90       	pop	r0
    4442:	1f 90       	pop	r1
    4444:	18 95       	reti

00004446 <__udivmodsi4>:
    4446:	a1 e2       	ldi	r26, 0x21	; 33
    4448:	1a 2e       	mov	r1, r26
    444a:	aa 1b       	sub	r26, r26
    444c:	bb 1b       	sub	r27, r27
    444e:	fd 01       	movw	r30, r26
    4450:	0d c0       	rjmp	.+26     	; 0x446c <__udivmodsi4_ep>

00004452 <__udivmodsi4_loop>:
    4452:	aa 1f       	adc	r26, r26
    4454:	bb 1f       	adc	r27, r27
    4456:	ee 1f       	adc	r30, r30
    4458:	ff 1f       	adc	r31, r31
    445a:	a2 17       	cp	r26, r18
    445c:	b3 07       	cpc	r27, r19
    445e:	e4 07       	cpc	r30, r20
    4460:	f5 07       	cpc	r31, r21
    4462:	20 f0       	brcs	.+8      	; 0x446c <__udivmodsi4_ep>
    4464:	a2 1b       	sub	r26, r18
    4466:	b3 0b       	sbc	r27, r19
    4468:	e4 0b       	sbc	r30, r20
    446a:	f5 0b       	sbc	r31, r21

0000446c <__udivmodsi4_ep>:
    446c:	66 1f       	adc	r22, r22
    446e:	77 1f       	adc	r23, r23
    4470:	88 1f       	adc	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	1a 94       	dec	r1
    4476:	69 f7       	brne	.-38     	; 0x4452 <__udivmodsi4_loop>
    4478:	60 95       	com	r22
    447a:	70 95       	com	r23
    447c:	80 95       	com	r24
    447e:	90 95       	com	r25
    4480:	9b 01       	movw	r18, r22
    4482:	ac 01       	movw	r20, r24
    4484:	bd 01       	movw	r22, r26
    4486:	cf 01       	movw	r24, r30
    4488:	08 95       	ret

0000448a <__divmodsi4>:
    448a:	05 2e       	mov	r0, r21
    448c:	97 fb       	bst	r25, 7
    448e:	1e f4       	brtc	.+6      	; 0x4496 <__divmodsi4+0xc>
    4490:	00 94       	com	r0
    4492:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__negsi2>
    4496:	57 fd       	sbrc	r21, 7
    4498:	07 d0       	rcall	.+14     	; 0x44a8 <__divmodsi4_neg2>
    449a:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodsi4>
    449e:	07 fc       	sbrc	r0, 7
    44a0:	03 d0       	rcall	.+6      	; 0x44a8 <__divmodsi4_neg2>
    44a2:	4e f4       	brtc	.+18     	; 0x44b6 <__divmodsi4_exit>
    44a4:	0c 94 5c 22 	jmp	0x44b8	; 0x44b8 <__negsi2>

000044a8 <__divmodsi4_neg2>:
    44a8:	50 95       	com	r21
    44aa:	40 95       	com	r20
    44ac:	30 95       	com	r19
    44ae:	21 95       	neg	r18
    44b0:	3f 4f       	sbci	r19, 0xFF	; 255
    44b2:	4f 4f       	sbci	r20, 0xFF	; 255
    44b4:	5f 4f       	sbci	r21, 0xFF	; 255

000044b6 <__divmodsi4_exit>:
    44b6:	08 95       	ret

000044b8 <__negsi2>:
    44b8:	90 95       	com	r25
    44ba:	80 95       	com	r24
    44bc:	70 95       	com	r23
    44be:	61 95       	neg	r22
    44c0:	7f 4f       	sbci	r23, 0xFF	; 255
    44c2:	8f 4f       	sbci	r24, 0xFF	; 255
    44c4:	9f 4f       	sbci	r25, 0xFF	; 255
    44c6:	08 95       	ret

000044c8 <__umulhisi3>:
    44c8:	a2 9f       	mul	r26, r18
    44ca:	b0 01       	movw	r22, r0
    44cc:	b3 9f       	mul	r27, r19
    44ce:	c0 01       	movw	r24, r0
    44d0:	a3 9f       	mul	r26, r19
    44d2:	70 0d       	add	r23, r0
    44d4:	81 1d       	adc	r24, r1
    44d6:	11 24       	eor	r1, r1
    44d8:	91 1d       	adc	r25, r1
    44da:	b2 9f       	mul	r27, r18
    44dc:	70 0d       	add	r23, r0
    44de:	81 1d       	adc	r24, r1
    44e0:	11 24       	eor	r1, r1
    44e2:	91 1d       	adc	r25, r1
    44e4:	08 95       	ret

000044e6 <__muluhisi3>:
    44e6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__umulhisi3>
    44ea:	a5 9f       	mul	r26, r21
    44ec:	90 0d       	add	r25, r0
    44ee:	b4 9f       	mul	r27, r20
    44f0:	90 0d       	add	r25, r0
    44f2:	a4 9f       	mul	r26, r20
    44f4:	80 0d       	add	r24, r0
    44f6:	91 1d       	adc	r25, r1
    44f8:	11 24       	eor	r1, r1
    44fa:	08 95       	ret

000044fc <__tablejump2__>:
    44fc:	ee 0f       	add	r30, r30
    44fe:	ff 1f       	adc	r31, r31
    4500:	05 90       	lpm	r0, Z+
    4502:	f4 91       	lpm	r31, Z
    4504:	e0 2d       	mov	r30, r0
    4506:	09 94       	ijmp

00004508 <malloc>:
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	82 30       	cpi	r24, 0x02	; 2
    4512:	91 05       	cpc	r25, r1
    4514:	10 f4       	brcc	.+4      	; 0x451a <malloc+0x12>
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <__flp>
    451e:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <__flp+0x1>
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	a0 e0       	ldi	r26, 0x00	; 0
    4528:	b0 e0       	ldi	r27, 0x00	; 0
    452a:	30 97       	sbiw	r30, 0x00	; 0
    452c:	19 f1       	breq	.+70     	; 0x4574 <malloc+0x6c>
    452e:	40 81       	ld	r20, Z
    4530:	51 81       	ldd	r21, Z+1	; 0x01
    4532:	02 81       	ldd	r16, Z+2	; 0x02
    4534:	13 81       	ldd	r17, Z+3	; 0x03
    4536:	48 17       	cp	r20, r24
    4538:	59 07       	cpc	r21, r25
    453a:	c8 f0       	brcs	.+50     	; 0x456e <malloc+0x66>
    453c:	84 17       	cp	r24, r20
    453e:	95 07       	cpc	r25, r21
    4540:	69 f4       	brne	.+26     	; 0x455c <malloc+0x54>
    4542:	10 97       	sbiw	r26, 0x00	; 0
    4544:	31 f0       	breq	.+12     	; 0x4552 <malloc+0x4a>
    4546:	12 96       	adiw	r26, 0x02	; 2
    4548:	0c 93       	st	X, r16
    454a:	12 97       	sbiw	r26, 0x02	; 2
    454c:	13 96       	adiw	r26, 0x03	; 3
    454e:	1c 93       	st	X, r17
    4550:	27 c0       	rjmp	.+78     	; 0x45a0 <malloc+0x98>
    4552:	00 93 7d 03 	sts	0x037D, r16	; 0x80037d <__flp>
    4556:	10 93 7e 03 	sts	0x037E, r17	; 0x80037e <__flp+0x1>
    455a:	22 c0       	rjmp	.+68     	; 0x45a0 <malloc+0x98>
    455c:	21 15       	cp	r18, r1
    455e:	31 05       	cpc	r19, r1
    4560:	19 f0       	breq	.+6      	; 0x4568 <malloc+0x60>
    4562:	42 17       	cp	r20, r18
    4564:	53 07       	cpc	r21, r19
    4566:	18 f4       	brcc	.+6      	; 0x456e <malloc+0x66>
    4568:	9a 01       	movw	r18, r20
    456a:	bd 01       	movw	r22, r26
    456c:	ef 01       	movw	r28, r30
    456e:	df 01       	movw	r26, r30
    4570:	f8 01       	movw	r30, r16
    4572:	db cf       	rjmp	.-74     	; 0x452a <malloc+0x22>
    4574:	21 15       	cp	r18, r1
    4576:	31 05       	cpc	r19, r1
    4578:	f9 f0       	breq	.+62     	; 0x45b8 <malloc+0xb0>
    457a:	28 1b       	sub	r18, r24
    457c:	39 0b       	sbc	r19, r25
    457e:	24 30       	cpi	r18, 0x04	; 4
    4580:	31 05       	cpc	r19, r1
    4582:	80 f4       	brcc	.+32     	; 0x45a4 <malloc+0x9c>
    4584:	8a 81       	ldd	r24, Y+2	; 0x02
    4586:	9b 81       	ldd	r25, Y+3	; 0x03
    4588:	61 15       	cp	r22, r1
    458a:	71 05       	cpc	r23, r1
    458c:	21 f0       	breq	.+8      	; 0x4596 <malloc+0x8e>
    458e:	fb 01       	movw	r30, r22
    4590:	93 83       	std	Z+3, r25	; 0x03
    4592:	82 83       	std	Z+2, r24	; 0x02
    4594:	04 c0       	rjmp	.+8      	; 0x459e <malloc+0x96>
    4596:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <__flp+0x1>
    459a:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <__flp>
    459e:	fe 01       	movw	r30, r28
    45a0:	32 96       	adiw	r30, 0x02	; 2
    45a2:	44 c0       	rjmp	.+136    	; 0x462c <malloc+0x124>
    45a4:	fe 01       	movw	r30, r28
    45a6:	e2 0f       	add	r30, r18
    45a8:	f3 1f       	adc	r31, r19
    45aa:	81 93       	st	Z+, r24
    45ac:	91 93       	st	Z+, r25
    45ae:	22 50       	subi	r18, 0x02	; 2
    45b0:	31 09       	sbc	r19, r1
    45b2:	39 83       	std	Y+1, r19	; 0x01
    45b4:	28 83       	st	Y, r18
    45b6:	3a c0       	rjmp	.+116    	; 0x462c <malloc+0x124>
    45b8:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <__brkval>
    45bc:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <__brkval+0x1>
    45c0:	23 2b       	or	r18, r19
    45c2:	41 f4       	brne	.+16     	; 0x45d4 <malloc+0xcc>
    45c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    45c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    45cc:	30 93 7c 03 	sts	0x037C, r19	; 0x80037c <__brkval+0x1>
    45d0:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <__brkval>
    45d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    45d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    45dc:	21 15       	cp	r18, r1
    45de:	31 05       	cpc	r19, r1
    45e0:	41 f4       	brne	.+16     	; 0x45f2 <malloc+0xea>
    45e2:	2d b7       	in	r18, 0x3d	; 61
    45e4:	3e b7       	in	r19, 0x3e	; 62
    45e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    45ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    45ee:	24 1b       	sub	r18, r20
    45f0:	35 0b       	sbc	r19, r21
    45f2:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <__brkval>
    45f6:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <__brkval+0x1>
    45fa:	e2 17       	cp	r30, r18
    45fc:	f3 07       	cpc	r31, r19
    45fe:	a0 f4       	brcc	.+40     	; 0x4628 <malloc+0x120>
    4600:	2e 1b       	sub	r18, r30
    4602:	3f 0b       	sbc	r19, r31
    4604:	28 17       	cp	r18, r24
    4606:	39 07       	cpc	r19, r25
    4608:	78 f0       	brcs	.+30     	; 0x4628 <malloc+0x120>
    460a:	ac 01       	movw	r20, r24
    460c:	4e 5f       	subi	r20, 0xFE	; 254
    460e:	5f 4f       	sbci	r21, 0xFF	; 255
    4610:	24 17       	cp	r18, r20
    4612:	35 07       	cpc	r19, r21
    4614:	48 f0       	brcs	.+18     	; 0x4628 <malloc+0x120>
    4616:	4e 0f       	add	r20, r30
    4618:	5f 1f       	adc	r21, r31
    461a:	50 93 7c 03 	sts	0x037C, r21	; 0x80037c <__brkval+0x1>
    461e:	40 93 7b 03 	sts	0x037B, r20	; 0x80037b <__brkval>
    4622:	81 93       	st	Z+, r24
    4624:	91 93       	st	Z+, r25
    4626:	02 c0       	rjmp	.+4      	; 0x462c <malloc+0x124>
    4628:	e0 e0       	ldi	r30, 0x00	; 0
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	cf 01       	movw	r24, r30
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	08 95       	ret

00004638 <free>:
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	09 f4       	brne	.+2      	; 0x4642 <free+0xa>
    4640:	81 c0       	rjmp	.+258    	; 0x4744 <free+0x10c>
    4642:	fc 01       	movw	r30, r24
    4644:	32 97       	sbiw	r30, 0x02	; 2
    4646:	13 82       	std	Z+3, r1	; 0x03
    4648:	12 82       	std	Z+2, r1	; 0x02
    464a:	a0 91 7d 03 	lds	r26, 0x037D	; 0x80037d <__flp>
    464e:	b0 91 7e 03 	lds	r27, 0x037E	; 0x80037e <__flp+0x1>
    4652:	10 97       	sbiw	r26, 0x00	; 0
    4654:	81 f4       	brne	.+32     	; 0x4676 <free+0x3e>
    4656:	20 81       	ld	r18, Z
    4658:	31 81       	ldd	r19, Z+1	; 0x01
    465a:	82 0f       	add	r24, r18
    465c:	93 1f       	adc	r25, r19
    465e:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <__brkval>
    4662:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <__brkval+0x1>
    4666:	28 17       	cp	r18, r24
    4668:	39 07       	cpc	r19, r25
    466a:	51 f5       	brne	.+84     	; 0x46c0 <free+0x88>
    466c:	f0 93 7c 03 	sts	0x037C, r31	; 0x80037c <__brkval+0x1>
    4670:	e0 93 7b 03 	sts	0x037B, r30	; 0x80037b <__brkval>
    4674:	67 c0       	rjmp	.+206    	; 0x4744 <free+0x10c>
    4676:	ed 01       	movw	r28, r26
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	ce 17       	cp	r28, r30
    467e:	df 07       	cpc	r29, r31
    4680:	40 f4       	brcc	.+16     	; 0x4692 <free+0x5a>
    4682:	4a 81       	ldd	r20, Y+2	; 0x02
    4684:	5b 81       	ldd	r21, Y+3	; 0x03
    4686:	9e 01       	movw	r18, r28
    4688:	41 15       	cp	r20, r1
    468a:	51 05       	cpc	r21, r1
    468c:	f1 f0       	breq	.+60     	; 0x46ca <free+0x92>
    468e:	ea 01       	movw	r28, r20
    4690:	f5 cf       	rjmp	.-22     	; 0x467c <free+0x44>
    4692:	d3 83       	std	Z+3, r29	; 0x03
    4694:	c2 83       	std	Z+2, r28	; 0x02
    4696:	40 81       	ld	r20, Z
    4698:	51 81       	ldd	r21, Z+1	; 0x01
    469a:	84 0f       	add	r24, r20
    469c:	95 1f       	adc	r25, r21
    469e:	c8 17       	cp	r28, r24
    46a0:	d9 07       	cpc	r29, r25
    46a2:	59 f4       	brne	.+22     	; 0x46ba <free+0x82>
    46a4:	88 81       	ld	r24, Y
    46a6:	99 81       	ldd	r25, Y+1	; 0x01
    46a8:	84 0f       	add	r24, r20
    46aa:	95 1f       	adc	r25, r21
    46ac:	02 96       	adiw	r24, 0x02	; 2
    46ae:	91 83       	std	Z+1, r25	; 0x01
    46b0:	80 83       	st	Z, r24
    46b2:	8a 81       	ldd	r24, Y+2	; 0x02
    46b4:	9b 81       	ldd	r25, Y+3	; 0x03
    46b6:	93 83       	std	Z+3, r25	; 0x03
    46b8:	82 83       	std	Z+2, r24	; 0x02
    46ba:	21 15       	cp	r18, r1
    46bc:	31 05       	cpc	r19, r1
    46be:	29 f4       	brne	.+10     	; 0x46ca <free+0x92>
    46c0:	f0 93 7e 03 	sts	0x037E, r31	; 0x80037e <__flp+0x1>
    46c4:	e0 93 7d 03 	sts	0x037D, r30	; 0x80037d <__flp>
    46c8:	3d c0       	rjmp	.+122    	; 0x4744 <free+0x10c>
    46ca:	e9 01       	movw	r28, r18
    46cc:	fb 83       	std	Y+3, r31	; 0x03
    46ce:	ea 83       	std	Y+2, r30	; 0x02
    46d0:	49 91       	ld	r20, Y+
    46d2:	59 91       	ld	r21, Y+
    46d4:	c4 0f       	add	r28, r20
    46d6:	d5 1f       	adc	r29, r21
    46d8:	ec 17       	cp	r30, r28
    46da:	fd 07       	cpc	r31, r29
    46dc:	61 f4       	brne	.+24     	; 0x46f6 <free+0xbe>
    46de:	80 81       	ld	r24, Z
    46e0:	91 81       	ldd	r25, Z+1	; 0x01
    46e2:	84 0f       	add	r24, r20
    46e4:	95 1f       	adc	r25, r21
    46e6:	02 96       	adiw	r24, 0x02	; 2
    46e8:	e9 01       	movw	r28, r18
    46ea:	99 83       	std	Y+1, r25	; 0x01
    46ec:	88 83       	st	Y, r24
    46ee:	82 81       	ldd	r24, Z+2	; 0x02
    46f0:	93 81       	ldd	r25, Z+3	; 0x03
    46f2:	9b 83       	std	Y+3, r25	; 0x03
    46f4:	8a 83       	std	Y+2, r24	; 0x02
    46f6:	e0 e0       	ldi	r30, 0x00	; 0
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	12 96       	adiw	r26, 0x02	; 2
    46fc:	8d 91       	ld	r24, X+
    46fe:	9c 91       	ld	r25, X
    4700:	13 97       	sbiw	r26, 0x03	; 3
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	19 f0       	breq	.+6      	; 0x470c <free+0xd4>
    4706:	fd 01       	movw	r30, r26
    4708:	dc 01       	movw	r26, r24
    470a:	f7 cf       	rjmp	.-18     	; 0x46fa <free+0xc2>
    470c:	8d 91       	ld	r24, X+
    470e:	9c 91       	ld	r25, X
    4710:	11 97       	sbiw	r26, 0x01	; 1
    4712:	9d 01       	movw	r18, r26
    4714:	2e 5f       	subi	r18, 0xFE	; 254
    4716:	3f 4f       	sbci	r19, 0xFF	; 255
    4718:	82 0f       	add	r24, r18
    471a:	93 1f       	adc	r25, r19
    471c:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <__brkval>
    4720:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <__brkval+0x1>
    4724:	28 17       	cp	r18, r24
    4726:	39 07       	cpc	r19, r25
    4728:	69 f4       	brne	.+26     	; 0x4744 <free+0x10c>
    472a:	30 97       	sbiw	r30, 0x00	; 0
    472c:	29 f4       	brne	.+10     	; 0x4738 <free+0x100>
    472e:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__flp+0x1>
    4732:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <__flp>
    4736:	02 c0       	rjmp	.+4      	; 0x473c <free+0x104>
    4738:	13 82       	std	Z+3, r1	; 0x03
    473a:	12 82       	std	Z+2, r1	; 0x02
    473c:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <__brkval+0x1>
    4740:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <__brkval>
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	08 95       	ret

0000474a <random_r>:
    474a:	8f 92       	push	r8
    474c:	9f 92       	push	r9
    474e:	af 92       	push	r10
    4750:	bf 92       	push	r11
    4752:	cf 92       	push	r12
    4754:	df 92       	push	r13
    4756:	ef 92       	push	r14
    4758:	ff 92       	push	r15
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    475e:	ec 01       	movw	r28, r24
    4760:	68 81       	ld	r22, Y
    4762:	79 81       	ldd	r23, Y+1	; 0x01
    4764:	8a 81       	ldd	r24, Y+2	; 0x02
    4766:	9b 81       	ldd	r25, Y+3	; 0x03
    4768:	61 15       	cp	r22, r1
    476a:	71 05       	cpc	r23, r1
    476c:	81 05       	cpc	r24, r1
    476e:	91 05       	cpc	r25, r1
    4770:	21 f4       	brne	.+8      	; 0x477a <random_r+0x30>
    4772:	64 e2       	ldi	r22, 0x24	; 36
    4774:	79 ed       	ldi	r23, 0xD9	; 217
    4776:	8b e5       	ldi	r24, 0x5B	; 91
    4778:	97 e0       	ldi	r25, 0x07	; 7
    477a:	2d e1       	ldi	r18, 0x1D	; 29
    477c:	33 ef       	ldi	r19, 0xF3	; 243
    477e:	41 e0       	ldi	r20, 0x01	; 1
    4780:	50 e0       	ldi	r21, 0x00	; 0
    4782:	0e 94 45 22 	call	0x448a	; 0x448a <__divmodsi4>
    4786:	49 01       	movw	r8, r18
    4788:	5a 01       	movw	r10, r20
    478a:	9b 01       	movw	r18, r22
    478c:	ac 01       	movw	r20, r24
    478e:	a7 ea       	ldi	r26, 0xA7	; 167
    4790:	b1 e4       	ldi	r27, 0x41	; 65
    4792:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__muluhisi3>
    4796:	6b 01       	movw	r12, r22
    4798:	7c 01       	movw	r14, r24
    479a:	ac ee       	ldi	r26, 0xEC	; 236
    479c:	b4 ef       	ldi	r27, 0xF4	; 244
    479e:	a5 01       	movw	r20, r10
    47a0:	94 01       	movw	r18, r8
    47a2:	0e 94 56 24 	call	0x48ac	; 0x48ac <__mulohisi3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8c 0d       	add	r24, r12
    47ac:	9d 1d       	adc	r25, r13
    47ae:	ae 1d       	adc	r26, r14
    47b0:	bf 1d       	adc	r27, r15
    47b2:	b7 ff       	sbrs	r27, 7
    47b4:	03 c0       	rjmp	.+6      	; 0x47bc <random_r+0x72>
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	a1 09       	sbc	r26, r1
    47ba:	b0 48       	sbci	r27, 0x80	; 128
    47bc:	88 83       	st	Y, r24
    47be:	99 83       	std	Y+1, r25	; 0x01
    47c0:	aa 83       	std	Y+2, r26	; 0x02
    47c2:	bb 83       	std	Y+3, r27	; 0x03
    47c4:	bc 01       	movw	r22, r24
    47c6:	cd 01       	movw	r24, r26
    47c8:	9f 77       	andi	r25, 0x7F	; 127
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	ff 90       	pop	r15
    47d0:	ef 90       	pop	r14
    47d2:	df 90       	pop	r13
    47d4:	cf 90       	pop	r12
    47d6:	bf 90       	pop	r11
    47d8:	af 90       	pop	r10
    47da:	9f 90       	pop	r9
    47dc:	8f 90       	pop	r8
    47de:	08 95       	ret

000047e0 <random>:
    47e0:	8f 92       	push	r8
    47e2:	9f 92       	push	r9
    47e4:	af 92       	push	r10
    47e6:	bf 92       	push	r11
    47e8:	cf 92       	push	r12
    47ea:	df 92       	push	r13
    47ec:	ef 92       	push	r14
    47ee:	ff 92       	push	r15
    47f0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    47f4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    47f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    47fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    4800:	61 15       	cp	r22, r1
    4802:	71 05       	cpc	r23, r1
    4804:	81 05       	cpc	r24, r1
    4806:	91 05       	cpc	r25, r1
    4808:	21 f4       	brne	.+8      	; 0x4812 <random+0x32>
    480a:	64 e2       	ldi	r22, 0x24	; 36
    480c:	79 ed       	ldi	r23, 0xD9	; 217
    480e:	8b e5       	ldi	r24, 0x5B	; 91
    4810:	97 e0       	ldi	r25, 0x07	; 7
    4812:	2d e1       	ldi	r18, 0x1D	; 29
    4814:	33 ef       	ldi	r19, 0xF3	; 243
    4816:	41 e0       	ldi	r20, 0x01	; 1
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	0e 94 45 22 	call	0x448a	; 0x448a <__divmodsi4>
    481e:	49 01       	movw	r8, r18
    4820:	5a 01       	movw	r10, r20
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	a7 ea       	ldi	r26, 0xA7	; 167
    4828:	b1 e4       	ldi	r27, 0x41	; 65
    482a:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__muluhisi3>
    482e:	6b 01       	movw	r12, r22
    4830:	7c 01       	movw	r14, r24
    4832:	ac ee       	ldi	r26, 0xEC	; 236
    4834:	b4 ef       	ldi	r27, 0xF4	; 244
    4836:	a5 01       	movw	r20, r10
    4838:	94 01       	movw	r18, r8
    483a:	0e 94 56 24 	call	0x48ac	; 0x48ac <__mulohisi3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	8c 0d       	add	r24, r12
    4844:	9d 1d       	adc	r25, r13
    4846:	ae 1d       	adc	r26, r14
    4848:	bf 1d       	adc	r27, r15
    484a:	b7 ff       	sbrs	r27, 7
    484c:	03 c0       	rjmp	.+6      	; 0x4854 <random+0x74>
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	a1 09       	sbc	r26, r1
    4852:	b0 48       	sbci	r27, 0x80	; 128
    4854:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    4858:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    485c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    4860:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	9f 77       	andi	r25, 0x7F	; 127
    486a:	ff 90       	pop	r15
    486c:	ef 90       	pop	r14
    486e:	df 90       	pop	r13
    4870:	cf 90       	pop	r12
    4872:	bf 90       	pop	r11
    4874:	af 90       	pop	r10
    4876:	9f 90       	pop	r9
    4878:	8f 90       	pop	r8
    487a:	08 95       	ret

0000487c <srandom>:
    487c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    4880:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    4884:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    4888:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    488c:	08 95       	ret

0000488e <abort>:
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	f8 94       	cli
    4894:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__do_global_dtors>

00004898 <memset>:
    4898:	dc 01       	movw	r26, r24
    489a:	01 c0       	rjmp	.+2      	; 0x489e <memset+0x6>
    489c:	6d 93       	st	X+, r22
    489e:	41 50       	subi	r20, 0x01	; 1
    48a0:	50 40       	sbci	r21, 0x00	; 0
    48a2:	e0 f7       	brcc	.-8      	; 0x489c <memset+0x4>
    48a4:	08 95       	ret

000048a6 <__mulshisi3>:
    48a6:	b7 ff       	sbrs	r27, 7
    48a8:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <__muluhisi3>

000048ac <__mulohisi3>:
    48ac:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__muluhisi3>
    48b0:	82 1b       	sub	r24, r18
    48b2:	93 0b       	sbc	r25, r19
    48b4:	08 95       	ret

000048b6 <__do_global_dtors>:
    48b6:	15 e0       	ldi	r17, 0x05	; 5
    48b8:	cb e6       	ldi	r28, 0x6B	; 107
    48ba:	d5 e0       	ldi	r29, 0x05	; 5
    48bc:	04 c0       	rjmp	.+8      	; 0x48c6 <__do_global_dtors+0x10>
    48be:	fe 01       	movw	r30, r28
    48c0:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__tablejump2__>
    48c4:	21 96       	adiw	r28, 0x01	; 1
    48c6:	cc 36       	cpi	r28, 0x6C	; 108
    48c8:	d1 07       	cpc	r29, r17
    48ca:	c9 f7       	brne	.-14     	; 0x48be <__do_global_dtors+0x8>
    48cc:	f8 94       	cli

000048ce <__stop_program>:
    48ce:	ff cf       	rjmp	.-2      	; 0x48ce <__stop_program>
